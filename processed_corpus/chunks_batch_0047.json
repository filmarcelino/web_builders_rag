[
  {
    "id": "18506e60323cb9767d207a813ba8ea40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "90291c23c2f2e45295f4f0dcbe7a770b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "09792e10100486fd46a5d5ec5b3bac8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocityx -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nplayer draw();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\n--fcc-editable-region--\nwindow addEventListener(\"keyup\", ({ key }) => {\n});\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c736a531835181349c27d2.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f02da96208daf0a6986d8774f0f18047",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c73df1424422832333a9fa\ntitle: Step 64\nchallengeType: 0\ndashedName: step-64\n--description--\nThe next step is to create the platforms and platform logic Start by creating a new Platform class --hints--\nYou should create a new Platform class js\nassert match(code, /class\\s+Platform\\s+{/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1b2941a17dcf558b7264639a4f14a5bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "82d5b7466cf0b7bd5eee1f091c3bc48a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "70ebf3c90185b6792416274994ef2c1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { playervelocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5991,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73df1424422832333a9fa.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c1833200b9813f8269ba0ea7f7249a4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c73981de025581bddb89eb\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nBefore you can start moving your player across the screen, you will need to use the animate function Inside the startGame function, delete player draw() and call the animate function Click the Start Game button and use the left and right arrow keys to move the player across the screen You can also use the spacebar or the up arrow key to jump up --hints--\nYou should delete the player draw() method call js\nconst code = startGame toString();\nassert notMatch(code, /player\\ draw\\s*\\(\\s*\\)\\s*; /);\nYou should call the animate function js\nconst code = startGame toString();\nassert match(code, /animate\\s*\\(\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f8dc7e270063e86cb3c704ba772ad3ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c05fb133117bad602b7b20d14688b2c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c0706b3515c0ac059687bda3df5f5d92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\n--fcc-editable-region--\nplayer draw();\n--fcc-editable-region--\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c73981de025581bddb89eb.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "29e9d1eb5e0f5a91a1c7b24794fe8e1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c74a226587f502c0525927\ntitle: Step 65\nchallengeType: 0\ndashedName: step-65\n--description--\nInside the Platform class, create a constructor that takes in the x and y coordinates --hints--\nYou should have a constructor that takes in the x and y coordinates js\nassert match(code, /constructor\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6053,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a71d1d7d5dadd3c741eecae3a964063b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6053,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "65519a2e73fadca2e4fc4bbf7184b3b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\nclass Platform {\n}\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6053,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c6ab38a12f050c4c28078e5c2dc12f20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKeypressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6053,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a226587f502c0525927.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c531dfc51649e1c530574585a6dea546",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c74c293dd7cf03cbd58194\ntitle: Step 67\nchallengeType: 0\ndashedName: step-67\n--description--\nNext, add a width property to the constructor and assign it the number 200 Don't forget to use the this keyword to access the properties --hints--\nYou should have a width property and assign it the number 200 js\nassert match(code, /this\\ width\\s*=\\s*200\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d6b4258be09c4576b10319802997df57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4b4ebde7529bab848999887b4b869c55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\n}\n}\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "70df0d5ea74b2f334545cbe1a646fb2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocityy = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74c293dd7cf03cbd58194.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8f06daacd5c7efc7c3fc75db2220c734",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c74a8a4138c6032241d498\ntitle: Step 66\nchallengeType: 0\ndashedName: step-66\n--description--\nWhen working with objects where the property name and value are the same, you can use the shorthand property name syntax This syntax allows you to omit the property value if it is the same as the property name js\n// using shorthand property name syntax\nobj = {\na, b, c\n}\nThe following code is the same as:\njs\nobj = {\na: a,\nb: b,\nc: c\n}\nInside the constructor,  add this position and assign it an object with the x and y coordinates Make sure to use the shorthand property syntax --hints--\nYou should have a this position property js\nassert match(Platform toString(), /this\\ position\\s*; /);\nThe this position property should be an object with the x and y coordinates Make sure to use the shorthand property syntax js\nassert match(Platform toString(), /this\\ position\\s*=\\s*\\{\\s*x\\s*:\\s*x\\s*,\\s*y\\s*:\\s*y\\s*, \\s*\\}\\s*; /);\nassert match(code, /this\\ position\\s*=\\s*\\{\\s*x\\s*,\\s*y\\s*, \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3aa0e03fabfff8c1eca35ef015aa9afe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 12rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "539cb20964bec47b3e5577cebb6f52e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\nclass Platform {\nconstructor(x, y) {\n}\n}\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ac5cc1c8cba3b429ce1f988c60f44309",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "- this width * 2) { this position x = canvas width - this width * 2; } } } --fcc-editable-region-- class Platform { constructor(x, y) { } } --fcc-editable-region-- const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player positionx > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6783,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74a8a4138c6032241d498.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f376b59b1e257437aca48d237bf716fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c750c328e06f0878a9272e\ntitle: Step 69\nchallengeType: 0\ndashedName: step-69\n--description--\nNext, add a draw method to the Platform class --hints--\nYour Platform class should have a draw method js\nconst platform = new Platform();\nassert isFunction(platform draw);\nYour draw method should be empty js\nconst platform = new Platform();\nassert match(platform draw toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c8f12034e25abe683bf9865d13bd6733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "14e765046ef796213c0f7f576106a9ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\n}\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "61123d7018f4f8920603bfa80782b2c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocityy = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c750c328e06f0878a9272e.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "80062e97f7787664fcd79113c8573266",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c74e0064a9080443af0796\ntitle: Step 68\nchallengeType: 0\ndashedName: step-68\n--description--\nBelow that, add a height property and assign it the number proportionalSize(40) You need to use the proportionalSize() function to make sure the height is proportional to the screen size Remember to use the this keyword to access the properties --hints--\nYou should have a height property js\nconst splitter = code split(\"if (this position x < this width) {\")\nassert match(splitter[1], /this\\ height\\s*=\\s*proportionalSize\\(\\s*\\d+\\s*\\)\\s*; /);\nYou should assign proportionalSize(40) to the height property js\nconst splitter = code split(\"if (this position x < this width) {\")\nassert match(splitter[1], /this\\ height\\s*=\\s*proportionalSize\\(\\s*40\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "630d16d0db0f146493141b2f88302315",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5a2f622fa12bcc69abaf1213caa9ec0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\n}\n}\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f6adb51a249e62a738b15acc26cf9f6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width - this width * 2) { this position x = canvas width - this width * 2; } } } --fcc-editable-region-- class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; } } --fcc-editable-region-- const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c74e0064a9080443af0796.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "22f6f119f4fa0d73231fcf7d9004b0ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7527100b19b09037ce5db\ntitle: Step 70\nchallengeType: 0\ndashedName: step-70\n--description--\nInside the draw method, assign \"#acd157\" to the ctx fillStyle Below that, call the ctx fillRect method and pass in the x and y coordinates, along with the width and height properties Remember to include this before each property --hints--\nYou should assign \"#acd157\" to the ctx fillStyle js\nassert match(code, /ctx\\ fillStyle\\s*=\\s*('|\")#acd157\\1\\s*; /);\nYou should call the ctx fillRect method passing in the correct arguments js\nconst splitter = code split(\"class Platform {\")\nassert match(splitter[1], /ctx\\ fillRect\\s*\\(\\s*this\\ position\\ x\\s*,\\s*this\\ position\\ y\\s*,\\s*this\\ width\\s*,\\s*this\\ height\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "663013c752c13e8d13a8f62e8fc955eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8273b94b82a19af9aaf4555b48699542",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\n--fcc-editable-region--\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\n}\n}\n--fcc-editable-region--\nconst player = new Player();\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "472589712ecefe57283d294e2adfb211",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "- this width * 2) { this position x = canvas width - this width * 2; } } } --fcc-editable-region-- class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { } } --fcc-editable-region-- const player = new Player(); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player positionx < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7527100b19b09037ce5db.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "723d8adca1dbca2324d0edc8e3d05b8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7538db3e33d09704ab148\ntitle: Step 71\nchallengeType: 0\ndashedName: step-71\n--description--\nThe next step will be to create a list of positions for the platforms Start by creating a new const variable called platformPositions and assign it an empty array --hints--\nYou should have a const variable called platformPositions and  assign it an empty array js\nassert match(code, /const\\s+platformPositions\\s*=\\s*\\[\\s*\\]\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6410,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "249dc505afb5275a0a1805ecadf4bff4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6410,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "826c3dc8fb67b695d21a1ab5b797fc8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nconst player = new Player();\n--fcc-editable-region--\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6410,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ea0f3d6aab39f6ff5dad42941473ba7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "\"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } const player = new Player(); --fcc-editable-region-- --fcc-editable-region-- const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6410,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7538db3e33d09704ab148.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bd67a6a01082596155765b591daa324b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c754f598ca5409d0a08884\ntitle: Step 72\nchallengeType: 0\ndashedName: step-72\n--description--\nInside the platformPositions, you will need to add the list of positions for the platforms Add a new object that has an x property with a value of 500 and a y property with a value of proportionalSize(450) --hints--\nYou should have an object with an x property with a value of 500 and a y property with a value of proportionalSize(450) You are using the proportionalSize() function here to make sure the y value is proportional to the screen size js\nassert match(code, /{\\s*x\\s*:\\s*500\\s*,\\s*y\\s*:\\s*proportionalSize\\(\\s*450\\s*\\)\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5d5226bb1e697c1c3685c583ffab6860",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2d44a2cc62de273dc8d74ab8bb8ebd2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst platformPositions = [\n];\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "df593fd09fd1325b0542739467fce603",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } const player = new Player(); --fcc-editable-region-- const platformPositions = [ ]; --fcc-editable-region-- const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player positionx < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c754f598ca5409d0a08884.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "d200fd01d4743742824cd827ef3c15b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c755bf0034b20a428a4a1b\ntitle: Step 73\nchallengeType: 0\ndashedName: step-73\n--description--\nBelow that, add another object with an x property with a value of 700 and a y property with a value of proportionalSize(400) --hints--\nYou should have an object with an x property with a value of 700 and a y property with a value of proportionalSize(400) js\nassert match(code, /{ *x\\s*:\\s*700 *y\\s*:\\s*proportionalSize\\(\\s*400\\s*\\) *}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0531162a30e8fb63926cc58ef0656d2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e4dd1dfc92672cff7af5fbcdd3c61ec1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n];\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "14d166ef6889a97f3e56a698d4baf989",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "height); } } const player = new Player(); --fcc-editable-region-- const platformPositions = [ { x: 500, y: proportionalSize(450) }, ]; --fcc-editable-region-- const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocityx = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c755bf0034b20a428a4a1b.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "94bb98abe87253201f574e6b355a7a3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7561d44e2300a90a38ab6\ntitle: Step 74\nchallengeType: 0\ndashedName: step-74\n--description--\nAdd the rest of the platform positions to the platformPositions array with the following values:\njs\nx=850  y=proportionalSize(350)\nx=900  y=proportionalSize(350)\nx=1050 y=proportionalSize(150)\nx=2500 y=proportionalSize(450)\nx=2900 y=proportionalSize(400)\nx=3150 y=proportionalSize(350)\nx=3900 y=proportionalSize(450)\nx=4200 y=proportionalSize(400)\nx=4400 y=proportionalSize(200)\nx=4700 y=proportionalSize(150)\n--hints--\nYou should include the rest of the values in the platformPositions array ```js\nconst platformPositionsClone = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nassert deepEqual(platformPositions, platformPositionsClone);\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d588d074c9c7f25b5bda533f16a33399",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "x: 3900, y: proportionalSize(450) }, { x: 4200, y: proportionalSize(400) }, { x: 4400, y: proportionalSize(200) }, { x: 4700, y: proportionalSize(150) }, ]; assert deepEqual(platformPositions, platformPositionsClone); ``` --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) {",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3583b6b10236ccde544f26cc6b8571a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) {start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5baf4b851f6151a0f73d2d96450a82f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= { x: 0, y: 0, }; this width = proportionalSize(40); this height = proportionalSize(40); } draw() { ctx fillStyle = \"#99c9ff\"; ctx fillRect(this position x, this position y, this width, this height); } update() { this draw(); this position x += this velocity x; this position y += this velocity y; if (this position y + this height + this velocity y <= canvas height) { if (this position y < 0) { this positiony = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nconst player = new Player();\n--fcc-editable-region--\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n];\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "8969eb51cec60fda6f171dd6256e63d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocityx -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7561d44e2300a90a38ab6.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "c9cf5ffa44177a058aa3788cd220ed0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c7573fd2265f0b1c77e2ec\ntitle: Step 75\nchallengeType: 0\ndashedName: step-75\n--description--\nThe next step is to create a list of new platform instances using the Platform class You will later reference this list to draw the platforms on the canvas Start by creating a new const variable called platforms and assign it  platformPositions map() --hints--\nYou should have a const variable called platforms js\nassert match(code, /const\\s+platforms\\s*=\\s*/);\nYou should assign platformPositions map() to the platforms variable js\nassert match(code, /const\\s+platforms\\s*=\\s*platformPositions\\ map\\s*\\(\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4b8e7abe9805187fe1a3f2ee36d795f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "28acf2dc97a5dcb2f848374a55e973e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; thisvelocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "aa9f6626fa6fe7cdeb1ad02480ec635d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\n--fcc-editable-region--\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5f8f06bbe149dedf38bb7e2e81839ca4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocityx -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7128,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c7573fd2265f0b1c77e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "42287d863ecd0c9a849a43058f43b462",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c758ab7352130b775df8c4\ntitle: Step 76\nchallengeType: 0\ndashedName: step-76\n--description--\nIn the map callback function, pass in platform for the parameter and implicitly return the creation of a new Platform instance with the platform x and platform y values passed in as arguments --hints--\nYour map callback should implicitly return the creation of a new Platform instance with the platform x and platform y values passed in as arguments js\nassert match(code, /const\\s+platforms\\s*=\\s*platformPositions\\ map\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*new\\s+Platform\\s*\\(\\s*platform\\ x\\s*,\\s*platform\\ y\\s*\\)\\s*\\)\\s*;\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "75141fac2ab820a4179e9299f165f69b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "760d538102db6cdee37e9b8d12bcc2b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "41cb15526dffddb123f48cc02195e7cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\n--fcc-editable-region--\nconst platforms = platformPositions map(\n);\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "1717d4af433abe6bb7730f086a923e34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocityx = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c758ab7352130b775df8c4.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "4e28efd4cc36f36eee415ff8459e1a3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c764dd9071050d0a2c1473\ntitle: Step 77\nchallengeType: 0\ndashedName: step-77\n--description--\nInside the animate function, you will need to draw each of the platforms onto the canvas Add a forEach loop that iterates through the platforms array Inside the callback function, add a platform parameter and for the body of the function call the draw method on each platform --hints--\nYou should have a forEach loop that iterates through the platforms array js\nassert match(code, /platforms\\ forEach\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>\\s*{ \\s*( * )\\s*} \\s*\\)\\s*; /);\nYou should add a platform parameter to the callback function js\nassert match(code, /platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{ \\s*( * )\\s*} \\s*\\)\\s*; /);\nYou should call the draw method on each platform js\nassert match(code, /platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{ \\s*platform\\ draw\\(\\s*\\)\\s*; \\s*} \\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5e82a553ccf16024f7d03fee81bfbe3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 12rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "613d71e7669b29be8d60961bfc7392c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5e8f0f2cbfada90287a52f29347bbe67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\n--fcc-editable-region--\n--fcc-editable-region--\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "bca14a080d14f4777c2b195b9f2d788c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKeypressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c764dd9071050d0a2c1473.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "7ffea7464b0724a0586354f7c0308560",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9bab6998128282da063f9\ntitle: Step 78\nchallengeType: 0\ndashedName: step-78\n--description--\nIf you try to start the game, you will notice that the platforms are rendered on the screen But as the player moves to the right, the platform does not move with it To fix this issue, you will need to update the platform's x position as the player moves across the screen Inside the animate function, add a condition to check if the right key was pressed and if the isCheckpointCollisionDetectionActive is true --hints--\nYou should have an if statement that checks if the right key was pressed and if the isCheckpointCollisionDetectionActive is true js\nassert match(code, /if\\s*\\(((\\s*keys\\ rightKey\\ pressed\\s*&&\\s*isCheckpointCollisionDetectionActive\\s*)|(\\s*isCheckpointCollisionDetectionActive\\s*&&\\s*keys\\ rightKey\\ pressed\\s*))\\)\\s*{\\s*( * )\\s*}/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ec918b4daccdecced6d9b9f6bac3c6ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3b33ab12d524c08f758cd911153935bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "80aea2590dca92e0f04cd3caad7cf625",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n--fcc-editable-region--\n--fcc-editable-region--\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "7422e37337f6a009f5a2648773008ce8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "&& player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; --fcc-editable-region-- --fcc-editable-region-- } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocityy = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7531,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9bab6998128282da063f9.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "4d1296bc38a0cf65d5cb0acd7e65ffb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9db021d4d912906878f3a\ntitle: Step 79\nchallengeType: 0\ndashedName: step-79\n--description--\nInside your condition, add a forEach loop to iterate through the platforms array Inside the callback function use platform for the parameter Inside the loop, use the subtraction assignment operator to subtract 5 from the platform's x position --hints--\nYou should have a forEach loop that iterates through the platforms array js\nassert match(code, /if\\s*\\( *\\)\\s*{\\s+platforms\\ forEach\\(\\s*(\\( *\\)|[^\\s()]+)\\s*=>\\s*{ \\s*( * )\\s*} \\s*\\)\\s*; /);\nYou should use the subtraction assignment operator to subtract 5 from the platform's x position js\nassert match(code, /platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{ \\s*platform\\ position\\ x\\s*-=\\s*5\\s*; \\s*} \\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3426e2951e8de3a02df2404ed9fbf8e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7b023d531b4dc38d8a8d51fadb66fc22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "81b0ebf65e5d0be33b1f95154901b5ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n--fcc-editable-region--\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\n}\n--fcc-editable-region--\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "63db002af7765f4fba88294a282dd8f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; --fcc-editable-region-- if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { } --fcc-editable-region-- } } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; playervelocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7549,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9db021d4d912906878f3a.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "ea7fda00937ee1052521ceb2ce6d9c09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9dc4bd63a92295347c449\ntitle: Step 80\nchallengeType: 0\ndashedName: step-80\n--description--\nNext, add an else if statement to check if the left key was pressed and if isCheckpointCollisionDetectionActive is true Inside that condition, add a forEach loop to iterate through the platforms array Inside the loop, use the addition assignment operator to add 5 to the platform's x position --hints--\nYou should have a condition that checks if the left key was pressed and if isCheckpointCollisionDetectionActive is true ```js\nassert match(code, /if\\s(((\\skeys rightKey pressed\\s&&\\sisCheckpointCollisionDetectionActive\\s)|(\\sisCheckpointCollisionDetectionActive\\s&&\\skeys rightKey pressed\\s)))\\s{\\splatforms forEach(\\s((\\splatform\\s)|platform)\\s=>\\s{\\splatform position x\\s-=\\s5\\s;\\s}\\s)\\s; \\s}\\selse\\s+if\\s(((\\skeys leftKey pressed\\s&&\\sisCheckpointCollisionDetectionActive\\s)|(\\sisCheckpointCollisionDetectionActive\\s&&\\skeys leftKey pressed\\s)))\\s{ }\\s)\\s; /s);\n```\nYou should add a forEach loop that iterates through the platforms array js\nassert match(code, /else\\s+if\\s*\\( *\\)\\s*{\\s*platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{ \\s*( * )\\s*} \\s*\\)\\s*; /);\nYou should use the addition assignment operator to add 5 to the platform's x position js\nassert match(code, /platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{ \\s*platform\\ position\\ x\\s*\\+=\\s*5\\s*; \\s*} \\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "3e0a4bca09928894afaa7933508256dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "\\s*\\)\\s*; /); You should use the addition assignment operator to add 5 to the platform's x position js assert match(code, /platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*{ \\s*platform\\ position\\ x\\s*\\+=\\s*5\\s*; \\s*} \\s*\\)\\s*; /); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "0de183725eeaf24826871f327a51a40f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "dc264e735864f46a0ae3126150c0be4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "178617e436d38a300e8d602848838129",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\n--fcc-editable-region--\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "797bef1329e338c6aafdaf6a45159098",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "() => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; --fcc-editable-region-- if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform positionx -= 5;\n});\n}\n--fcc-editable-region--\n}\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8325,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9dc4bd63a92295347c449.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5646b9a3752360fc3800e2d0c9d3d437",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9e90c433fde2e870285a3\ntitle: Step 82\nchallengeType: 0\ndashedName: step-82\n--description--\nInside the callback function, create a new const variable called collisionDetectionRules and assign it an empty array Inside that array, add a boolean expression that checks whether the player's y position plus the player's height is less than or equal to the platform's y position --hints--\nYou should have a const variable called collisionDetectionRules that is assigned an empty array js\nassert match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*( :[^\\]]*\\s*)*\\s*\\]\\s*; /);\nYou should have a boolean expression that checks whether the player's y position plus the player's height is less than or equal to the platform's y position js\nassert match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*player\\ position\\ y\\s*\\+\\s*player\\ height\\s*<=\\s*platform\\ position\\ y\\s*, \\s*]\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5a65da1e7a38061c5b8f1ec0d26d8c18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e541ea880bd3a2e33e87afc2b80bdbe3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9bdd8d901fd5bcfd9f6839005116a163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\n--fcc-editable-region--\nplatforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "3e0068528510bbd8c9b6735714c1c698",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } --fcc-editable-region-- platformsforEach((platform) => {\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7952,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e90c433fde2e870285a3.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e11a7c327fe34b9013d4c1522fa26d3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9e4cc5f06902dc75dc8f4\ntitle: Step 81\nchallengeType: 0\ndashedName: step-81\n--description--\nWhen you start the game, you will notice that the position of the platforms is animating alongside the player But if you try to jump below one of the platforms, then you will jump right through it To fix this issue, you will need to add collision detection logic to the game Start by calling the forEach method on the platforms array For the callback function pass in platform as the parameter --hints--\nYou should have a forEach loop that iterates through the platforms array js\nconst splitter = code split(\"platform position x += 5;\")\nassert match(splitter[1], /platforms\\ forEach\\(/);\nYour callback function should have a platform parameter js\nconst splitter = code split(\"platform position x += 5;\")\nassert match(splitter[1], /platforms\\ forEach\\(\\s*(\\(\\s*platform\\s*\\)|platform)\\s*=>\\s*\\{\\s*\\}\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3ed0cf9da86f68d65f99705089dbfa4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d8055e14c0c4905e744af689d9afb932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "019f65087208b4eed4d84785bc8e93dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "53ea41c2ae7f767bee9a5cba6ce516ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform positionx += 5;\n});\n}\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7922,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9e4cc5f06902dc75dc8f4.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "25306072a31bd2dbb6046e124537197d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9efea385ca536bf467a7c\ntitle: Step 83\nchallengeType: 0\ndashedName: step-83\n--description--\nAdd another boolean expression that checks if the sum of the player's y position, height, and y velocity is greater than or equal to the platform's y position --hints--\nYou should have a boolean expression that checks if the sum of the player's y position, height, and y velocity is greater than or equal to the platform's y position js\nassert match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*player\\ position\\ y\\s*\\+\\s*player\\ height\\s*<=\\s*platform\\ position\\ y\\s*,\\s*player\\ position\\ y\\s*\\+\\s*player\\ height\\s*\\+\\s*player\\ velocity\\ y\\s*>=\\s*platform\\ position\\ y\\s*, \\s*]\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "bb2d3415bec20fe29606c343470f91f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d32de9c174441c7f130b42007c7ba1a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7d5240f2cc724cf272b3dd34ea59c4ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\n--fcc-editable-region--\nplatforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a0ba400f533491a342c26396e68ea1f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } --fcc-editable-region-- platformsforEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\n];\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9efea385ca536bf467a7c.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9832cb6f217af248d5c86ffcec1cb60d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9fa51209ab5395d524cce\ntitle: Step 84\nchallengeType: 0\ndashedName: step-84\n--description--\nBelow that boolean expression, add another boolean expression that checks if the player's x position is greater than or equal to the platform's x position minus half of the player's width Use the division operator (/) to calculate half of the player's width --hints--\nYou should have a boolean expression that checks if the player's x position is greater than or equal to the platform's x position minus the player's width divided by 2 js\nassert match(code, /const\\s+collisionDetectionRules\\s*=\\s*\\[\\s*player\\ position\\ y\\s*\\+\\s*player\\ height\\s*<=\\s*platform\\ position\\ y\\s*,\\s*player\\ position\\ y\\s*\\+\\s*player\\ height\\s*\\+\\s*player\\ velocity\\ y\\s*>=\\s*platform\\ position\\ y\\s*,\\s*player\\ position\\ x\\s*>=\\s*platform\\ position\\ x\\s*-\\s*\\( player\\ width\\s*\\/\\s*2\\) \\s*, \\s*]\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5b24610bc49e21c6bc05428eeec3f10a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "9a113026de12206db0ac648262e613bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0a467ad3c02d8ba4a016c127ccb39d53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\n--fcc-editable-region--\nplatforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "71b9bee921a8fad70ecbb3ed1b3557f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } --fcc-editable-region-- platformsforEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\n];\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fa51209ab5395d524cce.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "dbcf4a2290ebccf3e5c667a2925802e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64c9fe7b2ffa3539fbf82d32\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nAdd one last boolean expression that checks if the player's x position is less than or equal to the sum of the platform's x position plus the platform's width minus one-third of the player's width Use the division operator (/) to calculate a third of the player's width --hints--\nYou should have a boolean expression that checks if the player's x position is lesser than or equal to the platform's x position plus the platform's width minus the player's width divided by 3 js\nassert match(code, /player\\ position\\ x\\s*<=\\s*platform\\ position\\ x\\s*\\+\\s*platform\\ width\\s*-\\s*player\\ width\\s*\\/\\s*3\\s*, /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "7bb31c79e3d324d0519344febfaf3f72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "95de443aeec34ec370bdc9ffe4af25bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "83ad6bf20a47ef6042fe3e1cfe0c1fcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\n--fcc-editable-region--\nplatforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "abda9f4ba44b62bcfeee62c328061f9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } --fcc-editable-region-- platformsforEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\n];\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64c9fe7b2ffa3539fbf82d32.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8af0d9eb00026ab32bea17e10583ffd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64caea41a4199e54253c60ca\ntitle: Step 87\nchallengeType: 0\ndashedName: step-87\n--description--\nCreate a new const variable called platformDetectionRules and assign it an empty array --hints--\nYou should have a const variable called platformDetectionRules that is assigned an empty array js\nassert match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*\\]/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "81a9d5f430c1f90af255d31e826c1c6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d0e39463bc13cbf236cfd274cae863a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "dbec7cef94f5c7bf75496e99c722924f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c3e8585025aaac97f11f09549687da03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + playerheight <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caea41a4199e54253c60ca.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "32924eea03ddc7f95cd3cef5c849ca92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64caeb134c3cdc5498cd75b9\ntitle: Step 88\nchallengeType: 0\ndashedName: step-88\n--description--\nInside that array, add a boolean expression that checks if the player's x position is greater than or equal to the platform's x position minus half of the player's width Use the division operator (/) to calculate half of the player's width --hints--\nYou should have a boolean expression that checks if the player's x position is greater than or equal to the platform's x position minus the player's width divided by 2 js\nassert match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\ position\\ x\\s*>=\\s*platform\\ position\\ x\\s*-\\s*player\\ width\\s*\\/\\s*2\\s*, \\s*\\]\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5c7e7e79612e4cbddea41ef51b0eee48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a01627a788891f5b9b612e5aa0ea389e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a50ec2f967941420442722f3e1c58e36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "840d06d822d736d91c223829e844d453",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + playerheight <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nconst platformDetectionRules = [\n];\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeb134c3cdc5498cd75b9.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "3f2f868e6804bcbfa9cd95817d175688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cab4d06512c95234256cbb\ntitle: Step 86\nchallengeType: 0\ndashedName: step-86\n--description--\nNext, add an if statement that checks if every rule in the collisionDetectionRules array is truthy Make sure to use the every method for this Inside the body of the if statement, assign the number 0 to the player's y velocity followed by a return statement --hints--\nYou should have an if statement that uses the every method to check if every rule in the collisionDetectionRules array is truthy js\nassert match(code, /if\\s*\\(\\s*collisionDetectionRules\\ every\\(\\s*( :\\(\\s*( +)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2)\\s*\\)\\s*\\)\\s*\\{\\s*/);\nYou should assign the number 0 to the player's y velocity followed by a return statement inside the body of the if statement js\nassert match(code, /if\\s*\\(\\s*collisionDetectionRules\\ every\\(\\s*( :\\(\\s*( +)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2)\\s*\\)\\s*\\)\\s*\\{\\s*player\\ velocity\\ y\\s*=\\s*0\\s*; \\s*return\\s*; \\s*\\}\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "975cb4c647c8350b8d018d3e8b0eb785",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "\\s*return\\s*; \\s*\\}\\s*; /); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "bed89a9e10425e60af2225dc175bbc7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = documentquerySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9542a27355c45433473f5969c02a7643",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "0) { this position y = 0; this velocity y = gravity; } this velocity y += gravity; } else { this velocity y = 0; } if (this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { thisposition = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c9a9a822a31d2e2b5e09ccfa6e7490d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width, canvas height); platforms forEach((platform) => { platform draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKeypressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\n--fcc-editable-region--\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cab4d06512c95234256cbb.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a2a26bd12470a9a4055c84893241141e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64caeeae2fa57756035d6012\ntitle: Step 89\nchallengeType: 0\ndashedName: step-89\n--description--\nBelow that boolean expression, add another boolean expression that checks if the player's x position is less than or equal to the sum of the platform's x position plus the platform's width minus one-third of the player's width Use the division operator (/) to calculate a third of the player's width --hints--\nYou should have a boolean expression that checks if the player's x position is less than or equal to the sum of the platform's x position and the platform's width minus the player's width divided by 3 js\nassert match(code, /const\\s+platformDetectionRules\\s*=\\s*\\[\\s*player\\ position\\ x\\s*>=\\s*platform\\ position\\ x\\s*-\\s*player\\ width\\s*\\/\\s*2\\s*,\\s*player\\ position\\ x\\s*<=\\s*platform\\ position\\ x\\s*\\+\\s*platform\\ width\\s*-\\s*player\\ width\\s*\\/\\s*3\\s*, \\s*\\]\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e7ccffd2884b73eadd4ac02bdb3e5eeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "f9c4d8d274943dc3e13623f5a13fece8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "29097db43fac75304355a06213f023cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "388a713f2d5ad43cef857ec3b9d0a8d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + playerheight <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\n];\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caeeae2fa57756035d6012.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "744bbc1930bd451794ea9c0a9e85f03a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64caf237baef43587be6d860\ntitle: Step 91\nchallengeType: 0\ndashedName: step-91\n--description--\nAdd an if statement that checks if every platform detection rule is true Make sure to use the every method for this --hints--\nYou should have an if statement that uses the every method to check if every platform detection rule is true js\nassert match(code, /\\s*if\\s*\\(\\s*platformDetectionRules\\ every\\(\\s*( :\\(\\s*( +)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2)\\s*\\)\\s*\\)\\s*{\\s*}\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "9164c020ec1d86aa138fcc9d5900d2bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "7549b64e364f6aab5531a54976caf632",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; thisvelocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "a43b0de3d41018ef239a4814f7537a5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "8764326eed8a1444634630bf302a0cf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + playerheight <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\n--fcc-editable-region--\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "26474f662b1701ed1a0524b04acf1f78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; animate(); } startBtn addEventListener(\"click\", startGame); window addEventListener(\"keydown\", ({ key }) => { movePlayer(key, 8, true); }); windowaddEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf237baef43587be6d860.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "9c8c5e1bdb23d6e01b38feb26aee8621",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64caf1be15606d5814c3387b\ntitle: Step 90\nchallengeType: 0\ndashedName: step-90\n--description--\nAdd another boolean expression that checks if the player's y position plus the player's height is greater than or equal to the platform's y position Below that, add another boolean expression that checks if the player's y position is less than or equal to the sum of the platform's y position plus the platform's height --hints--\nYou should not alter the existing platformDetectionRules array and its content ```js\nassert match(code, /const\\s+platformDetectionRules\\s=\\s[\\splayer position x\\s>=\\splatform position x\\s-\\splayer width\\s\\/\\s2\\s,\\splayer position x\\s<=\\splatform position x\\s+\\splatform width\\s-\\splayer width\\s\\/\\s3\\s,\\s \\s \\s]\\s; /)\n```\nYou should have a boolean expression that checks if the player's y position plus the player's height is greater than or equal to the platform's y position ```js\nassert match(code, /const\\s+platformDetectionRules\\s=\\s[\\splayer position x\\s>=\\splatform position x\\s-\\splayer width\\s\\/\\s2\\s,\\splayer position x\\s<=\\splatform position x\\s+\\splatform width\\s-\\splayer width\\s\\/\\s3\\s,\\s( :player position y\\s+\\splayer height|player height\\s+\\splayer position y)\\s>=\\splatform position y\\s,\\s \\s]\\s; /)\n```\nYou should have a boolean expression that checks if the player's y position is less than or equal to the sum of the platform's y position plus the platform's height ```js\nassert match(code, /const\\s+platformDetectionRules\\s=\\s[\\splayer position x\\s>=\\splatform position x\\s-\\splayer width\\s\\/\\s2\\s,\\splayer position x\\s<=\\splatform position x\\s+\\splatform width\\s-\\splayer width\\s\\/\\s3\\s,\\s( :player position y\\s+\\splayer height|player height\\s+\\splayer position y)\\s>=\\splatform position y\\s,\\s( :player position y\\s<=\\splatform position y\\s+\\splatform height|player position y\\s<=\\splatform height\\s+\\splatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "ee2b480e477b1b2b87b1f5de40728aef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": ":player position y\\s+\\splayer height|player height\\s+\\splayer position y)\\s>=\\splatform position y\\s,\\s \\s]\\s; /) ``` You should have a boolean expression that checks if the player's y position is less than or equal to the sum of the platform's y position plus the platform's height ```js assert match(code, /const\\s+platformDetectionRules\\s=\\s[\\splayer position x\\s>=\\splatform position x\\s-\\splayer width\\s\\/\\s2\\s,\\splayer position x\\s<=\\splatform position x\\s+\\splatform width\\s-\\splayer width\\s\\/\\s3\\s,\\s( :player position y\\s+\\splayer height|player height\\s+\\splayer position y)\\s>=\\splatform position y\\s,\\s( :player position y\\s<=\\splatform position y\\s+\\splatform height|player position y\\s<=\\splatform height\\s+\\splatform positiony)\\s, \\s]\\s; /)\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "902f4782675dc1bee2339c680b8ddcf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "7747b77d8e6755abcae4c779100e7de7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "821e448d849a9fe1fc382b3ba88d24bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "9bca0126b59c651fc76b7e70d0bfa90a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + playerheight <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\n--fcc-editable-region--\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64caf1be15606d5814c3387b.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "71c4196b431cd420df4781c9e28cda4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb24c224ac2c61fa1c70aa\ntitle: Step 92\nchallengeType: 0\ndashedName: step-92\n--description--\nInside the body of the if statement, assign platform position y + player height to the player's y position Then, assign gravity to the player's y velocity Now, when you start the game, you will be able to jump underneath the platform and collide with it --hints--\nYou should assign the sum of the platform's y position and the player's height to the player's y position js\nassert match(code, /\\s*player\\ position\\ y\\s*=\\s*platform\\ position\\ y\\s*\\+\\s*player\\ height\\s*; /);\nYou should assign gravity to the player's y velocity js\nassert match(code, /\\s*player\\ velocity\\ y\\s*=\\s*gravity\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "3b1f1e87b6525ef2d9d33bc0ef4c3663",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "e72ee57c391b99fc870bfae09cc793c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "63a55c6199a74b1c620bf4f41947359d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "83ba5a75556f5240797124f13b2020cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + playerheight <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\n--fcc-editable-region--\nif (platformDetectionRules every(rule => rule)) {\n};\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "d65062c2f1670ec3ed51ec3c4e68a0d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "(xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; animate(); } startBtn addEventListener(\"click\", startGame); windowaddEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb24c224ac2c61fa1c70aa.md",
      "source_type": "git_repo"
    },
    "token_count": 162,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "769e12d6e791b9a75e455016f2e5fe40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb262dd91ecc62998736af\ntitle: Step 93\nchallengeType: 0\ndashedName: step-93\n--description--\nThe last portion of the project is to add the logic for the checkpoints When a player collides with a checkpoint, the checkpoint screen should appear Start by creating a new class called CheckPoint --hints--\nYou should have a class called CheckPoint js\nassert match(code, /\\s*class\\s*CheckPoint\\s*{\\s*}\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "b538cae35cd97237b8cb6c4f350e51f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "94d70e5f40b4c8f30775ebdf908587ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "19fb98741d471cf09ed479451220569c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c2ef8e15b79d29fe0bf93f025a1a8932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platformsforEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "037e0e87da3c2b3ceeebbe0cd97a851e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; animate(); } startBtnaddEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb262dd91ecc62998736af.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5518ead109efd1804c58526bb751fcb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb26e84dd0b56313ba0c6e\ntitle: Step 94\nchallengeType: 0\ndashedName: step-94\n--description--\nInside that CheckPoint class, add a constructor with x, y and z parameters --hints--\nYou should have a constructor method inside the CheckPoint class js\nassert match(code, /\\s*constructor\\s*\\( *\\)\\s*{\\s*}/);\nYour constructor should have x, y and z parameters in that order js\nassert match(code, /\\s*constructor\\s*\\(\\s*x\\s*,\\s*y\\s*,\\s*z\\s*\\)\\s*{\\s*}\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "85b68089951e66bf87de07a00c0aa1d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "d18fcc36dabb68a5dacdcd19534c8b49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "b399c15a78777c988f032a06af3d3eed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\n--fcc-editable-region--\nclass CheckPoint {\n};\n--fcc-editable-region--\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c3ae9d3c94bd2e736e80f6f5a4411f43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platformsforEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "e7c54ba66e6eb1d48c06e5fca56b654a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; animate(); } startBtnaddEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb26e84dd0b56313ba0c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a00ca950c7eac7d38faab0e5442e6908",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb2a87057eb5655c66d1c2\ntitle: Step 95\nchallengeType: 0\ndashedName: step-95\n--description--\nInside the constructor, create an object with x and y parameters and assign it to the position Remember to use the this keyword to access the properties --hints--\nYou should have a this position property js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height);\")\nassert match(splitter[2], /this\\ position\\s*; /);\nThe this position property should be an object with the x and y coordinates js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height);\")\nassert match(splitter[2], /this\\ position\\s*=\\s*\\{\\s*x\\s*,\\s*y\\s*, \\s*\\}\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "d4dfe8714894f64214b3b4a36b1586b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "911b03c096e352c0bd8841ee2d940cc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "a5689f57c88c7dd8dbed54c9c718eb85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "< this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, thisheight);\n}\n}\n--fcc-editable-region--\nclass CheckPoint {\nconstructor(x, y, z) {\n};\n};\n--fcc-editable-region--\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "85e378155e92e2e79e3213e490b7a8e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform positionx += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "ea5007807fcab1f82f114f71b86a87db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen styledisplay = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2a87057eb5655c66d1c2.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "c51d4d7e3b415ebfe3a2214795e4ab95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb2da32f8443669fd4e725\ntitle: Step 96\nchallengeType: 0\ndashedName: step-96\n--description--\nThe next step is to add the width and height to the CheckPoint class The width and height should be proportionalSize(40) and proportionalSize(70) respectively --hints--\nYou should have a width property inside the CheckPoint class js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height);\")\nassert match(splitter[2], /this\\ width\\s*; /);\nYou should have a height property inside the CheckPoint class js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height);\")\nassert match(splitter[2], /this\\ height\\s*; /);\nYou should assign the width property to proportionalSize(40) js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height);\")\nassert match(splitter[2], /this\\ width\\s*=\\s*proportionalSize\\(\\s*40\\s*\\)\\s*; /);\nYou should assign the height property to proportionalSize(70) js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height);\")\nassert match(splitter[2], /this\\ height\\s*=\\s*proportionalSize\\(\\s*70\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "c06c7c93aeea9015c9ea7ae14df0045f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "/this\\ height\\s*=\\s*proportionalSize\\(\\s*70\\s*\\)\\s*; /); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2bec76aee092363429c660ab6c6aa9a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = documentgetElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "e7999fe9215e1689f7cffa585ae84f62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ this velocity y <= canvas height) { if (this position y < 0) { this position y = 0; this velocity y = gravity; } this velocity y += gravity; } else { this velocity y = 0; } if (this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - thiswidth * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\n--fcc-editable-region--\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\n};\n};\n--fcc-editable-region--\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "d879bf7e38e09dba6c234575bd0d7d16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { playervelocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "5be55a3d866937324639a0a06b9f3cfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "} const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocityy -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2da32f8443669fd4e725.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a5d403f57bb1f538a96906cab2cb99a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb2e5bdfb23a67272a07c7\ntitle: Step 98\nchallengeType: 0\ndashedName: step-98\n--description--\nNow you need to create a draw method for the CheckPoint class Inside the draw method, assign the fillStyle property on the ctx object the hex color \"#f1be32\" Below the fillStyle property, use the fillRect method on the ctx object and pass in the x, y, width, and height properties as arguments --hints--\nYour CheckPoint class should have a draw method js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height)\");\nassert match(splitter[2], /draw\\s*\\(\\s*\\)\\s*\\{/);\nYour draw method should assign a value to the fillStyle property on the ctx object js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height)\");\nassert match(splitter[2], /draw\\s*\\(\\s*\\)\\s*\\{\\s*ctx\\ fillStyle\\s*=/);\nYou should assign the hex color \"#f1be32\" to the fillStyle property on the ctx object js\nconst splitter = code split(\"ctx fillRect(this position x, this position y, this width, this height)\");\nassert match(splitter[2], /draw\\s*\\(\\s*\\)\\s*\\{\\s*ctx\\ fillStyle\\s*=\\s*('|\")#f1be32\\1\\s*; /);\nYour draw method should invoke the fillRect method on the ctx object js\nconst splitter = code split('#f1be32');\nassert match(splitter[1], /ctx\\ fillRect\\(/);\nWhen invoking ctx fillRect you should pass in the position x, position y, width, and height properties as arguments Don't forget the this keyword js\nconst splitter = code split('#f1be32');\nassert match(splitter[1], /ctx\\ fillRect\\(\\s*this\\ position\\ x\\s*,\\s*this\\ position\\ y\\s*,\\s*this\\ width\\s*,\\s*this\\ height\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "f3bf6c98b11553652b3dd28c010491c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "ctx object js const splitter = code split('#f1be32'); assert match(splitter[1], /ctx\\ fillRect\\(/); When invoking ctx fillRect you should pass in the position x, position y, width, and height properties as arguments Don't forget the this keyword js const splitter = code split('#f1be32'); assert match(splitter[1], /ctx\\ fillRect\\(\\s*this\\ position\\ x\\s*,\\s*this\\ position\\ y\\s*,\\s*this\\ width\\s*,\\s*this\\ height\\s*\\)\\s*; /); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpointsUse the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "baba2c3be6b4b233f37c1156ee695693",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "d1bb9833699480212ca807b95f05127b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\n--fcc-editable-region--\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "6d3b970faeb8bdd0ff63ba737a32aeb9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } --fcc-editable-region-- class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); thisclaimed = false;\n};\n};\n--fcc-editable-region--\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "8917321c83a635d4f63672e38a75ebf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform positionx += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "33eb22c417e84df9d4a62699ada92767",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen styledisplay = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2e5bdfb23a67272a07c7.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "8973b9218b580ed2decf63c6fedc2a8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb2ff0c31b0f67a6d76a47\ntitle: Step 99\nchallengeType: 0\ndashedName: step-99\n--description--\nThe last method you will need to add to the CheckPoint class is the claim method Inside the claim method, assign 0 to the width and height properties of the CheckPoint instance Below those properties, assign Infinity to the y position Lastly, assign true to the claimed property --hints--\nYour CheckPoint class should have a claim method js\nassert match(code, /\\s*claim\\s*\\(\\s*\\)\\s*{\\s*( *\\S) \\s*}\\s*;/s);\nYour claim method should have a width property set to 0 js\nassert match(code, /\\s*this\\ width\\s*=\\s*0\\s*; /);\nYour claim method should have a height property set to 0 js\nassert match(code, /\\s*this\\ height\\s*=\\s*0\\s*; /);\nYou should assign Infinity to the y position js\nassert match(code, /\\s*this\\ position\\ y\\s*=\\s*Infinity\\s*; /);\nYou should assign true to the claimed property js\nassert match(code, /\\s*this\\ claimed\\s*=\\s*true\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "cd618de0c072f6293765f6ce6b1e9462",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 12rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "30bb95df85b11813e9d7a0e2a8c5b156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\n--fcc-editable-region--\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "7afc05fa8569d5f041d0b6a3da3fb7c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } --fcc-editable-region-- class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n};\n--fcc-editable-region--\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "f0717d15c2fc222adad5c8a2eb3d94a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform positionx -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "b6b301945f731b66fb79c2cd137146c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if ( isCheckpointCollisionDetectionActive) { player velocity x = 0; player velocity y = 0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKeypressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb2ff0c31b0f67a6d76a47.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "794c458a24a93a546434988a082f070e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb30b8e4719a67fe14f364\ntitle: Step 100\nchallengeType: 0\ndashedName: step-100\n--description--\nUse const to create a new array called checkpointPositions Inside that array, add an object for each of the following positions:\njs\nx: 1170, y: proportionalSize(80), z: 1\nx: 2900, y: proportionalSize(330), z: 2\nx: 4800, y: proportionalSize(80), z: 3\n--hints--\nYou should have a checkpointPositions array js\nassert isArray(checkpointPositions);\nYou should have three objects inside the checkpointPositions array js\nassert lengthOf(checkpointPositions, 3);\nYou should have an object with an x property set to 1170, y property set to proportionalSize(80), and z property set to 1 js\nassert deepStrictEqual(checkpointPositions[0], { x: 1170, y: proportionalSize(80), z: 1 });\nYou should have an object with an x property set to 2900, y property set to proportionalSize(330), and  a z property set to 2 js\nassert deepStrictEqual(checkpointPositions[1], { x: 2900, y: proportionalSize(330), z: 2 });\nYou should have an object with an x property set to 4800, y property set to proportionalSize(80), and a z property set to 3 js\nassert deepStrictEqual(checkpointPositions[2], { x: 4800, y: proportionalSize(80), z: 3 });\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "6b18cbf90906875670a6a69d22837693",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "z: 3 }); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "5e9b89f7f96028da7501be1997992129",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = documentquerySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "3401dcf3e7050b3b0573c92acf4ae32a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "gravity; } this velocity y += gravity; } else { this velocity y = 0; } if (this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\n--fcc-editable-region--\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "a7caec359ef1110e3ac68bd26fb6ba75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2900, y: proportionalSize(400) }, { x: 3150, y: proportionalSize(350) }, { x: 3900, y: proportionalSize(450) }, { x: 4200, y: proportionalSize(400) }, { x: 4400, y: proportionalSize(200) }, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); --fcc-editable-region-- --fcc-editable-region-- const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); player update(); if (keys rightKeypressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "435897d5789df9b9a8bbf55998fe814e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocityy = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb30b8e4719a67fe14f364.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5b5e1a9f5411d398b2500671cdef2d97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb34c01b3d856a9a59261d\ntitle: Step 101\nchallengeType: 0\ndashedName: step-101\n--description--\nThe next step is to create a list of new checkpoint instances using the CheckPoint class Start by creating a new const variable called checkpoints and assign it checkpointPositions map() For the map callback function, pass in checkpoint for the parameter and implicitly return the creation of a new CheckPoint instance with the checkpoint x, checkpoint y and checkpoint z values passed in as arguments --hints--\nYou should assign checkpointPositions map() to a checkpoints variable ```js\nassert match(code, /\\sconst\\s+checkpoints\\s=\\scheckpointPositions map\\s([^)])\\s; /);\n```\nYour callback function should have a checkpoint parameter ```js\nassert match(code, /\\sconst\\s+checkpoints\\s=\\scheckpointPositions map\\s(\\s((\\scheckpoint\\s)|checkpoint)\\s=>\\s[^)]\\s)\\s; /);\n```\nYou should implicitly return a new CheckPoint instance with the checkpoint x, checkpoint y and checkpoint z values passed in as arguments in that order js\nassert match(code, /\\s*checkpointPositions\\ map\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*new\\s+CheckPoint\\s*\\(\\s*checkpoint\\ x\\s*,\\s*checkpoint\\ y\\s*,\\s*checkpoint\\ z\\s*\\)\\s*\\)\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "6764e91ba99e90aad5d78d465347cef5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "y\\s*,\\s*checkpoint\\ z\\s*\\)\\s*\\)\\s*; /); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1ecf9e858e2a0179ef6eafd94834b7d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = documentgetElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "27e194e2d9287ef3025d43c89cbc02d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ this velocity y <= canvas height) { if (this position y < 0) { this position y = 0; this velocity y = gravity; } this velocity y += gravity; } else { this velocity y = 0; } if (this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - thiswidth * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "2b6cf9487ccf183e8111b821a39dd238",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "700, y: proportionalSize(400) }, { x: 850, y: proportionalSize(350) }, { x: 900, y: proportionalSize(350) }, { x: 1050, y: proportionalSize(150) }, { x: 2500, y: proportionalSize(450) }, { x: 2900, y: proportionalSize(400) }, { x: 3150, y: proportionalSize(350) }, { x: 3900, y: proportionalSize(450) }, { x: 4200, y: proportionalSize(400) }, { x: 4400, y: proportionalSize(200) }, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platformy)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\n--fcc-editable-region--\n--fcc-editable-region--\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "4f83ffb7521ae1f2f4427072fc3d3ed3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + player height <= platform position y, player position y + player height + player velocity y >= platform position y, player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, ]; if (collisionDetectionRulesevery((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9883,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb34c01b3d856a9a59261d.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "bb10b6b0157593c3380d2c00731b0733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb3f62b10c336bada1c70c\ntitle: Step 102\nchallengeType: 0\ndashedName: step-102\n--description--\nInside the animate function, you will need to draw each of the checkpoints onto the canvas Add a forEach loop that iterates through the checkpoints array Inside the callback function, add a checkpoint parameter and for the body of the function call the draw method on each checkpoint --hints--\nYou should have a forEach loop that iterates through the checkpoints array js\nassert match(code, /\\bcheckpoints\\b\\s*\\ \\s*forEach\\s*\\(/s);\nYou should have a checkpoint parameter inside the forEach callback function js\nassert match(code, /\\s*checkpoints\\s*\\ \\s*forEach\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*{ /s);\nYou should call the draw method on each checkpoint inside the forEach callback function js\nassert match(code, /\\s*checkpoints\\ forEach\\s*\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*(\\{\\s*checkpoint\\ draw\\(\\s*\\)\\s*; \\s*\\}|checkpoint\\ draw\\(\\s*\\))\\s*\\)\\s*; /s);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "353cdf829d15fe0bfb3ed846251258f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 12rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "d5dff4b097803bffcdd7b183156e6256",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "a2e8cced6f8b0a59e15ebf0f44656184",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "6fbbd99993b1ebac05cd07224f727dc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\n--fcc-editable-region--\n--fcc-editable-region--\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "03826ee006b415f004d79fa0bf80cea6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocityy = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9750,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb3f62b10c336bada1c70c.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "e1c365d39d227bc06c6c78cb61b80641",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb472593e3be6d10a7c13b\ntitle: Step 103\nchallengeType: 0\ndashedName: step-103\n--description--\nInside your condition, add a forEach loop to iterate through the checkpoints array Use checkpoint as the parameter name for the callback function Inside the forEach callback, use the subtraction assignment operator to subtract 5 from the checkpoints's x position --hints--\nYou should have a forEach loop that iterates through the checkpoints array js\nconst splitter = code split(\"if (keys rightKey pressed && isCheckpointCollisionDetectionActive)\")\nassert match(splitter[1], /checkpoints\\ forEach\\(/);\nYou should have a checkpoint parameter inside the forEach callback function js\nconst splitter = code split(\"if (keys rightKey pressed && isCheckpointCollisionDetectionActive)\")\nassert match(splitter[1], /checkpoints\\ forEach\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*\\{ /);\nYou should use the subtraction assignment operator to subtract 5 from the checkpoint's x position js\nassert match(code, /\\s*checkpoint\\ position\\ x\\s*-=\\s*5\\s*; /s);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "f9f742103f358f5b98e5687e64f9cb4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "7eed1d94f36cbd0f31e46e8d8c7d6d19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "8e2d37beda2bc94bb7faaf65796af829",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "0cbf5609c9faa0474b09993aab9d4545",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n--fcc-editable-region--\n--fcc-editable-region--\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "f40173b86190b46c3df5f6055caad708",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocityy = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb472593e3be6d10a7c13b.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "e001046cf485fdac6d5f31fea1bc5176",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb48e36c9ad56dd7a523f4\ntitle: Step 105\nchallengeType: 0\ndashedName: step-105\n--description--\nThe next step is to create a function that will show the checkpoint message when the player reaches a checkpoint Create a new arrow function called showCheckpointScreen that takes in a msg parameter --hints--\nYou should have a showCheckpointScreen function js\nassert isFunction(showCheckpointScreen);\nYour showCheckpointScreen function should have a msg parameter js\nassert match(code, /\\s*const\\s+showCheckpointScreen\\s*=\\s*(\\(\\s*msg\\s*\\)|msg)\\s*=>\\s*{/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "1b737e1f1880cec58f4de7ddcd43e5bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a5a54fe244dd32f36010a48bb9e933e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "ea34dafd71f648bbd9c30fc11d7ccbb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "3726f7376a9ea5c2703cb5eea2886b38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "97db21d722d03855545ef82455648f03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if (isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\n--fcc-editable-region--\n--fcc-editable-region--\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9547,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb48e36c9ad56dd7a523f4.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "00377e888da78d8ca7942ba6c84adb2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb480723790d6d727b8ef5\ntitle: Step 104\nchallengeType: 0\ndashedName: step-104\n--description--\nInside your else if statement, add a forEach loop to iterate through the checkpoints array Use checkpoint as the parameter name for the callback function Inside the forEach callback, use the addition assignment operator to add 5 to the checkpoints's x position --hints--\nYou should have a forEach loop that iterates through the checkpoints array js\nconst splitter = code split(\"else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\")\nassert match(splitter[1], /checkpoints\\ forEach\\s*\\(/s);\nYou should use the checkpoint parameter inside the forEach callback function js\nconst splitter = code split(\"else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\")\nassert match(splitter[1], /checkpoints\\ forEach\\(\\s*(\\(\\s*checkpoint\\s*\\)|checkpoint)\\s*=>\\s*\\{ /);\nYou should use the addition assignment operator to add 5 to the checkpoint's x position js\nassert match(code, /\\s*checkpoint\\ position\\ x\\s*\\+=\\s*5\\s*; /s);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "3792f035eece58ac845dda5d68d5f183",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "cd66bf33c02933923722d68daa746d4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "274a14ad5ca6158f494404b646df50a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "eabdcf25aa2fd2588fe0cc7beea76efb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\n--fcc-editable-region--\n--fcc-editable-region--\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "d34855420e2da98a5b26e8bcfe3e5dad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "/ 3, ]; if (collisionDetectionRules every((rule) => rule)) { player velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player positiony = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb480723790d6d727b8ef5.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "32de42457b09a62fa595099f0cfdcfaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb4e676c156f7332f40db7\ntitle: Step 107\nchallengeType: 0\ndashedName: step-107\n--description--\nSet the checkpointMessage's textContent property to the msg parameter --hints--\nYou should set the textContent property of the checkpointMessage to the msg parameter js\nassert match(code, /\\s*checkpointMessage\\s*\\ \\s*textContent\\s*=\\s*msg\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "9ae28e778700743610316bfc15cef313",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "78b6c315c78a0d43e40dc20f753c99fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "638ed37cd4cf8f1a80e8bca639d610af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "9173ae644f9014cf7306ff017b437419",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a7d180c760a860cc5af9e6a241426c70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if (isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\n--fcc-editable-region--\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\n};\n--fcc-editable-region--\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4e676c156f7332f40db7.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "60813ee5f8547f5da930d38f00e02b67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb4978631a4f6e3e1b964d\ntitle: Step 106\nchallengeType: 0\ndashedName: step-106\n--description--\nInside the showCheckpointScreen function, set the checkpointScreen style display property to \"block\" --hints--\nYou should set the checkpointScreen style display property to \"block\" js\nassert match(code, /\\s*checkpointScreen\\s*\\ \\s*style\\s*\\ \\s*display\\s*=\\s*('|\")block\\1\\s*; /);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "c37fc6509e5c8a47fcbf89a594dd9cc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "7d3f01384d229867784cf05890cd01dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "c27bc72d2abea3ca91e3d19bebe55778",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "a8d95478d72a9838384e0c8337d8a644",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "37edde933c8480f7beb37e6e15fb3fd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); } const keys = { rightKey: { pressed: false }, leftKey: { pressed: false } }; const movePlayer = (key, xVelocity, isPressed) => { if (isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\n--fcc-editable-region--\nconst showCheckpointScreen = (msg) => {\n};\n--fcc-editable-region--\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4978631a4f6e3e1b964d.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a5be788a03f86ed8adf8569fae54ebe8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb4ebdc75b3a73a43da5ec\ntitle: Step 108\nchallengeType: 0\ndashedName: step-108\n--description--\nCreate an if statement that checks if isCheckpointCollisionDetectionActive is true Inside the if statement, add a setTimeout() that takes in a callback function and a delay of 2000 milliseconds For the callback function, it should set the checkpointScreen style display property to \"none\" --hints--\nYou should have an if statement that checks if isCheckpointCollisionDetectionActive is true js\nassert match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{/s);\nYou should have a setTimeout() function inside the if statement js\nassert match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{\\s*setTimeout\\s*\\(/s);\nYour setTimeout() function should have a callback function as the first argument js\nassert match(code, /\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>/s);\nYour setTimeout() function should have a delay of 2000 milliseconds as the second argument js\nassert match(code, /\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>[^,]*,\\s*2000\\s*\\)/s);\nYour callback function should set the checkpointScreen style display property to \"none\" js\nassert match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>\\s*(\\(\\s*checkpointScreen\\ style\\ display\\s*=\\s*(\"|')none\\2\\s*\\)|\\{\\s*checkpointScreen\\ style\\ display\\s*=\\s*(\"|')none\\3\\s*; \\s*\\}|\\s*checkpointScreen\\ style\\ display\\s*=\\s*(\"|')none\\4\\s*)\\s*,\\s*2000\\s*\\)\\s*; \\s*}/s);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "cf2929dc2034f567ed35a59f32d22135",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "js assert match(code, /\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>[^,]*,\\s*2000\\s*\\)/s); Your callback function should set the checkpointScreen style display property to \"none\" js assert match(code, /\\s*if\\s*\\(\\s*isCheckpointCollisionDetectionActive\\s*\\)\\s*{\\s*setTimeout\\s*\\(\\s*\\(\\s*\\)\\s*=>\\s*(\\(\\s*checkpointScreen\\ style\\ display\\s*=\\s*(\"|')none\\2\\s*\\)|\\{\\s*checkpointScreen\\ style\\ display\\s*=\\s*(\"|')none\\3\\s*; \\s*\\}|\\s*checkpointScreen\\ style\\ display\\s*=\\s*(\"|')none\\4\\s*)\\s*,\\s*2000\\s*\\)\\s*; \\s*}/s); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "cb8fa9825b18f1470af043cd9073352e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "9fca49ff3359d08b6020fcc40590d97d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Mathceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "694971cb47cbb725005d75ea184c21a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this positiony, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "90ff5e6b35eb48af20c6a4fa6cd73965",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpointdraw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "3d42b62a473e2f66a95258c0d1946f7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocityy = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\n--fcc-editable-region--\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\n};\n--fcc-editable-region--\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10646,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb4ebdc75b3a73a43da5ec.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "9c92d0a75f647f5a2d1a410de83b4680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb50fd95831a745ea60d13\ntitle: Step 109\nchallengeType: 0\ndashedName: step-109\n--description--\nThe last few steps involve updating the animate function to display the checkpoint screen when the player reaches a checkpoint Start by adding a forEach to the checkpoints array For the callback function, use checkpoint, index and checkpoints for the parameters --hints--\nYou should have a forEach loop that iterates through the checkpoints array js\nconst splitter = code split(\"player velocity y = gravity;\")\nassert match(splitter[1], /checkpoints\\ forEach\\(/);\nYour callback function should have checkpoint, index and checkpoints parameters in that order js\nconst splitter = code split(\"player velocity y = gravity;\")\nassert match(splitter[1], /checkpoints\\ forEach\\(\\s*\\(\\s*checkpoint\\s*,\\s*index\\s*,\\s*checkpoints\\s*\\)\\s*=>\\s*\\{/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "049940aef1b8ae623dd2cc132b3a3dbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "fdfec5bdd5053444327b42ae9083a8e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "754f4d7ad132740d9113e21fe13aba93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "3e4b5d912edfd8aac3659778bca36385",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "850df2beeaf23ec1c0f87ff4558690d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ platform width - player width / 3, ]; if (collisionDetectionRules every((rule) => rule)) { player velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRulesevery(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n--fcc-editable-region--\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb50fd95831a745ea60d13.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "94d67c5fa5d23cb35be0b6897bc79629",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb522509ffb274daf9fd9e\ntitle: Step 110\nchallengeType: 0\ndashedName: step-110\n--description--\nCreate a new const variable called checkpointDetectionRules and assign it an empty array Inside that array, add a boolean expression that checks if the player's position x is greater than or equal to the checkpoint's position x --hints--\nYou should use const to create an empty checkpointDetectionRules array js\nassert match(code, /const\\s+checkpointDetectionRules\\s*=\\s*\\[\\s*/)\nYou should have a boolean expression that checks if the player's position x is greater than or equal to the checkpoint's position x inside the checkpointDetectionRules array js\nassert match(code, /const\\s+checkpointDetectionRules\\s*=\\s*\\[\\s*player\\ position\\ x\\s*>=\\s*checkpoint\\ position\\ x\\s*, \\s*\\]/)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "c42b41c64c83042b7801b84052339027",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "999173f01b2f2d5f5670fbd4dabd5fec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "118915f845e5ec6afeb57a4c0de54652",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "04ae6841b1480fbb755f5b381ead2031",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "592a4f743c5411fabd145dffcf36409e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ platform width - player width / 3, ]; if (collisionDetectionRules every((rule) => rule)) { player velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRulesevery(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n--fcc-editable-region--\ncheckpoints forEach((checkpoint, index, checkpoints) => {\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb522509ffb274daf9fd9e.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "9b37a389bf907a70271acc381ccf5483",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb583dadb33a77595797bd\ntitle: Step 111\nchallengeType: 0\ndashedName: step-111\n--description--\nAdd another boolean expression that checks if the player's position y is greater than or equal to the checkpoint's position y Below that statement, add another boolean expression that checks if the player's position y plus the player's height is less than or equal to the checkpoint's position y plus the checkpoint's height Below that statement, add the isCheckpointCollisionDetectionActive variable --hints--\nYou should have a boolean expression that checks if the player's position y is greater than or equal to the checkpoint's position y\n```js\nassert match(code, /player position y\\s>=\\scheckpoint position y\\s*,/)\n```\nYou should have a boolean expression that checks if the player's position y plus the player's height is less than or equal to the checkpoint's position y plus the checkpoint's height ```js\nassert match(code, /player position y\\s>=\\scheckpoint position y\\s,\\splayer position y\\s+\\splayer height\\s<=\\scheckpoint position y\\s+\\scheckpoint height\\s*,/)\n```\nYou should add isCheckpointCollisionDetectionActive as the last item of the checkpointDetectionRules array ```js\nassert match(code, /player position y\\s>=\\scheckpoint position y\\s,\\splayer position y\\s+\\splayer height\\s<=\\scheckpoint position y\\s+\\scheckpoint height\\s,\\sisCheckpointCollisionDetectionActive\\s*/)\n```\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "f8371387592279912561ddc8abc3c2b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "y\\s+\\scheckpoint height\\s,\\sisCheckpointCollisionDetectionActive\\s*/) ``` --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "d62ec9f9edcbfc33df6b1e4aab6e360e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = documentquerySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "cc95fe3b6983b71eaedd0f2cd5ed3dff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "0) { this position y = 0; this velocity y = gravity; } this velocity y += gravity; } else { this velocity y = 0; } if (this position x < this width) { this position x = this width; } if (this position x >= canvas width - this width * 2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { thisposition = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "495da91e42404a00017cfeb2904707e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "700, y: proportionalSize(400) }, { x: 850, y: proportionalSize(350) }, { x: 900, y: proportionalSize(350) }, { x: 1050, y: proportionalSize(150) }, { x: 2500, y: proportionalSize(450) }, { x: 2900, y: proportionalSize(400) }, { x: 3150, y: proportionalSize(350) }, { x: 3900, y: proportionalSize(450) }, { x: 4200, y: proportionalSize(400) }, { x: 4400, y: proportionalSize(200) }, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platformy)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "cba793b3f5064f96888f80c476ac1050",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); checkpoints forEach((checkpoint) => { checkpoint position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x += 5; }); checkpoints forEach((checkpoint) => { checkpoint position x += 5; }); } } platforms forEach((platform) => { const collisionDetectionRules = [ player position y + player height <= platform positiony,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n--fcc-editable-region--\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules =[\nplayer position x >= checkpoint position x,\n]\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "308caeb5803f3e9c9ba062e8cc361397",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "0; return; } switch (key) { case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas styledisplay = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb583dadb33a77595797bd.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "76deb2977da576d66bee2148b36f70cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 64cb5d1d48532b79b4e7ef6c\ntitle: Step 113\nchallengeType: 0\ndashedName: step-113\n--description--\nNext, add an if statement that checks if every rule in the checkpointDetectionRules array is true Make sure to use the every method for this --hints--\nYou should create an empty if statement with the condition checkpointDetectionRules every((rule) => rule) js\nassert match(code, /if\\s*\\(\\s*checkpointDetectionRules\\ every\\(\\s*( :\\(\\s*( +)\\s*\\)\\s*=>\\s*\\1|([^\\s()]+)\\s*=>\\s*\\2\\s*)\\s*\\)\\s*\\)\\s*\\{\\s*\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "1025db848d4dbedd92d024746276a387",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "223e7d7a521aeee2be7f41d0a1d0986e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; thisvelocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "524e741880542ce1b77f3785ca2eebaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "be9b2c502fe99bc76aa7c733d0d01244",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n--fcc-editable-region--\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "8d7f58be6c75a2428de734327dc70f0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "- player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); --fcc-editable-region-- checkpoints forEach((checkpoint, index, checkpoints) => { const checkpointDetectionRules = [ player position x >= checkpoint position x, player position y >= checkpoint position y, player positiony + player height <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\nplayer position x - player width <=\ncheckpoint position x - checkpoint width + player width * 0 9,\nindex === 0 || checkpoints[index - 1] claimed === true,\n];\n});\n--fcc-editable-region--\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\64cb5d1d48532b79b4e7ef6c.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "432184150bf30649210b3a6489fbbfc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 6507512fe521de40085b8831\ntitle: Step 114\nchallengeType: 0\ndashedName: step-114\n--description--\nInside the if statement, call the claim method on the checkpoint object --hints--\nYou should call the claim() method on the checkpoint object js\nassert match(code, /checkpoint\\ claim\\(\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
      "source_type": "git_repo"
    },
    "token_count": 436,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "316bac33ffe3e9e7b0bdbe6ecf49b14e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "91deda9390396709917ca8265befadcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "2bddeff21863d0d5b94e24ca59cb9151",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "0667e758a439c6dc6f73fa6978aca8e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "b328a4a8cd5de414dae618ae71c7e586",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); checkpoints forEach((checkpoint, index, checkpoints) => { const checkpointDetectionRules = [ player position x >= checkpoint position x, player position y >= checkpoint position y, player position y + playerheight <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\nplayer position x - player width <=\ncheckpoint position x - checkpoint width + player width * 0 9,\nindex === 0 || checkpoints[index - 1] claimed === true,\n];\n--fcc-editable-region--\nif (checkpointDetectionRules every((rule) => rule)) {\n};\n--fcc-editable-region--\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\6507512fe521de40085b8831.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "222d5f425a272658f2c60cc255828baf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 650755908a8071409ab9e09e\ntitle: Step 115\nchallengeType: 0\ndashedName: step-115\n--description--\nThe next step is to write a condition that checks if the player has reached the last checkpoint Start by adding an if statement that checks if the index is equal to the length of the checkpoints array minus one --hints--\nYou should have an empty if statement with the condition index === checkpoints length - 1\njs\nassert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "17b943602ca872aacbb2fc0ecfd1b3ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "83434f8170a8af77148eb8eb7ff12491",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "fbbc02ad77a9b3ee6680fa2960178153",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "485a0bc7cfc69cd678a402f32fb1bdaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "babc1728638dbb7bba36718e7d551bc6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); checkpoints forEach((checkpoint, index, checkpoints) => { const checkpointDetectionRules = [ player position x >= checkpoint position x, player position y >= checkpoint position y, player position y + playerheight <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\nplayer position x - player width <=\ncheckpoint position x - checkpoint width + player width * 0 9,\nindex === 0 || checkpoints[index - 1] claimed === true,\n];\nif (checkpointDetectionRules every((rule) => rule)) {\ncheckpoint claim();\n--fcc-editable-region--\n--fcc-editable-region--\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650755908a8071409ab9e09e.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "3f28f6b60a230538ad2bc1979cb8e222",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afeb7ab6867b43dacbf32b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 65afeb7ab6867b43dacbf32b\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nAs you are designing the game, you will need to make sure that the size of the elements in the game are responsive and adapt to different screen sizes Start by creating an arrow function called proportionalSize that takes in a size parameter --hints--\nproportionalSize should be a function js\nassert isFunction(proportionalSize);\nYour proportionalSize function should use arrow syntax js\nassert match(code, /const\\s+proportionalSize\\s*=\\s*\\( \\s* *\\s*\\) \\s*=>/);\nYour proportionalSize function should have a size parameter js\nassert match(code, /const\\s+proportionalSize\\s*=\\s*\\( \\s*size\\s*\\) \\s*=>/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afeb7ab6867b43dacbf32b.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e484bf6bfb553c97e2136f941a186d09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afeb7ab6867b43dacbf32b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afeb7ab6867b43dacbf32b.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3d12c2883e0d199b3837f44dd389127c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afec8f02423144ef136a94.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 65afec8f02423144ef136a94\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nThe width and the height of the main player, platforms and checkpoints will be proportional sized relative to the innerHeight of the browser screen The goal is to make the game responsive and visually consistent across different screen sizes Inside your proportionalSize function, you will need to return a ternary that checks if innerHeight is less than 500 If so, return Math ceil((size / 500) * innerHeight), otherwise return size --hints--\nYour proportionalSize function should have a return statement js\nassert match(proportionalSize toString(), /return/);\nYour proportionalSize function should return a ternary operator that checks if innerHeight is less than 500 and returns Math ceil((size / 500) * innerHeight), otherwise returns size js\nassert match(code, /const\\s+proportionalSize\\s*=\\s*(\\(\\s*size\\s*\\)|size)\\s*=>\\s*{\\s*return\\s+innerHeight\\s*<\\s*500\\s*\\ \\s*Math\\ ceil\\(\\s*\\(\\s*size\\s*\\/\\s*500\\s*\\)\\s*\\*\\s*innerHeight\\s*\\)\\s*:\\s*size\\s*; \\s*}\\s*/);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afec8f02423144ef136a94.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "64dd40c498debae75c0d746f79f52618",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afec8f02423144ef136a94.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; }instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afec8f02423144ef136a94.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5e8227f809999c82d66b63ae371501f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afec8f02423144ef136a94.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvasheight = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\n--fcc-editable-region--\nconst proportionalSize = (size) => {\n};\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65afec8f02423144ef136a94.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d5af0d9e835a7d0ffbbbca67a6ff03d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b006efc74c675c2bdfccba.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 65b006efc74c675c2bdfccba\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nFor the last condition, you will need to check if the player's x position has exceeded the right edge of the canvas If it has, you will need to set the player's x position to the maximum value so the player does not accidentally go off screen to the right Inside your update method, create an if statement that checks if this position x >= canvas width - this width * 2 --hints--\nYou should have another if statement inside your update method js\nconst player = new Player();\nassert lengthOf(player update toString() match(/if\\s*\\(\\s* *\\s*\\)\\s*{/g), 4);\nYour if statement should check if this position x >= canvas width - this width * 2 js\nconst player = new Player();\nassert match(player update toString(), /if\\s*\\(\\s*this\\ position\\ x\\s*>=\\s*canvas\\ width\\s*-\\s*this\\ width\\s*\\*\\s*2\\s*\\)\\s*{/gi);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b006efc74c675c2bdfccba.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "84f69af047ec179cba9b49e687fd12d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b006efc74c675c2bdfccba.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b006efc74c675c2bdfccba.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d2f16d7f77c3dc29b5db6ed112d130e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b006efc74c675c2bdfccba.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\n--fcc-editable-region--\n--fcc-editable-region--\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b006efc74c675c2bdfccba.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8660a9458f098b73f9401481c8913c75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 650756e20cffbe41305a0dde\ntitle: Step 116\nchallengeType: 0\ndashedName: step-116\n--description--\nInside the condition, you want to first set the isCheckpointCollisionDetectionActive to false Then you will need to call the showCheckpointScreen function and pass in the string \"You reached the final checkpoint \" as an argument Lastly, you will need to call the movePlayer function and pass in the string \"ArrowRight\" as the first argument, the number 0 as the second argument, and the boolean false as the third argument --hints--\nYou should set isCheckpointCollisionDetectionActive to false inside the if statement js\nassert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*/)\nYou should call the showCheckpointScreen function and pass in \"You reached the final checkpoint \" as an argument js\nassert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*showCheckpointScreen\\(\\s*(\"|'|`)You\\s+reached\\s+the\\s+final\\s+checkpoint \\1\\s*\\)\\s*; /)\nYou should call the movePlayer function and pass in the provided arguments js\nassert match(code, /movePlayer\\s*\\(\\s*('|\")ArrowRight\\1\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "efc4847edddf21d3aa647f73f7f31c36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "match(code, /movePlayer\\s*\\(\\s*('|\")ArrowRight\\1\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; /) --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "b40b2724ce90632b8299285f64002424",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; }checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "16aafc2ec2bdcaaf8c25537aa86f33e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "this height = proportionalSize(40); } draw() { ctx fillStyle = \"#99c9ff\"; ctx fillRect(this position x, this position y, this width, this height); } update() { this draw(); this position x += this velocity x; this position y += this velocity y; if (this position y + this height + this velocity y <= canvas height) { if (this position y < 0) { this position y = 0; this velocity y = gravity; } this velocityy += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "17990d745270c2f4ed2d289167ba985d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "5abc010d89eb76604b9d3c49c7dc9c33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "1a6d89c49740584ddba3694bb32096ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); checkpoints forEach((checkpoint, index, checkpoints) => { const checkpointDetectionRules = [ player position x >= checkpoint position x, player position y >= checkpoint position y, player position y + playerheight <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\nplayer position x - player width <=\ncheckpoint position x - checkpoint width + player width * 0 9,\nindex === 0 || checkpoints[index - 1] claimed === true,\n];\nif (checkpointDetectionRules every((rule) => rule)) {\ncheckpoint claim();\n--fcc-editable-region--\nif (index === checkpoints length - 1) {\n};\n--fcc-editable-region--\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650756e20cffbe41305a0dde.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "2fc36c11c9d13984bf4f834deb0b06e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b00a6f1c429c5e9fa50e90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 65b00a6f1c429c5e9fa50e90\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nInside your if statement, assign canvas width - this width * 2 to this position x This will ensure that the player's x position will never exceed the right edge of the canvas --hints--\nYou should assign canvas width - this width * 2 to this position x inside your if statement js\nassert match(code, /this\\ position\\ x\\s*=\\s*canvas\\ width\\s*-\\s*this\\ width\\s*\\*\\s*2\\s*; /g);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b00a6f1c429c5e9fa50e90.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d060eaa66230c42b442a567728739beb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b00a6f1c429c5e9fa50e90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; }checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b00a6f1c429c5e9fa50e90.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d7aec0d68ad24c37d2a732785d80fb4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b00a6f1c429c5e9fa50e90.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; this velocity = { x: 0, y: 0, }; this width = proportionalSize(40); thisheight = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\n--fcc-editable-region--\n--fcc-editable-region--\n}\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b00a6f1c429c5e9fa50e90.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "10393e83530f2bfd382701f193734a82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 650757918a9e97418dc3d71a\ntitle: Step 117\nchallengeType: 0\ndashedName: step-117\n--description--\nThe last thing you will need to do is add an else if statement Your condition should check if the player's x position is greater than or equal to the checkpoint's x position and less than or equal to the checkpoint's x position plus 40 Inside the body of the else if statement, you will need to call the showCheckpointScreen function and pass in the string \"You reached a checkpoint \" as an argument Congratulations You have completed the platformer game project --hints--\nYou should add an else if clause to check if the player's x position is greater than or equal to the checkpoint's x position and less than or equal to the checkpoint's x position plus 40 js\nassert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint \\1\\s*\\)\\s*; \\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; \\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\ position\\ x\\s*>=\\s*checkpoint\\ position\\ x\\s*&&\\s*player\\ position\\ x\\s*<=\\s*checkpoint\\ position\\ x\\s\\+\\s*40\\s*\\)\\s*\\{\\s*/)\nYou should call the showCheckpointScreen function and pass in \"You reached a checkpoint \" as an argument js\nassert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint \\1\\s*\\)\\s*; \\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; \\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\ position\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "4a44f8b16e08ed900283834ff6d2a09c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "x position is greater than or equal to the checkpoint's x position and less than or equal to the checkpoint's x position plus 40 js assert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint \\1\\s*\\)\\s*; \\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; \\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\ position\\ x\\s*>=\\s*checkpoint\\ position\\ x\\s*&&\\s*player\\ position\\ x\\s*<=\\s*checkpoint\\ position\\ x\\s\\+\\s*40\\s*\\)\\s*\\{\\s*/) You should call the showCheckpointScreen function and pass in \"You reached a checkpoint \" as an argument js assert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint \\1\\s*\\)\\s*; \\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; \\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\ position\\x\\s*>=\\s*checkpoint\\ position\\ x\\s*&&\\s*player\\ position\\ x\\s*<=\\s*checkpoint\\ position\\ x\\s\\+\\s*40\\s*\\)\\s*\\{\\s*showCheckpointScreen\\(\\s*(\"|'|`)You\\s+reached\\s+a\\s*checkpoint \\3\\s*\\)\\s*; \\s*\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "cf6a4f8d1e3c295bf9af2d8fabe78ac6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "pass in \"You reached a checkpoint \" as an argument js assert match(code, /if\\s*\\(\\s*index\\s*===\\s*checkpoints\\ length\\s*-\\s*1\\s*\\)\\s*\\{\\s*isCheckpointCollisionDetectionActive\\s*=\\s*false\\s*; \\s*showCheckpointScreen\\(\\s*(\"|'|`)You reached the final checkpoint \\1\\s*\\)\\s*; \\s*movePlayer\\(\\s*(\"|'|`)ArrowRight\\2\\s*,\\s*0\\s*,\\s*false\\s*\\)\\s*; \\s*\\}\\s*else\\s+if\\s*\\(\\s*player\\ position\\x\\s*>=\\s*checkpoint\\ position\\ x\\s*&&\\s*player\\ position\\ x\\s*<=\\s*checkpoint\\ position\\ x\\s\\+\\s*40\\s*\\)\\s*\\{\\s*showCheckpointScreen\\(\\s*(\"|'|`)You\\s+reached\\s+a\\s*checkpoint \\3\\s*\\)\\s*; \\s*\\}\\s*; /) --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game CongratsYou reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "662b265901f594cfe1fb90dc41d66a6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "spacebar to jump Start Game CongratsYou reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "57d4587022d9a0ecaeb3fd6f214add73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "6705f518029d3be00cfae1e8cd0e5ee3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "d81a4becb10184fc4ccd60302b57ac7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "235499df878b9c46ba0c897dd2a00095",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ platform width - player width / 3, ]; if (collisionDetectionRules every((rule) => rule)) { player velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRulesevery(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position y + player height <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\nplayer position x - player width <=\ncheckpoint position x - checkpoint width + player width * 0 9,\nindex === 0 || checkpoints[index - 1] claimed === true,\n];\nif (checkpointDetectionRules every((rule) => rule)) {\ncheckpoint claim();\n--fcc-editable-region--\nif (index === checkpoints length - 1) {\nisCheckpointCollisionDetectionActive = false;\nshowCheckpointScreen(\"You reached the final checkpoint \");\nmovePlayer(\"ArrowRight\", 0, false);\n}\n--fcc-editable-region--\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "ef28ec2a1557bb117654c19783a7bf9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen style display = \"none\"; animate(); } const showCheckpointScreen = (msg) => { checkpointScreen styledisplay = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```\n--solutions--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "1e68361dfe2b670fab338e4f949f390a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "252cba1fa90667be1a950e93abd0916a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; } checkpoint-screen { max-width: 300px; } } ``` ```js const startBtn = document getElementById(\"start-btn\"); const canvas = document getElementById(\"canvas\"); const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 05;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "87879ee422784e4060a5e0a912fde2f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis claimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "9badf847884210e50d6796c979004b88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 4700, y: proportionalSize(150) }, ]; const platforms = platformPositions map( (platform) => new Platform(platform x, platform y) ); const checkpointPositions = [ { x: 1170, y: proportionalSize(80), z: 1 }, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvaswidth, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "60fc51f27801c941ec3c5d983e531a0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "+ platform width - player width / 3, ]; if (collisionDetectionRules every((rule) => rule)) { player velocity y = 0; return; } const platformDetectionRules = [ player position x >= platform position x - player width / 2, player position x <= platform position x + platform width - player width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRulesevery(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position y + player height <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\nplayer position x - player width <=\ncheckpoint position x - checkpoint width + player width * 0 9,\nindex === 0 || checkpoints[index - 1] claimed === true,\n];\nif (checkpointDetectionRules every((rule) => rule)) {\ncheckpoint claim();\nif (index === checkpoints length - 1) {\nisCheckpointCollisionDetectionActive = false;\nshowCheckpointScreen(\"You reached the final checkpoint \");\nmovePlayer(\"ArrowRight\", 0, false);\n} else if (\nplayer position x >= checkpoint position x &&\nplayer position x <= checkpoint position x + 40\n) {\nshowCheckpointScreen(\"You reached a checkpoint \");\n}\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "622807823b080b3335edf705dce151e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen styledisplay = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 22107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\650757918a9e97418dc3d71a.md",
      "source_type": "git_repo"
    },
    "token_count": 231,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "7e917d0641d66e4f9ce0d18b7fb70926",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 65b2a465d7ca3ab6e902285b\ntitle: Step 97\nchallengeType: 0\ndashedName: step-97\n--description--\nBelow the checkpoint's width and height properties, use the this keyword to add a new claimed property and assign it the value of false This property will be used to check if the player has reached the checkpoint --hints--\nYou should have a this claimed property in the CheckPoint class js\nconst checkpoint = new CheckPoint(0, 0, 0);\nassert(checkpoint hasOwnProperty(\"claimed\"));\nYou should assign false to the this claimed property js\nconst checkpoint = new CheckPoint(0, 0, 0);\nassert strictEqual(checkpoint claimed, false);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n} start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "772622d593ce5484b5ba8d52c68bf7a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "#feac32; } body { background-color: var(--main-bg-color); } start-screen { background-color: var(--section-bg-color); width: 100%; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border-radius: 30px; padding: 20px; padding-bottom: 5px; } main-title { text-align: center; } instructions { text-align: center; font-size: 1 2rem; margin: 15px; line-height: 2rem; } btn { cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n} checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1597b1904ccdb9301908be5074fb8e6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "const startScreen = document querySelector(\" start-screen\"); const checkpointScreen = document querySelector(\" checkpoint-screen\"); const checkpointMessage = document querySelector(\" checkpoint-screen > p\"); const ctx = canvas getContext(\"2d\"); canvas width = innerWidth; canvas height = innerHeight; const gravity = 0 5; let isCheckpointCollisionDetectionActive = true; const proportionalSize = (size) => { return innerHeight < 500 Math ceil((size / 500) * innerHeight) : size; } class Player { constructor() { this position = { x: proportionalSize(10), y: proportionalSize(400), }; thisvelocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity y += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "23bcaf1c94f4ba1a59c24bcf32642795",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "2) { this position x = canvas width - this width * 2; } } } class Platform { constructor(x, y) { this position = { x, y, }; this width = 200; this height = proportionalSize(40); } draw() { ctx fillStyle = \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); thisheight = proportionalSize(70);\n--fcc-editable-region--\n--fcc-editable-region--\n};\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity x = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "accc19ba70f10c60342cc14091924e8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocity x = 5; } else if (keys leftKey pressed && player position x > proportionalSize(100)) { player velocity x = -5; } else { player velocity x = 0; if (keys rightKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform position x -= 5; }); } else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) { platforms forEach((platform) => { platform positionx += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "7a51068f661291acb711b6f9f453f3cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "{ case \"ArrowLeft\": keys leftKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x -= xVelocity; break; case \"ArrowUp\": case \" \": case \"Spacebar\": player velocity y -= 8; break; case \"ArrowRight\": keys rightKey pressed = isPressed; if (xVelocity === 0) { player velocity x = xVelocity; } player velocity x += xVelocity; } } const startGame = () => { canvas style display = \"block\"; startScreen styledisplay = \"none\";\nanimate();\n}\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8818,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2a465d7ca3ab6e902285b.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "460cae48d1bf46c9fc778df55b1a80d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ee6e3a242da6bd579de69.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ee6e3a242da6bd579de69\ntitle: Step 2\nchallengeType: 1\ndashedName: step-2\n--description--\nOne of the most important concepts in programming is variables. A variable points to a specific memory address that stores a value. Variables are given a name which can be used throughout your code to access that value.\nDeclaring a variable means giving it a name. In JavaScript, this is often done with the let keyword. For example, here is how you would declare a hello variable:\njs\nlet hello;\nVariable naming follows specific rules: names can include letters, numbers, dollar signs, and underscores, but cannot contain spaces and must not begin with a number.\nUse the let keyword to declare a variable called character.\nNote: It is common practice to end statements in JavaScript with a semicolon. ;\n--hints--\nYou should use let in your code.\njs\nassert.match(__helpers.removeJSComments(code), /let/);\nYou should use character in your code.\njs\nassert.match(__helpers.removeJSComments(code), /character/);\nYou should use let to declare a character variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+character/);\nYour declaration should end with a semicolon.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+character;/);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1429,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ee6e3a242da6bd579de69.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "396d143f03aef923797a5fb5dcd389f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660eebd83100d37862268781.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660eebd83100d37862268781\ntitle: Step 3\nchallengeType: 1\ndashedName: step-3\n--description--\nYour character variable currently does not have a value. You can assign a value using the assignment operator =. For example:\njs\nlet hello = \"Hello\";\nAssigning a value to a variable at the moment of its declaration is known as initialization.\nInitialize your character variable by assigning it the value \"Hello\" during its declaration.\n--hints--\nYou should use the assignment operator =.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+character\\s*=/);\nYou should use the string \"Hello\".\njs\nassert.match(__helpers.removeJSComments(code), /('|\")Hello\\1/);\nYou should use double quotes for your \"Hello\" string.\njs\nassert.match(__helpers.removeJSComments(code), /\"Hello\"/);\nYou should assign \"Hello\" to your character variable.\njs\nassert.equal(character, \"Hello\");\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nlet character;\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1075,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660eebd83100d37862268781.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "320cf3517816cb762b766c6e244ba85d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef0f7c4b8e68ccd1f0786.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef0f7c4b8e68ccd1f0786\ntitle: Step 4\nchallengeType: 1\ndashedName: step-4\n--description--\nJavaScript has seven primitive data types, with String being one of them. In JavaScript, a string represents a sequence of characters and can be enclosed in either single (') or double (\") quotes.\nNote that strings are immutable, which means once they are created, they cannot be changed. The variable can still be reassigned another value.\nChange your \"Hello\" string to use single quotes.\n--hints--\nYou should not have double quotes in your code.\njs\nassert.notMatch(__helpers.removeJSComments(code), /\"/);\nYou should use single quotes for your \"Hello\" string.\njs\nassert.match(__helpers.removeJSComments(code), /'Hello'/);\nYou should still use let in your code.\njs\nassert.match(__helpers.removeJSComments(code), /let/);\nYou should still declare a character variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+character/);\nYour character variable should still have the string \"Hello\" for its value.\njs\nassert.equal(character, \"Hello\");\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nlet character = \"Hello\";\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef0f7c4b8e68ccd1f0786.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6357cd0f12bf82e3aa2bff34f4c171ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef31a5be625914a0102cd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef31a5be625914a0102cd\ntitle: Step 6\nchallengeType: 1\ndashedName: step-6\n--description--\nWhen a variable is declared with the let keyword, you can reassign (or change the value of) that variable later on. In this example, the value of programmer is changed from \"Naomi\" to \"CamperChan\".\njs\nlet programmer = \"Naomi\";\nprogrammer = \"CamperChan\";\nNote that when reassigning a variable, you do not use the let keyword again.\nAfter your console.log, assign the value \"World\" to your character variable.\n--hints--\nYou should use character twice in your code.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/character/g), 3);\nYou should use the assignment operator to reassign character.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/character\\s*\\=/g), 2);\nYou should use the string \"World\" in your code.\njs\nassert.match(__helpers.removeJSComments(code), /(\"|')World\\1/);\nYour character variable should have the value \"World\".\njs\nassert.equal(character, \"World\");\nYour reassignment should not use let.\njs\nassert.isBelow(__helpers.removeJSComments(code).match(/let/g).length, 2);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nconsole.log(character);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1358,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef31a5be625914a0102cd.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8dc79a99fe8457110c756449f3ebb0b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef19b95d3308e7dd31bb6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef19b95d3308e7dd31bb6\ntitle: Step 5\nchallengeType: 1\ndashedName: step-5\n--description--\nThe console allows you to print and view JavaScript output. You can send information to the console using console.log(). For example, this code will print \"Naomi\" to the console:\njs\nlet developer = \"Naomi\";\nconsole.log(developer);\nThe code above accesses the developer variable with its name in the console.log(). Note that the value between the parentheses is the value that will be printed.\nPrint the value of the character variable to the console. Then, click the \"Console\" button to view the JavaScript console.\n--hints--\nThe character variable initialization should not be changed.\njs\nassert.strictEqual(character, 'Hello');\nYou should access the console in your code.\njs\nassert.match(__helpers.removeJSComments(code), /console/);\nYou should access the log property of the console.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log/);\nYou should use parentheses to call the .log() method.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(/);\nYou should print the character variable to the console.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*character\\s*\\)/);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef19b95d3308e7dd31bb6.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "96228d941d26fe2caf91fc8f2823862b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef5105b8ba095307a0e50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef5105b8ba095307a0e50\ntitle: Step 7\nchallengeType: 1\ndashedName: step-7\n--description--\nNow log your character variable to the console again. You should see the string \"Hello\", then the string \"World\", in the console.\n--hints--\nYou should use console.log a second time.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log/g), 2);\nYou should log character to the console a second time.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log\\(\\s*character\\s*\\)/g), 2);\nYour new console.log() should come after your reassignment.\njs\nconst lines = __helpers.removeJSComments(code).split(/\\n+/)\nconst reassign = lines.findIndex(l => l.match(/character\\s+=\\s+(\"|')World\\1/));\nconst secondLog = lines.findLastIndex(l => l.match(/console\\.log/));\nassert.isBelow(reassign, secondLog);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1039,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef5105b8ba095307a0e50.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "20cc41825f170f4e3eb467f3db5dd626",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef55dd468079679ee0092.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef55dd468079679ee0092\ntitle: Step 12\nchallengeType: 1\ndashedName: step-12\n--description--\nYou are now ready to declare your next variable. Remove both console.log statements, and the character reassignment.\nAlso remove your secondCharacter variable, but leave the character initialization unchanged.\n--hints--\nYou should not have any console.log() statements in your code.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console/);\nYou should not reassign the value of character.\njs\nassert.isAtMost(__helpers.removeJSComments(code).match(/character\\s*=/g).length, 1);\nYour character variable should have the value \"Hello\".\njs\nassert.equal(character, \"Hello\");\nYou should not have a secondCharacter variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /secondCharacter/);\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nlet character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\nlet secondCharacter;\nsecondCharacter = character;\nconsole.log(secondCharacter);\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef55dd468079679ee0092.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "90cb169477c600b663d187d51a5adcac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef5c1904955978a986a5c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef5c1904955978a986a5c\ntitle: Step 15\nchallengeType: 1\ndashedName: step-15\n--description--\nUse let to declare a count variable. Assign it the number 8. When using a number value, you do not use quotes. For example:\njs\nlet money = 100;\n--hints--\nYou should have a second let keyword in your code.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/let/g), 2);\nYou should use let to declare a count variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+count/);\nYou should assign the number 8 to your count variable.\njs\nassert.equal(count, 8);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef5c1904955978a986a5c.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "edc6c56f596300eb97ef6d4b65199d57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef6355e8f5a9e67fe5f46.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef6355e8f5a9e67fe5f46\ntitle: Step 16\nchallengeType: 1\ndashedName: step-16\n--description--\nWith the number data type, you can perform mathematical operations, like addition. Try printing count + 1 to the console.\n--hints--\nYou should access the console in your code.\njs\nassert.match(__helpers.removeJSComments(code), /console/);\nYou should access the .log() of the console.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log/);\nYou should log count + 1 to the console.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*count\\s*\\+\\s*1\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nlet count = 8;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef6355e8f5a9e67fe5f46.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "faa16e5f90a8aac82f2a2c94b25c5aae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef857f2806aa626d29d17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ef857f2806aa626d29d17\ntitle: Step 17\nchallengeType: 1\ndashedName: step-17\n--description--\nYou can also perform subtraction (-), multiplication (*), and division (/). Feel free to experiment with the operators and numbers in your console.log. When you are ready to move on, remove the console.log.\n--hints--\nYou should not have a console.log() in your code.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console/);\nYour character variable should still have the value \"Hello\".\njs\nassert.equal(character, \"Hello\");\nYour count variable should still have the value 8.\njs\nassert.equal(count, 8);\n--seed--\n--seed-contents--\njs\nlet character = 'Hello';\n--fcc-editable-region--\nlet count = 8;\nconsole.log(count + 1);\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660ef857f2806aa626d29d17.md",
      "source_type": "git_repo"
    },
    "token_count": 192,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f969eab3b669292aecab3f24499e37ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f033cf051ebb50ea3bf48.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f033cf051ebb50ea3bf48\ntitle: Step 18\nchallengeType: 1\ndashedName: step-18\n--description--\nIn programming, you will often need to work with lots of data. There are many data structures that can help you organize and manage your data. One of the most basic data structures is an array.\nAn array is a non-primitive data type that can hold a series of values. Non-primitive data types differ from primitive data types in that they can hold more complex data. Primitive data types like strings and numbers can only hold one value at a time.\nArrays are denoted using square brackets ([]). Here is an example of a variable with the value of an empty array:\njs\nlet array = [];\nDeclare a rows variable and assign it an empty array.\n--hints--\nYou should have a rows variable.\njs\nassert.match(__helpers.removeJSComments(code), /rows/);\nYou should use let to declare your rows variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+rows/);\nYou should assign an empty array to your rows variable.\njs\nassert.deepEqual(rows, []);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nlet count = 8;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f033cf051ebb50ea3bf48.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87ea81a20960f41235f1f949e7ae3717",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f039ff313dbb696b007ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f039ff313dbb696b007ca\ntitle: Step 19\nchallengeType: 1\ndashedName: step-19\n--description--\nWhen an array holds values, or elements, those values are separated by commas. Here is an array that holds two strings:\njs\nlet array = [\"first\", \"second\"];\nChange your rows declaration to be an array with the strings \"Naomi\", \"Quincy\", and \"CamperChan\". The order of values in an array is important, so follow that order. Remember that strings are case-sensitive.\n--hints--\nThe first element in your array should be the string \"Naomi\".\njs\nassert.equal(rows[0], \"Naomi\");\nThe second element in your array should be the string \"Quincy\".\njs\nassert.equal(rows[1], \"Quincy\");\nThe third element in your array should be the string \"CamperChan\".\njs\nassert.equal(rows[2], \"CamperChan\");\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nlet character = 'Hello';\nlet count = 8;\nlet rows = [];\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 999,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f039ff313dbb696b007ca.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e9b14d8adc490bbf7ac50c6cc8cdca6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "id: 65b2bb4c279af3cd585ba777\ntitle: Step 112\nchallengeType: 0\ndashedName: step-112\n--description--\nYou will need to add two more checkpoint detection rules to the checkpointDetectionRules array The first rule should check if the player's x position minus the player's width is less than or equal to the checkpoint's x position minus the checkpoint's width plus the player's width multiplied by 0 9 This will ensure that the player is close enough to the checkpoint to claim it The second rule should check if index is strictly equal to 0 or if the previous checkpoint(checkpoints[index - 1] claimed) is true This will ensure that the player can only claim the first checkpoint or a checkpoint that has already been claimed --hints--\nYou should have a checkpoint detection rule that checks for the following: player position x - player width <= checkpoint position x - checkpoint width + player width * 0 9 js\nassert match(code, /player\\ position\\ x\\s*-\\s*player\\ width\\s*<=\\s*checkpoint\\ position\\ x\\s*-\\s*checkpoint\\ width\\s*\\+\\s*player\\ width\\s*\\*\\s*0\\ 9/i);\nYou should have a checkpoint detection rule that checks for the following: index === 0 || checkpoints[index - 1] claimed === true js\nassert match(code, /index\\s*===\\s*0\\s*\\|\\|\\s*checkpoints\\[index\\s*-\\s*1\\]\\ claimed\\s*===\\s*true/i);\n--seed--\n--seed-contents--\n```html\nLearn Intermediate OOP by Building a Platformer Game\nfreeCodeCamp Code Warrior\nHelp the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game\nCongrats You reached the last checkpoint ```\n```css\n* {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\n:root {\n--main-bg-color: #0a0a23;\n--section-bg-color: #ffffff;\n--golden-yellow: #feac32;\n}\nbody {\nbackground-color: var(--main-bg-color);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "4999765e5dabbdb534bcae1760112191",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "match(code, /index\\s*===\\s*0\\s*\\|\\|\\s*checkpoints\\[index\\s*-\\s*1\\]\\ claimed\\s*===\\s*true/i); --seed-- --seed-contents-- ```html Learn Intermediate OOP by Building a Platformer Game freeCodeCamp Code Warrior Help the main player navigate to the yellow checkpoints Use the keyboard arrows to move the player around You can also use the spacebar to jump Start Game Congrats You reached the last checkpoint ``` ```css * { margin: 0; padding: 0; box-sizing: border-box; } :root { --main-bg-color: #0a0a23; --section-bg-color: #ffffff; --golden-yellow: #feac32; } body { background-color: var(--main-bg-color); }start-screen {\nbackground-color: var(--section-bg-color);\nwidth: 100%;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%);\nborder-radius: 30px;\npadding: 20px;\npadding-bottom: 5px;\n} main-title {\ntext-align: center;\n} instructions {\ntext-align: center;\nfont-size: 1 2rem;\nmargin: 15px;\nline-height: 2rem;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: #0a0a23;\nfont-size: 18px;\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} btn-container {\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n} checkpoint-screen {\nposition: absolute;\nleft: 0;\nright: 0;\nmargin-left: auto;\nmargin-right: auto;\nwidth: 100%;\ntext-align: center;\nbackground-color: var(--section-bg-color);\nborder-radius: 20px;\npadding: 10px;\ndisplay: none;\n}\ncanvas {\ndisplay: none;\n}\n@media (min-width: 768px) { start-screen {\nwidth: 60%;\nmax-width: 700px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "4982952125427cae46ad587e31474f81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "cursor: pointer; width: 100px; margin: 10px; color: #0a0a23; font-size: 18px; background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } btn-container { display: flex; align-items: center; justify-content: center; } checkpoint-screen { position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; width: 100%; text-align: center; background-color: var(--section-bg-color); border-radius: 20px; padding: 10px; display: none; } canvas { display: none; } @media (min-width: 768px) { start-screen { width: 60%; max-width: 700px; }checkpoint-screen {\nmax-width: 300px;\n}\n}\n```\n```js\nconst startBtn = document getElementById(\"start-btn\");\nconst canvas = document getElementById(\"canvas\");\nconst startScreen = document querySelector(\" start-screen\");\nconst checkpointScreen = document querySelector(\" checkpoint-screen\");\nconst checkpointMessage = document querySelector(\" checkpoint-screen > p\");\nconst ctx = canvas getContext(\"2d\");\ncanvas width = innerWidth;\ncanvas height = innerHeight;\nconst gravity = 0 5;\nlet isCheckpointCollisionDetectionActive = true;\nconst proportionalSize = (size) => {\nreturn innerHeight < 500 Math ceil((size / 500) * innerHeight) : size;\n}\nclass Player {\nconstructor() {\nthis position = {\nx: proportionalSize(10),\ny: proportionalSize(400),\n};\nthis velocity = {\nx: 0,\ny: 0,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#99c9ff\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nupdate() {\nthis draw();\nthis position x += this velocity x;\nthis position y += this velocity y;\nif (this position y + this height + this velocity y <= canvas height) {\nif (this position y < 0) {\nthis position y = 0;\nthis velocity y = gravity;\n}\nthis velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "49195d0f347bd7e1b5094ff1986e3661",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "this height = proportionalSize(40); } draw() { ctx fillStyle = \"#99c9ff\"; ctx fillRect(this position x, this position y, this width, this height); } update() { this draw(); this position x += this velocity x; this position y += this velocity y; if (this position y + this height + this velocity y <= canvas height) { if (this position y < 0) { this position y = 0; this velocity y = gravity; } this velocityy += gravity;\n} else {\nthis velocity y = 0;\n}\nif (this position x < this width) {\nthis position x = this width;\n}\nif (this position x >= canvas width - this width * 2) {\nthis position x = canvas width - this width * 2;\n}\n}\n}\nclass Platform {\nconstructor(x, y) {\nthis position = {\nx,\ny,\n};\nthis width = 200;\nthis height = proportionalSize(40);\n}\ndraw() {\nctx fillStyle = \"#acd157\";\nctx fillRect(this position x, this position y, this width, this height);\n}\n}\nclass CheckPoint {\nconstructor(x, y, z) {\nthis position = {\nx,\ny,\n};\nthis width = proportionalSize(40);\nthis height = proportionalSize(70);\nthis claimed = false;\n};\ndraw() {\nctx fillStyle = \"#f1be32\";\nctx fillRect(this position x, this position y, this width, this height);\n}\nclaim() {\nthis width = 0;\nthis height = 0;\nthis position y = Infinity;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "10ed72075a7cf3b704ee01b89787ac2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "= \"#acd157\"; ctx fillRect(this position x, this position y, this width, this height); } } class CheckPoint { constructor(x, y, z) { this position = { x, y, }; this width = proportionalSize(40); this height = proportionalSize(70); this claimed = false; }; draw() { ctx fillStyle = \"#f1be32\"; ctx fillRect(this position x, this position y, this width, this height); } claim() { this width = 0; this height = 0; this position y = Infinity; thisclaimed = true;\n}\n};\nconst player = new Player();\nconst platformPositions = [\n{ x: 500, y: proportionalSize(450) },\n{ x: 700, y: proportionalSize(400) },\n{ x: 850, y: proportionalSize(350) },\n{ x: 900, y: proportionalSize(350) },\n{ x: 1050, y: proportionalSize(150) },\n{ x: 2500, y: proportionalSize(450) },\n{ x: 2900, y: proportionalSize(400) },\n{ x: 3150, y: proportionalSize(350) },\n{ x: 3900, y: proportionalSize(450) },\n{ x: 4200, y: proportionalSize(400) },\n{ x: 4400, y: proportionalSize(200) },\n{ x: 4700, y: proportionalSize(150) },\n];\nconst platforms = platformPositions map(\n(platform) => new Platform(platform x, platform y)\n);\nconst checkpointPositions = [\n{ x: 1170, y: proportionalSize(80), z: 1 },\n{ x: 2900, y: proportionalSize(330), z: 2 },\n{ x: 4800, y: proportionalSize(80), z: 3 },\n];\nconst checkpoints = checkpointPositions map(\n(checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z)\n);\nconst animate = () => {\nrequestAnimationFrame(animate);\nctx clearRect(0, 0, canvas width, canvas height);\nplatforms forEach((platform) => {\nplatform draw();\n});\ncheckpoints forEach(checkpoint => {\ncheckpoint draw();\n});\nplayer update();\nif (keys rightKey pressed && player position x < proportionalSize(400)) {\nplayer velocity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "d9b2f66c17ab2a7df04f2a586838129b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "}, { x: 2900, y: proportionalSize(330), z: 2 }, { x: 4800, y: proportionalSize(80), z: 3 }, ]; const checkpoints = checkpointPositions map( (checkpoint) => new CheckPoint(checkpoint x, checkpoint y, checkpoint z) ); const animate = () => { requestAnimationFrame(animate); ctx clearRect(0, 0, canvas width, canvas height); platforms forEach((platform) => { platform draw(); }); checkpoints forEach(checkpoint => { checkpoint draw(); }); player update(); if (keys rightKey pressed && player position x < proportionalSize(400)) { player velocityx = 5;\n} else if (keys leftKey pressed && player position x > proportionalSize(100)) {\nplayer velocity x = -5;\n} else {\nplayer velocity x = 0;\nif (keys rightKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x -= 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x -= 5;\n});\n} else if (keys leftKey pressed && isCheckpointCollisionDetectionActive) {\nplatforms forEach((platform) => {\nplatform position x += 5;\n});\ncheckpoints forEach((checkpoint) => {\ncheckpoint position x += 5;\n});\n}\n}\nplatforms forEach((platform) => {\nconst collisionDetectionRules = [\nplayer position y + player height <= platform position y,\nplayer position y + player height + player velocity y >= platform position y,\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\n];\nif (collisionDetectionRules every((rule) => rule)) {\nplayer velocity y = 0;\nreturn;\n}\nconst platformDetectionRules = [\nplayer position x >= platform position x - player width / 2,\nplayer position x <=\nplatform position x + platform width - player width / 3,\nplayer position y + player height >= platform position y,\nplayer position y <= platform position y + platform height,\n];\nif (platformDetectionRules every(rule => rule)) {\nplayer position y = platform position y + player height;\nplayer velocity y = gravity;\n};\n});\ncheckpoints forEach((checkpoint, index, checkpoints) => {\nconst checkpointDetectionRules = [\nplayer position x >= checkpoint position x,\nplayer position y >= checkpoint position y,\nplayer position y + player",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "a496bd6e6460459ac62f4b76f022d20f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
    "source_type": "git_repo",
    "title": "Learn Intermediate OOP by Building a Platformer Game",
    "content": "width / 3, player position y + player height >= platform position y, player position y <= platform position y + platform height, ]; if (platformDetectionRules every(rule => rule)) { player position y = platform position y + player height; player velocity y = gravity; }; }); checkpoints forEach((checkpoint, index, checkpoints) => { const checkpointDetectionRules = [ player position x >= checkpoint position x, player position y >= checkpoint position y, player position y + playerheight <=\ncheckpoint position y + checkpoint height,\nisCheckpointCollisionDetectionActive,\n--fcc-editable-region--\n--fcc-editable-region--\n];\n});\n}\nconst keys = {\nrightKey: {\npressed: false\n},\nleftKey: {\npressed: false\n}\n};\nconst movePlayer = (key, xVelocity, isPressed) => {\nif ( isCheckpointCollisionDetectionActive) {\nplayer velocity x = 0;\nplayer velocity y = 0;\nreturn;\n}\nswitch (key) {\ncase \"ArrowLeft\":\nkeys leftKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x -= xVelocity;\nbreak;\ncase \"ArrowUp\":\ncase \" \":\ncase \"Spacebar\":\nplayer velocity y -= 8;\nbreak;\ncase \"ArrowRight\":\nkeys rightKey pressed = isPressed;\nif (xVelocity === 0) {\nplayer velocity x = xVelocity;\n}\nplayer velocity x += xVelocity;\n}\n}\nconst startGame = () => {\ncanvas style display = \"block\";\nstartScreen style display = \"none\";\nanimate();\n}\nconst showCheckpointScreen = (msg) => {\ncheckpointScreen style display = \"block\";\ncheckpointMessage textContent = msg;\nif (isCheckpointCollisionDetectionActive) {\nsetTimeout(() => (checkpointScreen style display = \"none\"), 2000);\n}\n};\nstartBtn addEventListener(\"click\", startGame);\nwindow addEventListener(\"keydown\", ({ key }) => {\nmovePlayer(key, 8, true);\n});\nwindow addEventListener(\"keyup\", ({ key }) => {\nmovePlayer(key, 0, false);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-intermediate-oop-by-building-a-platformer-game\\65b2bb4c279af3cd585ba777.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "7fafe12ff3db2c1475f548fbd1037fa8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f061d259bbebc37461080.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f061d259bbebc37461080\ntitle: Step 20\nchallengeType: 1\ndashedName: step-20\n--description--\nYou can access the values inside an array using the index of the value. An index is a number representing the position of the value in the array, starting from 0 for the first value.\nYou can access the value using bracket notation, such as array[0].\nUse console.log and bracket notation to print the first value in your rows array.\n--hints--\nYou should have a console.log() statement in your code.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log/);\nYou should access your rows array.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/rows/g), 2);\nYou should use bracket notation with your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\[/);\nYou should use bracket notation to access the first element of your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\[\\s*0\\s*\\]/);\nYou should log the first element of your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*rows\\[\\s*0\\s*]\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1362,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f061d259bbebc37461080.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb905ded943830b39d948355943added",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f07d231941bc11719f664.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f07d231941bc11719f664\ntitle: Step 21\nchallengeType: 1\ndashedName: step-21\n--description--\nArrays are special in that they are considered mutable. This means you can change the value at an index directly.\nFor example, this code would assign the number 25 to the second element in the array:\njs\nlet array = [1, 2, 3];\narray[1] = 25;\nconsole.log(array); // prints [1, 25, 3]\nUpdate the third element of your rows array to be the number 10. Then print the rows array to your console.\n--hints--\nYou should use bracket notation on the rows array again.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/rows\\[/g), 2)\nYou should access the third element of the rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\[\\s*2\\s*\\]/);\nYou should use the assignment operator on the third element of the rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\[\\s*2\\s*\\]\\s*=/);\nYou should assign the value 10 to the third element of your rows array.\njs\nassert.equal(rows[2], 10);\nYou should have a second console.log statement in your code.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log/g), 2);\nYou should log the rows array.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*rows\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nconsole.log(rows[0]);\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1580,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f07d231941bc11719f664.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "032dd39730095cdbfb7bab8a0ef7cd42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f09a2694b59c3a10ee304.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f09a2694b59c3a10ee304\ntitle: Step 23\nchallengeType: 1\ndashedName: step-23\n--description--\nFor now, remove your first console log and your rows[rows.length - 1] assignment. Leave the second rows log statement for later.\n--hints--\nYou should remove your console.log(rows[0]) statement.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console\\.log\\(\\s*rows\\[\\s*0\\s*\\]\\s*\\)/);\nYou should remove your rows[rows.length - 1] reassignment.\njs\nassert.notMatch(__helpers.removeJSComments(code), /rows\\[\\s*rows\\.length\\s*-\\s*1\\s*\\]/);\nYou should not remove your console.log(rows) statement.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*rows\\s*\\);/);\n--seed--\n--seed-contents--\njs\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--\nconsole.log(rows[0]);\nrows[rows.length - 1] = 10;\n--fcc-editable-region--\nconsole.log(rows);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f09a2694b59c3a10ee304.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "82c9b6be0678dea6ba1858ac5130abf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0a55847d6cc485f29ba5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f0a55847d6cc485f29ba5\ntitle: Step 26\nchallengeType: 1\ndashedName: step-26\n--description--\nA method in JavaScript is a function that's associated with certain values or objects. An example you've already encountered is the .log() method, which is part of the console object.\nArrays have their own methods, and the first you will explore is the .push() method. This allows you to \"push\" a value to the end of an array. Here is an example to add the number 12 to the end of an array:\njs\narray.push(12);\nUse .push() to add the string \"freeCodeCamp\" to the end of your rows array. Add this code before your console.log so you can see the change you made to your array.\n--hints--\nYou should use .push() in your code.\njs\nassert.match(__helpers.removeJSComments(code), /\\.push\\(/);\nYou should use the .push() method of your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(/);\nYou should pass the string \"freeCodeCamp\" to your .push() method.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(\\s*('|\")freeCodeCamp\\1\\s*\\);?/)\n--seed--\n--seed-contents--\n```js\nlet character = 'Hello';\nlet count = 8;\n--fcc-editable-region--\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nconsole.log(rows);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0a55847d6cc485f29ba5.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68ba897749615ca4ebbca61c2975315d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0c34aad72dc712b97624.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f0c34aad72dc712b97624\ntitle: Step 27\nchallengeType: 1\ndashedName: step-27\n--description--\nAnother method essential for this project is the .pop() method. It removes the last element from an array and returns that element.\nWhen a method returns a value, you can think of it as giving the value back to you, making it available for use in other parts of your code.\nCreate a new variable called popped and assign it the result of rows.pop(). Then, log popped to the console.\n--hints--\nYou should declare a variable called popped.\njs\nassert.match(__helpers.removeJSComments(code), /popped/);\nYou should use let to declare your variable called popped.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+popped/);\nYou should call the .pop() method.\njs\nassert.match(__helpers.removeJSComments(code), /\\.pop\\(\\s*\\)/);\nYou should call the .pop() method on your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.pop\\(\\s*\\)/);\nYou should log your popped variable.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*popped\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nlet character = 'Hello';\nlet count = 8;\n--fcc-editable-region--\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nrows.push(\"freeCodeCamp\");\nconsole.log(rows);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1391,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0c34aad72dc712b97624.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "64b3532128fcd84e19320323cf2c19ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0da9bf1035c9097af20a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f0da9bf1035c9097af20a\ntitle: Step 28\nchallengeType: 1\ndashedName: step-28\n--description--\nYou should have seen \"freeCodeCamp\" printed to the console. This is because .pop() returns the value that was removed from the array - and you pushed \"freeCodeCamp\" to the end of the array earlier.\nBut what does .push() return? Assign your existing rows.push() to a new pushed variable, and log it.\n--hints--\nYou should declare a pushed variable.\njs\nassert.match(__helpers.removeJSComments(code), /pushed/);\nYou should use let to declare your pushed variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+pushed/);\nYou should assign rows.push(\"freeCodeCamp\") to your pushed variable.\njs\nassert.equal(pushed, 4);\nYou should log your pushed variable.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*pushed\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--\nrows.push(\"freeCodeCamp\");\n--fcc-editable-region--\nlet popped = rows.pop();\nconsole.log(popped);\nconsole.log(rows);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0da9bf1035c9097af20a.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "267fb14eec998b003313d4ea733bc068",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0ee51d7460ce88cd248d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f0ee51d7460ce88cd248d\ntitle: Step 29\nchallengeType: 1\ndashedName: step-29\n--description--\nWere you expecting to see 4 in the console? .push() returns the new length of the array, after adding the value you give it.\nIt is important to be aware of what values a method returns. Take some time to experiment with .push() and .pop(). When you are ready, remove all of your .push() and .pop() calls, and your console.log statements.\n--hints--\nYou should not have a .push() call.\njs\nassert.notMatch(__helpers.removeJSComments(code), /\\.push\\(/);\nYou should not have a .pop() call.\njs\nassert.notMatch(__helpers.removeJSComments(code), /\\.pop\\(/);\nYou should not have any log statements.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console\\.log/);\nYou should not have a popped variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /popped/);\nYou should not have a pushed variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /pushed/);\n--seed--\n--seed-contents--\njs\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--\nlet pushed = rows.push(\"freeCodeCamp\");\nconsole.log(pushed);\nlet popped = rows.pop();\nconsole.log(popped);\nconsole.log(rows);\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1351,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0ee51d7460ce88cd248d.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f27c2ba5c436fcf6ba67b9e03c7adf52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f165270622fd4ec0da3f7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f165270622fd4ec0da3f7\ntitle: Step 31\nchallengeType: 1\ndashedName: step-31\n--description--\nDeclaring a variable with the let keyword allows it to be reassigned. This means you could change character later to be a completely different value.\nFor this project, you will not want to change these variable values. So instead, you should use const to declare them. const variables are special.\nFirst, a const variable cannot be reassigned like a let variable. This code would throw an error:\njs\nconst firstName = \"Naomi\";\nfirstName = \"Jessica\";\nA const variable also cannot be uninitialized. This code would throw an error:\njs\nconst firstName;\nReplace your let keywords with const.\n--hints--\nYou should use const to declare your character variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+character/);\nYou should use const to declare your count variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+count/);\nYou should use const to declare your rows variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+rows/);\nYou should not use let in your code.\njs\nassert.notMatch(__helpers.removeJSComments(code), /let/);\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nlet character = \"Hello\";\nlet count = 8;\nlet rows = [];\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1411,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f165270622fd4ec0da3f7.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75c609ba4c8ad51a57d17be206c87271",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0f980e98e8cf77f1ce31.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f0f980e98e8cf77f1ce31\ntitle: Step 30\nchallengeType: 1\ndashedName: step-30\n--description--\nChange your rows declaration to be assigned an empty array again.\nAlso, change your 'Hello' string to use double quotes again. Generally, it does not matter which of the two you prefer, but you will want to be consistent in that choice throughout your project.\n--hints--\nYour rows array should be empty.\njs\nassert.empty(rows);\nYour \"Hello\" string should use double quotes.\njs\nassert.match(__helpers.removeJSComments(code), /\"Hello\"/);\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 753,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f0f980e98e8cf77f1ce31.md",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b2e1cfeec5ebcd0a0219c6ac3973288",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f17294346b7d69e79db3d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f17294346b7d69e79db3d\ntitle: Step 32\nchallengeType: 1\ndashedName: step-32\n--description--\nYou are now ready to start building your pyramid generator. Your character variable will serve as the building block for the pyramid.\n\"Hello\" might not work very well for that. Change the value of character to be the hash character \"#\".\n--hints--\nYour character variable should be a hash symbol.\njs\nassert.equal(character, \"#\");\n--seed--\n--seed-contents--\njs\n--fcc-editable-region--\nconst character = \"Hello\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 615,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f17294346b7d69e79db3d.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "642d16af2bcab1fff28f5e7d5851d6de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f17d4e9f227d86e834abd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f17d4e9f227d86e834abd\ntitle: Step 33\nchallengeType: 1\ndashedName: step-33\n--description--\nTo generate a pyramid, you will need to create multiple rows. When you have to perform a task repeatedly until a condition is met, you will use a loop. There are many ways to write a loop.\nYou are going to start with a basic for loop. for loops use the following syntax:\njs\nfor (iterator; condition; iteration) {\nlogic;\n}\nIn the upcoming steps, you'll explore each component of a loop in detail. For now, construct a for loop that includes the terms \"iterator\", \"condition\", and \"iteration\" for the three components. Keep the loop body, the section within the curly braces {}, empty.\n--hints--\nYou should have a for loop.\njs\nassert.match(__helpers.removeJSComments(code), /for/);\nThe first component of your for loop should be the string \"iterator\".\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*('|\")iterator\\1/);\nThe second component of your for loop should be the string \"condition\".\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*('|\")iterator\\1\\s*;\\s*('|\")condition\\2/);\nThe third component of your for loop should be the string \"iteration\".\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*('|\")iterator\\1\\s*;\\s*('|\")condition\\2\\s*;\\s*('|\")iteration\\3\\s*\\)/);\nThe body of your for loop should be empty.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*('|\")iterator\\1\\s*;\\s*('|\")condition\\2\\s*;\\s*('|\")iteration\\3\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f17d4e9f227d86e834abd.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2c9ea49877082153923e0fdfe6ce7099",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1a00ac619ddc1e259a66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f1a00ac619ddc1e259a66\ntitle: Step 35\nchallengeType: 1\ndashedName: step-35\n--description--\nThe condition of a for loop tells the loop how many times it should iterate. When the condition becomes false, the loop will stop.\nIn JavaScript, a Boolean value can be either true or false. These are not strings - you will learn more about the difference later on.\nFor now, you will use the less than operator (<). This allows you to check if the value on the left is less than the value on the right. For example, count < 3 would evaluate to true if count is 2, and false if count is 4.\nReplace your \"condition\" string with a condition to check if i is less than count.\n--hints--\nYou should use the less than operator.\njs\nassert.match(__helpers.removeJSComments(code), /</);\nYou should use the less than operator to check if i is less than count.\njs\nassert.match(__helpers.removeJSComments(code), /i\\s*<\\s*count/);\nYour for loop should use i < count as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*0\\s*;\\s*i\\s*<\\s*count\\s*;/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; \"condition\"; \"iteration\") {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1a00ac619ddc1e259a66.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5f4c3a7c4da555432d3d9549ddf09ba0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f18f059fe0fda192ce394.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f18f059fe0fda192ce394\ntitle: Step 34\nchallengeType: 1\ndashedName: step-34\n--description--\nYour loop now needs a proper iterator. The iterator is a variable you can declare specifically in your for loop to control how the loop iterates or goes through your logic.\nIt is a common convention to use i as your iterator variable in a loop. A for loop allows you to declare this in the parentheses (). For example, here is a for loop that declares an index variable and assigns it the value 100.\n```js\nfor (let index = 100; \"second\"; \"third\") {\n}\n```\nReplace the string \"iterator\" with a let declaration for the variable i. Assign it the value 0 to start. This will give the i variable the value 0 the first time your loop runs.\n--hints--\nYou should use let to declare an i variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+i/);\nYou should assign 0 to your i variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+i\\s*=\\s*0/);\nYour for loop should start an i iterator at 0.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*0/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (\"iterator\"; \"condition\"; \"iteration\") {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1385,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f18f059fe0fda192ce394.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4e03032404e24a30dad4521fd30fe1e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1b6e60bd9edf902c81fd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f1b6e60bd9edf902c81fd\ntitle: Step 36\nchallengeType: 1\ndashedName: step-36\n--description--\nYour iteration statement will tell your loop what to do with the iterator after each run.\nWhen you reassign a variable, you can use the variable to reference the previous value before the reassignment. This allows you to do things like add three to an existing number. For example, bees = bees + 3 would increase the value of bees by three.\nUse that syntax to replace your \"iteration\" string with a reassignment statement that increases i by one.\n--hints--\nYou should add one to your i variable.\njs\nassert.match(__helpers.removeJSComments(code), /i\\s*\\+\\s*1/);\nYou should assign i + 1 back to your i variable.\njs\nassert.match(__helpers.removeJSComments(code), /i\\s*=\\s*i\\s*\\+\\s*1/);\nYour for loop should increase i by 1 on each iteration.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*0;\\s*i\\s*<\\s*count;\\s*i\\s*=\\s*i\\s*\\+\\s*1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; i < count; \"iteration\") {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1232,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1b6e60bd9edf902c81fd.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a6490479487d1ad792774734b6bd67b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1bf673487ae0bb25b900.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f1bf673487ae0bb25b900\ntitle: Step 37\nchallengeType: 1\ndashedName: step-37\n--description--\nYour loop should now run eight times. Inside the body of the loop, print the value of the i iterator and see what happens.\n--hints--\nYou should use console.log().\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log/)\nYou should log the value of i.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*i\\s*\\)/);\nYou should log the value of i in your for loop.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*0;\\s*i\\s*<\\s*count;\\s*i\\s*=\\s*i\\s*\\+\\s*1\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*i\\s*\\);?\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1bf673487ae0bb25b900.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd5857bbeaa887456e928552f474cc3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1cedf3676fe26122ebf6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f1cedf3676fe26122ebf6\ntitle: Step 38\nchallengeType: 1\ndashedName: step-38\n--description--\nYou should see the numbers zero through seven printed in your console, one per line. This will serve as the foundation for generating your pyramid.\nReplace your log statement with a statement to push i to your rows array.\n--hints--\nYou should not have a console.log call.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console/);\nYou should call .push() on your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(/);\nYou should push i to your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(\\s*i\\s*\\)/);\nYour .push() should happen in your for loop.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*0;\\s*i\\s*<\\s*count;\\s*i\\s*=\\s*i\\s*\\+\\s*1\\s*\\)\\s*\\{\\s*rows\\.push\\(\\s*i\\s*\\);?\\s*\\}/)\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nconsole.log(i);\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1146,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1cedf3676fe26122ebf6.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3719b5b3aa93f660460b3759adc17380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f20473aef47e9b8c9afc6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f20473aef47e9b8c9afc6\ntitle: Step 40\nchallengeType: 1\ndashedName: step-40\n--description--\nAdd a log statement to print the value of result. Depending on which console you use, you may not see anything printed.\n--hints--\nYou should add a console.log call.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(/);\nYou should log your result variable.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*result\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(i);\n}\nlet result = \"\"\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f20473aef47e9b8c9afc6.md",
      "source_type": "git_repo"
    },
    "token_count": 197,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bcd5eb2aa76fb6233c96b86c07aa0bb9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1e3f047bf4e403268713.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f1e3f047bf4e403268713\ntitle: Step 39\nchallengeType: 1\ndashedName: step-39\n--description--\nUnfortunately, now you cannot see what your loop is doing.\nUse let to declare a result variable, and assign it an empty string. An empty string is represented by quotation marks with nothing between them, such as \"\".\n--hints--\nYou should declare a result variable.\njs\nassert.match(__helpers.removeJSComments(code), /result/);\nYou should use let to declare your result variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+result/);\nYour result variable should be an empty string.\njs\nassert.equal(result, \"\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(i);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f1e3f047bf4e403268713.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3bb36c9b7e29cf14d4b3c6627bccefe9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f229d2dbe09ef2954a4a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f229d2dbe09ef2954a4a1\ntitle: Step 42\nchallengeType: 1\ndashedName: step-42\n--description--\nRemember in your previous loop that you used the addition operator + to increase the value of i by 1.\nYou can do a similar thing with a string value, by appending a new string to an existing string. For example, hello = hello + \" World\"; would add the string \" World\" to the existing string stored in the hello variable. This is called concatenation.\nIn your for...of loop, use the addition operator to concatenate the row value to the result value.\n--hints--\nYou should use the concatenation operator on your result variable.\njs\nassert.match(__helpers.removeJSComments(code), /(?:result\\s*\\+|\\+\\s*result)/);\nYou should concatenate row to your result variable.\njs\nassert.match(__helpers.removeJSComments(code), /result\\s*\\+\\s*row|row\\s*\\+\\s*result/);\nYou should assign the result of your concatenation back to the result variable.\njs\nassert.match(__helpers.removeJSComments(code), /result\\s*=\\s*(result\\s*\\+\\s*row|row\\s*\\+\\s*result);?/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(i);\n}\nlet result = \"\"\n--fcc-editable-region--\nfor (const row of rows) {\n}\n--fcc-editable-region--\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f229d2dbe09ef2954a4a1.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d00ea83d9c412dbb2e65fc8d03cf2c28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f207334fabaeac3269c38.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f207334fabaeac3269c38\ntitle: Step 41\nchallengeType: 1\ndashedName: step-41\n--description--\nTo manipulate the result string, you will use a different type of loop. Specifically, a for...of loop, which iterates over each item in an iterable object and temporarily assigns it to a variable.\nThe syntax for a for...of loop looks like:\n```js\nfor (const value of iterable) {\n}\n```\nNote that you can use const because the variable only exists for a single iteration, not during the entire loop.\nCreate a for...of loop to iterate through your rows array, assigning each value to a row variable.\n--hints--\nYou should use another for keyword.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/for/g), 2);\nYou should declare a row variable.\njs\nassert.match(__helpers.removeJSComments(code), /\\s+row\\s+/);\nYou should use const to declare your row variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+row\\s+/);\nYour for...of loop should declare your row variable.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*const\\s+row\\s+/);\nYour row variable should be extracted from rows using the of keyword.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*const\\s+row\\s+of\\s+rows\\s*\\)/);\nYour for...of loop body should be empty.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*const\\s+row\\s+of\\s+rows\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(i);\n}\nlet result = \"\"\n--fcc-editable-region--\n--fcc-editable-region--\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1729,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f207334fabaeac3269c38.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a7fab56c27a413f0afd181009da1229f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f255022991ef34ed0ee88.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f255022991ef34ed0ee88\ntitle: Step 44\nchallengeType: 1\ndashedName: step-44\n--description--\nPrinting numbers won't result in a visually appealing pyramid. Now that you're outputting the formatted content of your rows array, it's time to update your original loop.\nInstead of pushing i to the array, push the value of your character variable.\n--hints--\nYou should no longer push your i variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /rows\\.push\\(\\s*i\\s*\\)/);\nYou should push your character variable.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(\\s*character\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(i);\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 957,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f255022991ef34ed0ee88.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "37330e77259443e094256c0faaff3c08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f23b53db70af0f2620e78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f23b53db70af0f2620e78\ntitle: Step 43\nchallengeType: 1\ndashedName: step-43\n--description--\nNow all of your numbers are appearing on the same line. This will not work for creating a pyramid.\nYou will need to add a new line to each row. However, pressing the return key to insert a line break between quotes in JavaScript will result in a parsing error. Instead, you need to use the special escape sequence \\n, which is interpreted as a new line when the string is logged. For example:\njs\nlineOne = lineOne + \"\\n\" + lineTwo;\nUse a second addition operator to append a new line after the result and row values.\n--hints--\nYou should use the \\n escape sequence. Remember that it needs to be a string, so it is wrapped in quotes.\njs\nassert.match(__helpers.removeJSComments(code), /('|\")\\\\n\\1/);\nYou should concatenate your row variable to your result variable.\njs\nassert.match(__helpers.removeJSComments(code), /result\\s*\\+\\s*row\\s*\\+\\s*('|\")\\\\n\\1/);\nYou should concatenate the \\n escape sequence to your row variable.\njs\nassert.match(__helpers.removeJSComments(code), /row\\s*\\+\\s*('|\")\\\\n\\1/);\nYou should assign the entire concatenation back to your result variable.\njs\nassert.strictEqual(result, \"0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(i);\n}\nlet result = \"\"\n--fcc-editable-region--\nfor (const row of rows) {\nresult = result + row;\n}\n--fcc-editable-region--\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1619,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f23b53db70af0f2620e78.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4e686e5bc1ee984fae8833c06f520fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2a70ad6225fa503e71c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f2a70ad6225fa503e71c3\ntitle: Step 46\nchallengeType: 1\ndashedName: step-46\n--description--\nYou're getting closer! At this point, you're encountering what's known as an off-by-one error, a frequent problem in zero-based indexing languages like JavaScript.\nThe first index of your rows array is 0, which is why you start your for loop with i = 0. But repeating a string zero times results in nothing to print.\nTo fix this, add 1 to the value of i in your .repeat() call. Do not assign it back to i like you did in your loop conditions.\n--hints--\nYou should add 1 to i in your .repeat() method.\njs\nassert.match(__helpers.removeJSComments(code), /character\\.repeat\\(\\s*i\\s*\\+\\s*1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i))\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1075,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2a70ad6225fa503e71c3.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ef506374e91c5b285888c215440708e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f280dda5040f707c76b4a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f280dda5040f707c76b4a\ntitle: Step 45\nchallengeType: 1\ndashedName: step-45\n--description--\nNow you have a series of # characters, but the pyramid shape is still missing. Fortunately, the i variable represents the current \"row\" number in your loop, enabling you to use it for crafting a pyramid-like structure.\nTo achieve this, you will use the .repeat() method available to strings. This method accepts a number as an argument, specifying the number of times to repeat the target string. For example, using .repeat() to generate the string \"Code! Code! Code!\":\njs\nconst activity = \"Code! \";\nactivity.repeat(3);\nUse the .repeat() method on your character, and give it i for the number.\n--hints--\nYou should use the .repeat() method.\njs\nassert.match(__helpers.removeJSComments(code), /\\.repeat\\(/);\nYou should use the .repeat() method on your character variable.\njs\nassert.match(__helpers.removeJSComments(code), /character\\.repeat\\(/);\nYou should pass i to your .repeat() method.\njs\nassert.match(__helpers.removeJSComments(code), /character\\.repeat\\(\\s*i\\s*\\)/)\nYou should use the .repeat() method in the .push() method\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(\\s*character\\.repeat\\(\\s*i\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character);\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f280dda5040f707c76b4a.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6bcba2e52cfb2063ead4bcc4115e58ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2b6fd54ac1fc142804dd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f2b6fd54ac1fc142804dd\ntitle: Step 47\nchallengeType: 1\ndashedName: step-47\n--description--\nThe logic for formatting this pyramid is likely going to get complicated, which means it's a great time to extract that code into a function.\nA function is a block of code that can be reused throughout your application. Functions are declared with the following syntax:\n```js\nfunction name(parameter) {\n}\n```\nThe function keyword tells JavaScript that the name variable is going to be a function. parameter is a variable that represents a value that is passed into the function when it is used. A function may have as many, or as few, parameters as you'd like. Like a for loop, the space between the curly braces is the function body.\nDeclare a padRow function. Do not create any parameter variables yet. The function body should be empty. Remember that you need to use camel case for your naming convention.\n--hints--\nYou should use the function keyword.\njs\nassert.match(__helpers.removeJSComments(code), /function/);\nYou should declare a padRow function.\njs\nassert.isFunction(padRow);\nYour padRow() function should not have any parameters.\njs\nassert.match(__helpers.removeJSComments(code), /padRow\\s*\\(\\s*\\)/);\nYour padRow() function should have an empty body.\njs\nassert.match(__helpers.removeJSComments(code), /padRow\\s*\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1781,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2b6fd54ac1fc142804dd.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "62fe0c4fea8ae801694c322d33573d98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2eccfe3f820304af1b39.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f2eccfe3f820304af1b39\ntitle: Step 64\nchallengeType: 1\ndashedName: step-64\n--description--\nIn order to know how to format a row, your padRow function will need to know which row number you are on, and how many rows in total are being generated.\nThe best way to do this is by creating function parameters for them. Give your padRow function a rowNumber and rowCount parameter. Multiple parameters are separated by a comma:\n```js\nfunction name(first, second) {\n}\n```\n--hints--\nYour padRow function should have a rowNumber parameter.\njs\nassert.match(__helpers.removeJSComments(code), /function\\s+padRow\\s*\\(\\s*rowNumber/);\nYou should add a comma after your rowNumber parameter.\njs\nassert.match(__helpers.removeJSComments(code), /function\\s+padRow\\s*\\(\\s*rowNumber\\s*,\\s*/);\nYour padRow function should have a rowCount parameter.\njs\nassert.match(__helpers.removeJSComments(code), /function\\s+padRow\\s*\\(\\s*rowNumber\\s*,\\s*rowCount\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1359,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2eccfe3f820304af1b39.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "df46da5aa332823809d4abe6a7246d35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f34626216270c682e2f7b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f34626216270c682e2f7b\ntitle: Step 66\nchallengeType: 1\ndashedName: step-66\n--description--\nA function call allows you to actually use a function. You may not have been aware of it, but the methods like .push() that you have been using have been function calls.\nA function is called by referencing the function's name, and adding (). Here's how to call a test function:\njs\ntest();\nReplace the character.repeat(i + 1) in your .push() call with a function call for your padRow function. Do not add any arguments to it yet.\n--hints--\nYou should not use i + 1 in your push call.\njs\nassert.notMatch(__helpers.removeJSComments(code), /repeat\\(\\s*i\\s*\\+\\s*1\\s*\\)/);\nYou should not use character.repeat in your .push() call.\njs\nassert.notMatch(__helpers.removeJSComments(code), /push\\(\\s*character/);\nYou should call padRow in your .push() call.\njs\nassert.match(__helpers.removeJSComments(code), /push\\(\\s*?padRow\\((.+?)?\\)\\)/);\nYou should not have arguments in your padRow call.\njs\nassert.match(__helpers.removeJSComments(code), /push\\(\\s*?padRow\\(\\s*?\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn character.repeat(rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f34626216270c682e2f7b.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d55d655eb35294cd71b925e80fb8afbc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2fbd45b520046cac68e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f2fbd45b520046cac68e8\ntitle: Step 65\nchallengeType: 1\ndashedName: step-65\n--description--\nRemember in an earlier step, you learned about return values. A function can return a value for your application to consume separately.\nIn a function, the return keyword is used to specify a return value. For example, this function would return the value given to the first parameter:\njs\nfunction name(parameter) {\nreturn parameter;\n}\nUse the return keyword to return the value of the character variable, repeated rowNumber times.\n--hints--\nYou should use the .repeat() method.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/\\.repeat\\(/g), 2);\nYou should use the .repeat() method on your character variable.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/character\\.repeat\\(/g), 2);\nYou should pass rowNumber to your .repeat() call.\njs\nassert.match(__helpers.removeJSComments(code), /character\\.repeat\\(\\s*rowNumber\\s*\\)/);\nYou should use the return keyword.\njs\nassert.match(__helpers.removeJSComments(code), /return/);\nYou should return the result of your .repeat() call.\njs\nassert.equal(padRow(3), \"###\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(rowNumber, rowCount) {\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1608,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f2fbd45b520046cac68e8.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de5ce5281345ae266056fc2466d758c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f34e99571070d56d2f231.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f34e99571070d56d2f231\ntitle: Step 67\nchallengeType: 1\ndashedName: step-67\n--description--\nYour padRow function has two parameters which you defined. Values are provided to those parameters when a function is called.\nThe values you provide to a function call are referred to as arguments, and you pass arguments to a function call. Here's a function call with \"Hello\" passed as an argument:\njs\ntest(\"Hello\");\nPass i + 1 and count as the arguments to your padRow call. Like parameters, arguments are separated by a comma.\n--hints--\nYou should pass i + 1 to your padRow() call.\njs\nassert.match(__helpers.removeJSComments(code), /push\\(\\s*padRow\\(\\s*i\\s*\\+\\s*1/);\nYou should have a comma after your i + 1 argument.\njs\nassert.match(__helpers.removeJSComments(code), /push\\(\\s*padRow\\(\\s*i\\s*\\+\\s*1\\s*,\\s*/);\nYou should pass count as your second argument.\njs\nassert.match(__helpers.removeJSComments(code), /push\\(\\s*padRow\\(\\s*i\\s*\\+\\s*1\\s*,\\s*count\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn character.repeat(rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(padRow())\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1452,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f34e99571070d56d2f231.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7e49a4efb3ab80ac116ac3bbaf50487e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f374d532dc41189cc9cc2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f374d532dc41189cc9cc2\ntitle: Step 69\nchallengeType: 1\ndashedName: step-69\n--description--\nNow it is time for a bit of math. Consider a three-row pyramid. If we want it centered, it would look something like:\n```md\n··#··\n·###·\n```\nEmpty spaces have been replaced with interpuncts, or middle dots, for readability. If you extrapolate the pattern, you can see that the spaces at the beginning and end of a row follow a pattern.\nUpdate your blank space strings to be repeated rowCount - rowNumber times.\nOpen up the console to see the result.\n--hints--\nYou should call .repeat() on your \" \" strings to repeat them rowCount - rowNumber times.\njs\nassert.equal(padRow(1, 3), \"  #  \");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(rowNumber, rowCount) {\nreturn \" \" + character.repeat(rowNumber) + \" \";\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(padRow(i + 1, count));\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f374d532dc41189cc9cc2.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "77229f430858a4f57520612b3c722df7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f359af3e32e0f1a6880b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f359af3e32e0f1a6880b7\ntitle: Step 68\nchallengeType: 1\ndashedName: step-68\n--description--\nYou should now see the same bunch of characters in your console. Your padRow function is doing the exact same thing you were doing earlier, but now it's in a reusable section of its own.\nUse the addition operator to concatenate a single space \" \" to the beginning and end of your repeated character string.\nRemember that you can use the + operator to concatenate strings like this:\njs\n\" \" + \"string\"\n--hints--\nYou should concatenate a single space to the beginning of your returned value.\njs\nassert.match(padRow(1, 1), /^\\s/);\nYou should concatenate a single space to the end of your returned value.\njs\nassert.match(padRow(1, 1), /\\s$/);\nYour padRow() function should return the repeated character series with a space before and after the series.\njs\nassert.equal(padRow(1, 1), \" # \");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(rowNumber, rowCount) {\nreturn character.repeat(rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(padRow(i + 1, count));\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1354,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f359af3e32e0f1a6880b7.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9726fd6a05391f7e045135c1876a74f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f38c34a4de6141c0c369f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f38c34a4de6141c0c369f\ntitle: Step 71\nchallengeType: 1\ndashedName: step-71\n--description--\nYour pyramid generator now functions as expected. But this is an excellent opportunity to further explore the code you have written.\nThe addition operator is not the only way to add values to a variable. The addition assignment operator can be used as shorthand to mean \"take the original value of the variable, add this value, and assign the result back to the variable.\" For example, these two statements would yield the same result:\njs\ntest = test + 1;\ntest += 1;\nUpdate your iteration statement in the for loop to use addition assignment.\n--hints--\nYour for loop should not use i = i + 1;\njs\nassert.notMatch(__helpers.removeJSComments(code), /i\\s*=\\s*i\\s*\\+\\s*1/);\nYour for loop should use addition assignment with i.\njs\nassert.match(__helpers.removeJSComments(code), /i\\s*\\+=\\s*1/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\n--fcc-editable-region--\nrows.push(padRow(i + 1, count));\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f38c34a4de6141c0c369f.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ed87d66de2d09440d93ea4c70b7e940c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f383d4c772c12ff59904b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f383d4c772c12ff59904b\ntitle: Step 70\nchallengeType: 1\ndashedName: step-70\n--description--\nYou can pass full expressions as an argument. The function will receive the result of evaluating that expression. For example, these two function calls below would yield the same result. (Note that the order of operations rule PEMDAS—Parenthesis, Exponents, Multiplication, Division, Addition, Subtraction—applies):\njs\ntest(2 * 3 + 1);\ntest(7);\nLooking at the pattern again:\n```md\n··#··\n·###·\n```\nUpdate the character value to be repeated 2 * rowNumber - 1 times.\nOpen up the console again to see the updated result.\n--hints--\nYour function should pass 2 * rowNumber - 1 to your .repeat() call.\njs\nassert.equal(padRow(4, 5), \" ####### \");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(rowNumber) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(padRow(i + 1, count));\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1274,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f383d4c772c12ff59904b.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "410fe285cd15b87676dfd4c549a189d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3915b41a441537ec9f5e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f3915b41a441537ec9f5e\ntitle: Step 72\nchallengeType: 1\ndashedName: step-72\n--description--\nBecause you are only increasing i by 1, you can use the increment operator ++. This operator increases the value of a variable by 1, updating the assignment for that variable. For example, test would become 8 here:\njs\nlet test = 7;\ntest++;\nReplace your addition assignment with the increment operator for your loop iteration.\n--hints--\nYour for loop should not use addition assignment with i.\njs\nassert.notMatch(__helpers.removeJSComments(code), /i\\s*\\+=\\s*1/);\nYour for loop should use the increment operator on i.\njs\nassert.match(__helpers.removeJSComments(code), /i\\s*\\+\\+/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i += 1) {\n--fcc-editable-region--\nrows.push(padRow(i + 1, count));\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1230,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3915b41a441537ec9f5e.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "29e0e172428a01dfc22c13f2241e0d46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f39b444fd6f16d1e49c1f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f39b444fd6f16d1e49c1f\ntitle: Step 73\nchallengeType: 1\ndashedName: step-73\n--description--\nRather than having to pass i + 1 to your padRow call, you could instead start your loop at 1. This would allow you to create a one-indexed loop.\nUpdate your iterator to start at 1 instead of 0.\n--hints--\nYour for loop should initialise i at 1.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*1/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i++) {\nrows.push(padRow(i + 1, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 943,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f39b444fd6f16d1e49c1f.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "39c51156e17ead40af8191c35f694fb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3ce51f70571e1c5227c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f3ce51f70571e1c5227c8\ntitle: Step 76\nchallengeType: 1\ndashedName: step-76\n--description--\nComments can be helpful for explaining why your code takes a certain approach, or leaving to-do notes for your future self.\nIn JavaScript, you can use // to leave a single-line comment in your code.\nAdd a single-line comment above your for loop to remind yourself to change the code to a different kind of loop.\n--hints--\nYou should start a single-line comment with //.\njs\nassert.match(code, /\\/\\//);\nYour single-line comment should be at least five characters long.\njs\nassert.match(code, /\\/\\/.{5,}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1119,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3ce51f70571e1c5227c8.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "605a29105d4127a90e76f5b7a418a37d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3b664421471aa595170f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f3b664421471aa595170f\ntitle: Step 74\nchallengeType: 1\ndashedName: step-74\n--description--\nThe pyramid looks a little funny now. Because you are starting the loop at 1 instead of 0, you do not need to add one to i when you pass it to padRow.\nUpdate the first argument of your padRow call to be i.\n--hints--\nYou should not pass i + 1 to padRow.\njs\nassert.notMatch(__helpers.removeJSComments(code), /padRow\\(\\s*i\\s*\\+\\s*1/);\nYou should pass i to padRow.\njs\nassert.match(__helpers.removeJSComments(code), /padRow\\(\\s*i\\s*,/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 1; i < count; i++) {\nrows.push(padRow(i + 1, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3b664421471aa595170f.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68adfdbd48e774f2a30036b30938ceef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3ba3cceef11b6ba08b59.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f3ba3cceef11b6ba08b59\ntitle: Step 75\nchallengeType: 1\ndashedName: step-75\n--description--\nUnfortunately, now the bottom of the pyramid has disappeared. This is because you have created another off-by-one error.\nYour original loop went for i values from 0 to 7, because count is 8 and your condition requires i to be less than count. Your loop is now running for i values from 1 to 7.\nYour loop needs to be updated to run when i is 8, too. Looking at your logic, this means your loop should run when i is less than or equal to count. You can use the less than or equal to operator <= for this.\nUpdate your loop condition to run while i is less than or equal to count.\n--hints--\nYour for loop should not check if i is less than count.\njs\nassert.notMatch(__helpers.removeJSComments(code), /i\\s*<\\s*count/);\nYour for loop should check if i is less than or equal to count.\njs\nassert.match(__helpers.removeJSComments(code), /i\\s*<=\\s*count/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\nfor (let i = 1; i < count; i++) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3ba3cceef11b6ba08b59.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aa5b56ab99cf3253eb045239a2924dad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f415b76859a2736771607.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f415b76859a2736771607\ntitle: Step 78\nchallengeType: 1\ndashedName: step-78\n--description--\nYour pyramid has disappeared again. That's okay - that is to be expected.\nBefore you create your new loop, you need to learn about if statements. An if statement allows you to run a block of code only when a condition is met. They use the following syntax:\njs\nif (condition) {\nlogic\n}\nCreate an if statement with the boolean true as the condition. In the body, print the string \"Condition is true\".\n--hints--\nYou should create an if statement.\njs\nassert.match(__helpers.removeJSComments(code), /if/);\nYour if statement should have true as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*true\\s*\\)/);\nYour if body should log \"Condition is true\".\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*true\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*(\"|')Condition is true\\1\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f415b76859a2736771607.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "942f876f9aedaf42251cc3777a56bab6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3dd626be3a1ffe27e5d1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f3dd626be3a1ffe27e5d1\ntitle: Step 77\nchallengeType: 1\ndashedName: step-77\n--description--\nJavaScript also has support for multi-line comments. A multi-line comment starts with /* and ends with */.\nUnlike a single-line comment, a multi-line comment will encapsulate multiple lines.\nUse /* and */ to turn your current for loop, including the body, into a multi-line comment.\n--hints--\nYou should start a multi-line comment with /*.\njs\nassert.match(code, /\\/\\*/);\nYou should end a multi-line comment with */.\njs\nassert.match(code, /\\*\\//);\nYour entire for loop should be commented out.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.lengthOf(stripped.match(/for/g), 1);\nassert.notMatch(stripped, /rows\\.push/);\nassert.notMatch(stripped, /i <= count/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1345,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f3dd626be3a1ffe27e5d1.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d5b1067b130b5235b676b7332ed6b5a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4377a359972c521d3f4b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4377a359972c521d3f4b\ntitle: Step 79\nchallengeType: 1\ndashedName: step-79\n--description--\nYou'll see the string printed in the console, because true is in fact true.\nChange the condition of your if statement to the boolean false.\n--hints--\nYour if condition should have false as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*false\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nif (true) {\nconsole.log(\"Condition is true\");\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 981,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4377a359972c521d3f4b.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f57952c6da12aa9fe592dee241672a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f44f10ea40f300b896a5e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f44f10ea40f300b896a5e\ntitle: Step 84\nchallengeType: 1\ndashedName: step-84\n--description--\nNow that you have practiced working with if...else if...else statements, you can remove them from your code.\nOnce you complete that, use let to declare a continueLoop variable and assign it the boolean false. Then use let to declare a done variable and assign it the value 0.\n--hints--\nYou should not have an if statement.\njs\nassert.notMatch(__helpers.removeJSComments(code), /if\\s*\\(/);\nYou should not have an else if statement.\njs\nassert.notMatch(__helpers.removeJSComments(code), /else\\s+if\\s*\\(/);\nYou should not have an else statement.\njs\nassert.notMatch(__helpers.removeJSComments(code), /else\\s*\\{/);\nYou should use let to declare a continueLoop variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+continueLoop/);\nYour continueLoop variable should have the value false.\njs\nassert.isFalse(continueLoop);\nYou should use let to declare a done variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+done/);\nYour done variable should have the value 0.\njs\nassert.strictEqual(done, 0);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nif (\"\") {\nconsole.log(\"Condition is true\");\n} else if (5 < 10) {\nconsole.log(\"5 is less than 10\");\n} else {\nconsole.log(\"This is the else block\");\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1900,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f44f10ea40f300b896a5e.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6e495643316daef1909cad994eb9a2e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4455f457ef2e3ec6920f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4455f457ef2e3ec6920f\ntitle: Step 80\nchallengeType: 1\ndashedName: step-80\n--description--\nNow the string is no longer printing, because false is not true. But what about other values?\nTry changing the condition to the string \"false\".\n--hints--\nYour if statement should have the string \"false\" as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*('|\")false\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nif (false) {\nconsole.log(\"Condition is true\");\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1006,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4455f457ef2e3ec6920f.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "686aaf63e8d3211eb77aca527f2cc0e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f447efc0e722f016c1be0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f447efc0e722f016c1be0\ntitle: Step 81\nchallengeType: 1\ndashedName: step-81\n--description--\nThe text has appeared again! This is because \"false\" is a string, which when evaluated to a boolean becomes true. This means \"false\" is a truthy value.\nA truthy value is a value that is considered true when evaluated as a boolean. Most of the values you encounter in JavaScript will be truthy.\nA falsy value is the opposite - a value considered false when evaluated as a boolean. JavaScript has a defined list of falsy values. Some of them include false, 0, \"\", null, undefined, and NaN.\nTry changing your if condition to an empty string \"\", which is a falsy value.\n--hints--\nYour if statement should have \"\" as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*(\"|')\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nif (\"false\") {\nconsole.log(\"Condition is true\");\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f447efc0e722f016c1be0.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f97ad84cec8d6aaf2fd05b00274bac77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4717a689e1cfa232e357\ntitle: Step 92\nchallengeType: 0\ndashedName: step-92\n--description--\nLike you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints--\nYour evalFormula function should use the return keyword js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 180
  },
  {
    "id": "d7bc903d8ccf94e89dd3c512e87ddae7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 180
  },
  {
    "id": "91d1a2fa696eb36415cf453eec69e0e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 180
  },
  {
    "id": "182b66e446ddd4a84ea37bb78599b207",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 3,
    "total_chunks": 180
  },
  {
    "id": "fa6a682aa911317c95799cb06285cbba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 608,
    "chunk_index": 4,
    "total_chunks": 180
  },
  {
    "id": "197ed37fb5d8ce10d731d32b4ae3ec20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 638,
    "chunk_index": 5,
    "total_chunks": 180
  },
  {
    "id": "bed7997ba6393f5913e860024635bc42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 646,
    "chunk_index": 6,
    "total_chunks": 180
  },
  {
    "id": "8d4bf8fcbacb09c643a1b0f616ded88f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 7,
    "total_chunks": 180
  },
  {
    "id": "6f99631dbbb4d925266b5f0bbd1a73e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 698,
    "chunk_index": 8,
    "total_chunks": 180
  },
  {
    "id": "d7c89a1c55266e363f6e2bba615a0e55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 713,
    "chunk_index": 9,
    "total_chunks": 180
  },
  {
    "id": "5c23f2dbd4f3ec53c3a16aaff0804638",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 715,
    "chunk_index": 10,
    "total_chunks": 180
  },
  {
    "id": "ce8f48d13e3d3374f46682c3bf7e175a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 745,
    "chunk_index": 11,
    "total_chunks": 180
  },
  {
    "id": "998d048d47fe89504e0c1220e154e643",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Like you did with your highPrecedence() function, your evalFormula() function needs to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/);\nYour return statement should check if functionExpanded is equal to x",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 762,
    "chunk_index": 12,
    "total_chunks": 180
  },
  {
    "id": "cb426ffa82b5daaa1aa61e3ad541abde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 747,
    "chunk_index": 13,
    "total_chunks": 180
  },
  {
    "id": "b635009dac78bc8450f6d2895c9a7736",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ensure it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 809,
    "chunk_index": 14,
    "total_chunks": 180
  },
  {
    "id": "57cc7f4615e152f3df5d95c65ba1a2d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 829,
    "chunk_index": 15,
    "total_chunks": 180
  },
  {
    "id": "ff3eda63206c9f2ae93e6723328c8c75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 832,
    "chunk_index": 16,
    "total_chunks": 180
  },
  {
    "id": "565801bdb4ab185595baec610e45bdb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 17,
    "total_chunks": 180
  },
  {
    "id": "7799d9331da7359070577cdaff20158a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 855,
    "chunk_index": 18,
    "total_chunks": 180
  },
  {
    "id": "e0e55dc9e7189b4a1507acdf72420b86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 859,
    "chunk_index": 19,
    "total_chunks": 180
  },
  {
    "id": "63c7d60486e29cd045a5c691ee0bd9a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 893,
    "chunk_index": 20,
    "total_chunks": 180
  },
  {
    "id": "b5b69030995da4b7d69bdc807a97f528",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 914,
    "chunk_index": 21,
    "total_chunks": 180
  },
  {
    "id": "a716f735f841d0bbd247ce59cb6e33dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 924,
    "chunk_index": 22,
    "total_chunks": 180
  },
  {
    "id": "19935ff5fefa2b2f501944406e65b2cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 989,
    "chunk_index": 23,
    "total_chunks": 180
  },
  {
    "id": "5c88fdafa21b6792452410466c2721f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1051,
    "chunk_index": 24,
    "total_chunks": 180
  },
  {
    "id": "01f8855ec5f66593ba57472127e6afa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1132,
    "chunk_index": 25,
    "total_chunks": 180
  },
  {
    "id": "77038c30dc374a5d33ad9e06c8700ba5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1152,
    "chunk_index": 26,
    "total_chunks": 180
  },
  {
    "id": "4f19836eefe5e280cf2ddefb21b94d9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1165,
    "chunk_index": 27,
    "total_chunks": 180
  },
  {
    "id": "25eed883218d88e5fb95fb345d4bed0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1232,
    "chunk_index": 28,
    "total_chunks": 180
  },
  {
    "id": "0be69aff413d0b96d1c7401a92690c04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1266,
    "chunk_index": 29,
    "total_chunks": 180
  },
  {
    "id": "6c95a93d47e4022ef5f34af7f7c735b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1296,
    "chunk_index": 30,
    "total_chunks": 180
  },
  {
    "id": "bb05c967f176b425791b79d5d926bdcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1304,
    "chunk_index": 31,
    "total_chunks": 180
  },
  {
    "id": "270f6ebaffa5ed0b5eae9e75a6d389ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1319,
    "chunk_index": 32,
    "total_chunks": 180
  },
  {
    "id": "401e768213df3f203a8d975ae0eb8fae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1356,
    "chunk_index": 33,
    "total_chunks": 180
  },
  {
    "id": "15584ca4e35a7018baff9da7ae48a80c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1371,
    "chunk_index": 34,
    "total_chunks": 180
  },
  {
    "id": "ec48e78365beb48699b98d07801db932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1373,
    "chunk_index": 35,
    "total_chunks": 180
  },
  {
    "id": "e757cdb5e202dc65a8b87fc61067e30c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1403,
    "chunk_index": 36,
    "total_chunks": 180
  },
  {
    "id": "0b6631e9b34b8aa6de85b49b2bead3c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1408,
    "chunk_index": 37,
    "total_chunks": 180
  },
  {
    "id": "97095f14db6517957b781e838ece3eaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it has evaluated and replaced everything Use a ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/);\nYour return statement should use a ternary operator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1437,
    "chunk_index": 38,
    "total_chunks": 180
  },
  {
    "id": "73e21d7906a8f55be1219a9776fc3532",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ternary to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1432,
    "chunk_index": 39,
    "total_chunks": 180
  },
  {
    "id": "abde6d546b3c9fa1662e284513b2bdbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1493,
    "chunk_index": 40,
    "total_chunks": 180
  },
  {
    "id": "b67cefbc0048bfed898df86a8cb86475",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1513,
    "chunk_index": 41,
    "total_chunks": 180
  },
  {
    "id": "a559d0b659505198090175f4e70a7452",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1516,
    "chunk_index": 42,
    "total_chunks": 180
  },
  {
    "id": "7d7951d35e34a1cfe02d8f4976bb8cfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1534,
    "chunk_index": 43,
    "total_chunks": 180
  },
  {
    "id": "2c084e22cbafb6c08bb0893035ba0bad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1539,
    "chunk_index": 44,
    "total_chunks": 180
  },
  {
    "id": "2f424d826998ff1603f93fd34a192a0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1543,
    "chunk_index": 45,
    "total_chunks": 180
  },
  {
    "id": "fffe984ed01813a5e203e2dd3b3bdc42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1577,
    "chunk_index": 46,
    "total_chunks": 180
  },
  {
    "id": "e4ad2bbc69683bcd3773c64011e507aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1598,
    "chunk_index": 47,
    "total_chunks": 180
  },
  {
    "id": "abad1759eb5e610965e589eda1ba8b49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1608,
    "chunk_index": 48,
    "total_chunks": 180
  },
  {
    "id": "39a6c1e6934af57163bcf75d09756280",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1673,
    "chunk_index": 49,
    "total_chunks": 180
  },
  {
    "id": "16e3d0b3f012317c60713529bd2ef5a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1735,
    "chunk_index": 50,
    "total_chunks": 180
  },
  {
    "id": "bc576e10ea1b0605ff9713269dbaf4e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1816,
    "chunk_index": 51,
    "total_chunks": 180
  },
  {
    "id": "afb50dbd3d95080cea6a82d15298b7cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1836,
    "chunk_index": 52,
    "total_chunks": 180
  },
  {
    "id": "d9feecc964a512af3f32aa5aa202f657",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1849,
    "chunk_index": 53,
    "total_chunks": 180
  },
  {
    "id": "07852f709a251c2eff6921d2c4c3d174",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1916,
    "chunk_index": 54,
    "total_chunks": 180
  },
  {
    "id": "5f4a3717c0a3779ca5e6b5fac50a64c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1950,
    "chunk_index": 55,
    "total_chunks": 180
  },
  {
    "id": "8b27bceb4dfd2b121cf40ca6ad4fcb71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1980,
    "chunk_index": 56,
    "total_chunks": 180
  },
  {
    "id": "f3dde65355585e33b143206b10a2e350",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 1988,
    "chunk_index": 57,
    "total_chunks": 180
  },
  {
    "id": "a51d38a2ab961dbbf8f34cd1865a07eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2003,
    "chunk_index": 58,
    "total_chunks": 180
  },
  {
    "id": "31e93876c18bc36843e52da256df7859",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2040,
    "chunk_index": 59,
    "total_chunks": 180
  },
  {
    "id": "d3ae4ee9b84ed8cb14fea1e94075cc87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2055,
    "chunk_index": 60,
    "total_chunks": 180
  },
  {
    "id": "5f432091c79e7654bb07291fc50d520e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2057,
    "chunk_index": 61,
    "total_chunks": 180
  },
  {
    "id": "8e9f297a2d33492fa1dcf333a7efbbdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2087,
    "chunk_index": 62,
    "total_chunks": 180
  },
  {
    "id": "9ce9520e9493d7cb8023030f7f8cac17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2092,
    "chunk_index": 63,
    "total_chunks": 180
  },
  {
    "id": "e85d7c316edf33c6d4f65f21622045de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2113,
    "chunk_index": 64,
    "total_chunks": 180
  },
  {
    "id": "d97414730796f72899fb652a60a61700",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to the original string x If it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/);\nIf the ternary condition is true, your evalFormula() should return functionExpanded",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2131,
    "chunk_index": 65,
    "total_chunks": 180
  },
  {
    "id": "ddeeca9d1e4fa72014c9281401259b72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2122,
    "chunk_index": 66,
    "total_chunks": 180
  },
  {
    "id": "420ee95a2d94d3dad508aad69b13b928",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "is, return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2184,
    "chunk_index": 67,
    "total_chunks": 180
  },
  {
    "id": "1c259ff05927dc21d849caa4c7a9b2cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2203,
    "chunk_index": 68,
    "total_chunks": 180
  },
  {
    "id": "c8305e22e494774fdf7c9d4f7a547bd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2206,
    "chunk_index": 69,
    "total_chunks": 180
  },
  {
    "id": "3c1008f8392c819ef56d3fd5f8f6b6db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2224,
    "chunk_index": 70,
    "total_chunks": 180
  },
  {
    "id": "6cf9be6760bcc36ef3cb6ffb6949624e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2229,
    "chunk_index": 71,
    "total_chunks": 180
  },
  {
    "id": "a672de1eca7eb1a53a6eb89d1bde1d62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2233,
    "chunk_index": 72,
    "total_chunks": 180
  },
  {
    "id": "e43077b6c3889fae499d62f6db2cca53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2267,
    "chunk_index": 73,
    "total_chunks": 180
  },
  {
    "id": "085bee9b3d192453baaef1d74637d568",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2288,
    "chunk_index": 74,
    "total_chunks": 180
  },
  {
    "id": "3717549a630f32ccee952a45868d7d0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2298,
    "chunk_index": 75,
    "total_chunks": 180
  },
  {
    "id": "1ca2815f7a41a9224b6858392dd13fd7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2363,
    "chunk_index": 76,
    "total_chunks": 180
  },
  {
    "id": "b9d84e4a8f261d2a65dfa37805df7515",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2425,
    "chunk_index": 77,
    "total_chunks": 180
  },
  {
    "id": "a3e2893a3c373b1c460376ffe50ccd17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2506,
    "chunk_index": 78,
    "total_chunks": 180
  },
  {
    "id": "ac7e9001be532d4d4c7d0e3d8015f881",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2526,
    "chunk_index": 79,
    "total_chunks": 180
  },
  {
    "id": "8d375ce5e7d0ef38ef441eb1ceb64352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2539,
    "chunk_index": 80,
    "total_chunks": 180
  },
  {
    "id": "e8f0ae627e1ca6ef4b1ef6c45d9c50e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2606,
    "chunk_index": 81,
    "total_chunks": 180
  },
  {
    "id": "d01cb39bc5ad43d60e6db3911ce0413a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2640,
    "chunk_index": 82,
    "total_chunks": 180
  },
  {
    "id": "5fe783d269cf8f4970048b27752e531c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2670,
    "chunk_index": 83,
    "total_chunks": 180
  },
  {
    "id": "a2284cb0e34bdeedb2a6dd754d3d2c97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2678,
    "chunk_index": 84,
    "total_chunks": 180
  },
  {
    "id": "fce5b0ef47f5d579bbe538e1af1471e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2693,
    "chunk_index": 85,
    "total_chunks": 180
  },
  {
    "id": "5d62545660171ea1ad3fc8a32a3d5fa8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2730,
    "chunk_index": 86,
    "total_chunks": 180
  },
  {
    "id": "b62619b4f156c78f0958e1ef092358e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2745,
    "chunk_index": 87,
    "total_chunks": 180
  },
  {
    "id": "a6059e4b20a136bcd4d8123908f2fed7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2747,
    "chunk_index": 88,
    "total_chunks": 180
  },
  {
    "id": "78a0908e4d0eaabb0a0fb7d59d463175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2777,
    "chunk_index": 89,
    "total_chunks": 180
  },
  {
    "id": "2133822216f9648121b1e76ca4db7d81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2782,
    "chunk_index": 90,
    "total_chunks": 180
  },
  {
    "id": "b9acb6e5df9cd0edf95f889ee25eb7ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2803,
    "chunk_index": 91,
    "total_chunks": 180
  },
  {
    "id": "00c686c67eece04eb91388ca2941fd54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return functionExpanded, otherwise return the result of calling evalFormula() again with functionExpanded and cells as arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/);\nIf the ternary condition is false, your evalFormula() should return the result of calling evalFormula()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2831,
    "chunk_index": 92,
    "total_chunks": 180
  },
  {
    "id": "fee9f7bbc29132aa732cb01179809a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arguments --hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2814,
    "chunk_index": 93,
    "total_chunks": 180
  },
  {
    "id": "143990e689e6c00b7682971d5709f716",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2876,
    "chunk_index": 94,
    "total_chunks": 180
  },
  {
    "id": "ca01436fd63b544b621bd64cd5f708aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2894,
    "chunk_index": 95,
    "total_chunks": 180
  },
  {
    "id": "b02f74bef2604d81de063fa6a577d74f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2897,
    "chunk_index": 96,
    "total_chunks": 180
  },
  {
    "id": "052f3d54cbbf919a8426d471da437615",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2915,
    "chunk_index": 97,
    "total_chunks": 180
  },
  {
    "id": "818e928e53f8bf131a75ecfa166a0dc6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2920,
    "chunk_index": 98,
    "total_chunks": 180
  },
  {
    "id": "e4af9fced7217840a3f627f7a2b210d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2924,
    "chunk_index": 99,
    "total_chunks": 180
  },
  {
    "id": "2b9ddb1413bde808cc20fca7d8c87fc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2958,
    "chunk_index": 100,
    "total_chunks": 180
  },
  {
    "id": "8f8baf05c6506f636bf01021bb7fdf3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2979,
    "chunk_index": 101,
    "total_chunks": 180
  },
  {
    "id": "7416e1a43d517397454570166499acd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 2989,
    "chunk_index": 102,
    "total_chunks": 180
  },
  {
    "id": "1fc5ab5ec16ad06c4403708035cbcc4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3054,
    "chunk_index": 103,
    "total_chunks": 180
  },
  {
    "id": "777bca53f32a7b04872797f025169f2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3116,
    "chunk_index": 104,
    "total_chunks": 180
  },
  {
    "id": "e46facfeac58084b05d2b291705df039",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3197,
    "chunk_index": 105,
    "total_chunks": 180
  },
  {
    "id": "ad41155cfa22de0c07327028e99ae674",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3217,
    "chunk_index": 106,
    "total_chunks": 180
  },
  {
    "id": "70f15c9ab5226cfb8e3fd1ac3b779e3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3230,
    "chunk_index": 107,
    "total_chunks": 180
  },
  {
    "id": "b511ee9a15a35f105c9432bc83c40617",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3297,
    "chunk_index": 108,
    "total_chunks": 180
  },
  {
    "id": "bf046673553d59ca2270dfc47a96dcb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3331,
    "chunk_index": 109,
    "total_chunks": 180
  },
  {
    "id": "bc900dadafb235c1339e885367620333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3361,
    "chunk_index": 110,
    "total_chunks": 180
  },
  {
    "id": "77f55cca0491228b6309be28851cfb68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3369,
    "chunk_index": 111,
    "total_chunks": 180
  },
  {
    "id": "e9077b26337b4a6ceeabe37d0627c6c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3384,
    "chunk_index": 112,
    "total_chunks": 180
  },
  {
    "id": "632f578115376db8eb7ae29eb9d5c5e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3421,
    "chunk_index": 113,
    "total_chunks": 180
  },
  {
    "id": "80f1cb78bd3067479f8adfee46634c16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3436,
    "chunk_index": 114,
    "total_chunks": 180
  },
  {
    "id": "d257d88d5b136ca05f56b0e4d7e50663",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3438,
    "chunk_index": 115,
    "total_chunks": 180
  },
  {
    "id": "711b401591ed1d7eab9ba55f9d91ded0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3468,
    "chunk_index": 116,
    "total_chunks": 180
  },
  {
    "id": "eb8879b557ef3caa10651c970b415e74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3473,
    "chunk_index": 117,
    "total_chunks": 180
  },
  {
    "id": "8cc58667716e711d581c312a8e3ff1fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3494,
    "chunk_index": 118,
    "total_chunks": 180
  },
  {
    "id": "c98b3ed6652db8284d0dd7568861b6a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your evalFormula function should use the return keyword js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/);\nYou should pass functionExpanded as the first argument to your evalFormula() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3524,
    "chunk_index": 119,
    "total_chunks": 180
  },
  {
    "id": "5aa8b25c288baf9b8be106199ebd6a9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3452,
    "chunk_index": 120,
    "total_chunks": 180
  },
  {
    "id": "fd8a51d5fff446db6e90e28e8f19fad7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3494,
    "chunk_index": 121,
    "total_chunks": 180
  },
  {
    "id": "dda7cf7164dc3ebf8b75edaf3e9716a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3512,
    "chunk_index": 122,
    "total_chunks": 180
  },
  {
    "id": "f60bccdce09eea465b0ca06fbe1d9519",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3515,
    "chunk_index": 123,
    "total_chunks": 180
  },
  {
    "id": "bd1c2a48eb8acf45ee49958411a3666c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3533,
    "chunk_index": 124,
    "total_chunks": 180
  },
  {
    "id": "d89e8f3371035c819ed37aa9e44c5833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3538,
    "chunk_index": 125,
    "total_chunks": 180
  },
  {
    "id": "84f769b49595ee30a70c4060b9ed27a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3542,
    "chunk_index": 126,
    "total_chunks": 180
  },
  {
    "id": "c152e04625d3f9a3eaf7a28436474b34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3576,
    "chunk_index": 127,
    "total_chunks": 180
  },
  {
    "id": "716c857b22a5734d49c8c72d076c935e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3597,
    "chunk_index": 128,
    "total_chunks": 180
  },
  {
    "id": "a0b8ad4ad51613ee6c8c038b52381c23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3607,
    "chunk_index": 129,
    "total_chunks": 180
  },
  {
    "id": "4035f616ffed85e1636fe4aedaaf4d7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3672,
    "chunk_index": 130,
    "total_chunks": 180
  },
  {
    "id": "6664f68bb088da4abd29cb762aa157a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3734,
    "chunk_index": 131,
    "total_chunks": 180
  },
  {
    "id": "d188535b26a4cb76e0cace3bb357d1a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3815,
    "chunk_index": 132,
    "total_chunks": 180
  },
  {
    "id": "d90edd907b8ad2352d0144e4a745d91e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3835,
    "chunk_index": 133,
    "total_chunks": 180
  },
  {
    "id": "cd0ff33743d85651eeb006e1fb739c52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3848,
    "chunk_index": 134,
    "total_chunks": 180
  },
  {
    "id": "326a310a38d885ff720f9fdecadd1893",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3915,
    "chunk_index": 135,
    "total_chunks": 180
  },
  {
    "id": "642bbb72611b804338ae5051207c9db5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3949,
    "chunk_index": 136,
    "total_chunks": 180
  },
  {
    "id": "1bcec14c6789a7dacc128c47e20da79f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3979,
    "chunk_index": 137,
    "total_chunks": 180
  },
  {
    "id": "c4191a4826fa15d5b3a92d52d84e7cff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3987,
    "chunk_index": 138,
    "total_chunks": 180
  },
  {
    "id": "409fb6c3f76ffb7bb77bf95db610ef50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4002,
    "chunk_index": 139,
    "total_chunks": 180
  },
  {
    "id": "2fb98b78324e054cccdfb19ee62e2797",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4039,
    "chunk_index": 140,
    "total_chunks": 180
  },
  {
    "id": "200655d6a14abb6a85bc8b3067c2a1d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4054,
    "chunk_index": 141,
    "total_chunks": 180
  },
  {
    "id": "07aba1526bde78f212e8b95ceec6f6db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4056,
    "chunk_index": 142,
    "total_chunks": 180
  },
  {
    "id": "95b1211afcfd97ab2c158de940738561",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4086,
    "chunk_index": 143,
    "total_chunks": 180
  },
  {
    "id": "aca4906a315e34bb7c54988bf156146a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4091,
    "chunk_index": 144,
    "total_chunks": 180
  },
  {
    "id": "d8800b7bd8a3605f0bf6a1b782480e3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4112,
    "chunk_index": 145,
    "total_chunks": 180
  },
  {
    "id": "b1b6db30980fa65d45c58ab7c9de71dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return/); Your return statement should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/);\nYou should pass cells as the second argument to your evalFormula() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4146,
    "chunk_index": 146,
    "total_chunks": 180
  },
  {
    "id": "f2476e0e591af7a49e39618996e3aa5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3565,
    "chunk_index": 147,
    "total_chunks": 180
  },
  {
    "id": "01c4278f81a1fcdf52fe4eaa8618c199",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "check if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3627,
    "chunk_index": 148,
    "total_chunks": 180
  },
  {
    "id": "8ea4beedeea4c4f0f79c4aaa96a21115",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3647,
    "chunk_index": 149,
    "total_chunks": 180
  },
  {
    "id": "7ef3ad011e3e3796f4245c3d54bb4fff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3650,
    "chunk_index": 150,
    "total_chunks": 180
  },
  {
    "id": "ac43f0f290811e836a932066c5cb7e14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3668,
    "chunk_index": 151,
    "total_chunks": 180
  },
  {
    "id": "9c35d37c7d69ed78dd2425ed6e8409cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3673,
    "chunk_index": 152,
    "total_chunks": 180
  },
  {
    "id": "d4d5f11f1dacc2e479f77f0a252193e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3677,
    "chunk_index": 153,
    "total_chunks": 180
  },
  {
    "id": "e63723ba4594f1ed035eec0bb7d452d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3711,
    "chunk_index": 154,
    "total_chunks": 180
  },
  {
    "id": "7e7b553341ec3dc3081a3039bed5e360",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3732,
    "chunk_index": 155,
    "total_chunks": 180
  },
  {
    "id": "fd9741bb78b09c4ebc788c59879cb438",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3742,
    "chunk_index": 156,
    "total_chunks": 180
  },
  {
    "id": "bd31b9c94a09acde0b0a837e2bbd2226",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3807,
    "chunk_index": 157,
    "total_chunks": 180
  },
  {
    "id": "74301ad3bafb6f1400b8e086ec9fb635",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3869,
    "chunk_index": 158,
    "total_chunks": 180
  },
  {
    "id": "0598e28115c199a954b98b967c8ca67d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3950,
    "chunk_index": 159,
    "total_chunks": 180
  },
  {
    "id": "5f6e1541fc0adb4d391508a59186f74e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3970,
    "chunk_index": 160,
    "total_chunks": 180
  },
  {
    "id": "5b9c35777afc401d6060b3b7a835b787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3983,
    "chunk_index": 161,
    "total_chunks": 180
  },
  {
    "id": "9b5206f94a72afe5c10c7df100565d77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4050,
    "chunk_index": 162,
    "total_chunks": 180
  },
  {
    "id": "49ce56f3b6a35f12c85f85bb90353863",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4084,
    "chunk_index": 163,
    "total_chunks": 180
  },
  {
    "id": "03fa57faf6f261c07e2957777522fbea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4114,
    "chunk_index": 164,
    "total_chunks": 180
  },
  {
    "id": "ad016baa42ca71e90f6fc17bb7e3f88a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4122,
    "chunk_index": 165,
    "total_chunks": 180
  },
  {
    "id": "192d6567982d72db48059349e364aaaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4137,
    "chunk_index": 166,
    "total_chunks": 180
  },
  {
    "id": "ba41bbb5b06fe31840f4a7c35226a1f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4174,
    "chunk_index": 167,
    "total_chunks": 180
  },
  {
    "id": "6f15f1b200ee79a9f94a47483a2ace9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4189,
    "chunk_index": 168,
    "total_chunks": 180
  },
  {
    "id": "87c62e8af422cd982e82b61f78394181",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4191,
    "chunk_index": 169,
    "total_chunks": 180
  },
  {
    "id": "ec51d7cccc440c4c876e22a212d82de5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4221,
    "chunk_index": 170,
    "total_chunks": 180
  },
  {
    "id": "9dc258ad1a9973312096e370c1612e63",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4226,
    "chunk_index": 171,
    "total_chunks": 180
  },
  {
    "id": "fad24b430c2f930f9d9974942e71fdf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4247,
    "chunk_index": 172,
    "total_chunks": 180
  },
  {
    "id": "d255a938a4d7b4931a8fd10919c49bb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded\\s*,\\s*cells\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4277,
    "chunk_index": 173,
    "total_chunks": 180
  },
  {
    "id": "9e5745111e4c7d1201b3a38e0fa312d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "if functionExpanded is equal to xjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)/); Your return statement should use a ternary operatorjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\/); If the ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded\\s*,\\s*cells\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 4333,
    "chunk_index": 174,
    "total_chunks": 180
  },
  {
    "id": "33c0659b46c66a27ba41ec4d1bc53f4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ternary condition is true, your evalFormula() should return functionExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded/); If the ternary condition is false, your evalFormula() should return the result of calling evalFormula()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(/); You should pass functionExpanded as the first argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded/); You should pass cells as the second argument to your evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded\\s*,\\s*cells\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 3033,
    "chunk_index": 175,
    "total_chunks": 180
  },
  {
    "id": "2720ed5b4cba8d6f1695196de9dcdb64",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "evalFormula() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*(:const|let|var)\\s+functionExpanded\\s*=\\s*applyFunction\\(\\s*cellExpanded\\s*\\)\\s*;\\s*return\\s+(:functionExpanded\\s*===\\s*x|x\\s*===\\s*functionExpanded)\\s*\\\\s*functionExpanded\\s*:\\s*evalFormula\\(\\s*functionExpanded\\s*,\\s*cells\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 903,
    "chunk_index": 176,
    "total_chunks": 180
  },
  {
    "id": "bba1f61086de3e4b180aa6ec309b53e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\nconst apply = (fn, args) => spreadsheetFunctionsfn toLowerCase();\nreturn str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match);\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 177,
    "total_chunks": 180
  },
  {
    "id": "d5c8c1bd8ac8c2caef9442362c7a5d7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); const apply = (fn, args) => spreadsheetFunctionsfn toLowerCase(); return str2 replace(functionCall, (match, fn, args) => spreadsheetFunctions hasOwnProperty(fn toLowerCase()) apply(fn, args) : match); } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\nconst functionExpanded = applyFunction(cellExpanded);\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 178,
    "total_chunks": 180
  },
  {
    "id": "9d7f6312b44bd9caaf7c44e493820d2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match => idToText(match toUpperCase())); const functionExpanded = applyFunction(cellExpanded); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; inputariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15565,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4717a689e1cfa232e357.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 179,
    "total_chunks": 180
  },
  {
    "id": "673a9be82a5696e7aad9bd7224a2e4dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f455b044d3230ed971e98.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f455b044d3230ed971e98\ntitle: Step 85\nchallengeType: 1\ndashedName: step-85\n--description--\nA while loop will run over and over again until the condition specified is no longer true. It has the following syntax:\njs\nwhile (condition) {\nlogic;\n}\nUse that syntax to declare a while loop with continueLoop as the condition. The body should be empty.\n--hints--\nYou should use a while loop.\njs\nassert.match(__helpers.removeJSComments(code), /while/);\nYour while loop should use continueLoop as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet continueLoop = false;\nlet done = 0;\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f455b044d3230ed971e98.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eae25e307e0e94f5cda650a9e6ef1f62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f46460f9c36330ebc07d8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f46460f9c36330ebc07d8\ntitle: Step 88\nchallengeType: 1\ndashedName: step-88\n--description--\nThe equality operator can lead to some strange behavior in JavaScript. For example, \"0\" == 0 is true, even though one is a string and one is a number.\nThe strict equality operator === is used to check if two values are equal and share the same type. As a general rule, this is the equality operator you should always use. With the strict equality operator, \"0\" === 0 becomes false, because while they might have the same value of zero, they are not of the same type.\nUpdate your done == count condition to use the strict equality operator.\n--hints--\nYour if condition should use strict equality.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*if\\s*\\(\\s*(?:done\\s*===\\s*count|count\\s*===\\s*done)\\s*\\)\\s*\\{/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\nwhile (continueLoop) {\ndone++;\n--fcc-editable-region--\nif (done == count) {\n}\n--fcc-editable-region--\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1530,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f46460f9c36330ebc07d8.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d21ed9e01b9815bde3a9b10d7c6be85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f45ccf4ca5c31f253005a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f45ccf4ca5c31f253005a\ntitle: Step 86\nchallengeType: 1\ndashedName: step-86\n--description--\nRight now, if you change continueLoop to true, your while loop will run forever. This is called an infinite loop, and you should be careful to avoid these. An infinite loop can lock up your system, requiring a full restart to escape.\nTo avoid this, start by using the increment operator to increase the value of the done variable inside your loop.\n--hints--\nYour while loop should increment the done variable.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\n--fcc-editable-region--\nwhile (continueLoop) {\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f45ccf4ca5c31f253005a.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2bda2d8d8a049cdaf2a219207ffb80ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f46b9c417a8341729a3ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f46b9c417a8341729a3ab\ntitle: Step 89\nchallengeType: 1\ndashedName: step-89\n--description--\nWhen done has reached the value of count, we want the loop to stop executing.\nInside your if body, assign the boolean false to your continueLoop variable.\n--hints--\nYour if body should assign false to your continueLoop variable.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*if\\s*\\(\\s*(?:done\\s*===\\s*count|count\\s*===\\s*done)\\s*\\)\\s*\\{\\s*continueLoop\\s*=\\s*false;?/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\nwhile (continueLoop) {\ndone++;\n--fcc-editable-region--\nif (done === count) {\n}\n--fcc-editable-region--\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f46b9c417a8341729a3ab.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5419d2b5111b4ed881cd53e758cec83c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f48a419b40238e2b8b4d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f48a419b40238e2b8b4d5\ntitle: Step 93\nchallengeType: 1\ndashedName: step-93\n--description--\nYour loop is no longer relying on the continueLoop variable. This makes the variable an unused declaration. Generally, you want to avoid unused declarations to prevent future confusion.\nRemove your continueLoop variable.\n--hints--\nYou should no longer have a continueLoop variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /continueLoop/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet continueLoop = false;\nlet done = 0;\nwhile (done !== count) {\ndone++;\nrows.push(padRow(done, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1123,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f48a419b40238e2b8b4d5.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c8dc7cafef7edf5638c19938e540677",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f47afe4c98536715d5fa4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f47afe4c98536715d5fa4\ntitle: Step 91\nchallengeType: 1\ndashedName: step-91\n--description--\nThe strict inequality operator !== allows you to check if two values are not equal, or do not have the same type. The syntax is similar to the equality operator: value !== 4.\nCurrently the while loop runs only if continueLoop is true. Update the while loop condition to check if done is not equal to count.\n--hints--\nYour while loop should check if done and count are not equal.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*(?:done\\s*!==\\s*count|count\\s*!==\\s*done)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\n--fcc-editable-region--\nwhile (continueLoop) {\ndone++;\nrows.push(padRow(done, count));\nif (done === count) {\ncontinueLoop = false;\n}\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f47afe4c98536715d5fa4.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6dcdf0a2d4636c70b3578f16d8b7e3df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f487dc0c8fa38084f9754.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f487dc0c8fa38084f9754\ntitle: Step 92\nchallengeType: 1\ndashedName: step-92\n--description--\nSince you have moved the comparison into the while condition, you can remove your entire if statement.\n--hints--\nYou should no longer have an if statement.\njs\nassert.notMatch(__helpers.removeJSComments(code), /if\\s*\\(\\s*done\\s*===\\s*count\\s*\\)/);\nYou should no longer set continueLoop to false.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/continueLoop\\s*=\\s*false/g), 1);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\n--fcc-editable-region--\nwhile (done !== count) {\ndone++;\nrows.push(padRow(done, count));\nif (done === count) {\ncontinueLoop = false;\n}\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f487dc0c8fa38084f9754.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6391223cce5ca72a9d973e7dba4be4c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4774e3e0df35a68bb5f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4774e3e0df35a68bb5f2\ntitle: Step 90\nchallengeType: 1\ndashedName: step-90\n--description--\nTo make your pyramid generate again, push the result of calling padRow with done and count as the arguments to your rows array, similar to what you did in your first loop --hints--\nYour loop should call the push() method on your rows js\nassert match(__helpers removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*rows\\ push\\(/);\nYou should call your padRow function in your push() method js\nassert match(__helpers removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*rows\\ push\\(\\s*padRow\\(/);\nYou should pass done as the first argument to your padRow call js\nassert match(__helpers removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*rows\\ push\\(\\s*padRow\\(\\s*done/);\nYou should pass count as the second argument to your padRow call js\nassert match(__helpers removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*rows\\ push\\(\\s*padRow\\(\\s*done\\s*,\\s*count\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1784,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4774e3e0df35a68bb5f2.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ba515ae452bf24879c7f01b2e6788256",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4774e3e0df35a68bb5f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "You should pass count as the second argument to your padRow call js assert match(__helpers removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*rows\\ push\\(\\s*padRow\\(\\s*done\\s*,\\s*count\\s*\\)/); --seed-- --seed-contents-- ```js const character = \"#\"; const count = 8; const rows = []; function padRow(rowNumber, rowCount) { return \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber); } // TODO: use a different type of loop /for (let i = 1; i <= count; i++) { rowspush(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\nwhile (continueLoop) {\ndone++;\n--fcc-editable-region--\n--fcc-editable-region--\nif (done === count) {\ncontinueLoop = false;\n}\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1784,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4774e3e0df35a68bb5f2.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "20ecdc4d1f30b0329eee1adf7e557e2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4934fb48f63abd5ae371.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4934fb48f63abd5ae371\ntitle: Step 95\nchallengeType: 1\ndashedName: step-95\n--description--\nUsing done to track the number of rows that have been generated is functional, but you can actually clean up the logic a bit further.\nArrays have a special length property that allows you to see how many values, or elements, are in the array. You would access this property using syntax like myArray.length.\nNote that rows.length in the padRow call would give you an off-by-one error, because done is incremented before the call.\nUpdate your condition to check if rows.length is less than count.\n--hints--\nYour while loop should check if rows.length is less than count.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*rows\\.length\\s*<\\s*count\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet done = 0;\nwhile (done <= count) {\ndone++;\nrows.push(padRow(done, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1431,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4934fb48f63abd5ae371.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ac7e3d894f2bd97e7415005d735c2d94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f48e1d3682f39e81843c4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f48e1d3682f39e81843c4\ntitle: Step 94\nchallengeType: 1\ndashedName: step-94\n--description--\nYour pyramid generator is still working. However, it could be possible to end up with an infinite loop again.\nBecause you are only checking if done is not equal to count, if done were to be larger than count your loop would go on forever.\nUpdate your loop's condition to check if done is less than or equal to count.\n--hints--\nYour while loop should check if done is less than or equal to count.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*done\\s*<=\\s*count\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet done = 0;\nwhile (done !== count) {\ndone++;\nrows.push(padRow(done, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1237,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f48e1d3682f39e81843c4.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b16a93989e5fa4792fc70d9c19098d0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4990b1caa03b9dc97a43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4990b1caa03b9dc97a43\ntitle: Step 97\nchallengeType: 1\ndashedName: step-97\n--description--\nNow you no longer need your done variable. Remove the increment operation from your loop, and the variable declaration for done.\n--hints--\nYou should not increment the done variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /done\\+\\+/);\nYou should no longer have a done variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /done/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet done = 0;\nwhile (rows.length < count) {\ndone++;\nrows.push(padRow(rows.length + 1, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1114,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4990b1caa03b9dc97a43.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b50044d986cce39430351e4eafbf311e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f49e32001983c90b75850.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f49e32001983c90b75850\ntitle: Step 98\nchallengeType: 1\ndashedName: step-98\n--description--\nThat's a very clean and functional loop. Nice work! But there's still more to explore.\nUse a multi-line comment to comment out your while loop.\n--hints--\nYour while loop should be commented out.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.notMatch(stripped, /while/);\nYour while loop body should be commented out.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.notMatch(stripped, /rows\\.push/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nwhile (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1160,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f49e32001983c90b75850.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0c5e5fd0f1b56b397d1feb13f603844f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4a1472f8e63d76162ce5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4a1472f8e63d76162ce5\ntitle: Step 99\nchallengeType: 1\ndashedName: step-99\n--description--\nWhat if you made your pyramid upside-down, or inverted? Time to try it out!\nStart by creating a new for loop. Declare your iterator i and assign it the value of count, then use the boolean false for your condition and iteration statements.\n--hints--\nYour code should have a for loop.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/for\\s*\\(/g), 2);\nYour for loop should initialise i with the value of count.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count/);\nYour for loop should use false as the condition.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*false/);\nYour for loop should use false as the iteration.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*false\\s*;\\s*false\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n--fcc-editable-region--\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4a1472f8e63d76162ce5.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7a8dc58f96064458dbd9b58fa51877fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4a83373de83ea101685f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4a83373de83ea101685f\ntitle: Step 100\nchallengeType: 1\ndashedName: step-100\n--description--\nBecause you are going to loop in the opposite direction, your loop needs to run while i is greater than 0. You can use the greater than operator > for this.\nSet your loop's condition to run when i is greater than 0.\n--hints--\nYour for loop should run when i is greater than 0.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*false\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n--fcc-editable-region--\nfor (let i = count; false; false) {\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4a83373de83ea101685f.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d7ca2be457dc9df96a3e906bf26abc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4ae5b3924c3fc3373973.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4ae5b3924c3fc3373973\ntitle: Step 101\nchallengeType: 1\ndashedName: step-101\n--description--\nYour iteration statement is also going to be different. Instead of adding 1 to i with each loop, you need to subtract 1.\nLike you did earlier with i = i + 1, update your iteration statement to give i the value of subtracting 1 from itself.\n--hints--\nYour for loop should use i = i - 1 as the iteration.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n--fcc-editable-region--\nfor (let i = count; i > 0; false) {\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1214,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4ae5b3924c3fc3373973.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e19d223b271cf370a80f3d6bc753c0b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4c3b01c44743719c99e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4c3b01c44743719c99e4\ntitle: Step 104\nchallengeType: 1\ndashedName: step-104\n--description--\nBecause you are only subtracting one from i, you can use the decrement operator --.\nReplace your subtraction assignment with the decrement operator.\n--hints--\nYour for loop should not use subtraction assignment.\njs\nassert.notMatch(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)), /for\\(leti=count;i>0;i-=1\\)\\{rows\\.push\\(padRow\\(i,count\\)\\);/);\nYour for loop should use the decrement operator.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i--\\s*\\)\\s*\\{\\s*rows\\.push\\(\\s*padRow\\s*\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n--fcc-editable-region--\nfor (let i = count; i > 0; i -= 1) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4c3b01c44743719c99e4.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c2275143fe7cf96658fdb889b90b2921",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4b641290da41b2cf0dd9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4b641290da41b2cf0dd9\ntitle: Step 103\nchallengeType: 1\ndashedName: step-103\n--description--\nJust like addition, there are different operators you can use for subtraction. The subtraction assignment operator -= subtracts the given value from the current variable value, then assigns the result back to the variable.\nReplace your iteration statement with the correct statement using the subtraction assignment operator.\n--hints--\nYour for loop should not use i = i - 1.\njs\nassert.notMatch(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)), /for\\(leti=count;i>0;i=i-1\\)\\{rows\\.push\\(padRow\\(i,count\\)\\);/);\nYour for loop should use subtraction assignment to reduce i by 1.\njs\nassert.match(__helpers.removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*-=\\s*1\\s*\\)\\s*\\{\\s*rows\\.push\\(\\s*padRow\\s*\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n--fcc-editable-region--\nfor (let i = count; i > 0; i = i - 1) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1604,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4b641290da41b2cf0dd9.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7a558255a6da4c7a346acd58e1f8734a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4cde8dd305450514a1cb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4cde8dd305450514a1cb\ntitle: Step 105\nchallengeType: 1\ndashedName: step-105\n--description--\nUse a multi-line comment to comment out this loop as well, to prepare for the next approach.\n--hints--\nYour for loop should be commented out using multi-line comment.\njs\nassert.lengthOf(code.match(/\\/\\*\\s*for\\s*\\(/g), 2);\nassert.lengthOf(__helpers.removeJSComments(code).match(/for\\s*\\(/g), 1);\nYour for loop body should be commented out as part of multi-line comment.\njs\nassert.notMatch(code, /\\/\\/\\s*rows\\.push/);\nassert.lengthOf(code.match(/rows\\.push/g), 3)\nassert.notMatch(__helpers.removeJSComments(code), /rows\\.push/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n--fcc-editable-region--\nfor (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4cde8dd305450514a1cb.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "33142de21cc1ff089baf6d9ae0fda05a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4e74f7fd3f4a99ac2e50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4e74f7fd3f4a99ac2e50\ntitle: Step 108\nchallengeType: 1\ndashedName: step-108\n--description--\nArrays also have a .shift() method. This will remove the first element of the array, unlike .pop() which removes the last element. Here is an example of the .shift() method:\njs\nconst numbers = [1, 2, 3];\nnumbers.shift();\nThe numbers array would be [2, 3].\nDirectly below your numbers array, declare a shifted variable and assign it the result of calling .shift() on the numbers array. On the next line, log the shifted variable to the console.\n--hints--\nYou should use const to declare a shifted variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+shifted/);\nYou should call .shift() on your numbers array.\njs\nassert.deepEqual(numbers, [5, 2, 3]);\nYou should assign the result of your .shift() call to your shifted variable.\njs\nassert.equal(shifted, 1);\nYou should log your shifted variable.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*shifted\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nconst numbers = [1, 2, 3];\nconst unshifted = numbers.unshift(5);\nconsole.log(unshifted);\nconsole.log(numbers);\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1878,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4e74f7fd3f4a99ac2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "141af60ea19a61b5127abef267b2d1a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4b33e2a3364094ecb540.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4b33e2a3364094ecb540\ntitle: Step 102\nchallengeType: 1\ndashedName: step-102\n--description--\nAgain, push the result of calling padRow with your i and count variables to your rows array Open up the console to see the upside-down pyramid --hints--\nYour for loop should call rows push() js\nassert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(/);\nYou should call padRow() in your push() call js\nassert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(\\s*padRow\\s*\\(/);\nYou should pass i as the first argument to your padRow() call js\nassert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(\\s*padRow\\s*\\(\\s*i/);\nYou should pass count as the second argument to your padRow() call js\nassert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(\\s*padRow\\s*\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1865,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4b33e2a3364094ecb540.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c188e53844179daf1627327ee3044e12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4b33e2a3364094ecb540.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(\\s*padRow\\s*\\(/); You should pass i as the first argument to your padRow() call js assert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(\\s*padRow\\s*\\(\\s*i/); You should pass count as the second argument to your padRow() call js assert match(__helpers removeJSComments(code), /for\\s*\\(\\s*let\\s+i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\ push\\(\\s*padRow\\s*\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```js const character = \"#\"; const count = 8; const rows = []; function padRow(rowNumber, rowCount) { return \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \"repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows push(padRow(i, count));\n}/\n/while (rows length < count) {\nrows push(padRow(rows length + 1, count));\n}/\n--fcc-editable-region--\nfor (let i = count; i > 0; i = i - 1) {\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1865,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4b33e2a3364094ecb540.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "959db7b5e16f2686e2ecbb345bb0b717",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4cffb1459d45e34902d1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4cffb1459d45e34902d1\ntitle: Step 106\nchallengeType: 1\ndashedName: step-106\n--description--\nYou can actually build the inverted pyramid without needing to loop \"backwards\" like you did.\nTo do this, you'll need to learn a couple of new array methods. Start by using const to declare a numbers variable. Assign it an array with the elements 1, 2, and 3. Then log the numbers array.\n--hints--\nYou should use const to declare a numbers variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+numbers/);\nYour numbers variable should be an array.\njs\nassert.isArray(numbers);\nYour numbers array should have the elements 1, 2, and 3 in that order.\njs\nassert.deepEqual(numbers, [1,2,3]);\nYou should log your numbers array.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*numbers\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1575,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4cffb1459d45e34902d1.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fd283d92c7678d7d88e5e13a7dd6c6c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4f79e2a82a4e92290f44.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4f79e2a82a4e92290f44\ntitle: Step 110\nchallengeType: 1\ndashedName: step-110\n--description--\nSometimes you may wish to bring back previous code that you commented out. You can do so by removing the /* and */ around that code. This is called uncommenting.\nUncomment only your first for loop. Leave the single line comment and the other two multi line comments in place.\n--hints--\nYou should uncomment your first for loop.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.match(stripped, /for\\s*\\(\\s*let\\s+i\\s*=\\s*1;\\s*i\\s*<=\\s*count;\\s*i\\+\\+\\s*\\)/)\nYou should not remove your single-line comment.\njs\nassert.match(code, /\\/\\//);\nYou should not uncomment your while loop.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.notMatch(stripped, /while/);\nYou should not uncomment your second for loop.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.lengthOf(stripped.match(/for\\s*\\(/g), 2)\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4f79e2a82a4e92290f44.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b509f27b70262ecf13655e02305a0161",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f505d02b2bd513a1c3468.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f505d02b2bd513a1c3468\ntitle: Step 111\nchallengeType: 1\ndashedName: step-111\n--description--\nYour pyramid is no longer inverted. This is because you are adding new rows to the end of the array.\nUpdate your loop body to add new rows to the beginning of the array.\n--hints--\nYou should use the unshift method of rows.\njs\nconst stripped = __helpers.removeJSComments(code);\nassert.match(stripped, /\\.unshift/);\nYou should pass a padRow() call as the argument for your .unshift() method.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.unshift\\(\\s*padRow\\(/);\nYou should pass i as the first argument to your padRow() call.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.unshift\\(\\s*padRow\\(\\s*i/)\nYou should pass count as the second argument to your padRow() call.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}\n--fcc-editable-region--\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f505d02b2bd513a1c3468.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c8596905bdbf3044226b6faf0eb46ff2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4efcb8068e4cb470dca1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4efcb8068e4cb470dca1\ntitle: Step 109\nchallengeType: 1\ndashedName: step-109\n--description--\nNow that you've tried these methods, you can do another inverted pyramid approach. But first you need to clean up your experimentation.\nRemove your numbers array, and the method calls and log calls.\n--hints--\nYou should not have a numbers array.\njs\nassert.notMatch(__helpers.removeJSComments(code), /numbers/);\nYou should not have an unshifted variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /unshifted/);\nYou should not have a shifted variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /shifted/);\nYou should not have your console.log statements.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log/g), 1);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nconst numbers = [1, 2, 3];\nconst shifted = numbers.shift();\nconsole.log(shifted);\nconst unshifted = numbers.unshift(5);\nconsole.log(unshifted);\nconsole.log(numbers);\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1656,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4efcb8068e4cb470dca1.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bd4689b4760b9e11c2f7a4f9fcaac839",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4de78f775e480ba2e451.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f4de78f775e480ba2e451\ntitle: Step 107\nchallengeType: 1\ndashedName: step-107\n--description--\nThe unshift() method of an array allows you to add a value to the beginning of the array, unlike push() which adds the value at the end of the array unshift() returns the new length of the array it was called on js\nconst countDown = [2, 1, 0];\nconst newLength = countDown unshift(3);\nconsole log(countDown); // [3, 2, 1, 0]\nconsole log(newLength); // 4\nUse const to declare an unshifted variable, and assign it the result of calling unshift() on your numbers array Pass 5 as the argument Then print your unshifted variable --hints--\nYou should declare your unshifted variable js\nassert match(__helpers removeJSComments(code), /const\\s+unshifted/);\nYou should call the unshift() method on your numbers array js\nassert match(__helpers removeJSComments(code), /numbers\\ unshift\\(/);\nYou should pass 5 as the argument to your unshift() call js\nassert deepEqual(numbers, [5,1,2,3]);\nYou should assign the result of your unshift() call to your unshifted variable js\nassert equal(unshifted, 4);\nYou should log your unshifted variable js\nassert match(__helpers removeJSComments(code), /console\\ log\\(\\s*unshifted\\s*\\); /);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows push(padRow(i, count));\n}/\n/while (rows length < count) {\nrows push(padRow(rows length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4de78f775e480ba2e451.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "09510572c8e437db1b019194e335fb2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4de78f775e480ba2e451.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= 8; const rows = []; function padRow(rowNumber, rowCount) { return \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber); } // TODO: use a different type of loop /for (let i = 1; i <= count; i++) { rows push(padRow(i, count)); }/ /while (rows length < count) { rows push(padRow(rows length + 1, count)); }/ /for (let i = count; i > 0; i--) { rowspush(padRow(i, count));\n}/\n--fcc-editable-region--\nconst numbers = [1, 2, 3];\nconsole log(numbers);\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2062,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f4de78f775e480ba2e451.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "edc18b0675e83e6d3dfdcbe9bd190871",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f51f1df0a8757934a5796.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f51f1df0a8757934a5796\ntitle: Step 114\nchallengeType: 1\ndashedName: step-114\n--description--\nNow move your .unshift() call into your if block.\n--hints--\nYour .unshift() call should be in your if block.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\.unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nlet inverted = true;\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nif (inverted) {\n}\nrows.unshift(padRow(i, count));\n}\n--fcc-editable-region--\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1100,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f51f1df0a8757934a5796.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f7dc79b0dd30081d1e62f5c281506afd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f50a21fe7645252804f2b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f50a21fe7645252804f2b\ntitle: Step 112\nchallengeType: 1\ndashedName: step-112\n--description--\nWhat if you had a way to toggle between an inverted pyramid and a standard pyramid?\nStart by declaring an inverted variable, and assigning it the value true. You are not changing this variable in your code, but you will need to use let so our tests can modify it later.\n--hints--\nYou should declare an inverted variable with let.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+inverted/);\nYou should initialise inverted with the value true.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+inverted\\s*=\\s*true;?/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\n--fcc-editable-region--\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\nfor (let i = 1; i <= count; i++) {\nrows.unshift(padRow(i, count));\n}\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1353,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f50a21fe7645252804f2b.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1a621098584f323a656b587709b7ef85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f53ad3d39175c5d4335ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f53ad3d39175c5d4335ac\ntitle: Step 117\nchallengeType: 1\ndashedName: step-117\n--description--\nYour pyramid generator is now in a finished state, with more functionality than you originally planned! The next step is to clean up your code.\nRemove all comments, both single- and multi-line, from your code.\n--hints--\nYou should not have any single-line comments in your code.\njs\nassert.notMatch(code, /\\/\\//);\nYou should not have any multi-line comments in your code.\njs\nassert.notMatch(code, /(?:\\*\\/|\\/\\*)/);\nYou should not have any comments in your code.\njs\nassert.equal(code, __helpers.removeJSComments(code));\nYou should remove code that was commented out by multi-line comments.\njs\nassert.notMatch(code, /while/);\nassert.lengthOf(code.match(/for\\s*\\(/g), 2)\nassert.lengthOf(code.match(/rows\\.push/g), 1);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nlet inverted = true;\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n--fcc-editable-region--\n// TODO: use a different type of loop\nfor (let i = 1; i <= count; i++) {\nif (inverted) {\nrows.unshift(padRow(i, count));\n} else {\nrows.push(padRow(i, count));\n}\n}\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1626,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f53ad3d39175c5d4335ac.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "757c99dea2250e45928b6911a16b8ddf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f530d6e33d159e1bf4947.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f530d6e33d159e1bf4947\ntitle: Step 115\nchallengeType: 1\ndashedName: step-115\n--description--\nIf your pyramid is not inverted, then you will want to have an else block that builds the pyramid in the normal order.\nIn earlier steps, you learned how to work with else statement like this:\njs\nif (condition) {\n// if condition is true, run this code\n} else {\n// if condition is false, run this code\n}\nAdd an else block to your if block.\n--hints--\nYou should add an else block.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\.unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{/);\nYour else block should be empty.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\.unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nlet inverted = true;\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nif (inverted) {\nrows.unshift(padRow(i, count));\n}\n}\n--fcc-editable-region--\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1604,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f530d6e33d159e1bf4947.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "802de460681e5c078b2e45de754e87ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f5179b3b0ca558f6b4d4f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f5179b3b0ca558f6b4d4f\ntitle: Step 113\nchallengeType: 1\ndashedName: step-113\n--description--\nUse an if statement to check if inverted is true. Remember that you do not need to use an equality operator here.\n--hints--\nYou should use an if statement.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(/);\nYour if statement should check if inverted is true.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*inverted/);\nYour if condition should not use any comparison operators.\njs\nassert.match(__helpers.removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nlet inverted = true;\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nrows.unshift(padRow(i, count));\n}\n--fcc-editable-region--\n/while (rows.length < count) {\nrows.push(padRow(rows.length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows.push(padRow(i, count));\n}/\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f5179b3b0ca558f6b4d4f.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d7e67d416d21d4dea1c2e70a6de9829c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b8017d1671f2814e8c77.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610b8017d1671f2814e8c77\ntitle: Step 9\nchallengeType: 1\ndashedName: step-9\n--description--\nWhen you declare a variable without initializing it, it is considered uninitialized. Currently, your secondCharacter variable is uninitialized.\nAdd a console.log() to see what the value of your secondCharacter variable is.\n--hints--\nYou should add a second console.log.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log/g), 2);\nYou should log your secondCharacter variable.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*secondCharacter\\s*\\)/);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\nlet secondCharacter;\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b8017d1671f2814e8c77.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6aff10e8040840ceb9d075bc3d93e89a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b741b54b90f0c0fb3d58.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610b741b54b90f0c0fb3d58\ntitle: Step 8\nchallengeType: 1\ndashedName: step-8\n--description--\nWhen variable names are more than one word, there are specific naming conventions for how you capitalize the words. In JavaScript, the convention to use is camel case.\nCamel case means that the first word in the name is entirely lowercase, but the following words are all title-cased. Here are some examples of camel case:\njs\nlet variableOne;\nlet secondVariable;\nlet yetAnotherVariable;\nlet thisIsAnAbsurdlyLongName;\nUse camel case to declare a new secondCharacter variable.\n--hints--\nYou should declare a secondCharacter variable.\njs\nassert.match(__helpers.removeJSComments(code), /secondCharacter/);\nYou should use let to declare your secondCharacter variable.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+secondCharacter/);\nYou should not assign a value to your secondCharacter variable. Do not forget your semicolon.\njs\nassert.match(__helpers.removeJSComments(code), /let\\s+secondCharacter;/);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\nconsole.log(character);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1266,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b741b54b90f0c0fb3d58.md",
      "source_type": "git_repo"
    },
    "token_count": 282,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aa9d0f0349af882657eaa8dff39f1b7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f540c2176ea5dec01306d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f540c2176ea5dec01306d\ntitle: Step 118\nchallengeType: 1\ndashedName: step-118\n--description--\nNice work! Experiment with different values for your character, count, and inverted variables.\nWhen you are ready to move on to your next project, set character to \"!\", count to 10, and inverted to false to continue.\nCongratulations on completing your first JavaScript project!\n--hints--\nYou should set character to \"!\".\njs\nassert.equal(character, \"!\");\nYou should set count to 10.\njs\nassert.equal(count, 10);\nYou should set inverted to false.\njs\nassert.equal(inverted, false);\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nlet inverted = true;\n--fcc-editable-region--\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\nfor (let i = 1; i <= count; i++) {\nif (inverted) {\nrows.unshift(padRow(i, count));\n} else {\nrows.push(padRow(i, count));\n}\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```\n--solutions--\n```js\nconst character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\nfor (let i = 1; i <= count; i++) {\nif (inverted) {\nrows.unshift(padRow(i, count));\n} else {\nrows.push(padRow(i, count));\n}\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f540c2176ea5dec01306d.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "88e03464281833e9ed2e231f8e30fb78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b9f7619764fad5fd516d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610b9f7619764fad5fd516d\ntitle: Step 11\nchallengeType: 1\ndashedName: step-11\n--description--\nYou can also assign the value of a variable to another variable. For example:\njs\nlet first = \"One\";\nlet second = \"Two\";\nsecond = first;\nThe second variable would now have the value \"One\".\nTo see this in action, change your secondCharacter assignment from \"Test\" to your character variable.\nThen open the console to see what gets logged.\n--hints--\nYou should not assign the value \"Test\" to your secondCharacter variable.\njs\nassert.notEqual(secondCharacter, \"Test\");\nYou should assign the value of the character variable to your secondCharacter variable. Don't forget your semicolon.\njs\nassert.match(__helpers.removeJSComments(code), /secondCharacter\\s*=\\s*character;/);\nYour secondCharacter variable should now have the value \"World\".\njs\nassert.equal(secondCharacter, \"World\");\n--seed--\n--seed-contents--\njs\nlet character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\nlet secondCharacter;\n--fcc-editable-region--\nsecondCharacter = \"Test\";\n--fcc-editable-region--\nconsole.log(secondCharacter);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b9f7619764fad5fd516d.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fcc1b27af80cce92ccf0e8930fd3c956",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b8f6a98d25f4d485a94d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610b8f6a98d25f4d485a94d\ntitle: Step 10\nchallengeType: 1\ndashedName: step-10\n--description--\nThe default value of an uninitialized variable is undefined. This is a special data type that represents a value that does not have a definition yet.\nYou can still assign a value to an uninitialized variable. Here is an example:\njs\nlet uninitialized;\nuninitialized = \"assigned\";\nAssign the string \"Test\" to your secondCharacter variable below your declaration. Open the console to see how your log has changed.\n--hints--\nYou should not initialize secondCharacter. Remember that initialization means assigning a value when you declare the variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /let\\s+secondCharacter\\s*=/);\nYou should use the assignment operator on secondCharacter.\njs\nassert.match(__helpers.removeJSComments(code), /secondCharacter\\s*=/);\nYou should assign the string \"Test\" to your secondCharacter variable.\njs\nassert.equal(secondCharacter, \"Test\");\n--seed--\n--seed-contents--\n```js\n--fcc-editable-region--\nlet character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\nlet secondCharacter;\nconsole.log(secondCharacter);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1254,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610b8f6a98d25f4d485a94d.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "871a6598f94db9069043d6376597f226",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610bf6fa14d700beed1b109.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610bf6fa14d700beed1b109\ntitle: Step 87\nchallengeType: 1\ndashedName: step-87\n--description--\nThe equality operator == is used to check if two values are equal. To compare two values, you'd use a statement like value == 8.\nBelow done++ inside your loop, add an if statement. The statement should check if done is equal to count using the equality operator.\n--hints--\nYou should use an if statement in your loop. It should be added after done++.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*if/);\nYour if statement should use the equality operator to compare done and count in the condition.\njs\nassert.match(__helpers.removeJSComments(code), /while\\s*\\(\\s*continueLoop\\s*\\)\\s*\\{\\s*done\\+\\+;\\s*if\\s*\\(\\s*(?:done\\s*==\\s*count|count\\s*==\\s*done)\\s*\\)\\s*\\{/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\nlet continueLoop = false;\nlet done = 0;\n--fcc-editable-region--\nwhile (continueLoop) {\ndone++;\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610bf6fa14d700beed1b109.md",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ff4cc794021869929d422d104f515daa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610bbed59bc2a0194d85533.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610bbed59bc2a0194d85533\ntitle: Step 22\nchallengeType: 1\ndashedName: step-22\n--description--\nNotice how the value inside your rows array has been changed directly? This is called mutation. As you learn more about arrays, you will learn when to mutate an array, and when you should not.\nBefore moving on, this is a great opportunity to learn a common array use. Currently, your code accesses the last element in the array with rows[2]. But you may not know how many elements are in an array when you want the last one.\nYou can make use of the .length property of an array - this returns the number of elements in the array. To get the last element of any array, you can use the following syntax:\njs\narray[array.length - 1]\narray.length returns the number of elements in the array. By subtracting 1, you get the index of the last element in the array. You can apply this same concept to your rows array.\nUpdate your rows[2] to dynamically access the last element in the rows array. Refer to the example above to help you.\nYou should not see anything change in your console.\n--hints--\nYou should use the .length property of your rows array.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.length/);\nYou should use rows.length in your bracket notation.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\[\\s*rows\\.length/);\nYou should subtract 1 from the length in your bracket notation.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\[\\s*rows\\.length\\s*-\\s*1\\s*\\]/)\n--seed--\n--seed-contents--\njs\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nconsole.log(rows[0]);\n--fcc-editable-region--\nrows[2] = 10;\n--fcc-editable-region--\nconsole.log(rows);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1814,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610bbed59bc2a0194d85533.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bb51dd00c055a9254a4ad484fad29595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c105bbdacc114d6cdc44.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c105bbdacc114d6cdc44\ntitle: Step 48\nchallengeType: 1\ndashedName: step-48\n--description--\nIn order to use a function, you need to call it. A function call tells your application to run the code from the function wherever you choose to call it. The syntax for a function call is the function name followed by parentheses. For example, this code defines and calls a test function.\n```js\nfunction test() {\n}\ntest();\n```\nCall your padRow function.\n--hints--\nYou should call the padRow function.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/padRow\\(\\)/g), 2);\nYour padRow function body should be empty.\njs\nassert.match(padRow.toString(), /\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\n}\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c105bbdacc114d6cdc44.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b19b5606c71972910bcfdf7bef1d5d23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c16c4fa0df12c0e30675.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c16c4fa0df12c0e30675\ntitle: Step 49\nchallengeType: 1\ndashedName: step-49\n--description--\nYou are calling your padRow function, but not doing anything with that function call. All functions in JavaScript return a value, meaning they provide the defined result of calling them for you to use elsewhere.\nTo see the result of calling your padRow function, declare a call variable and assign your existing padRow call to that variable.\n--hints--\nYou should declare a call variable.\njs\nassert.match(__helpers.removeJSComments(code), /(const|let|var)\\s+call/);\nYou should use const to declare your call variable.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+call/);\nYou should assign call the result of your padRow call.\njs\nassert.match(__helpers.removeJSComments(code), /const\\s+call\\s*=\\s*padRow\\(\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow() {\n}\n--fcc-editable-region--\npadRow();\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1257,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c16c4fa0df12c0e30675.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6bfe258db455d2d3b70d08a40f9dadd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f535ec33a285b33af3774.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660f535ec33a285b33af3774\ntitle: Step 116\nchallengeType: 1\ndashedName: step-116\n--description--\nWhen inverted is false, you want to build a standard pyramid Use push() like you have in previous steps to achieve this --hints--\nYou should call the push() method of rows in your else block js\nassert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*/);\nYou should pass a padRow() call as the argument for your push() method js\nassert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*padRow\\(/);\nYou should pass i as the first argument to your padRow() call js\nassert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*padRow\\(\\s*i/);\nYou should pass count as the second argument to your padRow() call js\nassert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nlet inverted = true;\nfunction padRow(rowNumber, rowCount) {\nreturn \" \" repeat(rowCount - rowNumber) + character",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f535ec33a285b33af3774.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cf35b33d179a4cc5bf3b6e7f926761f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f535ec33a285b33af3774.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js assert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*padRow\\(/); You should pass i as the first argument to your padRow() call js assert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*padRow\\(\\s*i/); You should pass count as the second argument to your padRow() call js assert match(__helpers removeJSComments(code), /if\\s*\\(\\s*inverted\\s*\\)\\s*\\{\\s*rows\\ unshift\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\);\\s*\\}\\s*else\\s*\\{\\s*rows\\ push\\(\\s*padRow\\(\\s*i\\s*,\\s*count\\s*\\)/); --seed-- --seed-contents-- ```js const character = \"#\"; const count = 8; const rows = []; let inverted = true; function padRow(rowNumber, rowCount) { return \" \" repeat(rowCount - rowNumber) + characterrepeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n--fcc-editable-region--\nfor (let i = 1; i <= count; i++) {\nif (inverted) {\nrows unshift(padRow(i, count));\n} else {\n}\n}\n--fcc-editable-region--\n/while (rows length < count) {\nrows push(padRow(rows length + 1, count));\n}/\n/for (let i = count; i > 0; i--) {\nrows push(padRow(i, count));\n}/\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\660f535ec33a285b33af3774.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6f68cd381a7ebf97f341b512b3d304af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c1d97b1671140f95cfbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c1d97b1671140f95cfbb\ntitle: Step 50\nchallengeType: 1\ndashedName: step-50\n--description--\nNow add a log statement to print the value of your call variable.\n--hints--\nYou should add a console.log call.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log/g), 2)\nYou should log your call variable. Don't forget the semicolon.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*call\\s*\\);/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\n}\nconst call = padRow();\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 850,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c1d97b1671140f95cfbb.md",
      "source_type": "git_repo"
    },
    "token_count": 234,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3be4b1ead2520bd22eb9fcad47c2b351",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c424b7119919b62932f4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c424b7119919b62932f4\ntitle: Step 53\nchallengeType: 1\ndashedName: step-53\n--description--\nA function does not have to return a hard-coded value. It can return the value stored in a variable. Parameters are special variables for a function, so they can also be returned.\nChange your padRow function to return the name parameter directly.\n--hints--\nYour padRow function should return the value of the name parameter.\njs\nassert.equal(padRow(\"Naomi\"), \"Naomi\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(name) {\nreturn \"Hello!\";\n}\n--fcc-editable-region--\nconst call = padRow();\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 919,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c424b7119919b62932f4.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2ce00207df1408fafdb83ba056a49347",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c21b3ef82015573ffbbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c21b3ef82015573ffbbe\ntitle: Step 51\nchallengeType: 1\ndashedName: step-51\n--description--\nYour call variable has an undefined value, even though you defined it! This is because your padRow function does not currently return a value. By default, functions return undefined as their value.\nIn order to return something else, you need to use the return keyword. Here is an example of a function that returns the string \"Functions are cool!\":\njs\nfunction demo() {\nreturn \"Functions are cool!\";\n}\nUse the return keyword to have your function return the string \"Hello!\".\n--hints--\nYour padRow function should use the return keyword.\njs\nassert.match(padRow.toString(), /return/);\nYour padRow function should return the string \"Hello!\".\njs\nassert.equal(padRow(), \"Hello!\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\n}\n--fcc-editable-region--\nconst call = padRow();\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c21b3ef82015573ffbbe.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "56de509c34c325fab1bad0980ef0846c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c2d8d67563174fcf96dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c2d8d67563174fcf96dc\ntitle: Step 52\nchallengeType: 1\ndashedName: step-52\n--description--\nWhen you have a value that is explicitly written in your code, like the \"Hello!\" string in your function, it is considered to be hard-coded. Hard-coding a value inside a function might not make it as reusable as you'd like.\nInstead, you can define parameters for the function. Parameters are special variables that are given a value when you call the function, and can be used in your function to dynamically change the result of the function's code.\nTo add a parameter to your function, you need to add a variable name inside the parentheses. For example, this demo function has a name parameter:\n```js\nfunction demo(name) {\n}\n```\nname sounds like a useful parameter, so go ahead and add it to your padRow function.\n--hints--\nYour padRow function should have a name parameter.\njs\nassert.match(padRow.toString(), /\\(name\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\nreturn \"Hello!\";\n}\n--fcc-editable-region--\nconst call = padRow();\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c2d8d67563174fcf96dc.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6676068a72fac264f9afede16ed7f645",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c48c4ea0891afa7c4696.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c48c4ea0891afa7c4696\ntitle: Step 54\nchallengeType: 1\ndashedName: step-54\n--description--\nIf you open your console again, you'll see that your padRow function is returning undefined, even though you defined a return value! This is because parameters need to be given a value when you call the function.\nWhen you pass a value to a function call, that value is referred to as an argument. Here is an example of calling a demo function and passing \"Naomi\" as the argument for the name parameter.\njs\nfunction demo(name) {\nreturn name;\n}\ndemo(\"Naomi\");\nPass your own name as the argument for the name parameter in your padRow call. Remember that your name is a string, so you'll need to use quotes.\n--hints--\nYou should pass a string to your padRow() call.\njs\nassert.match(__helpers.removeJSComments(code), /padRow\\(\\s*(\"|').+\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(name) {\nreturn name;\n}\n--fcc-editable-region--\nconst call = padRow();\n--fcc-editable-region--\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c48c4ea0891afa7c4696.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f67aa2a8be7f87f25e057cccee0da4cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c6541c82551f95e765ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c6541c82551f95e765ab\ntitle: Step 58\nchallengeType: 1\ndashedName: step-58\n--description--\nVariables can also be declared inside a function. These variables are considered to be in the local scope, or block scope. A variable declared inside a function can only be used inside that function. If you try to access it outside of the function, you get a reference error.\nTo see this in action, use const to declare a test variable in your padRow function. Initialise it with the value \"Testing\".\nThen, below your function, try to log test to the console. You will see an error because it is not defined outside of the function's local scope. Remove that console.log to pass the tests and continue.\n--hints--\nYour function should declare a test variable.\njs\nassert.match(padRow.toString(), /var\\s+test/);\nYou should initialise test with the value \"Testing\". Don't forget the semicolon.\njs\nassert.match(padRow.toString(), /var\\s+test\\s*=\\s*('|\")Testing\\1;/)\nYour test variable should come before your return keyword.\njs\nconst str = padRow.toString();\nconst testIndex = str.indexOf(\"test\");\nconst returnLocation = str.indexOf(\"return\");\nconst testLocation = testIndex !== -1 ? testIndex : returnLocation\nassert.isBelow(testLocation, returnLocation);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(name) {\nreturn character + name;\n}\n--fcc-editable-region--\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c6541c82551f95e765ab.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13e0d3417b9d6437558153fa438335d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c77d50636722e5b6be17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c77d50636722e5b6be17\ntitle: Step 60\nchallengeType: 1\ndashedName: step-60\n--description--\nBelow the return statement, log the string \"This works!\" to the console.\nAfter doing that, you will see that the string \"This works!\" does not display in the console, and the console.log(\"This works!\") line is greyed out.\nCopy the console log and paste it above the return statement. Now, the string \"This works!\" should appear in the console.\nAn important thing to know about the return keyword is that it does not just define a value to be returned from your function, it also stops the execution of your code inside a function or a block statement. This means any code after a return statement will not run.\n--hints--\nYour padRow function should return the test variable.\njs\nassert.equal(padRow(\"Naomi\"), \"Testing\");\nYour first console.log should come after your return keyword.\njs\nassert.match(padRow.toString(), /return\\s+test;\\s+console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);/);\nYour second console.log should come before your return keyword.\njs\nassert.match(padRow.toString(), /console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);\\s+return\\s+test;/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(name) {\nconst test = \"Testing\";\nreturn test;\n}\n--fcc-editable-region--\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c77d50636722e5b6be17.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "11345ec2a9ebb1b940c659ea92ea3c9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c538372aa61cc0f5b122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c538372aa61cc0f5b122\ntitle: Step 57\nchallengeType: 1\ndashedName: step-57\n--description--\nVariables in JavaScript are available in a specific scope. In other words, where a variable is declared determines where in your code it can be used.\nThe first scope is the global scope. Variables that are declared outside of any \"block\" like a function or for loop are in the global scope. Your character, count, and rows variables are all in the global scope.\nWhen a variable is in the global scope, a function can access it in its definition. Here is an example of a function using a global title variable:\njs\nconst title = \"Professor \";\nfunction demo(name) {\nreturn title + name;\n}\ndemo(\"Naomi\")\nThis example would return \"Professor Naomi\". Update your padRow function to return the value of concatenating your character variable to the beginning of the name parameter.\n--hints--\nYour padRow function should concatenate character to the beginning of name.\njs\nassert.match(padRow.toString(), /character\\s*\\+\\s*name/);\nYour padRow function should return the result of character + name.\njs\nassert.equal(padRow(\"Naomi\"), \"#Naomi\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(name) {\nreturn name;\n}\n--fcc-editable-region--\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1652,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c538372aa61cc0f5b122.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7cf45483b84c9cce938050166bfa80d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c8cfe4cf4d278e35c156.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c8cfe4cf4d278e35c156\ntitle: Step 63\nchallengeType: 1\ndashedName: step-63\n--description--\nAs expected, your function now returns undefined again. Your call variable is not necessary any more, so remove the call declaration and the console.log for the call variable.\n--hints--\nYou should not have a call declaration.\njs\nassert.notMatch(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)), /constcall/);\nYou should not log your call variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /call/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\n}\nconst call = padRow();\nconsole.log(call);\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 962,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c8cfe4cf4d278e35c156.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ba841e9d05c74fef2712c058d532de67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c87eac0f0b256d7b037e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c87eac0f0b256d7b037e\ntitle: Step 62\nchallengeType: 1\ndashedName: step-62\n--description--\nBecause your function was no longer using the parameter, changing the argument did not affect it.\nGo ahead and remove the test declaration and return statement from your padRow function, so the function is empty again.\n--hints--\nYour padRow function should not have a test variable.\njs\nassert.notMatch(padRow.toString(), /test/);\nYour padRow function should not return a value.\njs\nassert.notMatch(padRow.toString(), /return/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow() {\nconst test = \"Testing\";\nreturn test;\n}\nconst call = padRow();\nconsole.log(call);\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1006,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c87eac0f0b256d7b037e.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4944f6489d32d64f90a35b33b9b580ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c71600966a2191d3a64a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c71600966a2191d3a64a\ntitle: Step 59\nchallengeType: 1\ndashedName: step-59\n--description--\nValues returned out of a function are used by calling the function. You can use the function call directly as the value it returns, or capture the returned value in a variable. This way, you can use the value assigned to a locally scoped variable, outside the function it was created in.\n```js\nfunction getName() {\nconst name = \"Camper cat\";\nreturn name;\n}\nconsole.log(getName()); // \"Camper cat\"\nconst capturedReturnValue = getName();\nconsole.log(capturedReturnValue); // \"Camper cat\"\nconsole.log(name); // reference error\n```\nTo use your \"Testing\" value, return it out of the padRow function by updating your return statement to return only the test variable.\n--hints--\nYour padRow function should return the test variable.\njs\nassert.equal(padRow(\"Naomi\"), \"Testing\");\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(name) {\nconst test = \"Testing\";\nreturn character + name;\n}\n--fcc-editable-region--\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1382,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c71600966a2191d3a64a.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7a3418376fe64c140d835fc188d1ccaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c83b52583e245a079217.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6610c83b52583e245a079217\ntitle: Step 61\nchallengeType: 1\ndashedName: step-61\n--description--\nNow your call variable has the value \"Testing\". But your function is no longer using the name parameter.\nRemove the name parameter from your function declaration, then remove your \"CamperChan\" string from the padRow call.\nAlso, remove both console.log from the padRow function.\n--hints--\nYour padRow function should not have a name parameter.\njs\nassert.notMatch(padRow.toString(), /name/);\nYou should not pass \"CamperChan\" to your padRow call.\njs\nassert.notMatch(__helpers.removeJSComments(code), /CamperChan/);\nYou should still call your padRow function.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/padRow\\(\\)/g), 2);\nYou should not have a console.log before your return keyword.\njs\nassert.notMatch(padRow.toString(), /console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);\\s+return\\s+test;/);\nYou should not have a console.log after your return keyword.\njs\nassert.notMatch(padRow.toString(), /return\\s+test;\\s+console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\n--fcc-editable-region--\nfunction padRow(name) {\nconst test = \"Testing\";\nconsole.log(\"This works!\");\nreturn test;\nconsole.log(\"This works!\");\n}\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n--fcc-editable-region--\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6610c83b52583e245a079217.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "09b30215e4a5fb2d4e5f37f09f6b33d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\661483051820c3c1ab4595e0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 661483051820c3c1ab4595e0\ntitle: Step 96\nchallengeType: 1\ndashedName: step-96\n--description--\nReplace the done reference in your padRow call with rows.length + 1.\n--hints--\nYou should pass rows.length + 1 as the first argument to your padRow call.\njs\nassert.match(__helpers.removeJSComments(code), /rows\\.push\\(padRow\\s*\\(\\s*rows\\.length\\s*\\+\\s*1/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nlet done = 0;\nwhile (rows.length < count) {\ndone++;\nrows.push(padRow(done, count));\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\661483051820c3c1ab4595e0.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce452c2434a5b225b13f8bfcaaf81d96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\664599653fcd6e97104f9261.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664599653fcd6e97104f9261\ntitle: Step 83\nchallengeType: 1\ndashedName: step-83\n--description--\nSometimes you will want to run different code when all of the if...else if conditions are false. You can do this by adding an else block.\nAn else block will only evaluate if the conditions in the if and else if blocks are not met.\nHere the else block is added to the else if block.\n```js\nif (condition) {\n// this code will run if condition is true\n} else if (condition2) {\n// this code will run if the first condition is false\n} else {\n// this code will run\n// if the first and second conditions are false\n}\n```\nAdd an else block to the else if block. Inside the else block, log the string \"This is the else block\" to the console.\nTo see the results in the console, you can manually change the < in the else if statement to >. That will make the condition false and the else block will run.\n--hints--\nYou should have an else block.\njs\nassert.match(__helpers.removeJSComments(code), /else\\s*\\{/);\nYour else block should log the string \"This is the else block\" to the console.\njs\nassert.match(__helpers.removeJSComments(code), /console\\.log\\(\\s*('|\"|`)This\\s+is\\s+the\\s+else\\s+block\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows.push(padRow(i, count));\n}/\n--fcc-editable-region--\nif (\"\") {\nconsole.log(\"Condition is true\");\n} else if (5 < 10) {\nconsole.log(\"5 is less than 10\");\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\664599653fcd6e97104f9261.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c36113ff4b356d68deef0e115bbcaa60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\664ed97c55a99e5ffab759dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664ed97c55a99e5ffab759dc\ntitle: Step 13\nchallengeType: 1\ndashedName: step-13\n--description--\nBefore moving forward, you should take a moment to review the concepts you have learned.\nUse the let keyword to declare a profession variable and an age variable. Initialize profession with the string \"teacher\", but do not initialize age with any value.\nLog both of your variables to the console to see the results.\n--hints--\nYou should declare a profession variable.\njs\nassert.match(code, /(?:var|let|const)\\s+profession/);\nYou should use let to declare the profession variable.\njs\nassert.match(code, /let\\s+profession/);\nYou should assign the string \"teacher\" to the profession variable.\njs\nassert.strictEqual(profession, \"teacher\");\nYou should declare an age variable.\njs\nassert.match(code, /(?:var|let|const)\\s+age/);\nYou should use let to declare the age variable.\njs\nassert.match(code, /let\\s+age/);\nYou should not assign a value to the age variable.\njs\nassert.isUndefined(age);\nYou should log age to the console.\njs\nassert.match(code, /console\\.log\\(\\s*age\\s*\\);?/);\nYou should log profession to the console.\njs\nassert.match(code, /console\\.log\\(\\s*profession\\s*\\);?/);\n--seed--\n--seed-contents--\n```js\nlet character = \"Hello\";\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1416,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\664ed97c55a99e5ffab759dc.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cddedb08c9b9c6cec44adb83badc6614",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\664ed9344ba3495e1f67f8ea.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664ed9344ba3495e1f67f8ea\ntitle: Step 14\nchallengeType: 1\ndashedName: step-14\n--description--\nNow that you have reviewed declaration and initialization, remove the code you wrote for your review.\nDo not remove your character variable.\n--hints--\nYou should not have a profession variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /let\\s+profession/);\nYou should not have a age variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /let\\s+age/);\nYou should not have a console.log statement for age.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console\\.log\\(\\s*age\\s*\\);/);\nYou should not have a console.log statement for profession.\njs\nassert.notMatch(__helpers.removeJSComments(code), /console\\.log\\(\\s*profession\\s*\\);/);\nYou should still have your character variable.\njs\nassert.strictEqual(character, \"Hello\");\n--seed--\n--seed-contents--\njs\nlet character = \"Hello\";\n--fcc-editable-region--\nlet profession = \"teacher\";\nlet age;\nconsole.log(age);\nconsole.log(profession);\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1121,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\664ed9344ba3495e1f67f8ea.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cc75d8351eb775be09d28d84da0d6862",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\665732da4815b70bb083915e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665732da4815b70bb083915e\ntitle: Step 24\nchallengeType: 1\ndashedName: step-24\n--description--\nIn the last few steps, you learned all about working with arrays. Take a moment to review what you have learned.\nStart by declaring a cities variable and initializing it as an array of the strings \"London\", \"New York\", and \"Mumbai\". Then log that variable to the console.\nAfter logging, change the last element of cities to the string \"Mexico City\", then log the cities variable again.\nWhen done correctly, you should see this output in the console.\njs\n[ \"London\", \"New York\", \"Mumbai\" ]\n[ \"London\", \"New York\", \"Mexico City\" ]\n--hints--\nYou should use let to declare a cities variable.\njs\nassert.match(code, /let\\s+cities/);\nYou should assign an array of the strings \"London\", \"New York\", and \"Mumbai\" to the cities variable.\njs\nassert.match(code, /let\\s+cities\\s*=\\s*\\[\\s*(\"|'|`)London\\1\\s*,\\s*(\"|'|`)New York\\2\\s*,\\s*(\"|'|`)Mumbai\\3\\s*,?\\s*\\]/);\nYou should use console.log() to log the entire cities array to the console.\njs\nassert.match(code, /console\\.log\\(\\s*cities\\s*\\)/);\nYou should update the last element of the cities array to the string \"Mexico City\". Remember that you can access the last element of an array using array[array.length - 1].\njs\nassert.deepEqual(cities, [\"London\", \"New York\", \"Mexico City\"]);\nYou should have two console.log(cities) statements in your code.\njs\nassert.lengthOf(__helpers.removeJSComments(code).match(/console\\.log\\(\\s*cities\\s*\\)/g), 2);\n--seed--\n--seed-contents--\n```js\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--\n--fcc-editable-region--\nconsole.log(rows);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\665732da4815b70bb083915e.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "bc87423fc9f902bbd676b64be05fe083",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\665732e62eb8b30c249b5c2c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665732e62eb8b30c249b5c2c\ntitle: Step 25\nchallengeType: 1\ndashedName: step-25\n--description--\nNow you are ready to move onto the next set of array lessons.\nRemove all of your code from the previous step.\n--hints--\nYou should remove all references to your cities variable.\njs\nassert.notMatch(__helpers.removeJSComments(code), /cities/);\n--seed--\n--seed-contents--\njs\nlet character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n--fcc-editable-region--\nlet cities = [\"London\", \"New York\", \"Mumbai\"];\nconsole.log(cities);\ncities[cities.length - 1] = \"Mexico City\";\nconsole.log(cities);\n--fcc-editable-region--\nconsole.log(rows);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\665732e62eb8b30c249b5c2c.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3a62134a774447377a1b21fdde0f8cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66643c9a9e0ad1c787f5fe2b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66643c9a9e0ad1c787f5fe2b\ntitle: Step 56\nchallengeType: 1\ndashedName: step-56\n--description--\nWith that quick review complete, you should remove your addTwoNumbers function, sum variable, and log statement.\n--hints--\nYou should not have a addTwoNumbers function in your code.\njs\nassert.notMatch(code, /addTwoNumbers/);\nYou should not have a sum variable in your code.\njs\nassert.notMatch(code, /sum/);\nYou should not log the sum variable.\njs\nassert.notMatch(code, /console\\.log\\(\\s*sum\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(name) {\nreturn name;\n}\n--fcc-editable-region--\nfunction addTwoNumbers(num1, num2) {\nreturn num1 + num2;\n}\nconst sum = addTwoNumbers(5, 10);\nconsole.log(sum)\n--fcc-editable-region--\nconst call = padRow();\nconsole.log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows.push(character.repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole.log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66643c9a9e0ad1c787f5fe2b.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "15f035598bbb6e9c8c0431c6be660855",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6672e579cc11472272ab23e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6672e579cc11472272ab23e6\ntitle: Step 1\nchallengeType: 1\ndashedName: step-1\n--description--\nJavaScript is the programming language that powers the web. Unlike the HTML and CSS you have learned previously, JavaScript is most commonly used to write logic instead of markup.\nIn this project, you will learn the basics of Javascript and apply those concepts to building a pyramid generator.\nA pyramid generator is a program where you can set the type of character, the count for the pyramid, and the direction of the pyramid. The program will then generate a pyramid based on those inputs.\nClick on the \"Check your code\" button to proceed to the next step and start the project.\n--hints--\nSubmit to continue.\n```js\n```\n--seed--\n--seed-contents--\n```js\nconsole.log(\"Let's build a pyramid using JavaScript basics:\");\nconsole.log(\"    #    \");\nconsole.log(\"   ###   \");\nconsole.log(\"  #####  \");\nconsole.log(\" ####### \");\nconsole.log(\"#########\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1030,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\6672e579cc11472272ab23e6.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9ce0e19a9d6e6f2bd602089cb492a1f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66458f0a05df478aa627629e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66458f0a05df478aa627629e\ntitle: Step 82\nchallengeType: 1\ndashedName: step-82\n--description--\nThe text is gone again Empty strings evaluate to false, making them a falsy value You will learn more about truthy and falsy values in future projects In addition to if statements, JavaScript also has else if statements else if statements allow you to check multiple conditions in a single block of code Here is the syntax for an else if statement:\njs\nif (condition1) {\n// code to run if condition1 is true\n} else if (condition2) {\n// code to run if condition2 is true\n} else if (condition3) {\n// code to run if condition3 is true\n}\nIf the first condition is false, JavaScript will check the next condition in the chain If the second condition is false, JavaScript will check the third condition, and so on Below your if statement, add an else if statement that checks if 5 is less than 10 Then inside the body of the else if statement, log the string \"5 is less than 10\" to the console Check the console to see the results --hints--\nYou should have an else if statement js\nassert match(__helpers removeJSComments(code), /else\\s+if\\s*\\(/);\nYour else if statement should check if 5 is less than 10 js\nassert match(__helpers removeJSComments(code), /else\\s+if\\s*\\(\\s*5\\s*<\\s*10\\s*\\)/);\nYou should log the string \"5 is less than 10\" to the console js\nassert match(__helpers removeJSComments(code), /console\\ log\\(\\s*('|\"|`)5\\s+is\\s+less\\s+than\\s+10\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(rowNumber, rowCount) {\nreturn \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber);\n}\n// TODO: use a different type of loop\n/for (let i = 1; i <= count; i++) {\nrows push(padRow(i, count));\n}/\n--fcc-editable-region--\nif (\"\") {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66458f0a05df478aa627629e.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e486da85ddd49dfa2d8fd8e9e2ec804e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66458f0a05df478aa627629e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "10\" to the console js assert match(__helpers removeJSComments(code), /console\\ log\\(\\s*('|\"|`)5\\s+is\\s+less\\s+than\\s+10\\1\\s*\\)/); --seed-- --seed-contents-- ```js const character = \"#\"; const count = 8; const rows = []; function padRow(rowNumber, rowCount) { return \" \" repeat(rowCount - rowNumber) + character repeat(2 * rowNumber - 1) + \" \" repeat(rowCount - rowNumber); } // TODO: use a different type of loop /for (let i = 1; i <= count; i++) { rows push(padRow(i, count)); }/ --fcc-editable-region-- if (\"\") { consolelog(\"Condition is true\");\n}\n--fcc-editable-region--\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole log(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66458f0a05df478aa627629e.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "00f1e959e251b50e17924530228f76db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66643c93e05093c728abdbe9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66643c93e05093c728abdbe9\ntitle: Step 55\nchallengeType: 1\ndashedName: step-55\n--description--\nBefore moving on, take a moment to review how functions work Declare a function named addTwoNumbers This function should take two arguments and return the sum of those two arguments Your function should not use hard-coded values An example of a hard-coded function might be:\n```js\nfunction sayName(firstName, lastName) {\nreturn \"John Doe\";\n}\nsayName(\"Camper\", \"Cat\");\n```\nThis function would return \"John Doe\" regardless of the arguments passed to the parameters firstName, and lastName, so \"John Doe\" is considered a hard-coded value Declare a sum variable and assign it the value of calling your addTwoNumbers function with 5 and 10 as the arguments Log the sum variable to the console --hints--\nYou should have a function called addTwoNumbers js\nassert isFunction(addTwoNumbers);\nYour function addTwoNumbers should have two parameters js\nassert lengthOf(addTwoNumbers, 2);\nYour function should return the sum of the two parameters js\nassert strictEqual(addTwoNumbers(5,10), 15);\nYour function should not return a hard-coded value That is, it should work with any two number arguments js\nassert strictEqual(addTwoNumbers(3, 5), 8);\nYou should declare a sum variable js\nassert isDefined(sum);\nYour sum variable should have the value 15 js\nassert strictEqual(sum, 15);\nYou should assign sum the value from calling the addTwoNumbers function with 5 and 10 for the arguments js\nassert match(code, /sum\\s*=\\s*addTwoNumbers\\s*\\(/);\nYou should log your sum variable js\nassert match(code, /console\\ log\\(\\s*sum\\s*\\)/);\n--seed--\n--seed-contents--\n```js\nconst character = \"#\";\nconst count = 8;\nconst rows = [];\nfunction padRow(name) {\nreturn name;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst call = padRow(\"CamperChan\");\nconsole log(call);\nfor (let i = 0; i < count; i = i + 1) {\nrows push(character repeat(i + 1))\n}\nlet result = \"\"\nfor (const row of rows) {\nresult = result + row + \"\\n\";\n}\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66643c93e05093c728abdbe9.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3c1cf6080198cfc25b6ae3c5ab93b6ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66643c93e05093c728abdbe9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "your sum variable js assert match(code, /console\\ log\\(\\s*sum\\s*\\)/); --seed-- --seed-contents-- ```js const character = \"#\"; const count = 8; const rows = []; function padRow(name) { return name; } --fcc-editable-region-- --fcc-editable-region-- const call = padRow(\"CamperChan\"); console log(call); for (let i = 0; i < count; i = i + 1) { rows push(character repeat(i + 1)) } let result = \"\" for (const row of rows) { result = result + row + \"\\n\"; } consolelog(result);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-introductory-javascript-by-building-a-pyramid-generator\\66643c93e05093c728abdbe9.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eeaf20b03b0c5dc25af0b90035b8ec12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e4c4ec263b62ae7bf54d\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you will learn how localStorage works in JavaScript by building a Todo app LocalStorage is a web storage feature of JavaScript that lets you persist data by storing the data as a key:value pair The HTML and CSS for this project have been provided for you Take a look at the files to get yourself familiarized with them Begin by accessing the task-form, confirm-close-dialog, and open-task-form-btn elements with the getElementById() method Save them in the variables taskForm, confirmCloseDialog, and openTaskFormBtn --hints--\nYou should use getElementById() to access the task-form element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)task\\-form\\1\\s*\\)\\s*; /)\nYou should assign the task-form element to the variable taskForm Don't forget to use const to declare the variable js\nassert match(code, /const\\s+taskForm\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)task\\-form\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the confirm-close-dialog element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)confirm\\-close\\-dialog\\1\\s*\\)\\s*; /)\nYou should assign the confirm-close-dialog element to the variable confirmCloseDialog Don't forget to use const to declare the variable js\nassert match(code, /const\\s+confirmCloseDialog\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)confirm\\-close\\-dialog\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the open-task-form-btn element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)open\\-task\\-form\\-btn\\1\\s*\\)\\s*; /)\nYou should assign the open-task-form-btn element to the variable openTaskFormBtn Don't forget to use const to declare the variable js\nassert match(code, /const\\s+openTaskFormBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)open\\-task\\-form\\-btn\\1\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "36a4e2565c0e3f198c93a2d8d7eea156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "getElementById() to access the confirm-close-dialog element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)confirm\\-close\\-dialog\\1\\s*\\)\\s*; /) You should assign the confirm-close-dialog element to the variable confirmCloseDialog Don't forget to use const to declare the variable js assert match(code, /const\\s+confirmCloseDialog\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)confirm\\-close\\-dialog\\1\\s*\\)\\s*; /) You should use getElementById() to access the open-task-form-btn element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)open\\-task\\-form\\-btn\\1\\s*\\)\\s*; /) You should assign the open-task-form-btn element to the variable openTaskFormBtn Don't forget to use const to declare the variable js assert match(code, /const\\s+openTaskFormBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)open\\-task\\-form\\-btn\\1\\s*\\)\\s*;/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0776102f9575657aaf6f6f78f2279ef7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f69e792e8860d940519f45208942eece",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e4c4ec263b62ae7bf54d.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5183b17188f8a7fdbcd095c2c095559b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e6c86954de67a3e44ee3\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nYou need to access more elements with the getElementById() method This time you need the close-task-form-btn, add-or-update-task-btn, and cancel-btn elements Save them in the variables closeTaskFormBtn, addOrUpdateTaskBtn, and cancelBtn --hints--\nYou should use getElementById() to access the close-task-form-btn element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)close\\-task\\-form\\-btn\\1\\s*\\)\\s*; /)\nYou should assign the close-task-form-btn element to the variable closeTaskFormBtn Don't forget to use const to declare the variable js\nassert match(code, /const\\s+closeTaskFormBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)close\\-task\\-form\\-btn\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the add-or-update-task-btn element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)add\\-or\\-update\\-task\\-btn\\1\\s*\\)\\s*; /)\nYou should assign the add-or-update-task-btn element to the variable addOrUpdateTaskBtn Don't forget to use const to declare the variable js\nassert match(code, /const\\s+addOrUpdateTaskBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)add\\-or\\-update\\-task\\-btn\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the cancel-btn element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)cancel\\-btn\\1\\s*\\)\\s*; /)\nYou should assign the cancel-btn element to the variable cancelBtn Don't forget to use const to declare the variable js\nassert match(code, /const\\s+cancelBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)cancel\\-btn\\1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "9c5ec17e4263ad040cfe4f7d0d617df0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "to use const to declare the variable js assert match(code, /const\\s+addOrUpdateTaskBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)add\\-or\\-update\\-task\\-btn\\1\\s*\\)\\s*; /) You should use getElementById() to access the cancel-btn element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)cancel\\-btn\\1\\s*\\)\\s*; /) You should assign the cancel-btn element to the variable cancelBtn Don't forget to use const to declare the variable js assert match(code, /const\\s+cancelBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)cancel\\-btn\\1\\s*\\)\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f64263203b5a10096f433b77251fbddd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 12rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "226d7ceb6931e9b9c0de23c166077bc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6c86954de67a3e44ee3.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "88957e8c47279087b8e8d9e80479f5b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e6fe78b5aa67ef2fc3e7\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nNext, access the discard-btn, tasks-container, and title-input elements using the getElementById() method Save them in variables named discardBtn, tasksContainer, and titleInput, respectively --hints--\nYou should use getElementById() to access the discard-btn element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)discard\\-btn\\1\\s*\\)\\s*; /)\nYou should assign the discard-btn element to the variable discardBtn Don't forget to use const to declare the variable js\nassert match(code, /const\\s+discardBtn\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)discard\\-btn\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the tasks-container element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)tasks\\-container\\1\\s*\\)\\s*; /)\nYou should assign the tasks-container element to the variable tasksContainer Don't forget to use const to declare the variable js\nassert match(code, /const\\s+tasksContainer\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)tasks\\-container\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the title-input element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)title\\-input\\1\\s*\\)\\s*; /)\nYou should assign the title-input element to the variable titleInput Don't forget to use const to declare the variable js\nassert match(code, /const\\s+titleInput\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)title\\-input\\1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7105,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "5c67189d784c27034fa5f906f12eccab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "to use const to declare the variable js assert match(code, /const\\s+tasksContainer\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)tasks\\-container\\1\\s*\\)\\s*; /) You should use getElementById() to access the title-input element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)title\\-input\\1\\s*\\)\\s*; /) You should assign the title-input element to the variable titleInput Don't forget to use const to declare the variable js assert match(code, /const\\s+titleInput\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)title\\-input\\1\\s*\\)\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7105,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9e90cca631994d9133f0e3cb89e7b1c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 12rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7105,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a1e78751a395499c5cdf4f25b26c508f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7105,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e6fe78b5aa67ef2fc3e7.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9895840a9f71a513a2d5932bc2a99839",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e7241f52bb682eeb8211\ntitle: Step 4\nchallengeType: 0\ndashedName: step-4\n--description--\nThe last set of elements you need to get from the HTML file are the date-input and description-input elements Save them in the variables dateInput and descriptionInput respectively --hints--\nYou should use getElementById() to access the date-input element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)date\\-input\\1\\s*\\)\\s*; /)\nYou should assign the date-input element to the variable dateInput Don't forget to use const to declare the variable js\nassert match(code, /const\\s+dateInput\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)date\\-input\\1\\s*\\)\\s*; /)\nYou should use getElementById() to access the description-input element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)description\\-input\\1\\s*\\)\\s*; /)\nYou should assign the description-input element to the variable descriptionInput Don't forget to use const to declare the variable js\nassert match(code, /const\\s+descriptionInput\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)description\\-input\\1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a7b8955b3379dbd64d3661fd76e0e8ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e88fb9970db8bd9a00805ca7745d7a1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a4c32125fe29cd21837ef3e42b95c4ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7241f52bb682eeb8211.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "70c1704af33c50b03e5a8550d38f686b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e74d0fb4f0687bf4145d\ntitle: Step 5\nchallengeType: 0\ndashedName: step-5\n--description--\nCreate a taskData constant and set it to an empty array This array will store all the tasks along with their associated data, including title, due date, and description This storage will enable you to keep track of tasks, display them on the page, and save them to localStorage Use let to create a currentTask variable and set it to an empty object This variable will be used to track the state when editing and discarding tasks --hints--\nYou should have a const variable called taskData js\nassert match(code, /const\\s+taskData\\s*=/)\nYou should assign an array to your taskData constant js\nassert isArray(taskData);\nYour taskData array should be empty js\nassert isEmpty(taskData);\nYou should use let to create a currentTask variable js\nassert match(code, /let\\s+currentTask/);\nYou should assign an object to your currentTask variable js\nassert isObject(currentTask);\nYour currentTask object should be empty js\nassert isEmpty(currentTask);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a3dcfc7f9949324840982e9f1c10845c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c3682ca4407a6652188e99cb75c2e9b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6721e0b230688eac7d423016f0f7d941",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e74d0fb4f0687bf4145d.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "22686ba44fddcd4bdd60711fffbda72e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e78a7ea4a168de4e6a38\ntitle: Step 6\nchallengeType: 0\ndashedName: step-6\n--description--\nNow, you will work on opening and closing the form modal In earlier projects, you learned how to add and remove classes from an element with el classList add() and el classList remove() Another method to use with the classList property is the toggle method The toggle method will add the class if it is not present on the element, and remove the class if it is present on the element js\nelement classList toggle(\"class-to-toggle\");\nAdd an event listener to the openTaskFormBtn element and pass in a \"click\" event for the first argument and an anonymous callback function for the second argument Inside the callback function, use the classList toggle() method to toggle the \"hidden\" class on the taskForm element Now you can click on the \"Add new Task\" button and see the form modal --hints--\nYou should call the addEventListener() method on your openTaskFormBtn variable js\nassert match(code, /openTaskFormBtn\\ addEventListener\\(/)\nYour event listener should listen for a click event js\nassert match(code, /openTaskFormBtn\\ addEventListener\\(\\s*('|\"|`)click\\1/)\nYour event listener's callback function should use the classList toggle() method to toggle the hidden class on the taskForm element Refer back to the example provided in the description js\nassert(taskForm classList contains('hidden'));\nopenTaskFormBtn click();\nassert( taskForm classList contains('hidden'));\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ab37a79425308bf3a36b2d59d51c2365",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Your event listener should listen for a click event js assert match(code, /openTaskFormBtn\\ addEventListener\\(\\s*('|\"|`)click\\1/) Your event listener's callback function should use the classList toggle() method to toggle the hidden class on the taskForm element Refer back to the example provided in the description js assert(taskForm classList contains('hidden')); openTaskFormBtn click(); assert( taskForm classList contains('hidden')); --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5d02fec96c7d9c2532c30183cf7f0912",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; }task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f63bb3741af95d1109356f4d24c9ee29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; }hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e78a7ea4a168de4e6a38.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6d6d9f9b5ae7af69238fb0c4217da03f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4e7bbedb22d6939001ad3\ntitle: Step 7\nchallengeType: 0\ndashedName: step-7\n--description--\nA modal is an element that prevents all interaction with elements outside it until the modal has been dismissed The HTML dialog element has a showModal() method that can be used to display a modal dialog box on a web page js\ndialogElement showModal();\nAdd an event listener to the closeTaskFormBtn variable and pass in a click event for the first argument and a callback function for the second argument For the callback function, call the showModal() method on the confirmCloseDialog element This will display a modal with the Discard and Cancel buttons --hints--\nYou should call the addEventListener() method on your closeTaskFormBtn variable js\nassert match(code, /closeTaskFormBtn\\ addEventListener\\(/)\nYour event listener should listen for a click event js\nassert match(code, /closeTaskFormBtn\\ addEventListener\\(\\s*('|\"|`)click\\1/)\nYour event listener's callback function should call the showModal() method on the confirmCloseDialog element js\nassert match(code, /closeTaskFormBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\( *\\)\\s*=>\\s*(\\{\\s*confirmCloseDialog\\ showModal\\(\\s*\\)\\s*; \\s*\\}|confirmCloseDialog\\ showModal\\(\\s*\\))\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "48a20873f0bd684a5820b0eb906fbe50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "27a88de72ebf384dddacff8055f28b05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b755ed529c028ff33d883c5eef415592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4e7bbedb22d6939001ad3.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c53b13902a333a4d207b1cdda2f82753",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4ebc7eabc5a6babd479cd\ntitle: Step 9\nchallengeType: 0\ndashedName: step-9\n--description--\nIf the user clicks the Discard button, you want to close the modal showing the Cancel and Discard buttons, then hide the form modal Add a click event listener to discardBtn, then use the close() method on the confirmCloseDialog variable Also, use classList to toggle the class hidden on taskForm so the form modal will close too --hints--\nYou should call the addEventListener() method on your discardBtn variable js\nassert match(code, /discardBtn\\ addEventListener\\(/)\nYour event listener should listen for a click event js\nassert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1/)\nYou should use arrow syntax to set your event listener to an empty pair of curly braces js\nassert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{/)\nYour event listener should use the close() method on confirmCloseDialog js\nassert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*confirmCloseDialog\\ close\\(\\s*\\)\\s*; /)\nYour event listener should use classList to toggle the class hidden on taskForm js\nassert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*confirmCloseDialog\\ close\\(\\s*\\)\\s*; \\s*taskForm\\ classList\\ toggle\\(\\s*('|\"|`)hidden\\2\\s*\\)\\s*; \\s*\\}\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "267d0121587aa97c99f4d4c4f992541c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "to an empty pair of curly braces js assert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{/) Your event listener should use the close() method on confirmCloseDialog js assert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*confirmCloseDialog\\ close\\(\\s*\\)\\s*; /) Your event listener should use classList to toggle the class hidden on taskForm js assert match(code, /discardBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*confirmCloseDialog\\ close\\(\\s*\\)\\s*; \\s*taskForm\\ classList\\ toggle\\(\\s*('|\"|`)hidden\\2\\s*\\)\\s*; \\s*\\}\\s*\\)\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a4614a03e3d78d1b43ebbc0f1977745f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "fcd97cba3e5db1eb6b550de892650d92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4d4ba9101b65640cb20cdb14d35715e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7601,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ebc7eabc5a6babd479cd.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "16f21bf83c2e97fe54a448142ef7fec1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4eaaa9070a66aecbfe603\ntitle: Step 8\nchallengeType: 0\ndashedName: step-8\n--description--\nIf the user clicks the Cancel button, you want to cancel the process and close the modal so the user can continue editing The HTML dialog element has a close() method that can be used to close a modal dialog box on a web page js\ndialogElement close();\nAdd an event listener to the cancelBtn element and pass in a click event for the first argument and a callback function for the second argument For the callback function, call the close() method on the confirmCloseDialog element --hints--\nYou should call the addEventListener() method on your cancelBtn variable js\nassert match(code, /cancelBtn\\ addEventListener\\(/)\nYour event listener should listen for a click event js\nassert match(code, /cancelBtn\\ addEventListener\\(\\s*('|\"|`)click\\1/)\nYour event listener's callback function should call the close() method on confirmCloseDialog element js\nassert match(code, /cancelBtn\\ addEventListener\\(\\s*('|\"|`)click\\1\\s*,\\s*\\(\\s*\\)\\s*=>\\s*(\\{\\s*confirmCloseDialog\\ close\\(\\s*\\)\\s*; \\s*\\}|confirmCloseDialog\\ close\\(\\s*\\))\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3dfd086030636f81a363184f7f6ed96b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "73a5e01378743dad639b791df4017bde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c3fd968f5d3d1ecf03d5aae8b7289f38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7260,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eaaa9070a66aecbfe603.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "18651d4a43c50d413d8217898118b15a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4ecd7735a566c9266a338\ntitle: Step 10\nchallengeType: 0\ndashedName: step-10\n--description--\nNow that you've worked on opening and closing the modal, it's time to get the values from the input fields, save them into the taskData array, and display them on the page To start, add a submit event listener to your taskForm element and pass in e as the parameter of your arrow function Inside the curly braces, use the preventDefault() method to stop the browser from refreshing the page after submitting the form --hints--\nYou should call the addEventListener() method on your taskForm variable js\nassert match(code, /taskForm\\ addEventListener\\(/)\nYour event listener should listen for a submit event js\nassert match(code, /taskForm\\ addEventListener\\(\\s*('|\"|`)submit\\1/)\nYou should use arrow syntax to set your event listener to an empty pair of curly braces with e as the parameter js\nassert match(code, /taskForm\\ addEventListener\\(\\s*('|\"|`)submit\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{/)\nYou should use the e preventDefault() method to stop the browser from reloading the page js\nassert match(code, /taskForm\\ addEventListener\\(\\s*('|\"|`)submit\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{\\s*e\\ preventDefault\\(\\s*\\)\\s*; \\s*\\}\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "54b2e2278d73463a18858b3e39b6c697",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "match(code, /taskForm\\ addEventListener\\(\\s*('|\"|`)submit\\1/) You should use arrow syntax to set your event listener to an empty pair of curly braces with e as the parameter js assert match(code, /taskForm\\ addEventListener\\(\\s*('|\"|`)submit\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{/) You should use the e preventDefault() method to stop the browser from reloading the page js assert match(code, /taskForm\\ addEventListener\\(\\s*('|\"|`)submit\\1\\s*,\\s*(\\(\\s*e\\s*\\)|e)\\s*=>\\s*\\{\\s*e\\ preventDefault\\(\\s*\\)\\s*; \\s*\\}\\s*\\)\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1b6177e528ad5cf2dcef4c8973c20f65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "4a9989e152c6ec8ce7104ef0356f2160",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; }confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f4be7038e10915eb56b324bb8dd7c3b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; openTaskFormBtnaddEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7552,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4ecd7735a566c9266a338.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "6ec062c3452d15d5d6f6665b8177f380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64e4eec13546c06d61a63d59\ntitle: Step 11\nchallengeType: 0\ndashedName: step-11\n--description--\nYou will need to determine whether the task being added to the taskData array already exists or not If the task does not exist, you will add it to the array If it does exist, you will update it To accomplish this, you can use the findIndex() method The findIndex() array method finds and returns the index of the first element in an array that meets the criteria specified by a provided testing callback function If no such element is found, the method returns -1 The callback should return a truthy value to indicate a matching element has been found, and a falsy value otherwise Here's an example:\n```js\nconst numbers = [3, 1, 5, 6];\nconst firstNumLargerThanThree = numbers findIndex((num) => num > 3);\nconsole log(firstNumLargerThanThree); // prints index 2\n```\nUse const to declare a variable called dataArrIndex and assign it the value of taskData findIndex() For the findIndex() method, pass in an arrow function with item as the parameter Within the arrow function, check if the id property of item is strictly equal to the id property of currentTask --hints--\nYou should use const to declare a dataArrIndex variable and set it to taskData findIndex() js\nassert match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(/)\nYou should pass in item as the parameter of the arrow function callback Don't use curly braces js\nassert match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/)\nYour arrow function callback should check if item id === currentTask id js\nassert match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*((item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)|({\\s*return\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "034aeb14e7d76b62f319be88ac0bf5bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "item is strictly equal to the id property of currentTask --hints-- You should use const to declare a dataArrIndex variable and set it to taskData findIndex() js assert match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(/) You should pass in item as the parameter of the arrow function callback Don't use curly braces js assert match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/) Your arrow function callback should check if item id === currentTask id js assert match(code, /const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*((item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)|({\\s*return\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\id\\s*===\\s*item\\ id); \\s*}))\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "075c434727d6fe341e1d1bda9270f62b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e42ce1efb0cdddb7394fc258dd3c0b35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "31ab138b91ccc727ed5d5a8d45563137",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64e4eec13546c06d61a63d59.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "4684f0c544f4f03bf252206f20f93f9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec89ee549ecf802de2b3e2\ntitle: Step 19\nchallengeType: 0\ndashedName: step-19\n--description--\nNow it is time to add the remaining properties to the taskObj object Retrieve the values from the titleInput, dateInput, and descriptionInput fields, and then save them in the properties title, date, and description of the taskObj object Add a new task and open up the console to see the taskObj object with the new properties --hints--\nYour taskObj object should have a title key and value of titleInput value js\nassert match(code, /title:\\s*titleInput\\ value\\s*, /);\nYour taskObj object should have a date key and value of dateInput value js\nassert match(code, /date:\\s*dateInput\\ value\\s*, /);\nYour taskObj object should have a description key and value of descriptionInput value js\nassert match(code, /description:\\s*descriptionInput\\ value\\s*, /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "724340e1c3a650c47ad8e89d46dfb6ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8fb71d6b704da5aa2f6c3331be7850e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ae861181ff20f78b7c3951d2cdab67c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconsole log(taskObj);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec89ee549ecf802de2b3e2.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f105bf71fbebd251fba7df7049d70e41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec8f717b261e824d82d6a5\ntitle: Step 21\nchallengeType: 0\ndashedName: step-21\n--description--\nNow that you have obtained the values from the input fields and generated an id, you want to add them to your taskData array to keep track of each task However, you should only do this if the task is new If the task already exists, you will set it up for editing This is why you have the dataArrIndex variable, which provides the index of each task Create an if statement with the condition dataArrIndex === -1 Within the if statement, use the unshift() method to add the taskObj object to the beginning of the taskData array unshift() is an array method that is used to add one or more elements to the beginning of an array ```js\nconst arr = [1, 2, 3];\narr unshift(0);\n// [0, 1, 2, 3]\nconsole log(arr);\n```\n--hints--\nYou should create an if statement with the condition dataArrIndex === -1 js\nassert match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{/)\nYour if statement should have taskData unshift(taskObj) in it's body js\nassert match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\ unshift\\(\\s*taskObj\\s*\\)\\s*; \\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "6be1435bc2971d043272639800f4043b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "of an array ```js const arr = [1, 2, 3]; arr unshift(0); // [0, 1, 2, 3] console log(arr); ``` --hints-- You should create an if statement with the condition dataArrIndex === -1 js assert match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{/) Your if statement should have taskData unshift(taskObj) in it's body js assert match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\ unshift\\(\\s*taskObj\\s*\\)\\s*; \\s*\\}/) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a8c6f90bf9d2c16b14a1f58bbdfafc5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 12rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "2d1e2a5b0a1025e6dcc9c295781bf3ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "b07332189cfdbe79e833ab04d096de44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { confirmCloseDialogshowModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec8f717b261e824d82d6a5.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "74a97e82e7f356d287717a450ce6e301",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9343769e8f85c1e17e05\ntitle: Step 24\nchallengeType: 0\ndashedName: step-24\n--description--\nCreate a div element with the class of task Utilize template strings to set the id attribute of the div to the id you destructured from the task data --hints--\nYou should create a div element with the class task js\nconst splitted = code split(/tasksContainer\\s*\\ \\s*innerHTML\\s*\\+=\\s*`/)[1]\nconst matched = __helpers removeJSComments(splitted) match(/<div( <attributes> * )>\\s*<\\/\\s*div\\s*>/);\nassert match(matched groups attributes, /\\s+class\\s*=\\s*('|\")task\\1(\\s|$)/);\nYour div element should have the id ${id} js\nconst splitted = code split(/tasksContainer\\s*\\ \\s*innerHTML\\s*\\+=\\s*`/)[1]\nconst matched = __helpers removeJSComments(splitted) match(/<div( <attributes> * )>\\s*<\\/\\s*div\\s*>/);\nassert match(matched groups attributes, /\\s+id\\s*=\\s*('|\")\\$\\{id\\}\\1(\\s|$)/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a01a68ad5d73476013922bd956f891fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ac5a7eda3b8c9b79a26945d7084b1150",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7aa8d65736220794d2f6a0634e94bea1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer innerHTML += `\n--fcc-editable-region--\n--fcc-editable-region--\n`\n}\n);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9343769e8f85c1e17e05.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f3c86ea437c801127a91e5d4750ec599",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9145e424d8835a4e0f28\ntitle: Step 22\nchallengeType: 0\ndashedName: step-22\n--description--\nNow that you have saved the task in the taskData array, you should display the task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints--\nYou should use forEach() on taskData js\nassert match(code, /taskData\\ forEach\\(\\s*/)\nYou should use {id, title, date, description} as the destructured parameters of the forEach() callback function js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 11
  },
  {
    "id": "f587843472cbe93f9c479f44866ef8c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "display the task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 11
  },
  {
    "id": "0a76863838c3430a767fc3366a16f67a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 2,
    "total_chunks": 11
  },
  {
    "id": "33a124716415239982c0e701ad1b69bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 3,
    "total_chunks": 11
  },
  {
    "id": "1f3580c7a1636403f9da4b01473bb211",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 4,
    "total_chunks": 11
  },
  {
    "id": "37bfe655d5c8cf08062d982cc562b3f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 5,
    "total_chunks": 11
  },
  {
    "id": "8da3ecc719a57fe2bd76f19bead1d549",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task on the page by looping through it Use forEach() on taskData, then destructure id, title, date, description as the parameters Don't return anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 649,
    "chunk_index": 6,
    "total_chunks": 11
  },
  {
    "id": "1ef582f6a46ff6cde28da02eb6ec0302",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "anything yet --hints-- You should use forEach() on taskData js assert match(code, /taskData\\ forEach\\(\\s*/) You should use {id, title, date, description} as the destructured parameters of the forEach() callback function js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|(:id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 753,
    "chunk_index": 7,
    "total_chunks": 11
  },
  {
    "id": "0bf3988c19d015ab9a26520d9468d0c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 8,
    "total_chunks": 11
  },
  {
    "id": "ddf13ee7953daf12e39d63da9d697eed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 9,
    "total_chunks": 11
  },
  {
    "id": "1937c50d04ffee762ab3e2d61cf157f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8484,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9145e424d8835a4e0f28.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 10,
    "total_chunks": 11
  },
  {
    "id": "4f0158f50c6e180a751bb35d708e5f08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec959a76336c8767f5cd4d\ntitle: Step 26\nchallengeType: 0\ndashedName: step-26\n--description--\nSimilarly to the previous step, create another p element, and interpolate the date you destructured as the text content Inside this paragraph, create a strong element with the text Date: --hints--\nYou should create a p element and interpolate ${date} as the text js\nassert match(code, /<p> *\\$\\{date\\}<\\/p>/)\nYou should create a strong element with the text Date: after the opening tag of your p element js\nassert match(code, /<p><strong>Date:\\s*<\\/strong>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "61557173f227b4decb44405c0784b3be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 12rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c2e24ec5d07c8ee7fd2ac861176dfca9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "386ba2ed3f9894ae48df6f14b397d8ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { confirmCloseDialogshowModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer innerHTML += `\nTitle: ${title}\n--fcc-editable-region--\n--fcc-editable-region--\n</div>\n`\n}\n);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec959a76336c8767f5cd4d.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bc50fc73cdfbb795612c1b98ed503449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec94f0de20c086e09b0fc3\ntitle: Step 25\nchallengeType: 0\ndashedName: step-25\n--description--\nCreate a p element and use template strings to set its content to the title you destructured Right before the content of the p element, create a strong element with the text Title: --hints--\nYou should create a p element js\nassert match(code, /<p>/)\nYou should interpolate ${title} as the text of your p element js\nassert match(code, /<p> *\\$\\{title\\}<\\/p>/)\nYou should create a strong element after the opening tag of your p element js\nassert match(code, /<p><strong>/)\nYour strong element should have the text Title: js\nassert match(code, /<p><strong>Title:\\s*<\\/strong>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "156070d32424e87fbaf50994d8b5ce09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "3700f113234807847151883bfb54de97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 13rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2d4b2d28d0a3f678fee9da91fb873933",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = documentgetElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer innerHTML += `\n--fcc-editable-region--\n--fcc-editable-region--\n</div>\n`\n}\n);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7603,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec94f0de20c086e09b0fc3.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6525d746d0a6994664484e9a341305e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec96761156a187ed32b274\ntitle: Step 28\nchallengeType: 0\ndashedName: step-28\n--description--\nTo allow for task management, you need to include both a delete and an edit button for each task Create two button elements with the type attribute set to button and the class attribute set to btn Set the text of the first button to Edit and the text of the second button to Delete --hints--\nYou should create a button element of type button, a class btn and \"Edit\" as the text, in that order js\nassert match(code, /<button\\s+type=('|\")button\\1\\s+class=('|\")btn\\2>Edit<\\/button/)\nYou should create a button element of type button a class btn and Delete as the text, in that order js\nassert match(code, /<button\\s+type=('|\")button\\1\\s+class=('|\")btn\\2>Delete<\\/button/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "687b5e18b3cccfa80312f0c3d5e35e8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "cf26cff5033abfca5950bc3defff7c8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6e3c037b6ba3c0afe49b77307049698d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer innerHTML += `\nTitle: ${title}\nDate: ${date}\nDescription: ${description}\n--fcc-editable-region--\n--fcc-editable-region--\n</div>\n`\n}\n);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec96761156a187ed32b274.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8463858a3e1058009f942be9030aaa98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9b10356c2d8aa05d9ce1\ntitle: Step 29\nchallengeType: 0\ndashedName: step-29\n--description--\nAfter adding the task to the page, you should close the form modal to view the task To do this, utilize classList to toggle the hidden class on the taskForm element --hints--\nYou should use classList to toggle the class hidden on taskForm js\nconst splitter = code split(\"taskData forEach\")[1] split(\"});\")\nassert match(splitter[0], /taskForm\\ classList\\ toggle\\(\\s*('|\")hidden\\1\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "dd58e114c77f1893ac0ac925b20b1ef3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; }close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c1c7bfcbd4c9414058ea1327697f845a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "9bcd3da19e98667a4c1471ec83f245ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { confirmCloseDialogshowModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9b10356c2d8aa05d9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a1e01ddd98d279b9eeb6ec5f4f1ba71a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fac365aeb8ad70b69b366f\ntitle: Step 31\nchallengeType: 0\ndashedName: step-31\n--description--\nInside the reset function, set each value of titleInput, dateInput, descriptionInput to an empty string Also, use classList to toggle the class hidden on the taskForm and set currentTask to an empty object That's because at this point, currentTask will be filled with the task the user might have added --hints--\nYou should set titleInput value to an empty string js\nassert match(reset toString(), /titleInput\\ value\\s*=\\s*('|\")\\1\\s*; /)\nYou should set dateInput value to an empty string js\nassert match(reset toString(), /dateInput\\ value\\s*=\\s*('|\")\\1\\s*; /)\nYou should set descriptionInput value to an empty string js\nassert match(reset toString(), /descriptionInput\\ value\\s*=\\s*('|\")\\1\\s*; /)\nYou should use classList to toggle the class hidden on taskForm\njs\nassert match(reset toString(), /taskForm\\ classList\\ toggle\\(\\s*('|\")hidden\\1\\s*\\)/)\nYou should set currentTask to an empty object js\nassert match(reset toString(), /currentTask\\s*=\\s*\\{\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "effe322677b0b110592c1e2c00805692",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "b053cb96a4654b3b860d9afbcd31ddeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7bb34bb8f1af98d71ff587135db21083",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\n--fcc-editable-region--\nconst reset = () => {\n}\n--fcc-editable-region--\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "943f0d47073080ee5c26f7d7e09f7b43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); taskForm classList toggle(\"hidden\"); }); taskForm addEventListener(\"submit\", (e) => { e preventDefault(); const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\ntaskForm classList toggle(\"hidden\");\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8342,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac365aeb8ad70b69b366f.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b3506cb184c9c1ea76173c203dac2f31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9282cd547785258cecf2\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nUsing arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints--\nYou should not alter the existing taskData forEach() and the values you destructured js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 26
  },
  {
    "id": "51dbe7c3e65c480e0f994a42c995be13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9282cd547785258cecf2\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nUsing arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints--\nYou should not alter the existing taskData forEach() and the values you destructured js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 527,
    "chunk_index": 1,
    "total_chunks": 26
  },
  {
    "id": "00bcb33716c73eee12d305927f136438",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9282cd547785258cecf2\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nUsing arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints--\nYou should not alter the existing taskData forEach() and the values you destructured js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 548,
    "chunk_index": 2,
    "total_chunks": 26
  },
  {
    "id": "50ad092d5c2873f1a04252aea3128f4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9282cd547785258cecf2\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nUsing arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints--\nYou should not alter the existing taskData forEach() and the values you destructured js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 569,
    "chunk_index": 3,
    "total_chunks": 26
  },
  {
    "id": "5f4638cff7067c969359e4b9b7d0a388",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9282cd547785258cecf2\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nUsing arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints--\nYou should not alter the existing taskData forEach() and the values you destructured js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 590,
    "chunk_index": 4,
    "total_chunks": 26
  },
  {
    "id": "fa19c878824300b228f00e38a047022d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9282cd547785258cecf2\ntitle: Step 23\nchallengeType: 0\ndashedName: step-23\n--description--\nUsing arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints--\nYou should not alter the existing taskData forEach() and the values you destructured js\nassert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/)\nYou should use arrow syntax and attach innerHTML to tasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 5,
    "total_chunks": 26
  },
  {
    "id": "73526f3742b7845342ca3c43c3e23551",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "step-23 --description-- Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 6,
    "total_chunks": 26
  },
  {
    "id": "6a55425f0fd5d75b7334635e70699e92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--description-- Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 7,
    "total_chunks": 26
  },
  {
    "id": "a1e5e2476531f1fc97dd71a1a523ce18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 606,
    "chunk_index": 8,
    "total_chunks": 26
  },
  {
    "id": "9b205598894055c298c74781ef2d75cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 621,
    "chunk_index": 9,
    "total_chunks": 26
  },
  {
    "id": "0859b5c0a16d63175d56feaf691699f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 10,
    "total_chunks": 26
  },
  {
    "id": "57c8cf1f9d0691f4c624403c38b625dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 11,
    "total_chunks": 26
  },
  {
    "id": "04d720980fab49c3f32de7d736eb5348",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 12,
    "total_chunks": 26
  },
  {
    "id": "35c09eebab00645a06a172ff444195f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Using arrow syntax complete the forEach callback function Inside the callback function body use an addition assignment to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/)\nYou should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 655,
    "chunk_index": 13,
    "total_chunks": 26
  },
  {
    "id": "86a300f9a8561587c5943fcb9143a409",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "to set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 641,
    "chunk_index": 14,
    "total_chunks": 26
  },
  {
    "id": "4cdfa054db4e31b637d1ffe03b06487f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "set the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 646,
    "chunk_index": 15,
    "total_chunks": 26
  },
  {
    "id": "dda764513b7ffd0a8247dcd75b5ef003",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 654,
    "chunk_index": 16,
    "total_chunks": 26
  },
  {
    "id": "4a2c3402eb97d71500df1485b9796574",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*\\{",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 666,
    "chunk_index": 17,
    "total_chunks": 26
  },
  {
    "id": "fd186b1501a5fa39beffe0e5100b8c95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*\\{\\s*(\\(\\s*tasksContainer\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 675,
    "chunk_index": 18,
    "total_chunks": 26
  },
  {
    "id": "a6519a52759530fdf3ff187c2ed2a8ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*\\{\\s*(\\(\\s*tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`\\s*\\)|tasksContainer\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 692,
    "chunk_index": 19,
    "total_chunks": 26
  },
  {
    "id": "244928014f490dd772bf6116c4789163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*\\{\\s*(\\(\\s*tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`\\s*\\)|tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`)\\s*\\}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 707,
    "chunk_index": 20,
    "total_chunks": 26
  },
  {
    "id": "ef4a40e8635b04faeb5ba00a3c8acd87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "the innerHTML of tasksContainer to empty backticks --hints-- You should not alter the existing taskData forEach() and the values you destructured js assert match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*\\{\\s*(\\(\\s*tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`\\s*\\)|tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`)\\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 748,
    "chunk_index": 21,
    "total_chunks": 26
  },
  {
    "id": "583eef50e10b55687b503c689f38bb12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "match(code, /taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*( :id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description)|( :title\\s*,\\s*id\\s*,\\s*date\\s*,\\s*description)|( :date\\s*,\\s*id\\s*,\\s*title\\s*,\\s*description)|( :id\\s*,\\s*date\\s*,\\s*title\\s*,\\s*description)|( :title\\s*,\\s*date\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*id\\s*,\\s*description)|( :date\\s*,\\s*title\\s*,\\s*description\\s*,\\s*id)|( :title\\s*,\\s*date\\s*,\\s*description\\s*,\\s*id)|( :description\\s*,\\s*date\\s*,\\s*title\\s*,\\s*id)|( :date\\s*,\\s*description\\s*,\\s*title\\s*,\\s*id)|( :title\\s*,\\s*description\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*title\\s*,\\s*date\\s*,\\s*id)|( :description\\s*,\\s*id\\s*,\\s*date\\s*,\\s*title)|( :id\\s*,\\s*description\\s*,\\s*date\\s*,\\s*title)|( :date\\s*,\\s*description\\s*,\\s*id\\s*,\\s*title)|( :description\\s*,\\s*date\\s*,\\s*id\\s*,\\s*title)|( :id\\s*,\\s*date\\s*,\\s*description\\s*,\\s*title)|( :date\\s*,\\s*id\\s*,\\s*description\\s*,\\s*title)|( :title\\s*,\\s*id\\s*,\\s*description\\s*,\\s*date)|(:id\\s*,\\s*title\\s*,\\s*description\\s*,\\s*date)|(:description\\s*,\\s*title\\s*,\\s*id\\s*,\\s*date)|(:title\\s*,\\s*description\\s*,\\s*id\\s*,\\s*date)|(:id\\s*,\\s*description\\s*,\\s*title\\s*,\\s*date)|(:description\\s*,\\s*id\\s*,\\s*title\\s*,\\s*date)\\s*\\}/) You should use arrow syntax and attach innerHTML to tasksContainerjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*(\\s*\\{\\(\\s*tasksContainer\\innerHTML\\s*\\)\\s*\\})/) You should use addition assignment to set the innerHTML of tasksContainer to an empty pair of backticksjs assertmatch(code, /taskData\\forEach\\(\\s*\\(\\s*\\{*\\}\\s*\\)\\s*=>\\s*\\{\\s*(\\(\\s*tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`\\s*\\)|tasksContainer\\innerHTML\\s*\\+=\\s*`\\s*`)\\s*\\}/) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 852,
    "chunk_index": 22,
    "total_chunks": 26
  },
  {
    "id": "0e9d91e30be780a5b4c44607cc019d41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 23,
    "total_chunks": 26
  },
  {
    "id": "898d0f08da34d4493dd68f9bfcf197b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 24,
    "total_chunks": 26
  },
  {
    "id": "756c6889a1f042b42a6546c6167ad44c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\n--fcc-editable-region--\ntaskData forEach(({id, title, date, description}));\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8837,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9282cd547785258cecf2.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 25,
    "total_chunks": 26
  },
  {
    "id": "e228830d2d1bf4280380f03665c2d2d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ec9c55fdeef78bacd2fc3b\ntitle: Step 30\nchallengeType: 0\ndashedName: step-30\n--description--\nIf you attempt to add another task now, you'll notice that the input fields retain the values you entered for the previous task To resolve this, you need to clear the input fields after adding a task Instead of clearing the input fields one by one, it's a good practice to create a function that handles clearing those fields You can then call this function whenever you need to clear the input fields again Use arrow syntax to create a reset function and set it to a pair of curly braces --hints--\nYou should use const and arrow syntax to create a reset function js\nassert match(code, /const\\s+reset\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/)\nYour reset function should be empty js\nassert match(reset toString(), /\\(\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9b6745b47ec013997b8effb950e7378f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "4dad2c0d27efc919464e74c1def41516",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "606dce1a16278636a4b9d0d2aeef481c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\n--fcc-editable-region--\n--fcc-editable-region--\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "bf217ac507eee070e7a53eae7ee7b812",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "confirmCloseDialog showModal(); }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); taskForm classList toggle(\"hidden\"); }); taskForm addEventListener(\"submit\", (e) => { e preventDefault(); const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } taskData forEach(({id, title, date, description}) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\ntaskForm classList toggle(\"hidden\");\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8019,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ec9c55fdeef78bacd2fc3b.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e24a28ed6facbc5c268de77b01a42576",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fac4d1773e7a719b1254de\ntitle: Step 32\nchallengeType: 0\ndashedName: step-32\n--description--\nRemove the existing code toggling the class of hidden on taskForm and call the reset function instead This would clear the input fields and also hide the form modal for the user to see the added task --hints--\nYou should remove the code toggling the hidden class on taskForm js\nconst splitter = code split('<button type=\"button\" class=\"btn\">Delete</button>')\nassert notMatch(splitter[1], /taskForm\\ classList\\ toggle\\(\\s*(\"|')hidden\\1\\s*\\)\\s*; /)\nYou should call the reset function js\nassert match(code, /reset\\(\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "0eaeea486daa5d51b72a29f69865c542",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a2cd422edbddda4ed1bfaa72069cb205",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 13rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5f19e314c3a680456ff11d9c62b53ee3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = documentgetElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "faeb57d76116d9fe47bf8b71db4e5622",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); taskForm classList toggle(\"hidden\"); }); taskForm addEventListener(\"submit\", (e) => { e preventDefault(); const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n--fcc-editable-region--\ntaskForm classList toggle(\"hidden\");\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac4d1773e7a719b1254de.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a954bda3116fc137a8b6266e77b902f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fac6a497811572b338e5e5\ntitle: Step 33\nchallengeType: 0\ndashedName: step-33\n--description--\nAlso, remove the existing code toggling the class hidden on taskForm inside the discardBtn event listener and call the reset function instead That's because when you click the Discard button, everything in the input fields should go away --hints--\nYou should remove the code toggling the class hidden on taskForm js\nconst splitter = code split(\"confirmCloseDialog close();\")\nassert notMatch(splitter[1], /taskForm\\ classList\\ toggle\\(\\s*(\"|')hidden\\1\\s*\\)\\s*; /)\nYou should call the reset function js\nassert match(code, /confirmCloseDialog\\ close\\(\\s*\\)\\s*; \\s*reset\\(\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c08eab9f1a4d01433880aed8f38985d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "e3ebb29f7fc24533969b4c71c2c6e5ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 13rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "74134429a2647a169db67834c62b049b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = documentgetElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\n--fcc-editable-region--\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\n--fcc-editable-region--\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "fdb0a2881dbcd6eaf7d1b1f6ab5f33a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "() => confirmCloseDialog close()); --fcc-editable-region-- discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); taskForm classList toggle(\"hidden\"); }); --fcc-editable-region-- taskForm addEventListener(\"submit\", (e) => { e preventDefault(); const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\nreset()\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fac6a497811572b338e5e5.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "58fb3d08cdb87ceb330b53118754130b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64faca774fd9fd74bc084cc9\ntitle: Step 34\nchallengeType: 0\ndashedName: step-34\n--description--\nYou should display the Cancel and Discard buttons to the user only if there is some text present in the input fields Start by removing the confirmCloseDialog showModal(); line Then inside the closeTaskFormBtn event listener, write some logic to check if there is a value in the titleInput, dateInput or the descriptionInput field If any of those input fields has a value, then use the showModal() method on confirmCloseDialog Otherwise, if there are no changes, call the reset() function to clear the input fields and hide the form modal --hints--\nIf any of the input fields has a value, then the confirmation dialog should display Otherwise, the reset function should be called ```js\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst fields = [\n{ name: \"titleInput\", element: titleInput, value: \"Test title\" },\n{ name: \"dateInput\", element: dateInput, value: \"2025-04-28\" },\n{ name: \"descriptionInput\", element: descriptionInput, value: \"Test description\" },\n];\ncloseTaskFormBtn click();\nassert isFalse(confirmCloseDialog open);\nfields forEach(({ name, element, value }) => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\nconfirmCloseDialog open = false;\nelement value = value;\ncloseTaskFormBtn click();\nassert isTrue(confirmCloseDialog open);\ncancelBtn click();\n});\n// Now test for reset functionality\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\nassert isTrue(taskForm classList toggle(\"hidden\"));\nassert isEmpty(currentTask);\n```\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3100de58ea12bedaf553c182dc695d28",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; confirmCloseDialog open = false; element value = value; closeTaskFormBtn click(); assert isTrue(confirmCloseDialog open); cancelBtn click(); }); // Now test for reset functionality titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; assert isTrue(taskForm classList toggle(\"hidden\")); assert isEmpty(currentTask); ``` --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "fba849cc16de722d5976708f23f451d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; }task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8e948b28aae16970f256ed03b9a2dd02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; }hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\n--fcc-editable-region--\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "458ced1d947afd3bd98afc6901d8f6be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "= document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); --fcc-editable-region-- closeTaskFormBtn addEventListener(\"click\", () => { confirmCloseDialogshowModal();\n});\n--fcc-editable-region--\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\nreset()\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faca774fd9fd74bc084cc9.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "40ce940eb45c58186e619ebd78e582da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fad9cd2eeb1e7ca2ca8c8b\ntitle: Step 36\nchallengeType: 0\ndashedName: step-36\n--description--\nUse arrow syntax to create an updateTaskContainer function Then move the taskData forEach() and its content from the taskForm's submit event listener into the newly created function --hints--\nYou should use const and arrow syntax to create a updateTaskContainer function js\nassert match(code, /const\\s+updateTaskContainer\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{/)\nYou should move taskData forEach() and its content into the updateTaskContainer() function js\nassert match(code, /const\\s+updateTaskContainer\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description\\s*\\}\\s*\\)\\s*=>\\s*{\\s*tasksContainer\\ innerHTML\\s*\\+=\\s*`\\s*<div\\s+class\\s*=\\s*('|\")task\\1\\s*id\\s*=\\s*('|\")\\$\\{id\\}\\2>\\s*<p><strong>Title:<\\/strong>\\s*\\$\\{title\\}<\\/p>\\s*<p><strong>Date:<\\/strong>\\s*\\$\\{date\\}<\\/p>\\s*<p><strong>Description:<\\/strong>\\s*\\$\\{description\\}<\\/p>\\s*<button\\s+type\\s*=\\s*('|\")button\\3\\s*class\\s*=\\s*('|\")btn\\4>Edit<\\/button>\\s*<button\\s+type\\s*=\\s*('|\")button\\5\\s*class\\s*=\\s*('|\")btn\\6>Delete<\\/button>\\s*<\\/div>\\s*`; \\s*}\\s*\\)\\s*; \\s*\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "8e29af2e265aa5e6b38b4ff22b160732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "forEach() and its content from the taskForm's submit event listener into the newly created function --hints-- You should use const and arrow syntax to create a updateTaskContainer function js assert match(code, /const\\s+updateTaskContainer\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{/) You should move taskData forEach() and its content into the updateTaskContainer() function js assert match(code, /const\\s+updateTaskContainer\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*taskData\\ forEach\\(\\s*\\(\\s*\\{\\s*id\\s*,\\s*title\\s*,\\s*date\\s*,\\s*description\\s*\\}\\s*\\)\\s*=>\\s*{\\s*tasksContainer\\ innerHTML\\s*\\+=\\s*`\\s*<div\\s+class\\s*=\\s*('|\")task\\1\\s*id\\s*=\\s*('|\")\\$\\{id\\}\\2>\\s*<p><strong>Title:<\\/strong>\\s*\\$\\{title\\}<\\/p>\\s*<p><strong>Date:<\\/strong>\\s*\\$\\{date\\}<\\/p>\\s*<p><strong>Description:<\\/strong>\\s*\\$\\{description\\}<\\/p>\\s*<button\\s+type\\s*=\\s*('|\")button\\3\\s*class\\s*=\\s*('|\")btn\\4>Edit<\\/button>\\s*<button\\s+type\\s*=\\s*('|\")button\\5\\s*class\\s*=\\s*('|\")btn\\6>Delete<\\/button>\\s*<\\/div>\\s*`; \\s*}\\s*\\)\\s*; \\s*\\}\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 539,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "e4e8cd733866a82337a2bf4efdcb6b37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "b0cfb1dadf7bf3abf1ccd198c26d88f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "2bcbba9d9d9a7ca9174e9617355eca09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "ddce723e3062419d161bba70541099d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} }; --fcc-editable-region-- --fcc-editable-region-- const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; if (formInputsContainValues) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialogclose();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\nreset()\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad9cd2eeb1e7ca2ca8c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "ec8d0598a97b78305997fe985afca4ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fadae4f2d51b7d5d8b98d8\ntitle: Step 37\nchallengeType: 0\ndashedName: step-37\n--description--\nInside the addOrUpdateTask function, call the updateTaskContainer and reset functions --hints--\nYou should call the updateTaskContainer function js\nassert match(code, /updateTaskContainer\\(\\s*\\)\\s*/)\nYou should call the reset function after calling the updateTaskContainer function js\nassert match(code, /updateTaskContainer\\(\\s*\\)\\s*; \\s*reset\\(\\s*\\)\\s*; \\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0ef26d803143ba8b81fbda749deab5f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; }close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "14534f3b48da60b9467909aa53df4069",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f8e04995b56d92a9b706ed4b55600bfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTaskid);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\n--fcc-editable-region--\n--fcc-editable-region--\n};\nconst updateTaskContainer = () => {\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nreset()\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadae4f2d51b7d5d8b98d8.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c377085b742e8a032772269e5c231da8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fadff23375f27ff06c6d40\ntitle: Step 38\nchallengeType: 0\ndashedName: step-38\n--description--\nNow remove the reset() call inside the taskForm submit event listener and call the addOrUpdateTask function instead --hints--\nYou should remove reset() and call addOrUpdateTask() js\nassert match(code, /addOrUpdateTask\\(\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7895,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f149e5838512e5dc144a58a6e9310d74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; }task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7895,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "8530c32670ef94464ed752a000a33e0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; }hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7895,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "39699815caefb19fb4eef1dfb5a5659a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInputvalue,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\n--fcc-editable-region--\nreset()\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7895,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fadff23375f27ff06c6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b534af01556534bb4028b35ba99e1ab0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fae068bcdc9c805bd8399e\ntitle: Step 40\nchallengeType: 0\ndashedName: step-40\n--description--\nTo enable editing and deleting for each task, add an onclick attribute to both buttons Set the value of the onclick attribute to editTask(this) for the Edit button and deleteTask(this) for the Delete button The editTask(this) function will handle editing, while the deleteTask(this) function will handle deletion this is a keyword that refers to the current context In this case, this points to the element that triggers the event – the buttons --hints--\nYou should add onclick=\"editTask(this)\" to your edit button js\nassert match(code, /<button( =[^>]*onclick\\s*=\\s*(\"|')editTask\\(\\s*this\\s*\\)\\1)[^>]*>Edit<\\/button>/);\nYou should add onclick=\"deleteTask(this)\" to your delete button js\nassert match(code, /<button( =[^>]*onclick\\s*=\\s*(\"|')deleteTask\\(\\s*this\\s*\\)\\1)[^>]*>Delete<\\/button>/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b3e20951b185cec7252abe0b95a5f702",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "95765554cd44bdcfda365249c157eb4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7bd9715f5f256c21fe0df04741f646dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n--fcc-editable-region--\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n--fcc-editable-region--\n</div>\n}\n);\n};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "60e6d14529f316705ffed4336e87d812",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "}; if (dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> --fcc-editable-region-- <button type=\"button\" class=\"btn\">Edit</button> <button type=\"button\" class=\"btn\">Delete</button> --fcc-editable-region-- </div> } ); }; const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classListtoggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8553,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fae068bcdc9c805bd8399e.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "5f31dc32acb7fb310547e3a2496bbb94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64faedcd16a1e985c4c2dc94\ntitle: Step 41\nchallengeType: 0\ndashedName: step-41\n--description--\nCreate a deleteTask function using arrow syntax Pass buttonEl as the parameter and define an empty set of curly braces for the function body --hints--\nYou should use const and arrow syntax to create a deleteTask function js\nassert match(code, /const\\s+deleteTask\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>\\s*/);\nYour deleteTask function should take a buttonEl parameter js\nassert match(deleteTask toString(), /\\(\\s*buttonEl\\s*\\)/);\nYour deleteTask function should be empty js\nassert match(deleteTask toString(), /\\(\\s*buttonEl\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c191c92141d354c3d668d6e557957077",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "b412e3b5e09977fb2fa7134f3f0c6f36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 13rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "1da2ac996fb7cc55c8065abfca242076",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = documentgetElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\n--fcc-editable-region--\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f2e60aa23a6300127396e8ff3e5648fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "(dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; --fcc-editable-region-- --fcc-editable-region-- const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classListtoggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8317,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faedcd16a1e985c4c2dc94.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e2cc874d3ffad395f292b27e36639214",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64faf0418e828c0114a558a7\ntitle: Step 39\nchallengeType: 0\ndashedName: step-39\n--description--\nThere's a problem If you add a task, and then add another, the previous task gets duplicated This means you need to clear out the existing contents of tasksContainer before adding a new task Set the innerHTML of tasksContainer back to an empty string --hints--\nYou should set the innerHTML of tasksContainer to an empty string js\nassert match(code, /tasksContainer\\ innerHTML\\s*=\\s*(\"|')\\1\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8083,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e83577599110ed69f27f6a7633545245",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; }close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8083,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "90a47dd6205770d9531e568f2d17f175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8083,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "dc28c11f0d53c73723eb2e9bdfe59d81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTaskid);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\n--fcc-editable-region--\n--fcc-editable-region--\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8083,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "886cf592e227fdb888bb5d8a05afdb8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; if (formInputsContainValues) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); reset() }); taskForm addEventListener(\"submit\", (e) => { epreventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8083,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf0418e828c0114a558a7.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "582f2532fddd9fe8ddfda1b39b85174a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64faf65b22ad8d07df9be14d\ntitle: Step 42\nchallengeType: 0\ndashedName: step-42\n--description--\nYou need to find the index of the task you want to delete first Create a dataArrIndex variable and set its value using the findIndex() method on the taskData array Pass item as the parameter for the arrow callback function, and within the callback, check if the id of item is equal to the id of the parentElement of buttonEl --hints--\nYou should not alter the deleteTask function js\nassert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*/)\nYou should use const to declare a dataArrIndex variable and set it to taskData findIndex() js\nassert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(/)\nYou should pass in item as the parameter of the findIndex() arrow function callback js\nassert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/)\nYour arrow function callback should check if item id === buttonEl parentElement id Don't use curly braces js\nassert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*buttonEl\\ parentElement\\ id|buttonEl\\ parentElement\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "50c3564e1c7bd42024bf0b9757d8a1c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(/) You should pass in item as the parameter of the findIndex() arrow function callback js assert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/) Your arrow function callback should check if item id === buttonEl parentElement id Don't use curly braces js assert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*buttonEl\\ parentElement\\ id|buttonEl\\ parentElement\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*\\}\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "87fb4d3e12e4da19ca227b647657a541",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "3ad84c7e578e5ac847915c2abe696ab9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "378e1b62da9df37287cf104cb846818c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "4d3b20d3d271f98af970be1246613fd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "[]; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\n--fcc-editable-region--\nconst deleteTask = (buttonEl) => {\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf65b22ad8d07df9be14d.md",
      "source_type": "git_repo"
    },
    "token_count": 407,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "fc777d477fa18af3745930becd6d5524",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64faf874364ec308f875f636\ntitle: Step 43\nchallengeType: 0\ndashedName: step-43\n--description--\nYou need to remove the task from the DOM using remove() and from the taskData array using splice() splice() is an array method that modifies arrays by removing, replacing, or adding elements at a specified index, while also returning the removed elements It can take up to three arguments: the first one is the mandatory index at which to start, the second is the number of items to remove, and the third is an optional replacement element Here's an example:\n```js\nconst fruits = [\"mango\", \"date\", \"cherry\", \"banana\", \"apple\"];\n// Remove date and cherry from the array starting at index 1\nconst removedFruits = fruits splice(1, 2);\nconsole log(fruits); // [ 'mango', 'banana', 'apple' ]\nconsole log(removedFruits); // [ 'date', 'cherry' ]\n```\nUse the remove() method to remove the parentElement of the buttonEl from the DOM Then use splice() to remove the task from the taskData array Pass in dataArrIndex and 1 as the arguments of your splice() dataArrIndex is the index to start and 1 is the number of items to remove --hints--\nYou should not alter the dataArrIndex statement js\nassert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*buttonEl\\ parentElement\\ id|buttonEl\\ parentElement\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; [\\S\\s]*\\}\\s*; /)\nYou should use the remove() method to remove the parent element of buttonEl js\nassert match(deleteTask toString(), /buttonEl\\ parentElement\\ remove\\(\\s*\\)\\s*; /)\nYou should use splice() on the taskData array js\nassert match(deleteTask toString(), /taskData\\ splice\\(/)\nThe first argument of your splice() method should be dataArrIndex js\nassert match(deleteTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "6bfdf6ad9ac2dd65f274ba36ea29ba8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "is the number of items to remove --hints-- You should not alter the dataArrIndex statement js assert match(code, /const\\s+deleteTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*buttonEl\\ parentElement\\ id|buttonEl\\ parentElement\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; [\\S\\s]*\\}\\s*; /) You should use the remove() method to remove the parent element of buttonEl js assert match(deleteTask toString(), /buttonEl\\ parentElement\\ remove\\(\\s*\\)\\s*; /) You should use splice() on the taskData array js assert match(deleteTask toString(), /taskData\\ splice\\(/) The first argument of your splice() method should be dataArrIndex js assert match(deleteTasktoString(), /taskData\\ splice\\(\\s*dataArrIndex/)\nThe second argument of your splice() method should be 1 js\nassert match(deleteTask toString(), /taskData\\ splice\\(\\s*dataArrIndex\\s*,\\s*1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "4b4bfc45005cfb6575590beb6e622293",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "fddf1aac2bca4b8e0b9552e8918c8bfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "0ef457b8bdebe50115e9003c2364a42e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "62fdff2460366d34b228a19eb0d7c6f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "[]; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\n--fcc-editable-region--\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64faf874364ec308f875f636.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "ea7ead104bc3ef4c9b4d624e8fc219a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fafac95328110a69bcb75f\ntitle: Step 44\nchallengeType: 0\ndashedName: step-44\n--description--\nUse arrow syntax to create an editTask function Pass in buttonEl as the parameter and add empty curly braces for the body --hints--\nYou should use const and arrow syntax to create an editTask function js\nassert match(code, /const\\s+editTask\\s*=\\s*(\\( *\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*/)\nYour editTask function should take a buttonEl parameter js\nassert match(editTask toString(), /\\(\\s*buttonEl\\s*\\)/);\nYour editTask function should be empty js\nassert match(editTask toString(), /\\(\\s*buttonEl\\s*\\)\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "054f480b06732517c708f5ccfc7ff5f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "289ea0a38fdab7b4b263fd0028f32169",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 13rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "dd10c7cb2ff937c55ac71d203dfa0028",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = documentgetElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "41eb7bb32e94d5275ffb673790d8c31f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "(dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); buttonEl parentElementremove();\ntaskData splice(dataArrIndex, 1);\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fafac95328110a69bcb75f.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "d1fd28464ea7b7cd45579e02591195e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fad07f43a101779cb8692a\ntitle: Step 35\nchallengeType: 0\ndashedName: step-35\n--description--\nYou can enhance code readability and maintainability by refactoring the submit event listener into two separate functions The first function can be used to add the input values to taskData, while the second function can be responsible for adding the tasks to the DOM Use arrow syntax to create an addOrUpdateTask function Then move the dataArrIndex variable, the taskObj object, and the if statement into the addOrUpdateTask function --hints--\nYou should use const and arrow syntax to create an addOrUpdateTask function js\nassert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/)\nYou should move the dataArrIndex variable into the addOrUpdateTask function js\nassert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /)\nYou should move the taskObj object into the addOrUpdateTask function js\nassert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 26
  },
  {
    "id": "a444aa32398613880a257ad5a8b7245f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "variable, the taskObj object, and the if statement into the addOrUpdateTask function --hints-- You should use const and arrow syntax to create an addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /)\nYou should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 26
  },
  {
    "id": "d4fccd898f5549614831b2fb789b47c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "an addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 26
  },
  {
    "id": "69c7ec1a88c4a0ebb837300328e6d71e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 26
  },
  {
    "id": "4fb01d6c25bd19639a226b2ac77949aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 4,
    "total_chunks": 26
  },
  {
    "id": "83f92dd4a41eb46d64ba2d107e0b741c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 516,
    "chunk_index": 5,
    "total_chunks": 26
  },
  {
    "id": "f1535d7dc36783d827783abbff57fc16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 524,
    "chunk_index": 6,
    "total_chunks": 26
  },
  {
    "id": "5bbd201bd6dd509162163a0a54b1d2d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 553,
    "chunk_index": 7,
    "total_chunks": 26
  },
  {
    "id": "3dc18e3b50ab82bc54fc7c0dbb3cfd06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 555,
    "chunk_index": 8,
    "total_chunks": 26
  },
  {
    "id": "e6cdedab9e58b28abbc728207fb88ffe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 561,
    "chunk_index": 9,
    "total_chunks": 26
  },
  {
    "id": "4a662553bfe1235acd0175229857d93f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 577,
    "chunk_index": 10,
    "total_chunks": 26
  },
  {
    "id": "1ec275b1a2197667aecf5674694f235d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 599,
    "chunk_index": 11,
    "total_chunks": 26
  },
  {
    "id": "bd6aea2c9975681c09f542808098b79a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 623,
    "chunk_index": 12,
    "total_chunks": 26
  },
  {
    "id": "94619d4582d3c760a3e2912859693889",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 638,
    "chunk_index": 13,
    "total_chunks": 26
  },
  {
    "id": "5e128b8fbe157c5eba46b89529acfaa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 653,
    "chunk_index": 14,
    "total_chunks": 26
  },
  {
    "id": "c94624db8b85545f6779c5b47e6e883a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 656,
    "chunk_index": 15,
    "total_chunks": 26
  },
  {
    "id": "e5cfe77253b7b4239ce17933cd5158b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,\\s*\\}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 663,
    "chunk_index": 16,
    "total_chunks": 26
  },
  {
    "id": "eede8c7d0bea8bae3d70c5191505cb4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,\\s*\\}\\s*;\\s*if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 692,
    "chunk_index": 17,
    "total_chunks": 26
  },
  {
    "id": "a518603c347980fd1f9c0d94dbab8fae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,\\s*\\}\\s*;\\s*if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\unshift\\(\\s*taskObj\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 706,
    "chunk_index": 18,
    "total_chunks": 26
  },
  {
    "id": "6a38246d1cd92cf35401daac9bb1cbec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,\\s*\\}\\s*;\\s*if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\unshift\\(\\s*taskObj\\s*\\)\\s*;\\s*\\}\\s*\\}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 715,
    "chunk_index": 19,
    "total_chunks": 26
  },
  {
    "id": "a2a30f6448d0c569820a9e4b8ab53aec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*/) You should move the dataArrIndex variable into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; /) You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,\\s*\\}\\s*;\\s*if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\unshift\\(\\s*taskObj\\s*\\)\\s*;\\s*\\}\\s*\\}\\s*;/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 756,
    "chunk_index": 20,
    "total_chunks": 26
  },
  {
    "id": "087761a64f346c0562f2417d1d0fd512",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "You should move the taskObj object into the addOrUpdateTask function js assert match(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\ id\\s*===\\s*currentTask\\ id|currentTask\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\ now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\ value\\s*,\\s*description\\s*:\\s*descriptionInput\\ value\\s*, \\s*\\}\\s*; /) You should move the if statement with the condition dataArrIndex === -1 into your addOrUpdateTask function js assertmatch(code, /const\\s+addOrUpdateTask\\s*=\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*( :\\(\\s*item\\s*\\)|item)\\s*=>\\s*( :item\\id\\s*===\\s*currentTask\\id|currentTask\\id\\s*===\\s*item\\id)\\s*\\)\\s*;\\s*const\\s+taskObj\\s*=\\s*\\{\\s*id\\s*:\\s*`\\$\\{\\s*titleInput\\value\\toLowerCase\\(\\s*\\)\\split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\join\\(\\s*('|\")-\\2\\s*\\)\\s*\\}-\\$\\{\\s*Date\\now\\(\\s*\\)\\s*\\}`\\s*,\\s*title\\s*:\\s*titleInput\\value\\s*,\\s*date\\s*:\\s*dateInput\\value\\s*,\\s*description\\s*:\\s*descriptionInput\\value\\s*,\\s*\\}\\s*;\\s*if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\unshift\\(\\s*taskObj\\s*\\)\\s*;\\s*\\}\\s*\\}\\s*;/) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 746,
    "chunk_index": 21,
    "total_chunks": 26
  },
  {
    "id": "61cd4af7142b32517f5dc57d242e476a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 22,
    "total_chunks": 26
  },
  {
    "id": "6edc90f1abca5bf3d86cfcf9643ded4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 23,
    "total_chunks": 26
  },
  {
    "id": "e2157f0764f26c568daeb1ba32e907ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\n--fcc-editable-region--\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 24,
    "total_chunks": 26
  },
  {
    "id": "d37d6a9adeefade0948f266fed12ca4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; if (formInputsContainValues) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); reset() }); taskForm addEventListener(\"submit\", (e) => { e preventDefault(); const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInputvalue,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button type=\"button\" class=\"btn\">Edit</button>\n<button type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\nreset()\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fad07f43a101779cb8692a.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 25,
    "total_chunks": 26
  },
  {
    "id": "f7d69613bbded8ea913258693c778180",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb0fa0968f2b113b2d90e9\ntitle: Step 45\nchallengeType: 0\ndashedName: step-45\n--description--\nAs you did in the deleteTask function, you need to find the index of the task to be edited Create a dataArrIndex variable For its value, utilize the findIndex() method on taskData Pass item as the parameter to its callback function and check if the id of item is equal to the id of the parentElement of buttonEl --hints--\nYou should not alter the editTask function js\nassert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*/)\nYou should use const to declare a dataArrIndex variable and set it to taskData findIndex() js\nassert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(/)\nYou should pass in item as the parameter of the findIndex() arrow function callback Don't use curly braces js\nassert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/)\nYour arrow function callback should check if item id === buttonEl parentElement id js\nassert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*buttonEl\\ parentElement\\ id|buttonEl\\ parentElement\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*\\}\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "21812c5532e79a643054081a01d50abf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "assert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(/) You should pass in item as the parameter of the findIndex() arrow function callback Don't use curly braces js assert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)/) Your arrow function callback should check if item id === buttonEl parentElement id js assert match(code, /const\\s+editTask\\s*=\\s*\\(\\s*buttonEl\\s*\\)\\s*=>\\s*\\{\\s*const\\s+dataArrIndex\\s*=\\s*taskData\\ findIndex\\(\\s*(\\(\\s*item\\s*\\)|item)\\s*=>\\s*(item\\ id\\s*===\\s*buttonEl\\ parentElement\\ id|buttonEl\\ parentElement\\ id\\s*===\\s*item\\ id)\\s*\\)\\s*; \\s*\\}\\s*; /) --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "e70ba2d9e7b0e1cffcf06fe5f5ee34a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "e89f84b534b0c57ee933a945a7f1e42d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "9c20b46ff199103ff3ddf13648d58324",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
      "source_type": "git_repo"
    },
    "token_count": 400,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "3e9b2ebcef918ff40d1faca05971f4e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "[]; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9343,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb0fa0968f2b113b2d90e9.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a5b2ed371c186bfef1e732691bcafc23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb1321e189a6136d200f77\ntitle: Step 47\nchallengeType: 0\ndashedName: step-47\n--description--\nThe task to be edited is now in the currentTask object Stage it for editing inside the input fields by setting the value of titleInput to currentTask title, dateInput to currentTask date, and descriptionInput to currentTask description --hints--\nYou should set titleInput value to currentTask title js\nassert match(editTask toString(), /titleInput\\ value\\s*=\\s*currentTask\\ title\\s*; /)\nYou should set dateInput value to currentTask date js\nassert match(editTask toString(), /dateInput\\ value\\s*=\\s*currentTask\\ date\\s*; /)\nYou should set descriptionInput value to currentTask description js\nassert match(editTask toString(), /descriptionInput\\ value\\s*=\\s*currentTask\\ description\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "693d3a87bfebd688ea8dcd7f85176b6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "80c1092da4464305e060aed9d1f0862f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "b8e8034d5ff1338a8c8553e50296fb23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4a2d0e1a610dc773e553438dd3406610",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElementid\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1321e189a6136d200f77.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "385e69330d28cd5272441255c6209820",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb1061ca838611ed6a7d6b\ntitle: Step 46\nchallengeType: 0\ndashedName: step-46\n--description--\nUse square bracket notation to retrieve the task to be edited from the taskData array using the dataArrIndex Then, assign it to the currentTask object to keep track of it --hints--\nYou should assign taskData[dataArrIndex] to currentTask js\nassert match(code, /currentTask\\s*=\\s*taskData\\s*\\[\\s*dataArrIndex\\s*\\]\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c4fbdde33565831abd17b932379b0cc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; }close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "786255a7b5086c5a7e082185efac0d42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; }task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5259e35edae6d4732463915fcb794349",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInputvalue,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex((item) => item id === buttonEl parentElement id);\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "7d8f0ef394d2efa6b25bf99e4fdd75bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1); } --fcc-editable-region-- const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex((item) => item id === buttonEl parentElement id); } --fcc-editable-region-- const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; if (formInputsContainValues) { confirmCloseDialogshowModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1061ca838611ed6a7d6b.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "cc462a33ea7e37791074111e736a6bd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb1436adef3e145b4c3501\ntitle: Step 48\nchallengeType: 0\ndashedName: step-48\n--description--\nSet the innerText of the addOrUpdateTaskBtn button to Update Task --hints--\nYou should set the inner text of the addOrUpdateTaskBtn button to Update Task\njs\nassert match(editTask toString(), /addOrUpdateTaskBtn\\ innerText\\s*=\\s*(\"|')Update Task\\1\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "beb23c84829677399d0a2242482a2879",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; }task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a6bd29a29fd993cca628d835b38f7e1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; }hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "161f3592e0ae0e6001862d74130eca89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInputvalue,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "0efd397b836a9a330253482a20265273",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} --fcc-editable-region-- const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); currentTask = taskData[dataArrIndex]; titleInput value = currentTask title; dateInput value = currentTask date; descriptionInput value = currentTask description; } --fcc-editable-region-- const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtnaddEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1436adef3e145b4c3501.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "e16c317a0f48d1d78775f96ea0038bee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb14d890415c14f93069ce\ntitle: Step 49\nchallengeType: 0\ndashedName: step-49\n--description--\nFinally, display the form modal with the values of the input fields by using classList to toggle the hidden class on taskForm --hints--\nYou should use classList to toggle the class hidden on taskForm js\nassert match(editTask toString(), /taskForm\\ classList\\ toggle\\(\\s*('|\")hidden\\1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "ba9faf2a2265f47c99a77664c0040a58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; }close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d153c9cbb9973f255e604c7acdf1bdde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; }task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a694f885ad0886efc742cbee25c3525b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInputvalue,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\n--fcc-editable-region--\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\n}\n--fcc-editable-region--\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "b5cea29c30f95a7f3e6039063ad768f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); currentTask = taskData[dataArrIndex]; titleInput value = currentTask title; dateInput value = currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; } --fcc-editable-region-- const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classListtoggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb14d890415c14f93069ce.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "53a1a1e232ae30849cd3f2d272b25d29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb1c4dc0feb219149a7c7d\ntitle: Step 51\nchallengeType: 0\ndashedName: step-51\n--description--\nIf the user attempts to edit a task but decides not to make any changes before closing the form, there is no need to display the modal with the Cancel and Discard buttons Inside the closeTaskFormBtn event listener, use const to create another variable named formInputValuesUpdated Check if the user made changes while trying to edit a task by verifying that the titleInput value is not equal to currentTask title, or the dateInput value is not equal to currentTask date, or the descriptionInput value is not equal to currentTask description --hints--\nYour formInputValuesUpdated variable should check if titleInput value is not equal to currentTask title ```js\nconst regex = /const\\s+formInputValuesUpdated\\s=( = titleInput value\\s( ==| =)\\scurrentTask title)/\nassert match(code, regex)\n```\nYour formInputValuesUpdated variable should check if titleInput value is not equal to currentTask title or dateInput value is not equal to currentTask date ```js\nconst regex = /const\\s+formInputValuesUpdated\\s=( = titleInput value\\s( ==| =)\\scurrentTask title)( = dateInput value\\s( : ==| =)\\s*currentTask date)/\nassert match(code, regex);\n```\nYour formInputValuesUpdated variable should check if titleInput value is not equal to currentTask title, dateInput value is not equal to currentTask date, or descriptionInput value is not equal to currentTask description ```js\nconst regex = /const\\s+formInputValuesUpdated\\s=\\stitleInput value\\s( ==| =)\\scurrentTask title\\s\\|\\|\\sdateInput value\\s( ==| =)\\scurrentTask date\\s\\|\\|\\sdescriptionInput value\\s( ==| =)\\scurrentTask description\\s*; /\nassert match(code, regex);\n```\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "8e4efdd28a751adc4c081e389c43393d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "Your formInputValuesUpdated variable should check if titleInput value is not equal to currentTask title, dateInput value is not equal to currentTask date, or descriptionInput value is not equal to currentTask description ```js const regex = /const\\s+formInputValuesUpdated\\s=\\stitleInput value\\s( ==| =)\\scurrentTask title\\s\\|\\|\\sdateInput value\\s( ==| =)\\scurrentTask date\\s\\|\\|\\sdescriptionInput value\\s( ==| =)\\scurrentTask description\\s*; / assert match(code, regex); ``` --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "8535e1d414bbb96689cdc1af58420600",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; }close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "0311df15c226a7cb1717970ec86e9e77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; }task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "4a3a99e41da7f7862174cfa197450131",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInputvalue,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "8c11c2e0fc549b567bacdea2a1172031",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "splice(dataArrIndex, 1); } const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); currentTask = taskData[dataArrIndex]; titleInput value = currentTask title; dateInput value = currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtnaddEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\n--fcc-editable-region--\n--fcc-editable-region--\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10131,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb1c4dc0feb219149a7c7d.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "4c2f85d513b7086172dc5a1c025a05d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb154a7c48cd159924bb18\ntitle: Step 50\nchallengeType: 0\ndashedName: step-50\n--description--\nAt this point, editing a task won't reflect when you submit the task To make the editing functional, go back to the if statement inside the addOrUpdateTask function Create an else block and set taskData[dataArrIndex] to taskObj --hints--\nYour if statement should have an else block js\nassert match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\ unshift\\(\\s*taskObj\\s*\\)\\s*; \\s*\\}\\s*else\\s*\\{\\s*/)\nYour else block should have the code taskData[dataArrIndex] = taskObj js\nassert match(code, /if\\s*\\(\\s*dataArrIndex\\s*===\\s*-1\\s*\\)\\s*\\{\\s*taskData\\ unshift\\(\\s*taskObj\\s*\\)\\s*; \\s*\\}\\s*else\\s*\\{\\s*taskData\\s*\\[\\s*dataArrIndex\\s*\\]\\s*=\\s*taskObj\\s*; \\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "2a261b264cd3aa5ca498b29fcb66e3d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "359c59d5e2ed8500c39547408107eba9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "b2178147648902126c94bf3146b8e6f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\n--fcc-editable-region--\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\n--fcc-editable-region--\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
      "source_type": "git_repo"
    },
    "token_count": 412,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "ae6e453ba6b3855942883a76a8fd6aa2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; --fcc-editable-region-- if (dataArrIndex === -1) { taskData unshift(taskObj); } --fcc-editable-region-- updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "5069e8bc7999bfb880bcf4521691f8de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "taskForm classList toggle(\"hidden\"); } const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; if (formInputsContainValues) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialogclose();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb154a7c48cd159924bb18.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "989a0030706491353d58699c06f5564f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb285637fa1e1c222033e3\ntitle: Step 52\nchallengeType: 0\ndashedName: step-52\n--description--\nNow add formInputValuesUpdated as the second mandatory condition in the if statement using the AND operator This way, the Cancel and Discard buttons in the modal won't be displayed to the user if they haven't made any changes to the input fields while attempting to edit a task --hints--\nYour if should have the condition formInputsContainValues && formInputValuesUpdated js\nassert match(code split(\"if (formInputsContainValues\"), /\\s*&&\\s*formInputValuesUpdated/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "f822e0b51e0412c3dbc73f119fd83f4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; }close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0a9a14788ddfa95a30aa90c091fb1a2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f7c61f65223a29ea4d54cadecd89af4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTaskid);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "6b01b5beac78fc3f5759f3bc9b339cc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); buttonEl parentElement remove(); taskData splice(dataArrIndex, 1); } const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); currentTask = taskData[dataArrIndex]; titleInput value = currentTask title; dateInput value = currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskFormclassList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\n--fcc-editable-region--\nif (formInputsContainValues) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n--fcc-editable-region--\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9060,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb285637fa1e1c222033e3.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "eda549ec0ccf9f70cc3cb6129003f497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fb29348a60361ccd45c1e2\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nlocalStorage offers methods for saving, retrieving, and deleting items The items you save can be of any JavaScript data type For instance, the setItem() method is used to save an item, and the getItem() method retrieves the item To delete a specific item, you can utilize the removeItem() method, or if you want to delete all items in the storage, you can use clear() Here's how you can save an item:\njs\nlocalStorage setItem(\"key\", value); // value could be string, number, or any other data type\nA myTaskArr array has been provided for you Use the setItem() method to save it with a key of data After that, open your browser console and go to the Applications tab, select Local Storage, and the freeCodeCamp domain you see --hints--\nYour localStorage setItem() should have a key of \"data\" js\nassert match(code, /localStorage\\ setItem\\(\\s*(\"|')data\\1/)\nYour localStorage setItem() should have a value of myTaskArr js\nassert match(code, /localStorage\\ setItem\\(\\s*(\"|')data\\1\\s*,\\s*myTaskArr\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a8cd48c8b21ae42e14e2ca0d4363d2d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "f044d747a2303af180c9785d947312e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "030590b3bd9f513b509cb013a935c1ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "dd9c3b6e5c982095fb7612560fdc582f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "4cc4967f57bc54560dd813acd85bc86b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description; if (formInputsContainValues && formInputValuesUpdated) { confirmCloseDialogshowModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\nconst myTaskArr = [\n{ task: \"Walk the Dog\", date: \"22-04-2022\" },\n{ task: \"Read some books\", date: \"02-11-2023\" },\n{ task: \"Watch football\", date: \"10-08-2021\" },\n];\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9839,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fb29348a60361ccd45c1e2.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "48bb9d29d59b70e282b4c05ba299a9fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64fefebad99209211ec30537\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nIf you check the \"Application\" tab of your browser console, you'll notice a series of [object Object] This is because everything you save in localStorage needs to be in string format To resolve the issue, wrap the data you're saving in the JSON stringify() method Then, check local storage again to observe the results --hints--\nYour localStorage setItem() should have a key of \"data\" js\nassert match(code, /localStorage\\ setItem\\(\\s*(\"|')data\\1/)\nYou should wrap JSON stringify() around myTaskArr js\nassert match(code, /localStorage\\ setItem\\(\\s*(\"|')data\\1\\s*,\\s*JSON\\ stringify\\(\\s*myTaskArr\\s*\\)\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "59822c9f340f4815c3372cf5f78be0aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "f48565265f48224f51c94c44b1e46d62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "ea6c06650217beaf2d89b2b16ed2e6f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "2b7abff8510ff0a9a1e1358a81e6a9b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskDatafindIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "4399d2b3b8c953ef373d0e3ca74df5c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "() => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description; if (formInputsContainValues && formInputValuesUpdated) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); reset() }); taskForm addEventListener(\"submit\", (e) => { epreventDefault();\naddOrUpdateTask();\n});\nconst myTaskArr = [\n{ task: \"Walk the Dog\", date: \"22-04-2022\" },\n{ task: \"Read some books\", date: \"02-11-2023\" },\n{ task: \"Watch football\", date: \"10-08-2021\" },\n];\n--fcc-editable-region--\nlocalStorage setItem(\"data\", myTaskArr);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64fefebad99209211ec30537.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "b6cdd95901ed7a31edb3f6c544ebb3ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ff0313700dad264d19dfe4\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nNow that you have the myTaskArr array saved in localStorage correctly, you can retrieve it with getItem() by specifying the key you used to save the item Use the getItem() method to retrieve the myTaskArr array and assign it to the variable getTaskArr Then, log the getTaskArr variable to the console to see the result --hints--\nYou should use const to create a getTaskArr variable and assign localStorage getItem(\"data\") to it js\nassert match(code, /const\\s+getTaskArr\\s*=\\s*localStorage\\ getItem\\(\\s*('|\")data\\1\\s*\\)\\s*; /)\nYou should log the getTaskArr variable to the console js\nassert match(code, /console\\ log\\(\\s*getTaskArr\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "011266ed9f15f87ddca036ea664d0660",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "72e991dd3ac2f6eac9c007585243b627",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "621eef5996b6d30375431aeb4b95ba90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "14ff8048d1e244773151f6fa2f45768f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskDatafindIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "66b30e3b7aa77aaac0266331231da391",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "() => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description; if (formInputsContainValues && formInputValuesUpdated) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); reset() }); taskForm addEventListener(\"submit\", (e) => { epreventDefault();\naddOrUpdateTask();\n});\nconst myTaskArr = [\n{ task: \"Walk the Dog\", date: \"22-04-2022\" },\n{ task: \"Read some books\", date: \"02-11-2023\" },\n{ task: \"Watch football\", date: \"10-08-2021\" },\n];\nlocalStorage setItem(\"data\", JSON stringify(myTaskArr));\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9516,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff0313700dad264d19dfe4.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "fede1c5be790ebd235bc10caefa52ffc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ff04cc33779427a6412449\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nThe item you retrieve is a string, as you saved it with JSON stringify() To view it in its original form before saving, you need to use JSON parse() Use getItem() to retrieve the myTaskArr array again This time, wrap it inside JSON parse(), assign it to the variable getTaskArrObj and log the getTaskArrObj to the console Check the console to see the difference between getTaskArr and getTaskArrObj --hints--\nYou should use const to create a getTaskArrObj variable and assign it to JSON parse(localStorage getItem('data')); js\nassert match(code, /const\\s+getTaskArrObj\\s*=\\s*JSON\\ parse\\(\\s*localStorage\\ getItem\\(\\s*('|\")data\\1\\s*\\)\\s*\\)\\s*; /)\nYou should log the getTaskArrObj variable to the console js\nassert match(code, /console\\ log\\(\\s*getTaskArrObj\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "669b75c36cb8b27ecfbaca18495c18af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1c5a868a33cdd9139002a028341b0543",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "2bd3eaf499070b7fc3d45eeed1ba233b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c0cc10f5f0518386437cddf957b497d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskDatafindIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "7652fa62ee81494c8682f75dbbc51646",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "() => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description; if (formInputsContainValues && formInputValuesUpdated) { confirmCloseDialog showModal(); } else { reset(); } }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); reset() }); taskForm addEventListener(\"submit\", (e) => { epreventDefault();\naddOrUpdateTask();\n});\nconst myTaskArr = [\n{ task: \"Walk the Dog\", date: \"22-04-2022\" },\n{ task: \"Read some books\", date: \"02-11-2023\" },\n{ task: \"Watch football\", date: \"10-08-2021\" },\n];\nlocalStorage setItem(\"data\", JSON stringify(myTaskArr));\nconst getTaskArr = localStorage getItem(\"data\")\nconsole log(getTaskArr)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9722,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff04cc33779427a6412449.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "3f9c97bdfd16514b963ad42146a93afa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ff068e0426eb288874ed79\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nYou can use localStorage removeItem() to remove a specific item and localStorage clear() to clear all items in the local storage Remove the data item from local storage and open the console to observe the result You should see null --hints--\nYou should use localStorage removeItem() to remove the data item from the browser's local storage js\nassert match(code, /localStorage\\ removeItem\\(\\s*('|\")data\\1\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b3cec8cb38ab2e37fa26d4e206a143da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; }close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "3da8063945ab2839defbb5f3310f8a0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ff1eb55823ed4cbc1d00c208d43b3f52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTaskid);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "1f7c626103079118ca469fc14abc7d8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); buttonEl parentElement remove(); taskData splice(dataArrIndex, 1); } const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); currentTask = taskData[dataArrIndex]; titleInput value = currentTask title; dateInput value = currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskFormclassList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\nconst myTaskArr = [\n{ task: \"Walk the Dog\", date: \"22-04-2022\" },\n{ task: \"Read some books\", date: \"02-11-2023\" },\n{ task: \"Watch football\", date: \"10-08-2021\" },\n];\nlocalStorage setItem(\"data\", JSON stringify(myTaskArr));\n--fcc-editable-region--\n--fcc-editable-region--\nconst getTaskArr = localStorage getItem(\"data\")\nconsole log(getTaskArr)\nconst getTaskArrObj = JSON parse(localStorage getItem(\"data\"));\nconsole log(getTaskArrObj);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff068e0426eb288874ed79.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "54063db8249576f0b957c08ec2487eb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 64ff24b80431f62ec6b93f65\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\nRemove the myTaskArr array and all of the code for localStorage because you don't need them anymore --hints--\nYou should remove myTaskArr and all the code related to localStorage that you've just learned js\nassert notMatch(code, /const\\s+myTaskArr\\s*=\\s*\\[\\s*\\{\\s*task:\\s*('|\")Walk\\s*the\\s*Dog\\1\\s*,\\s*date:\\s*('|\")22-04-2022\\2\\s*\\}\\s*,\\s*\\{\\s*task:\\s*('|\")Read\\s*some\\s*books\\3\\s*,\\s*date:\\s*('|\")02-11-2023\\4\\s*\\}\\s*,\\s*\\{\\s*task:\\s*('|\")Watch\\s*football\\5\\s*,\\s*date:\\s*('|\")10-08-2021\\6\\s*\\}\\s*\\]\\s*; \\s*localStorage\\ setItem\\(('|\")data\\7\\s*,\\s*JSON\\ stringify\\(\\s*myTaskArr\\s*\\)\\s*; \\)\\s*; \\s*localStorage\\ clear\\(\\s*\\)\\s*; \\s*const\\s+getTaskArr\\s*=\\s*localStorage\\ getItem\\(\\s*('|\")data\\8\\s*\\)\\s*console\\ log\\(\\s*getTaskArr\\s*\\)\\s*const\\s+getTaskArrObj\\s*=\\s*JSON\\ parse\\(\\s*localStorage\\ getItem\\(\\s*('|\")data\\9\\s*\\)\\s*\\)\\s*; \\s*console\\ log\\(\\s*getTaskArrObj\\s*\\)\\s*; /);\nYou should remove any remaining references to myTaskArr anywhere in the code js\nassert notMatch(code, /myTaskArr/);\nYou should remove any reference to localStorage getItem for the item \"data\" js\nassert notMatch(code, /localStorage\\ getItem\\(\\s*('|\")data\\1\\s*\\)/);\nYou should remove any remaining references to getTaskArrObj anywhere in the code js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "6d7a8d3989cc83cdc4ffd0e25b8819c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "and all the code related to localStorage that you've just learned js assert notMatch(code, /const\\s+myTaskArr\\s*=\\s*\\[\\s*\\{\\s*task:\\s*('|\")Walk\\s*the\\s*Dog\\1\\s*,\\s*date:\\s*('|\")22-04-2022\\2\\s*\\}\\s*,\\s*\\{\\s*task:\\s*('|\")Read\\s*some\\s*books\\3\\s*,\\s*date:\\s*('|\")02-11-2023\\4\\s*\\}\\s*,\\s*\\{\\s*task:\\s*('|\")Watch\\s*football\\5\\s*,\\s*date:\\s*('|\")10-08-2021\\6\\s*\\}\\s*\\]\\s*; \\s*localStorage\\ setItem\\(('|\")data\\7\\s*,\\s*JSON\\ stringify\\(\\s*myTaskArr\\s*\\)\\s*; \\)\\s*; \\s*localStorage\\ clear\\(\\s*\\)\\s*; \\s*const\\s+getTaskArr\\s*=\\s*localStorage\\ getItem\\(\\s*('|\")data\\8\\s*\\)\\s*console\\ log\\(\\s*getTaskArr\\s*\\)\\s*const\\s+getTaskArrObj\\s*=\\s*JSON\\ parse\\(\\s*localStorage\\ getItem\\(\\s*('|\")data\\9\\s*\\)\\s*\\)\\s*; \\s*console\\ log\\(\\s*getTaskArrObj\\s*\\)\\s*; /); You should remove any remaining references to myTaskArr anywhere in the code js assert notMatch(code, /myTaskArr/); You should remove any reference to localStorage getItem for the item \"data\" js assert notMatch(code, /localStorage\\ getItem\\(\\s*('|\")data\\1\\s*\\)/); You should remove any remaining references to getTaskArrObj anywhere in the code js assertnotMatch(code, /getTaskArrObj/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "815bbb25c450a1d52d2ce1f2f79baae7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "parse\\(\\s*localStorage\\ getItem\\(\\s*('|\")data\\9\\s*\\)\\s*\\)\\s*; \\s*console\\ log\\(\\s*getTaskArrObj\\s*\\)\\s*; /); You should remove any remaining references to myTaskArr anywhere in the code js assert notMatch(code, /myTaskArr/); You should remove any reference to localStorage getItem for the item \"data\" js assert notMatch(code, /localStorage\\ getItem\\(\\s*('|\")data\\1\\s*\\)/); You should remove any remaining references to getTaskArrObj anywhere in the code js assertnotMatch(code, /getTaskArrObj/); --seed-- --seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changesCancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "cc12de7273b0ab2fb76827a0e60dc585",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; }close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "18e7b5d3681537ac65258619bf3ea7e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "2c37dd7f10bc3992e153520009dd2bfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; const addOrUpdateTask = () => { const dataArrIndex = taskData findIndex((item) => item id === currentTaskid);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "f970d5b1b4c4401bab0100d26ac2a7c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); buttonEl parentElement remove(); taskData splice(dataArrIndex, 1); } const editTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); currentTask = taskData[dataArrIndex]; titleInput value = currentTask title; dateInput value = currentTask date; descriptionInput value = currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskFormclassList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n--fcc-editable-region--\nconst myTaskArr = [\n{ task: \"Walk the Dog\", date: \"22-04-2022\" },\n{ task: \"Read some books\", date: \"02-11-2023\" },\n{ task: \"Watch football\", date: \"10-08-2021\" },\n];\nlocalStorage setItem(\"data\", JSON stringify(myTaskArr));\nlocalStorage removeItem(\"data\");\nconst getTaskArr = localStorage getItem(\"data\")\nconsole log(getTaskArr)\nconst getTaskArrObj = JSON parse(localStorage getItem(\"data\"));\nconsole log(getTaskArrObj);\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10347,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\64ff24b80431f62ec6b93f65.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "ef27e0bef0739f84838447defeba2bf7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 65003986d17d1e1865b269c0\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nNow you should save the task items to local storage when the user adds, updates, or removes a task Inside the addOrUpdateTask function, use setItem() to save the tasks with a key of data, then pass the taskData array as its argument Ensure that you stringify the taskData This would persist data once the user adds or updates tasks --hints--\nYou should use localStorage setItem() to save the tasks to the browser local storage js\nassert match(code, /localStorage\\ setItem\\(/)\nYou should pass in \"data\" as the first argument of your localStorage setItem() js\nassert match(code, /localStorage\\ setItem\\(\\s*('|\")data\\1/)\nYou should pass in JSON stringify(taskData) as the second argument of your localStorage setItem() js\nassert match(code, /localStorage\\ setItem\\(\\s*('|\")data\\1\\s*,\\s*JSON\\ stringify\\(\\s*taskData\\s*\\)\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "90133377d4cef0a280f0850754c3297c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "735aab12e59436576aae5edf01c924d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "47fde7979ae2dc091129f6d8dda4aded",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\n--fcc-editable-region--\n--fcc-editable-region--\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "eae3757300ee646464a9bce3e5c5db46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "() => { const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } --fcc-editable-region-- --fcc-editable-region-- updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "3acfbc39835fd0405c540c5fb25030de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description; if (formInputsContainValues && formInputValuesUpdated) { confirmCloseDialogshowModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65003986d17d1e1865b269c0.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "38070a7ac2af01101e617ee3869febbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 650300a25b6f72964ab8aca6\ntitle: Step 18\nchallengeType: 0\ndashedName: step-18\n--description--\nTo make the id more unique, add another hyphen and use Date now() Date now() returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC js\nconsole log(Date now()); // 1628586800000\nTo see the new result, click on the \"Add New Task\" button Then add a title of WALK DOG and click on the \"Add Task\" button Open up the console to see the result --hints--\nYou should add -${Date now()} to ${titleInput value toLowerCase() split(' ') join('-')} Don't forget it needs to be inside the template string js\nassert match(code, /\\s*id:\\s*`\\$\\{titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\}-\\$\\{Date\\ now\\(\\s*\\)\\}`\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d29d17ccbdb77c407248eef8a14b3fa0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "903f0a55127a3ea6b21afdf8147e3a7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "be55fe24b224aacfe1c26a4730d0ec77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\n--fcc-editable-region--\nid: ${titleInput value toLowerCase() split(' ') join('-')},\n--fcc-editable-region--\n};\nconsole log(taskObj);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650300a25b6f72964ab8aca6.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2bb02c76241a90cb738a83dd765e6e70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 650046832f92c01a35834bca\ntitle: Step 60\nchallengeType: 0\ndashedName: step-60\n--description--\nYou also want a deleted task to be removed from local storage For this, you don't need the removeItem() or clear() methods Since you already use splice() to remove the deleted task from taskData, all you need to do now is save taskData to local storage again Use setItem() to save the taskData array again Pass in data as the key and ensure that taskData is stringified before saving --hints--\nYou should use localStorage setItem() to save the tasks to the browser local storage js\nconst splitter = code split(\"taskData splice(dataArrIndex, 1);\")\nassert match(splitter[1], /localStorage\\ setItem\\(/)\nYou should pass in \"data\" as the first argument of your localStorage setItem() js\nconst splitter = code split(\"taskData splice(dataArrIndex, 1);\")\nassert match(splitter[1], /localStorage\\ setItem\\(\\s*('|\")data\\1/)\nYou should pass in JSON stringify(taskData) as the second argument of your localStorage setItem() js\nconst splitter = code split(\"taskData splice(dataArrIndex, 1);\")\nassert match(splitter[1], /localStorage\\ setItem\\(\\s*('|\")data\\1\\s*,\\s*JSON\\ stringify\\(\\s*taskData\\s*\\)\\s*\\)\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "1558ffd5e6de13db066c2a256508ea47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "a296db450f9680d741474da286397c0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "e65d5604d64a1b0b8cfab737479df415",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "6c4c65cdb18c39b1f0f8f112d2b9313e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\n--fcc-editable-region--\n--fcc-editable-region--\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "366d540ae7439ec1888e3280647d450c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTaskdescription;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9820,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650046832f92c01a35834bca.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "a435c68fa0ad8ddc3fc4b9af897eb9e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 650048b0764f9c1b798200e2\ntitle: Step 61\nchallengeType: 0\ndashedName: step-61\n--description--\nIf you add, update, or remove a task, it should reflect in the UI However, that's not happening now because you have yet to retrieve the tasks To do this, you need to modify your initial taskData to be an empty array Set taskData to the retrieval of data from local storage or an empty array Make sure you parse the data coming with JSON parse() because you saved it as a string --hints--\nYou should set the taskData variable to JSON parse(localStorage getItem(\"data\")) || []; js\nassert match(code, /const\\s+taskData\\s*=\\s*JSON\\ parse\\(\\s*localStorage\\ getItem\\(\\s*('|\")data\\1\\s*\\)\\s*\\)\\s*\\|\\|\\s*\\[\\s*\\]\\s*; /)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "bdcbc2ec2b5656448b3a3e4d2592ac94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "38d8747b3c0f6f844c06b2b0508141b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "7b07bf8f3525cf52b777d8493ab9c39c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\n--fcc-editable-region--\nconst taskData = [];\n--fcc-editable-region--\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "c77742ab59bbf9d802b5ec52129b104a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON stringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "19063b2d918f8bdc84cbd3c2cadca8e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTaskdescription;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\650048b0764f9c1b798200e2.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "493dec2eff23840c64ef9c07f826f009",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 65004ba581d03d1d5628b41c\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nYou've retrieved the task item(s) now, but they still don't reflect in the UI when the page loads However, they appear when you add a new task You can check if there's a task inside taskData using the length of the array Because 0 is a falsy value all you need for the condition is the array length Here is an example checking the length of an array:\njs\nif (arr length) {\n// do something\n}\nIn that example, if arr has a length greater than 0, the code inside the if statement block will run If arr has a length of 0, the code inside the if statement block will not run Check if there's a task inside taskData, then call the updateTaskContainer() inside the if statement block --hints--\nYou should create an if statement with (taskData length) as the condition As a reminder, 0 is a falsy value js\nassert match(code, /if\\s*\\(\\s*taskData\\ length\\s*\\)\\s*\\{\\s*/)\nYou should call the updateTaskContainer function in your if statement js\nassert match(code, /if\\s*\\(\\s*taskData\\ length\\s*\\)\\s*\\{\\s*updateTaskContainer\\(\\s*\\)\\s*; \\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "799c3b134dbf97d7df5f463099175e22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "686f204550bcac023798f9e061ac4bcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "566ce3811a3e148e2a6da952e7ccecb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = JSON parse(localStorage getItem(\"data\")) || [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "4e105f318698d75e59151dda59f2cf7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON stringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\n--fcc-editable-region--\n--fcc-editable-region--\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "60dd1e60178d5cbd56d03d70a6faf9e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } --fcc-editable-region-- --fcc-editable-region-- openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value== currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65004ba581d03d1d5628b41c.md",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "bf8e1b1f724b9d67cfaef41064554d4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d8ca387f989d6b25a3343\ntitle: Step 13\nchallengeType: 0\ndashedName: step-13\n--description--\nInside your taskObj, add an id property name For the value use the value of the titleInput To see the new result, click on the \"Add New Task\" button Then add a title and click on the \"Add Task\" button Open up the console to see the result --hints--\nYour taskObj should have an id property js\nassert match(code, /const\\s+taskObj\\s*=\\s*\\{\\s*(\"|'|)id\\1/)\nThe id property of your taskObj object should be set to titleInput value js\nassert match(code, /const\\s+taskObj\\s*=\\s*\\{\\s*(\"|'|)id\\1\\s*:\\s*titleInput\\ value\\s*, \\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "bc8818179e17e6a49cbad9de8a96fca4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7be5c46b54eea2886477a9e9f14eba68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2ad35b05bba277939727f4a37e051d19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\n--fcc-editable-region--\nconst taskObj = {\n};\nconsole log(taskObj);\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7126,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8ca387f989d6b25a3343.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f9a321d1849f1034147e4ace16242104",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 65099dbd8f137d58e5c0ff16\ntitle: Step 27\nchallengeType: 0\ndashedName: step-27\n--description--\nCreate one more p element and interpolate the description you destructured as the text Also, create a strong element inside the paragraph with the text Description: --hints--\nYou should create a p element with ${description} as the text js\nassert match(code, /<p> *\\$\\{description\\}<\\/p>/)\nYou should create a strong element with the text Description: after the opening tag of your p element js\nassert match(code, /<p><strong>Description:\\s*<\\/strong>\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e77bbad283ceacffbe4bcb8093d51c46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 12rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a3c4f06f862e04a7175ce23a6883b5d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; }discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7332b90caa92248c9c1eeede5f739629",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { confirmCloseDialogshowModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n}\ntaskData forEach(({id, title, date, description}) => {\ntasksContainer innerHTML += `\nTitle: ${title}\nDate: ${date}\n--fcc-editable-region--\n--fcc-editable-region--\n</div>\n`\n}\n);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7573,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\65099dbd8f137d58e5c0ff16.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bad46daeb98fb6e3f6d3bbfba3398007",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d8d7bb2424cd7cdf90ec1\ntitle: Step 14\nchallengeType: 0\ndashedName: step-14\n--description--\nThe user should be able to input a title with upper and lowercase letters But for the id, the value should be all lowercase Update your titleInput value to be all lowercase You can use the toLowerCase() method to do this js\nstr toLowerCase();\nTo see the new result, click on the \"Add New Task\" button Then add a title of WALK DOG and click on the \"Add Task\" button Open up the console to see the result of \"walk dog\" --hints--\nYour value should be titleInput value toLowerCase() js\nassert match(code, /\\s*id:\\s*titleInput\\ value\\ toLowerCase\\(\\)/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "eb6eb63bd42ed7bceab994dc63aa9efc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; }btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "84a98592e950a551f1126ddc7b9d45fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 13rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a728480b022d668edf3916d9a4e9a5df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = documentgetElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\n--fcc-editable-region--\nid: titleInput value\n--fcc-editable-region--\n};\nconsole log(taskObj);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d8d7bb2424cd7cdf90ec1.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bf1606ade6dab3fb4c00857bdd14c3ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d86150a52ced178d567f3\ntitle: Step 12\nchallengeType: 0\ndashedName: step-12\n--description--\nWhen a user creates a task, it should be saved in an object Create a const variable called taskObj and assign it the value of an empty object Then below that, add a console statement that logs the value of taskObj to the console Open up the console to see the empty object --hints--\nYou should use const to create your taskObj variable js\nassert match(code, /const\\s+taskObj\\s*=\\s*/);\nYou should assign an empty object to your taskObj variable js\nassert match(code, /const\\s+taskObj\\s*=\\s*{\\s*}/);\nYou should use console log() to log the value of taskObj to the console js\nassert match(code, /console\\ log\\(\\s*taskObj\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7e5f6883056c00cfc340a36a1202ca9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e906356c9b7b52b55e642778ebf5f501",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a95abae0d5d8500ca9327de218221cd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\n--fcc-editable-region--\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d86150a52ced178d567f3.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b2a28e59c59d635d05ca81c66703064c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d9535e86fd2deb351aeb9\ntitle: Step 17\nchallengeType: 0\ndashedName: step-17\n--description--\nThere is one last thing you will need to do to make this id unique But first, place the entire value below inside an embedded expression ${} js\ntitleInput value toLowerCase() split(\" \") join(\"-\")\nThen wrap that value in template strings In the next step, you will add a unique number to the end of the id value to make it truly unique --hints--\nYour value should be ${titleInput value toLowerCase() split(\" \") join(\"-\")} Don't forget to wrap the entire value in template strings js\nassert match(code, /\\s*id:\\s*`\\s*\\${\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*}`\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6ba846d2c50cb9163ea623c1bf5fee62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f9570379dc594eeeea9e44edd3be2530",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "65ae61cc2d3ec9cf6782f915e2a841f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\n--fcc-editable-region--\nid: titleInput value toLowerCase() split(\" \") join(\"-\")\n--fcc-editable-region--\n};\nconsole log(taskObj);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9535e86fd2deb351aeb9.md",
      "source_type": "git_repo"
    },
    "token_count": 404,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e10b117eaf2856715d57362b7b11f139",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d90b0ec1ef7da914c5e65\ntitle: Step 15\nchallengeType: 0\ndashedName: step-15\n--description--\nRight now, your id value is a lowercase string But the final result should be a hyphenated string Start by chaining the split method to the titleInput value to split the string into an array of words For the separator, use a space character(\" \") To see the new result, click on the \"Add New Task\" button Then add a title of WALK DOG and click on the \"Add Task\" button Open up the console to see the result of ['walk', 'dog'] --hints--\nYou should chain split(\" \") to titleInput value toLowerCase() js\nassert match(code, /\\s*id:\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a94aeb70f1851035dc48900b33bc8ddc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "c0cf5fe0066576330e3ab7a932355e16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "10da1a9b7d66ec64b5ec07de94cf9172",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\n--fcc-editable-region--\nid: titleInput value toLowerCase()\n--fcc-editable-region--\n};\nconsole log(taskObj);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d90b0ec1ef7da914c5e65.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "41da1b730e47d427b39f62a6343ef163",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d936a55565add0a27199b\ntitle: Step 16\nchallengeType: 0\ndashedName: step-16\n--description--\nNow that your id is an array of words, you can use the join method to turn the result back into a string For the separator, use a hyphen(-) To see the new result, click on the \"Add New Task\" button Then add a title of WALK DOG and click on the \"Add Task\" button Open up the console to see the result of \"walk-dog\" --hints--\nYou should chain join(\"-\") to titleInput value toLowerCase() split(\" \") js\nassert match(code, /const\\s+taskObj\\s*=\\s*\\{\\s*id:\\s*titleInput\\ value\\ toLowerCase\\(\\s*\\)\\ split\\(\\s*('|\")\\s{1}\\1\\s*\\)\\ join\\(\\s*('|\")-\\2\\s*\\)\\s*, \\s*\\}/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "baf702a6dabafae5085c885b924b6001",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; }btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2b5b5d9dc06d6a37636cad3626333ee0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; }task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0332936607da8c966dda876219d50963",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = documentgetElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\n--fcc-editable-region--\nid: titleInput value toLowerCase() split(\" \")\n--fcc-editable-region--\n};\nconsole log(taskObj);\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d936a55565add0a27199b.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "23be2bad51e6ea794fb250176d8f0a02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 660d9cb6cc6415e6ca0509d8\ntitle: Step 20\nchallengeType: 0\ndashedName: step-20\n--description--\nNow that you have finished testing your taskObj, you can remove the console log(taskObj) statement --hints--\nYou should not have a console log(taskObj) statement in your code js\nassert notMatch(code, /console\\ log\\(\\s*taskObj\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4498e53a3ae855fa89b384152f2991e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; }task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "6b96e05d28e176562f6633be15603794",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; } confirm-close-dialog-btn-container { display: flex; justify-content: center; margin-top: 10px; } discard-message-text { font-weight: bold; font-size: 1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; }hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = [];\nlet currentTask = {};\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconfirmCloseDialog showModal();\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\ntaskForm classList toggle(\"hidden\");\n});\ntaskForm",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "aeb2a74f492af2c89c134902eb104c1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = []; let currentTask = {}; openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { confirmCloseDialog showModal(); }); cancelBtn addEventListener(\"click\", () => confirmCloseDialog close()); discardBtn addEventListener(\"click\", () => { confirmCloseDialog close(); taskForm classList toggle(\"hidden\"); }); taskFormaddEventListener(\"submit\", (e) => {\ne preventDefault();\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\n--fcc-editable-region--\nconsole log(taskObj);\n--fcc-editable-region--\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\660d9cb6cc6415e6ca0509d8.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "62f328a4c0457504edf871173b79a167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 6632420f81f3cc554a5e540b\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nIf you try to add a new task, edit that task, and then click on the Add New Task button, you will notice a bug The form button will display the incorrect text of \"Update Task\" instead of \"Add Task\" To fix this, you will need to assign the string \"Add Task\" to addOrUpdateTaskBtn innerText inside your reset function --hints--\nYou should assign the string \"Add Task\" to addOrUpdateTaskBtn innerText js\nassert match(code, /addOrUpdateTaskBtn\\ innerText\\s*=\\s*('|\")Add Task\\1\\s*/)\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n} todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "b0cb2a52d48f5e1e51c66f751226c64b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; } todo-app { background-color: var(--white); width: 300px; height: 350px; border: 5px solid var(--yellow); border-radius: 8px; padding: 15px; position: relative; display: flex; flex-direction: column; gap: 10px; } btn { cursor: pointer; width: 100px; margin: 10px; color: var(--dark-grey); background-color: var(--golden-yellow); background-image: linear-gradient(#fecc4c, #ffac33); border-color: var(--golden-yellow); border-width: 3px; } btn:hover { background-image: linear-gradient(#ffcc4c, #f89808); }large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n} task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ffb66d153ecc72c943e42cce9e0d2c8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; } task-form-footer { display: flex; justify-content: center; } task-form-label, title-input, date-input, description-input { display: block; } task-form-label { margin-bottom: 5px; font-size: 1 3rem; font-weight: bold; } title-input, date-input, description-input { width: 100%; margin-bottom: 10px; padding: 2px; } confirm-close-dialog { padding: 10px; margin: 10px auto; border-radius: 15px; }confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document getElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = JSON parse(localStorage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "47e8ea88ff387da5538454bdaa509840",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "{ height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = document getElementById(\"close-task-form-btn\"); const addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\"); const cancelBtn = document getElementById(\"cancel-btn\"); const discardBtn = document getElementById(\"discard-btn\"); const tasksContainer = document getElementById(\"tasks-container\"); const titleInput = document getElementById(\"title-input\"); const dateInput = document getElementById(\"date-input\"); const descriptionInput = document getElementById(\"description-input\"); const taskData = JSON parse(localStoragegetItem(\"data\")) || [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\ntasksContainer innerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "567b0031edfc813a854b7976a54ea6a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { tasksContainer innerHTML += <div class=\"task\" id=\"${id}\"> <p><strong>Title:</strong> ${title}</p> <p><strong>Date:</strong> ${date}</p> <p><strong>Description:</strong> ${description}</p> <button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button> <button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button> </div> } ); }; const deleteTask = (buttonEl) => { const dataArrIndex = taskData findIndex( (item) => item id === buttonEl parentElement id ); buttonEl parentElement remove(); taskData splice(dataArrIndex, 1); localStorage setItem(\"data\", JSONstringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\n--fcc-editable-region--\n--fcc-editable-region--\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nif (taskData length) {\nupdateTaskContainer();\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9318,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\6632420f81f3cc554a5e540b.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "290e25435ac926ab378b19503bc4fb1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 671682cd6d7aa95f0078f35f\ntitle: Step 65\nchallengeType: 0\ndashedName: step-65\n--description--\nIt is time to work on the final issue If there is a to-do task with a special character like a quote inside of the name or description of the item, the application breaks While it appears otherwise, the correct item will appear missing In order to fix this, we need to create a function called removeSpecialChars that takes a string as input and removes all special characters --hints--\nYou should define a removeSpecialChars function js\nassert isFunction(removeSpecialChars);\nYour removeSpecialChars should not remove spaces js\nassert strictEqual(removeSpecialChars(\"The quick brown fox jumps over the lazy dog\"),\"The quick brown fox jumps over the lazy dog\");\nYour removeSpecialChars should remove single quotes js\nassert strictEqual(removeSpecialChars(\"quincy's dance party\"),\"quincys dance party\");\nYour removeSpecialChars should remove double quotes js\nassert strictEqual(removeSpecialChars(`\"Literature\" report due`),\"Literature report due\");\nYour removeSpecialChars should remove underscores js\nassert strictEqual(removeSpecialChars(`Naomi has a __gif__ folder`),\"Naomi has a gif folder\");\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "01fe0a58f1a9344247c2dfe32181344c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "b3e3d4163b3d5907f5db51e944537fb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "3f61176481ffd20f0df40a001b53a819",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = JSON parse(localStorage getItem(\"data\")) || [];\nlet currentTask = {};\n--fcc-editable-region--\n--fcc-editable-region--\nconst addOrUpdateTask = () => {\nif( titleInput value trim()){\nalert(\"Please provide a title\");\nreturn;\n}\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\n(tasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "0e8cd988e1b96dff749dabb962b5ba29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "} const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { (tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>)\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON stringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\naddOrUpdateTaskBtn innerText = \"Add Task\";\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nif (taskData length) {\nupdateTaskContainer();\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value == currentTask title || dateInput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "962d0fe56c272008cdeee15a41be9458",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "\"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { addOrUpdateTaskBtn innerText = \"Add Task\"; titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } if (taskData length) { updateTaskContainer(); } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value == currentTask title || dateInputvalue == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10111,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\671682cd6d7aa95f0078f35f.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "15c2bcf80833f909f8a3792c1319c126",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "id: 66ad0f178ed5791ed898fe56\ntitle: Step 64\nchallengeType: 0\ndashedName: step-64\n--description--\nThere are two bugs left to fix First, if you create a task with only spaces for the title, an empty task will be created even though the title is required Fix that by adding a check at the beginning of the function for if titleInput value trim() If there's no title, show an alert with the text Please provide a title and return after that --hints--\nYou should add an if statement with the condition titleInput value trim() inside addOrUpdateTask function js\nassert match(code, /if\\s*\\(\\s* titleInput\\ value\\ trim\\(\\s*\\)\\s*\\)\\s*/)\nYou should call the alert(\"Please provide a title\") in your if block js\nassert match(code, /if\\s*\\(\\s* titleInput\\ value\\ trim\\(\\s*\\)\\s*\\)\\s*\\{\\s*alert\\s*\\(\\s*('|\"|`)Please provide a title\\1\\s*\\)\\s*/)\nYour if statement should return from the function js\nassert match(code, /if\\s*\\(\\s* titleInput\\ value\\ trim\\(\\s*\\)\\s*\\)\\s*\\{\\s*alert\\s*\\(\\s*('|\"|`)Please provide a title\\1\\s*\\)\\s*; \\s*return\\s*; \\s*\\}/);\n--seed--\n--seed-contents--\n```html\nLearn localStorage by Building a Todo App\nTodo App\nAdd New Task\nTitle\nDate\nDescription\nAdd Task\nDiscard unsaved changes Cancel\nDiscard\n```\n```css\n:root {\n--white: #fff;\n--light-grey: #f5f6f7;\n--dark-grey: #0a0a23;\n--yellow: #f1be32;\n--golden-yellow: #feac32;\n}\n,\n::before,\n*::after {\nmargin: 0;\npadding: 0;\nbox-sizing: border-box;\n}\nbody {\nbackground-color: var(--dark-grey);\n}\nmain {\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n}\nh1 {\ncolor: var(--light-grey);\nmargin: 20px 0 40px 0;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "3153b7f0ff74e4d8b1065d08852f0b4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--seed-contents-- ```html Learn localStorage by Building a Todo App Todo App Add New Task Title Date Description Add Task Discard unsaved changes Cancel Discard ``` ```css :root { --white: #fff; --light-grey: #f5f6f7; --dark-grey: #0a0a23; --yellow: #f1be32; --golden-yellow: #feac32; } , ::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { background-color: var(--dark-grey); } main { display: flex; flex-direction: column; justify-content: center; align-items: center; } h1 { color: var(--light-grey); margin: 20px 0 40px 0; }todo-app {\nbackground-color: var(--white);\nwidth: 300px;\nheight: 350px;\nborder: 5px solid var(--yellow);\nborder-radius: 8px;\npadding: 15px;\nposition: relative;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n} btn {\ncursor: pointer;\nwidth: 100px;\nmargin: 10px;\ncolor: var(--dark-grey);\nbackground-color: var(--golden-yellow);\nbackground-image: linear-gradient(#fecc4c, #ffac33);\nborder-color: var(--golden-yellow);\nborder-width: 3px;\n} btn:hover {\nbackground-image: linear-gradient(#ffcc4c, #f89808);\n} large-btn {\nwidth: 80%;\nfont-size: 1 2rem;\nalign-self: center;\njustify-self: center;\n} close-task-form-btn {\nbackground: none;\nborder: none;\ncursor: pointer;\n} close-icon {\nwidth: 20px;\nheight: 20px;\n} task-form {\ndisplay: flex;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground-color: var(--white);\nborder-radius: 5px;\npadding: 15px;\nwidth: 300px;\nheight: 350px;\nflex-direction: column;\njustify-content: space-between;\noverflow: auto;\n} task-form-header {\ndisplay: flex;\njustify-content: flex-end;\n} task-form-body {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "df5063a463716561022a80537e9b83ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "#f89808); } large-btn { width: 80%; font-size: 1 2rem; align-self: center; justify-self: center; } close-task-form-btn { background: none; border: none; cursor: pointer; } close-icon { width: 20px; height: 20px; } task-form { display: flex; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: var(--white); border-radius: 5px; padding: 15px; width: 300px; height: 350px; flex-direction: column; justify-content: space-between; overflow: auto; } task-form-header { display: flex; justify-content: flex-end; } task-form-body { display: flex; flex-direction: column; justify-content: space-around; }task-form-footer {\ndisplay: flex;\njustify-content: center;\n} task-form-label,\ntitle-input,\ndate-input,\ndescription-input {\ndisplay: block;\n} task-form-label {\nmargin-bottom: 5px;\nfont-size: 1 3rem;\nfont-weight: bold;\n}\ntitle-input,\ndate-input,\ndescription-input {\nwidth: 100%;\nmargin-bottom: 10px;\npadding: 2px;\n}\nconfirm-close-dialog {\npadding: 10px;\nmargin: 10px auto;\nborder-radius: 15px;\n} confirm-close-dialog-btn-container {\ndisplay: flex;\njustify-content: center;\nmargin-top: 10px;\n} discard-message-text {\nfont-weight: bold;\nfont-size: 1 5rem;\n}\ntasks-container {\nheight: 100%;\noverflow-y: auto;\n} task {\nmargin: 5px 0;\n} hidden {\ndisplay: none;\n}\n@media (min-width: 576px) { todo-app, task-form {\nwidth: 400px;\nheight: 450px;\n} task-form-label {\nfont-size: 1 5rem;\n}\n#title-input,\n#date-input {\nheight: 2rem;\n}\n#title-input,\n#date-input,\n#description-input {\npadding: 5px;\nmargin-bottom: 20px;\n}\n}\n```\n```js\nconst taskForm = document getElementById(\"task-form\");\nconst confirmCloseDialog = document getElementById(\"confirm-close-dialog\");\nconst openTaskFormBtn = document getElementById(\"open-task-form-btn\");\nconst closeTaskFormBtn = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "09ae9f834c6ee75d6e345e785594d6d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "1 5rem; } tasks-container { height: 100%; overflow-y: auto; } task { margin: 5px 0; } hidden { display: none; } @media (min-width: 576px) { todo-app, task-form { width: 400px; height: 450px; } task-form-label { font-size: 1 5rem; } #title-input, #date-input { height: 2rem; } #title-input, #date-input, #description-input { padding: 5px; margin-bottom: 20px; } } ``` ```js const taskForm = document getElementById(\"task-form\"); const confirmCloseDialog = document getElementById(\"confirm-close-dialog\"); const openTaskFormBtn = document getElementById(\"open-task-form-btn\"); const closeTaskFormBtn = documentgetElementById(\"close-task-form-btn\");\nconst addOrUpdateTaskBtn = document getElementById(\"add-or-update-task-btn\");\nconst cancelBtn = document getElementById(\"cancel-btn\");\nconst discardBtn = document getElementById(\"discard-btn\");\nconst tasksContainer = document getElementById(\"tasks-container\");\nconst titleInput = document getElementById(\"title-input\");\nconst dateInput = document getElementById(\"date-input\");\nconst descriptionInput = document getElementById(\"description-input\");\nconst taskData = JSON parse(localStorage getItem(\"data\")) || [];\nlet currentTask = {};\nconst addOrUpdateTask = () => {\n--fcc-editable-region--\n--fcc-editable-region--\nconst dataArrIndex = taskData findIndex((item) => item id === currentTask id);\nconst taskObj = {\nid: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()},\ntitle: titleInput value,\ndate: dateInput value,\ndescription: descriptionInput value,\n};\nif (dataArrIndex === -1) {\ntaskData unshift(taskObj);\n} else {\ntaskData[dataArrIndex] = taskObj;\n}\nlocalStorage setItem(\"data\", JSON stringify(taskData));\nupdateTaskContainer()\nreset()\n};\nconst updateTaskContainer = () => {\ntasksContainer innerHTML = \"\";\ntaskData forEach(\n({ id, title, date, description }) => {\n(tasksContainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "477029fb009a4683ef1dc516fb5eae66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "--fcc-editable-region-- const dataArrIndex = taskData findIndex((item) => item id === currentTask id); const taskObj = { id: ${titleInput value toLowerCase() split(\" \") join(\"-\")}-${Date now()}, title: titleInput value, date: dateInput value, description: descriptionInput value, }; if (dataArrIndex === -1) { taskData unshift(taskObj); } else { taskData[dataArrIndex] = taskObj; } localStorage setItem(\"data\", JSON stringify(taskData)); updateTaskContainer() reset() }; const updateTaskContainer = () => { tasksContainer innerHTML = \"\"; taskData forEach( ({ id, title, date, description }) => { (tasksContainerinnerHTML += <div class=\"task\" id=\"${id}\">\n<p><strong>Title:</strong> ${title}</p>\n<p><strong>Date:</strong> ${date}</p>\n<p><strong>Description:</strong> ${description}</p>\n<button onclick=\"editTask(this)\" type=\"button\" class=\"btn\">Edit</button>\n<button onclick=\"deleteTask(this)\" type=\"button\" class=\"btn\">Delete</button>\n</div>)\n}\n);\n};\nconst deleteTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\nbuttonEl parentElement remove();\ntaskData splice(dataArrIndex, 1);\nlocalStorage setItem(\"data\", JSON stringify(taskData));\n}\nconst editTask = (buttonEl) => {\nconst dataArrIndex = taskData findIndex(\n(item) => item id === buttonEl parentElement id\n);\ncurrentTask = taskData[dataArrIndex];\ntitleInput value = currentTask title;\ndateInput value = currentTask date;\ndescriptionInput value = currentTask description;\naddOrUpdateTaskBtn innerText = \"Update Task\";\ntaskForm classList toggle(\"hidden\");\n}\nconst reset = () => {\naddOrUpdateTaskBtn innerText = \"Add Task\";\ntitleInput value = \"\";\ndateInput value = \"\";\ndescriptionInput value = \"\";\ntaskForm classList toggle(\"hidden\");\ncurrentTask = {};\n}\nif (taskData length) {\nupdateTaskContainer();\n}\nopenTaskFormBtn addEventListener(\"click\", () =>\ntaskForm classList toggle(\"hidden\")\n);\ncloseTaskFormBtn addEventListener(\"click\", () => {\nconst formInputsContainValues = titleInput value || dateInput value || descriptionInput value;\nconst formInputValuesUpdated = titleInput value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "86aca92f145ca2c8cfbd95bae7ad006e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
    "source_type": "git_repo",
    "title": "Learn localStorage by Building a Todo App",
    "content": "currentTask description; addOrUpdateTaskBtn innerText = \"Update Task\"; taskForm classList toggle(\"hidden\"); } const reset = () => { addOrUpdateTaskBtn innerText = \"Add Task\"; titleInput value = \"\"; dateInput value = \"\"; descriptionInput value = \"\"; taskForm classList toggle(\"hidden\"); currentTask = {}; } if (taskData length) { updateTaskContainer(); } openTaskFormBtn addEventListener(\"click\", () => taskForm classList toggle(\"hidden\") ); closeTaskFormBtn addEventListener(\"click\", () => { const formInputsContainValues = titleInput value || dateInput value || descriptionInput value; const formInputValuesUpdated = titleInput value== currentTask title || dateInput value == currentTask date || descriptionInput value == currentTask description;\nif (formInputsContainValues && formInputValuesUpdated) {\nconfirmCloseDialog showModal();\n} else {\nreset();\n}\n});\ncancelBtn addEventListener(\"click\", () => confirmCloseDialog close());\ndiscardBtn addEventListener(\"click\", () => {\nconfirmCloseDialog close();\nreset()\n});\ntaskForm addEventListener(\"submit\", (e) => {\ne preventDefault();\naddOrUpdateTask();\n});\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9849,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-localstorage-by-building-a-todo-app\\66ad0f178ed5791ed898fe56.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "692d24d08d988dba623ce0bff3f2f845",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63c620161fc2b49ac340ffc4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63c620161fc2b49ac340ffc4\ntitle: Step 1\nchallengeType: 0\ndashedName: step-1\ndemoType: onLoad\n--description--\nIn this project, you will build a set of football team cards and learn about nested objects, object destructuring, and default parameters All of the HTML and CSS for this project has been provided for you Start by accessing the id called \"team\" from the HTML document and storing it in a const variable called teamName Remember, you can use the getElementById method for this NOTE: The numbers for the team are organized alphabetically by last name This differs from conventional numbering where the numbers correspond with what is on the player's jerseys --hints--\nYou should use the document getElementById() method to get the #team element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)team\\1\\s*\\)/);\nYou should use const to declare the variable called teamName and assign it the #team element js\nassert match(code, /const\\s+teamName\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63c620161fc2b49ac340ffc4.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "49e9ab616863f23e580001f094446036",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63c620161fc2b49ac340ffc4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "teamName Remember, you can use the getElementById method for this NOTE: The numbers for the team are organized alphabetically by last name This differs from conventional numbering where the numbers correspond with what is on the player's jerseys --hints-- You should use the document getElementById() method to get the #team element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)team\\1\\s*\\)/); You should use const to declare the variable called teamName and assign it the #team element js assert match(code, /const\\s+teamName\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)team\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63c620161fc2b49ac340ffc4.md",
      "source_type": "git_repo"
    },
    "token_count": 751,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "328d4e37baf98afee0ddd57c9884f11f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63c620161fc2b49ac340ffc4.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7389,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63c620161fc2b49ac340ffc4.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1ee27cdf7d3d9ebf3a49d56dcae207be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7e324c1831f8d936b3ae.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf7e324c1831f8d936b3ae\ntitle: Step 2\nchallengeType: 0\ndashedName: step-2\n--description--\nNext, access the id called \"sport\" from the HTML document and store it in a const variable called typeOfSport Below that variable, assign the id of \"year\" to a const variable called worldCupYear --hints--\nYou should use the document getElementById() method to get the #sport element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)sport\\1\\s*\\)/);\nYou should use const to declare the variable called typeOfSport and assign it the #sport element js\nassert match(code, /const\\s+typeOfSport\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)sport\\1\\s*\\)/);\nYou should use the document getElementById() method to get the #year element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)year\\1\\s*\\)/);\nYou should use const to declare the variable called worldCupYear and assign it the #year element js\nassert match(code, /const\\s+worldCupYear\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7e324c1831f8d936b3ae.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0e23b7a0364c8ace6623f710a22041cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7e324c1831f8d936b3ae.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "--hints-- You should use the document getElementById() method to get the #sport element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)sport\\1\\s*\\)/); You should use const to declare the variable called typeOfSport and assign it the #sport element js assert match(code, /const\\s+typeOfSport\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)sport\\1\\s*\\)/); You should use the document getElementById() method to get the #year element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)year\\1\\s*\\)/); You should use const to declare the variable called worldCupYear and assign it the #year element js assert match(code, /const\\s+worldCupYear\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)year\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7e324c1831f8d936b3ae.md",
      "source_type": "git_repo"
    },
    "token_count": 804,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8b400e43dedbcba5ddb629789f2211cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7e324c1831f8d936b3ae.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7445,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7e324c1831f8d936b3ae.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a869e3e5680f524941a2755c1591eebb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7f97e7f99af9348f5068.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "id: 63cf7f97e7f99af9348f5068\ntitle: Step 3\nchallengeType: 0\ndashedName: step-3\n--description--\nNext, access the id called \"head-coach\" from the HTML document and store it in a const variable called headCoach Below that variable, assign the id of \"player-cards\" to a const variable called playerCards --hints--\nYou should use the document getElementById() method to get the #head-coach element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)head-coach\\1\\s*\\)/);\nYou should use const to declare the variable called headCoach and assign it the #head-coach element js\nassert match(code, /const\\s+headCoach\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)head-coach\\1\\s*\\)/);\nYou should use the document getElementById() method to get the #player-cards element js\nassert match(code, /document\\ getElementById\\(\\s*('|\"|`)player-cards\\1\\s*\\)/);\nYou should use const to declare the variable called playerCards and assign it the #player-cards element js\nassert match(code, /const\\s+playerCards\\s*=\\s*document\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7f97e7f99af9348f5068.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8656bc32ea5ef7350cd63fe14c976841",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7f97e7f99af9348f5068.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "--hints-- You should use the document getElementById() method to get the #head-coach element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)head-coach\\1\\s*\\)/); You should use const to declare the variable called headCoach and assign it the #head-coach element js assert match(code, /const\\s+headCoach\\s*=\\s*document\\ getElementById\\(\\s*('|\"|`)head-coach\\1\\s*\\)/); You should use the document getElementById() method to get the #player-cards element js assert match(code, /document\\ getElementById\\(\\s*('|\"|`)player-cards\\1\\s*\\)/); You should use const to declare the variable called playerCards and assign it the #player-cards element js assert match(code, /const\\s+playerCards\\s*=\\s*document\\getElementById\\(\\s*('|\"|`)player-cards\\1\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nLearn Modern JavaScript methods by building football team cards\nTeam stats\nTeam:\nSport:\nYear:\nHead coach:\nFilter Teammates:\nAll Players\nNicknames\nPosition Forward\nPosition Midfielder\nPosition Defender\nPosition Goalkeeper\nSergio Almirón\nPosition: forward\nNumber: 1\nNickname: N/A\nSergio Batista\nPosition: midfielder\nNumber: 2\nNickname: N/A\nRicardo Bochini\nPosition: midfielder\nNumber: 3\nNickname: El Bocha\nClaudio Borghi\nPosition: midfielder\nNumber: 4\nNickname: Bichi\nJosé Luis Brown\nPosition: defender\nNumber: 5\nNickname: Tata\nDaniel Passarella\nPosition: defender\nNumber: 6\nNickname: El Gran Capitán\nJorge Burruchaga\nPosition: forward\nNumber: 7\nNickname: Burru\nNéstor Clausen\nPosition: defender\nNumber: 8\nNickname: N/A\nJosé Luis Cuciuffo\nPosition: defender\nNumber: 9\nNickname: El Cuchu\n(Captain) Diego Maradona\nPosition: midfielder\nNumber: 10\nNickname: El Pibe de Oro\nJorge Valdano\nPosition: forward\nNumber: 11\nNickname: The Philosopher of Football\nHéctor Enrique\nPosition: midfielder\nNumber: 12\nNickname: N/A\nOscar Garré\nPosition: defender\nNumber: 13\nNickname: N/A\nRicardo Giusti\nPosition: midfielder\nNumber: 14\nNickname: N/A\nLuis Islas\nPosition: goalkeeper\nNumber: 15\nNickname: El loco\nJulio Olarticoechea\nPosition: defender\nNumber: 16\nNickname: N/A\nPedro Pasculli\nPosition: forward\nNumber: 17\nNickname: N/A\nNery Pumpido\nPosition: goalkeeper\nNumber: 18\nNickname: N/A\nOscar Ruggeri\nPosition: defender\nNumber: 19\nNickname: El Cabezón\nCarlos Tapia\nPosition: midfielder\nNumber: 20\nNickname: N/A\nMarcelo Trobbiani\nPosition: midfielder\nNumber: 21\nNickname: Calesita\nHéctor Zelada\nPosition: goalkeeper\nNumber: 22\nNickname: N/A\n© freeCodeCamp\n```\n```css\n,\n::before,\n*::after {\nbox-sizing: border-box;\nmargin: 0;\npadding: 0;\n}\n:root {\n--dark-grey: #0a0a23;\n--light-grey: #f5f6f7;\n--white: #ffffff;\n--black: #000;\n}\nbody {\nbackground-color: var(--dark-grey);\ntext-align: center;\npadding: 10px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7f97e7f99af9348f5068.md",
      "source_type": "git_repo"
    },
    "token_count": 814,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cd3362ce88d585e99997b41689bf8079",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7f97e7f99af9348f5068.md",
    "source_type": "git_repo",
    "title": "Learn Modern JavaScript methods by building football team cards",
    "content": "Nery Pumpido Position: goalkeeper Number: 18 Nickname: N/A Oscar Ruggeri Position: defender Number: 19 Nickname: El Cabezón Carlos Tapia Position: midfielder Number: 20 Nickname: N/A Marcelo Trobbiani Position: midfielder Number: 21 Nickname: Calesita Héctor Zelada Position: goalkeeper Number: 22 Nickname: N/A © freeCodeCamp ``` ```css , ::before, *::after { box-sizing: border-box; margin: 0; padding: 0; } :root { --dark-grey: #0a0a23; --light-grey: #f5f6f7; --white: #ffffff; --black: #000; } body { background-color: var(--dark-grey); text-align: center; padding: 10px; }title, options-label, team-stats,\nfooter {\ncolor: var(--white);\n} title {\nmargin: 1 3rem 0;\n} team-stats {\ndisplay: flex;\njustify-content: space-around;\nflex-wrap: wrap;\nfont-size: 1 3rem;\nmargin: 1 2rem 0;\n} options-label {\nfont-size: 1 2rem;\n} cards {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\nalign-items: center;\n} player-card {\nbackground-color: var(--light-grey);\npadding: 1 3rem;\nmargin: 1 2rem;\nwidth: 300px;\nborder-radius: 15px;\n}\n@media (max-width: 768px) { team-stats {\nflex-direction: column;\n}\n}\n```\n```js\nconst teamName = document getElementById(\"team\");\nconst typeOfSport = document getElementById(\"sport\");\nconst worldCupYear = document getElementById(\"year\");\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-modern-javascript-methods-by-building-football-team-cards\\63cf7f97e7f99af9348f5068.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 2,
    "total_chunks": 3
  }
]