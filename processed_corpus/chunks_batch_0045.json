[
  {
    "id": "510ac7edba957fe4b676043b188f1fb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1076,
    "chunk_index": 25,
    "total_chunks": 54
  },
  {
    "id": "9e4d86a974fb988c09bec0038fc077a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1086,
    "chunk_index": 26,
    "total_chunks": 54
  },
  {
    "id": "263866e501fd7d7950fecae69d6cd146",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1151,
    "chunk_index": 27,
    "total_chunks": 54
  },
  {
    "id": "d15abc14c30f288c0d580832563f1324",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1231,
    "chunk_index": 28,
    "total_chunks": 54
  },
  {
    "id": "0b9ce72ecef360050f99c36073bb97d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1237,
    "chunk_index": 29,
    "total_chunks": 54
  },
  {
    "id": "f8c4ab6e6bc8037bb8a75ab1d02c5fb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1246,
    "chunk_index": 30,
    "total_chunks": 54
  },
  {
    "id": "4bbfbd8e7aaae5520f95d8fca9fc9d0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Now update your innermost function in the addCharacters chain to implicitly return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/);\nYou should pass character2 as the second argument to your charRange() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1337,
    "chunk_index": 31,
    "total_chunks": 54
  },
  {
    "id": "f318e6e8fc1ffb48c0628e254ee198b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1324,
    "chunk_index": 32,
    "total_chunks": 54
  },
  {
    "id": "056fa95ef55bf694fc9d340effd5286e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1386,
    "chunk_index": 33,
    "total_chunks": 54
  },
  {
    "id": "554cf44d185ac628af43acd0ebac59b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1406,
    "chunk_index": 34,
    "total_chunks": 54
  },
  {
    "id": "3062a239a53d2e6e188c7dbe3eb32dfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1409,
    "chunk_index": 35,
    "total_chunks": 54
  },
  {
    "id": "52d5cb1aa02ca4e462c548c508d55811",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1427,
    "chunk_index": 36,
    "total_chunks": 54
  },
  {
    "id": "7d779d154ec24b11611df1c83933256f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1432,
    "chunk_index": 37,
    "total_chunks": 54
  },
  {
    "id": "6433af67208b6a5d70bf4a798c7ab874",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1436,
    "chunk_index": 38,
    "total_chunks": 54
  },
  {
    "id": "ebc65d61ee91ccf3e71d1b446e1dce7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1470,
    "chunk_index": 39,
    "total_chunks": 54
  },
  {
    "id": "acb27602fb5b0130c38d22447dcbc2eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1491,
    "chunk_index": 40,
    "total_chunks": 54
  },
  {
    "id": "70697c2be882631bc1ba2205bfc3ab3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1501,
    "chunk_index": 41,
    "total_chunks": 54
  },
  {
    "id": "be4d931df93829e1489adafb5fa1e7c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1566,
    "chunk_index": 42,
    "total_chunks": 54
  },
  {
    "id": "e532aee918d9d4df59d512b894cf8b47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1646,
    "chunk_index": 43,
    "total_chunks": 54
  },
  {
    "id": "ef3a166a36de8ad985721ad9537ab1a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1652,
    "chunk_index": 44,
    "total_chunks": 54
  },
  {
    "id": "034c4655abee928b10de9ea73f68d9d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1661,
    "chunk_index": 45,
    "total_chunks": 54
  },
  {
    "id": "da5d8a9fd84e3766c9175e9babc45b7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling charRange() with character1 and character2 as the arguments --hints-- Your innermost function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1801,
    "chunk_index": 46,
    "total_chunks": 54
  },
  {
    "id": "21efa7c8c819bc8f6f55f8bd42aab8e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*}\\s*; \\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{/); Your innermost function should return the result of calling charRange()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(/); You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 1821,
    "chunk_index": 47,
    "total_chunks": 54
  },
  {
    "id": "256358aa679d40b8195a480ef437caf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should pass character1 as the first argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1/); You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 999,
    "chunk_index": 48,
    "total_chunks": 54
  },
  {
    "id": "42cca4a257443d8cb45bd226f58e359f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should pass character2 as the second argument to your charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 579,
    "chunk_index": 49,
    "total_chunks": 54
  },
  {
    "id": "bce8f1c68aa4eefeb8bc5b41c383ae06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 571,
    "chunk_index": 50,
    "total_chunks": 54
  },
  {
    "id": "67b8b50936f5739b0825acf2941ab3da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "charRange() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*\\{\\s*const\\s+inner\\s*=\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*\\{\\s*return\\s+idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*}\\s*;\\s*return\\s+inner\\s*;\\s*\\}\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 51,
    "total_chunks": 54
  },
  {
    "id": "fafea56d71bee97d78d031ed1d4dc4a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => {\nconst inner = character => {\nreturn idToText(character + num);\n}\nreturn inner;\n}\nconst addCharacters = character1 => character2 => num => {\n}\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 52,
    "total_chunks": 54
  },
  {
    "id": "549ba74cad28fe3141ec6ae734e3cbd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return inner; } const addCharacters = character1 => character2 => num => { } } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d0e4636e14eae2bb3b992.md",
      "source_type": "git_repo"
    },
    "token_count": 193,
    "chunk_index": 53,
    "total_chunks": 54
  },
  {
    "id": "67daedae36fd2e9b06bc7cdff0b76c44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1b96dd7ea4b0061458bc\ntitle: Step 51\nchallengeType: 0\ndashedName: step-51\n--description--\nYou can pass a function reference as a callback parameter A function reference is a function name without the parentheses For example:\njs\nconst myFunc = (val) => `value: ${val}`;\nconst array = [1, 2, 3];\nconst newArray = array map(myFunc);\nThe map() method here will call the myFunc function, passing the same arguments that a map() callback takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints--\nYou should not call your elemValue function js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 24
  },
  {
    "id": "0152321794603c322d8ded022212f58a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map() method here will call the myFunc function, passing the same arguments that a map() callback takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 24
  },
  {
    "id": "433fc70d7b0131d34dbc2f6e0e4d8992",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map() method here will call the myFunc function, passing the same arguments that a map() callback takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/);\nYou should pass a reference to elemValue as the callback to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 24
  },
  {
    "id": "672400c02559d1c6129bb5f566e46631",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that a map() callback takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 24
  },
  {
    "id": "7fbedc6bd9ef5ab63e46b89863602707",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 557,
    "chunk_index": 4,
    "total_chunks": 24
  },
  {
    "id": "07c6990a53223344cbe951d954c3734f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 577,
    "chunk_index": 5,
    "total_chunks": 24
  },
  {
    "id": "ae0e18d8a7eb1e3c8cebc4583388f18a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 580,
    "chunk_index": 6,
    "total_chunks": 24
  },
  {
    "id": "58c7c9922ed86e995bc0f8b45f6f4af8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 598,
    "chunk_index": 7,
    "total_chunks": 24
  },
  {
    "id": "1ae00de4fe8415f33505e05a37bbfd09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 603,
    "chunk_index": 8,
    "total_chunks": 24
  },
  {
    "id": "4d830029ef57e2efa50afd59d37db46c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 607,
    "chunk_index": 9,
    "total_chunks": 24
  },
  {
    "id": "695e9cc33f58dec456b677cbd7a81ed2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 641,
    "chunk_index": 10,
    "total_chunks": 24
  },
  {
    "id": "7d094d3c7ad69296a74920a57de9df96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 11,
    "total_chunks": 24
  },
  {
    "id": "119fc9b58928e9164ffdc87ab1d4a5bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 672,
    "chunk_index": 12,
    "total_chunks": 24
  },
  {
    "id": "ae53530b8c086beab103c14447d2471e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 737,
    "chunk_index": 13,
    "total_chunks": 24
  },
  {
    "id": "ece49d1e71b65f4e35ab8788850484ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 799,
    "chunk_index": 14,
    "total_chunks": 24
  },
  {
    "id": "8a745e88c5f5ac5589bf4c13e8deb932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 880,
    "chunk_index": 15,
    "total_chunks": 24
  },
  {
    "id": "81342ad1124396c98a89d056835ddb7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "takes The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 946,
    "chunk_index": 16,
    "total_chunks": 24
  },
  {
    "id": "a9c399e01997e532ae1824013563ce5d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "value: 2, value: 3] Pass a reference to your elemValue function as the callback to your map() method --hints-- You should not call your elemValue function js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 968,
    "chunk_index": 17,
    "total_chunks": 24
  },
  {
    "id": "61d434e07b0a1c19cda57b0e3af3e8f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*\\)\\s*\\)/); You should pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 951,
    "chunk_index": 18,
    "total_chunks": 24
  },
  {
    "id": "fd2938f7288d93b3ee29a07fe9201668",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass a reference to elemValue as the callback to yourmap() method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 552,
    "chunk_index": 19,
    "total_chunks": 24
  },
  {
    "id": "942c60d7a2ed639628bcf87e03a0d80e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 20,
    "total_chunks": 24
  },
  {
    "id": "3dcaa31caf9ca54ec9b215bce27bd4dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "method js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 557,
    "chunk_index": 21,
    "total_chunks": 24
  },
  {
    "id": "6e7a2d3bcccb8febcfe6ca7779a03dcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map();\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 22,
    "total_chunks": 24
  },
  {
    "id": "00cf998087d1c3637f8465bf7a5aaca1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> character2 => num => charRange(character1, character2) map(); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; inputariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1b96dd7ea4b0061458bc.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 23,
    "total_chunks": 24
  },
  {
    "id": "4c617472f490c3ae5f68049f16d3b4b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1cadf0d96ab0b7e12da4\ntitle: Step 52\nchallengeType: 0\ndashedName: step-52\n--description--\nBecause elemValue returns a function, your addCharacters function ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints--\nYou should call elemValue() in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 22
  },
  {
    "id": "8f68ec8874c73797d511cd03fe18875a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "0 dashedName: step-52 --description-- Because elemValue returns a function, your addCharacters function ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/);\nYou should pass num to your elemValue() call js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 22
  },
  {
    "id": "d1e1eaff2d509d9eda399877ec3174a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 2,
    "total_chunks": 22
  },
  {
    "id": "a472f3933e5b9fc6ba619f7ae54042f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 3,
    "total_chunks": 22
  },
  {
    "id": "1d3556e09a96995958136878d81b743d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 566,
    "chunk_index": 4,
    "total_chunks": 22
  },
  {
    "id": "ec79b3a4686c8df79c749ddb57b07795",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 5,
    "total_chunks": 22
  },
  {
    "id": "ff9675221f817a67f26c53391976beac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 6,
    "total_chunks": 22
  },
  {
    "id": "4d118e11d1d21847bb99223e229e3870",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 593,
    "chunk_index": 7,
    "total_chunks": 22
  },
  {
    "id": "6ff8996a10c63e38285963ed65192402",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 8,
    "total_chunks": 22
  },
  {
    "id": "9ccada572576113c5b3c789cecc79580",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 648,
    "chunk_index": 9,
    "total_chunks": 22
  },
  {
    "id": "9202e74c75704fe0d9598f9a2c6f3bd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 658,
    "chunk_index": 10,
    "total_chunks": 22
  },
  {
    "id": "6eec21e14462062d9e3498bf6bb084df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 723,
    "chunk_index": 11,
    "total_chunks": 22
  },
  {
    "id": "0a3d32ca9fde14514016a1e28baff56c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 785,
    "chunk_index": 12,
    "total_chunks": 22
  },
  {
    "id": "98b22ea8472f433a054c781073f6404a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 866,
    "chunk_index": 13,
    "total_chunks": 22
  },
  {
    "id": "ec8b033604a79b23a4b7783a0fdf08d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "ultimately returns an array of function references You want the map() method to run the inner function of your elemValue function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 939,
    "chunk_index": 14,
    "total_chunks": 22
  },
  {
    "id": "82a2d1a646abd76f74859caaf9353367",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function, which means you need to call elemValue instead of reference it Pass num as the argument to your elemValue function --hints-- You should call elemValue() in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 963,
    "chunk_index": 15,
    "total_chunks": 22
  },
  {
    "id": "64170c2d195b981fabcad3271d0ca285",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 950,
    "chunk_index": 16,
    "total_chunks": 22
  },
  {
    "id": "052cf133171904291665ec8cee82a30a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(/); You should pass num to your elemValue() call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 774,
    "chunk_index": 17,
    "total_chunks": 22
  },
  {
    "id": "0f6109f68cb949c44d5037941760aa12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 549,
    "chunk_index": 18,
    "total_chunks": 22
  },
  {
    "id": "bde41a238ee0a0226a37e9082728e18a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 564,
    "chunk_index": 19,
    "total_chunks": 22
  },
  {
    "id": "6c157052271ca0fe170d93a04d81e16c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue);\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 20,
    "total_chunks": 22
  },
  {
    "id": "8d15c4e8b9ae43da6d42675ac6d45b90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "+ num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1cadf0d96ab0b7e12da4.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 21,
    "total_chunks": 22
  },
  {
    "id": "e357b21546a548db283c5e21ee63d24c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1e531042dfb24da1f032\ntitle: Step 54\nchallengeType: 0\ndashedName: step-54\n--description--\nThe second argument to the replace() method does not have to be a string You can instead pass a callback function to run more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints--\nYou should pass an arrow function as the second argument to your replace() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 27
  },
  {
    "id": "17d5989bf076995193c356ca94cd80e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be a string You can instead pass a callback function to run more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 27
  },
  {
    "id": "30b85aadabaf12f67e12ac99e8407c03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "string You can instead pass a callback function to run more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 27
  },
  {
    "id": "b7667d15589a509be90178ab6af9ca9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "string You can instead pass a callback function to run more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/);\nYour arrow function should take a match parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 538,
    "chunk_index": 3,
    "total_chunks": 27
  },
  {
    "id": "110c8d947ec2081db1ec35083a8d677d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to run more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 4,
    "total_chunks": 27
  },
  {
    "id": "5df3d7b8e9ff0db661495cc67094026f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "run more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 595,
    "chunk_index": 5,
    "total_chunks": 27
  },
  {
    "id": "9b80d67a0deb4aee249bc6d8623dd86d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 6,
    "total_chunks": 27
  },
  {
    "id": "26773cd03c32824621f64b8600047f73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 618,
    "chunk_index": 7,
    "total_chunks": 27
  },
  {
    "id": "72637cbab850490237415ea9ec8d0c7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 8,
    "total_chunks": 27
  },
  {
    "id": "2a41d501b7d4959ec73dbe1871013fcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 641,
    "chunk_index": 9,
    "total_chunks": 27
  },
  {
    "id": "db0a98c8ea13fce2e386061cb9f8677d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 645,
    "chunk_index": 10,
    "total_chunks": 27
  },
  {
    "id": "926d9fb5d84b4f2a6f9f674cc8b30e44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 679,
    "chunk_index": 11,
    "total_chunks": 27
  },
  {
    "id": "77a895ab36c31d45fa5b4fe8f9c16eaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 12,
    "total_chunks": 27
  },
  {
    "id": "561ea74f6cf802f213f0f636c891ecbf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 710,
    "chunk_index": 13,
    "total_chunks": 27
  },
  {
    "id": "4c3526d93e1bd50dc621a00cc64a07d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 14,
    "total_chunks": 27
  },
  {
    "id": "9a07bb3f34d4b98b46f6549f217cb534",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 837,
    "chunk_index": 15,
    "total_chunks": 27
  },
  {
    "id": "2907796f1db94af5b920ef13cb25fc67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 918,
    "chunk_index": 16,
    "total_chunks": 27
  },
  {
    "id": "bcef5196813240d5c9161d770480200c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 938,
    "chunk_index": 17,
    "total_chunks": 27
  },
  {
    "id": "35026ea583e48b202faaf078f921bd44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 951,
    "chunk_index": 18,
    "total_chunks": 27
  },
  {
    "id": "9f0d6cefd3f3007439c7749ef2ef795f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "more complex logic on the matched string The callback function takes a few parameters The first is the matched string Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 1042,
    "chunk_index": 19,
    "total_chunks": 27
  },
  {
    "id": "1d4328c1271b6ad1d315948724ce04c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Pass an empty callback function to your replace() call, and give it a match parameter --hints-- You should pass an arrow function as the second argument to your replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 1069,
    "chunk_index": 20,
    "total_chunks": 27
  },
  {
    "id": "ff90997ddba06b6b1b90969a9279d39e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "replace() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 1059,
    "chunk_index": 21,
    "total_chunks": 27
  },
  {
    "id": "e175e6b9bec9e8685618dd4a8c32e618",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(*\\)|[^\\s()]+)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); Your arrow function should take a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 883,
    "chunk_index": 22,
    "total_chunks": 27
  },
  {
    "id": "aad97fd51974f2d1c43f4576b3572f4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 601,
    "chunk_index": 23,
    "total_chunks": 27
  },
  {
    "id": "a3c34415de6397e921614d08395d5a8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 616,
    "chunk_index": 24,
    "total_chunks": 27
  },
  {
    "id": "608a89d639445dcbe8c04919b27469b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex);\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 25,
    "total_chunks": 27
  },
  {
    "id": "615a8a6f3e02481f4d3dcf5e6f89e49e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); inputtype = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5268,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1e531042dfb24da1f032.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 26,
    "total_chunks": 27
  },
  {
    "id": "b2dc38661fa99bf16ce34c85997a5099",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 29
  },
  {
    "id": "c3acbc2f3add4133ef4f546fa83bb688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 1,
    "total_chunks": 29
  },
  {
    "id": "3d84a07e08183bd044030ca8d6160657",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 2,
    "total_chunks": 29
  },
  {
    "id": "d84640b2f21bc7a6d767ea7f80a17f37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 591,
    "chunk_index": 3,
    "total_chunks": 29
  },
  {
    "id": "c9b93eaa797b22b60d49050d4bba4678",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 594,
    "chunk_index": 4,
    "total_chunks": 29
  },
  {
    "id": "b5820ea82bfb6ae25fb4d18a6e07322a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 5,
    "total_chunks": 29
  },
  {
    "id": "2132e42ddfbfae8e57d7323e316dace3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 6,
    "total_chunks": 29
  },
  {
    "id": "5b7cdc59f05c39b80e5cbb7ca6b86c2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 682,
    "chunk_index": 7,
    "total_chunks": 29
  },
  {
    "id": "307341ae78aebb1f2748f1f4c6caffff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 685,
    "chunk_index": 8,
    "total_chunks": 29
  },
  {
    "id": "68f1b3e7befe9f2ac074e9090333375e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 703,
    "chunk_index": 9,
    "total_chunks": 29
  },
  {
    "id": "2c764a5495ad1f3e6f4a5f816f82560d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 708,
    "chunk_index": 10,
    "total_chunks": 29
  },
  {
    "id": "b6800db2c6fa58a9b9fb069d62ea0e88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 712,
    "chunk_index": 11,
    "total_chunks": 29
  },
  {
    "id": "caa986a8755d88cacd4b4e54aced00eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 746,
    "chunk_index": 12,
    "total_chunks": 29
  },
  {
    "id": "dd763bd2b9032b83aa0e01772b372497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 767,
    "chunk_index": 13,
    "total_chunks": 29
  },
  {
    "id": "7a51889bb1341d1ebb1a52dad887216f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 777,
    "chunk_index": 14,
    "total_chunks": 29
  },
  {
    "id": "25dcec775c9597a4dccc5dcdc7c3a691",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 842,
    "chunk_index": 15,
    "total_chunks": 29
  },
  {
    "id": "5dc5f7a4de9267482a47f63f0ce3dc31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 904,
    "chunk_index": 16,
    "total_chunks": 29
  },
  {
    "id": "d31f83c6af63e7891c13a41657b9c5fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 985,
    "chunk_index": 17,
    "total_chunks": 29
  },
  {
    "id": "dd31aed0ceaf84ce524d1679b919e5e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 1005,
    "chunk_index": 18,
    "total_chunks": 29
  },
  {
    "id": "d1eebf2bdae6a81b3d9fb345088ae35c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 1018,
    "chunk_index": 19,
    "total_chunks": 29
  },
  {
    "id": "663b8274702257135279b9a48f9123dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 1085,
    "chunk_index": 20,
    "total_chunks": 29
  },
  {
    "id": "ec42c1a84f1adf22b6089efe308ec8a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d386a685620b49db4be76\ntitle: Step 57\nchallengeType: 0\ndashedName: step-57\n--description--\nCall the map() method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints--\nYou should call the map() method on your rangeFromString() call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/);\nYou should pass a reference to addCharacters as the callback to yourmap() methodjs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 1151,
    "chunk_index": 21,
    "total_chunks": 29
  },
  {
    "id": "83e27a4fc6a7131b44ec2d5f40ca53af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "method on your rangeFromString() call, passing a reference to addCharacters as the callback function --hints-- You should call the map() method on your rangeFromString() call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/); You should pass a reference to addCharacters as the callback to yourmap() methodjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 1153,
    "chunk_index": 22,
    "total_chunks": 29
  },
  {
    "id": "dc669949099b38538413f920bbc09223",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(/); You should pass a reference to addCharacters as the callback to yourmap() methodjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 1136,
    "chunk_index": 23,
    "total_chunks": 29
  },
  {
    "id": "1b42faecc84ebf796a81616ce6941fa9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should pass a reference to addCharacters as the callback to yourmap() methodjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 653,
    "chunk_index": 24,
    "total_chunks": 29
  },
  {
    "id": "4545b387c399bc6ca5f5ae8ccb674ea7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "yourmap() methodjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 645,
    "chunk_index": 25,
    "total_chunks": 29
  },
  {
    "id": "24f0713abdf73e00ec01a1481ebdaf7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "yourmap() methodjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 660,
    "chunk_index": 26,
    "total_chunks": 29
  },
  {
    "id": "5999c423e0d7267b42572ab378753805",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 27,
    "total_chunks": 29
  },
  {
    "id": "c8cd2520b667e1c5ec9fc643ea65d4fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2)); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99)forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d386a685620b49db4be76.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 28,
    "total_chunks": 29
  },
  {
    "id": "e97b48372ec18a5fa5ef4ad9be920e5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3141790b3cb337dd611a\ntitle: Step 55\nchallengeType: 0\ndashedName: step-55\n--description--\nThe callback function should have a parameter for each capture group in the regular expression In your case, rangeRegex has four capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints--\nYour callback function should have char1 as the second parameter js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 59
  },
  {
    "id": "fa8b7a6dd27307b433dcf11b439e4f2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "each capture group in the regular expression In your case, rangeRegex has four capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 59
  },
  {
    "id": "2189e6c09f7d5ec68b9110e97264f720",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture group in the regular expression In your case, rangeRegex has four capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 2,
    "total_chunks": 59
  },
  {
    "id": "ffe81b7dc7f0e7a390b3874bb59de774",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture group in the regular expression In your case, rangeRegex has four capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/);\nYour callback function should have num1 as the third parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 542,
    "chunk_index": 3,
    "total_chunks": 59
  },
  {
    "id": "0ef02f367bbd3e46eb57c26322de3557",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "has four capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 533,
    "chunk_index": 4,
    "total_chunks": 59
  },
  {
    "id": "3415596103f5aff642ba1d86827004e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "four capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 595,
    "chunk_index": 5,
    "total_chunks": 59
  },
  {
    "id": "905551582a27875b5d64de7a44bc506d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 615,
    "chunk_index": 6,
    "total_chunks": 59
  },
  {
    "id": "8ee167316c2999f74a7c17af2a183ba0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 618,
    "chunk_index": 7,
    "total_chunks": 59
  },
  {
    "id": "92239040225751d635aa48beaf40b6f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 636,
    "chunk_index": 8,
    "total_chunks": 59
  },
  {
    "id": "1129ae64c5bf37e10195084d5a330858",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 641,
    "chunk_index": 9,
    "total_chunks": 59
  },
  {
    "id": "5e94e0a0be1da78910f6baa65eb6afb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 645,
    "chunk_index": 10,
    "total_chunks": 59
  },
  {
    "id": "1fa9731ca8e368ddd555be7951ef40c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 679,
    "chunk_index": 11,
    "total_chunks": 59
  },
  {
    "id": "d4b8c48155ee06550cbeb4b1feb98038",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 12,
    "total_chunks": 59
  },
  {
    "id": "ee3460fce1f4cef22a9d90f31375fe79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 710,
    "chunk_index": 13,
    "total_chunks": 59
  },
  {
    "id": "65a852bec1708292fb7b8f53aa35b11b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 14,
    "total_chunks": 59
  },
  {
    "id": "cf3c19cb54323b510a377e1f70e256b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 837,
    "chunk_index": 15,
    "total_chunks": 59
  },
  {
    "id": "ffbbbe0f7892990b2d9da9eabb05b023",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 918,
    "chunk_index": 16,
    "total_chunks": 59
  },
  {
    "id": "556954518e7da5ed3311f2d7cb8c78dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 938,
    "chunk_index": 17,
    "total_chunks": 59
  },
  {
    "id": "a4eeef9f17d43c492360a54b9fbe0bf0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 951,
    "chunk_index": 18,
    "total_chunks": 59
  },
  {
    "id": "e1032dfa49ca4e49b7984f5720faf0ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "capture groups: the first letter, the first numbers, the second letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/);\nYour callback function should have char2 as the fourth parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 993,
    "chunk_index": 19,
    "total_chunks": 59
  },
  {
    "id": "0eb3026b03ef25cfea4dc452d833914b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "letter, and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 983,
    "chunk_index": 20,
    "total_chunks": 59
  },
  {
    "id": "f64d4c02bbfe9b9da93b9cbe2bd093d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1044,
    "chunk_index": 21,
    "total_chunks": 59
  },
  {
    "id": "33e937f9c76a531bbe8b17e669475557",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1064,
    "chunk_index": 22,
    "total_chunks": 59
  },
  {
    "id": "aa548a80bdf1a63ffee985080240d159",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1067,
    "chunk_index": 23,
    "total_chunks": 59
  },
  {
    "id": "147ee65c683182febe3c9eadbf8c0596",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1085,
    "chunk_index": 24,
    "total_chunks": 59
  },
  {
    "id": "363b4c0c97ba287c9645db81683103ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1090,
    "chunk_index": 25,
    "total_chunks": 59
  },
  {
    "id": "5c4de4aa3e057d8e7fd509a9c80c23fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1094,
    "chunk_index": 26,
    "total_chunks": 59
  },
  {
    "id": "5f27921df63520e6fff47a7590fc84db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1128,
    "chunk_index": 27,
    "total_chunks": 59
  },
  {
    "id": "f2109c0dd0b1066affaa63dac04c6b15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1149,
    "chunk_index": 28,
    "total_chunks": 59
  },
  {
    "id": "370c7cde6a1cd7320acdc68de0ca6bd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1159,
    "chunk_index": 29,
    "total_chunks": 59
  },
  {
    "id": "6cebd67b754fd71ea0393abd507616bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1224,
    "chunk_index": 30,
    "total_chunks": 59
  },
  {
    "id": "072809ebe3ec2d99eea6accb14a3d025",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1286,
    "chunk_index": 31,
    "total_chunks": 59
  },
  {
    "id": "641fc9f3046cae3ce988931f52d6a198",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1367,
    "chunk_index": 32,
    "total_chunks": 59
  },
  {
    "id": "f8cec8254b814357576cf22311cd0033",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1387,
    "chunk_index": 33,
    "total_chunks": 59
  },
  {
    "id": "746701233a571ce1fe0c4ae86d9c575f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1400,
    "chunk_index": 34,
    "total_chunks": 59
  },
  {
    "id": "e496af887eed5e8ba347389ab5843391",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the second numbers Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/);\nYour callback function should have num2 as the fifth parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1449,
    "chunk_index": 35,
    "total_chunks": 59
  },
  {
    "id": "82b0d52c21d73b2216afb93c2bfc4bbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1442,
    "chunk_index": 36,
    "total_chunks": 59
  },
  {
    "id": "1f03ff095d0a3bd889443775a27527fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1504,
    "chunk_index": 37,
    "total_chunks": 59
  },
  {
    "id": "0921fff62be779db20af9fd883e92c87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1524,
    "chunk_index": 38,
    "total_chunks": 59
  },
  {
    "id": "2b5253c8004e2f5997a99f7b0fcde93f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1527,
    "chunk_index": 39,
    "total_chunks": 59
  },
  {
    "id": "c1e83f75d621c88d7e97023efefb2923",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1545,
    "chunk_index": 40,
    "total_chunks": 59
  },
  {
    "id": "9281c9e2571532b8e62da4d847bd1202",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1550,
    "chunk_index": 41,
    "total_chunks": 59
  },
  {
    "id": "9c39ea21e87ac39ce156183cad1436af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1554,
    "chunk_index": 42,
    "total_chunks": 59
  },
  {
    "id": "06c54a172839d3802128fef7153357c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1588,
    "chunk_index": 43,
    "total_chunks": 59
  },
  {
    "id": "98af51602c87ccc798a0bc87e2ede3b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1609,
    "chunk_index": 44,
    "total_chunks": 59
  },
  {
    "id": "778734d9d5d8ff64a9f7327a1f0e4731",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1619,
    "chunk_index": 45,
    "total_chunks": 59
  },
  {
    "id": "c12c834797987403c63968e9e25ad571",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1684,
    "chunk_index": 46,
    "total_chunks": 59
  },
  {
    "id": "35fc98847d4bebc87d02bd26364fcd09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1746,
    "chunk_index": 47,
    "total_chunks": 59
  },
  {
    "id": "37812921f8cf6001c3006e1899b255a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1827,
    "chunk_index": 48,
    "total_chunks": 59
  },
  {
    "id": "9580992e37725ddc65a51e16d2e0a9d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1847,
    "chunk_index": 49,
    "total_chunks": 59
  },
  {
    "id": "851b9c9fad688e638780a5ed36606001",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1860,
    "chunk_index": 50,
    "total_chunks": 59
  },
  {
    "id": "3c0c8609e6d975606065648f6a1d44ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "those capture groups: char1, num1, char2, and num2 char will be short for character --hints-- Your callback function should have char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1961,
    "chunk_index": 51,
    "total_chunks": 59
  },
  {
    "id": "d6b660c0acb017f41694aa26ff8ad65c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "char1 as the second parameter js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1/); Your callback function should have num1 as the third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1978,
    "chunk_index": 52,
    "total_chunks": 59
  },
  {
    "id": "1d43b8f556cfdc9950ea5f50ea94607d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "third parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1/); Your callback function should have char2 as the fourth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1532,
    "chunk_index": 53,
    "total_chunks": 59
  },
  {
    "id": "0b950bd4ccf7099a70c9d9d975359835",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2/); Your callback function should have num2 as the fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 1077,
    "chunk_index": 54,
    "total_chunks": 59
  },
  {
    "id": "fbeb45f6bf00c651cb868d5a2446839b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 612,
    "chunk_index": 55,
    "total_chunks": 59
  },
  {
    "id": "032efad7d55db97cc6b3ac095b5b3998",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "fifth parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 627,
    "chunk_index": 56,
    "total_chunks": 59
  },
  {
    "id": "72df052d90b5e1fbc4117327abafb1eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (match) => {});\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 57,
    "total_chunks": 59
  },
  {
    "id": "f3259f1999b16c9d7db954738da70017",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (match) => {}); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = documentcreateElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3141790b3cb337dd611a.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 58,
    "total_chunks": 59
  },
  {
    "id": "85fea9f63860414a599a1bd2e6a13c3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 28
  },
  {
    "id": "c1b3aa57c1c33be6675e89abecc14a3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 28
  },
  {
    "id": "8d4c518189b58a0cb826e50d83c54cf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 573,
    "chunk_index": 2,
    "total_chunks": 28
  },
  {
    "id": "5b0d8229dc01832d2c39bb14aac5506d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 3,
    "total_chunks": 28
  },
  {
    "id": "d7063b4e9c502a38477dcb0143bc00fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 603,
    "chunk_index": 4,
    "total_chunks": 28
  },
  {
    "id": "a373db8f00d4fca20d06bb7d89dd5088",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 667,
    "chunk_index": 5,
    "total_chunks": 28
  },
  {
    "id": "060fb9f0ac36e7ec0b7da24c6398e407",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 688,
    "chunk_index": 6,
    "total_chunks": 28
  },
  {
    "id": "7731a1799621777f7037ba65a201c3ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 691,
    "chunk_index": 7,
    "total_chunks": 28
  },
  {
    "id": "fcd98f327407d3ed9187364d538e4e4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 709,
    "chunk_index": 8,
    "total_chunks": 28
  },
  {
    "id": "137c48569f95cd7524dfba209d67105e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 714,
    "chunk_index": 9,
    "total_chunks": 28
  },
  {
    "id": "8b6854b8c8143cf305e5a16c0dd73abd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 718,
    "chunk_index": 10,
    "total_chunks": 28
  },
  {
    "id": "45a18ebbbe7882d9de479cc6cd3770c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 752,
    "chunk_index": 11,
    "total_chunks": 28
  },
  {
    "id": "0bf50822689d7fef8a298cdd736ebb38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 773,
    "chunk_index": 12,
    "total_chunks": 28
  },
  {
    "id": "88f7f7bedd85c2aad2fc3bbfb7f7fc6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 783,
    "chunk_index": 13,
    "total_chunks": 28
  },
  {
    "id": "f69fdc56e94284390f8128a1bf965d3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 848,
    "chunk_index": 14,
    "total_chunks": 28
  },
  {
    "id": "651a495586c002245be5dcb29459f795",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 910,
    "chunk_index": 15,
    "total_chunks": 28
  },
  {
    "id": "12de5df98355c388a67b07d941618e50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 16,
    "total_chunks": 28
  },
  {
    "id": "3336b3720807191e34998932be8fb85c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 1011,
    "chunk_index": 17,
    "total_chunks": 28
  },
  {
    "id": "868bb6032a1b536d10a3e064338eb681",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 1024,
    "chunk_index": 18,
    "total_chunks": 28
  },
  {
    "id": "437dd30456ade0147a4236849a0303e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 1091,
    "chunk_index": 19,
    "total_chunks": 28
  },
  {
    "id": "03ed1de9977881cbdbef67c520d9f84a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38c326f3c8b54023de38\ntitle: Step 58\nchallengeType: 0\ndashedName: step-58\n--description--\naddCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints--\nYou should call your addCharacters() function in your map() method js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/);\nYou should pass char1 as the argument to your addCharacters() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 1167,
    "chunk_index": 20,
    "total_chunks": 28
  },
  {
    "id": "b1875549f8bbeaf0332ad98afd5e0371",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- addCharacters returns a function, so you'll want to call it Pass char1 as the argument --hints-- You should call your addCharacters() function in your map() method js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/); You should pass char1 as the argument to your addCharacters() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 1174,
    "chunk_index": 21,
    "total_chunks": 28
  },
  {
    "id": "0e11e3f9bd4b89cf31cac4b9ebc4e8f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/); You should pass char1 as the argument to your addCharacters() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 1157,
    "chunk_index": 22,
    "total_chunks": 28
  },
  {
    "id": "a2e96ea8448a18b2ee6a87d6b9c710f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*/); You should pass char1 as the argument to your addCharacters() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 775,
    "chunk_index": 23,
    "total_chunks": 28
  },
  {
    "id": "510feb29ee06458ecbb196676770da79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "addCharacters() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 655,
    "chunk_index": 24,
    "total_chunks": 28
  },
  {
    "id": "b225fcb06d18af7dd03b492bfaa53ed0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "addCharacters() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 25,
    "total_chunks": 28
  },
  {
    "id": "b0365ff8cb92015c29f06c242cdab7ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 26,
    "total_chunks": 28
  },
  {
    "id": "51d23d92a59e8a2c7c6b4e5ad1515399",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters)); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5328,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38c326f3c8b54023de38.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 27,
    "total_chunks": 28
  },
  {
    "id": "d074a3b3172bec947c2a7fdcac15f403",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 58
  },
  {
    "id": "c11cccbeac71f63741facc7397fcc948",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 1,
    "total_chunks": 58
  },
  {
    "id": "08d1d06bc058a4f1c0d66f7133e7d8f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 524,
    "chunk_index": 2,
    "total_chunks": 58
  },
  {
    "id": "c86e703e3410fe045c91f0b01be93b19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 3,
    "total_chunks": 58
  },
  {
    "id": "8f0d6c022da2d488f257003186a0fa2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 609,
    "chunk_index": 4,
    "total_chunks": 58
  },
  {
    "id": "c0106cd7dbe9cacf5ad97e10c28a92a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 612,
    "chunk_index": 5,
    "total_chunks": 58
  },
  {
    "id": "b04b8572629fcb0437d52187254228fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 630,
    "chunk_index": 6,
    "total_chunks": 58
  },
  {
    "id": "345e947732267b5b677d3d89b149ea94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 635,
    "chunk_index": 7,
    "total_chunks": 58
  },
  {
    "id": "6de4afd8fe30e1ce8483d3a3639972e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 639,
    "chunk_index": 8,
    "total_chunks": 58
  },
  {
    "id": "847f1acdf15fe92749d95ff9d16f60a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 673,
    "chunk_index": 9,
    "total_chunks": 58
  },
  {
    "id": "e3bb8df8f36fe32bab9a79e0d9acdef7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 694,
    "chunk_index": 10,
    "total_chunks": 58
  },
  {
    "id": "7e23e7e3d83f99b485b6c9c4637eeec6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 704,
    "chunk_index": 11,
    "total_chunks": 58
  },
  {
    "id": "f189e4ae47209ff89088e8e8f66349ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 769,
    "chunk_index": 12,
    "total_chunks": 58
  },
  {
    "id": "49d6875bc27e61a52ba80146000a9b0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 831,
    "chunk_index": 13,
    "total_chunks": 58
  },
  {
    "id": "2337bd65a8eb212079e2778be4aa0dac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 912,
    "chunk_index": 14,
    "total_chunks": 58
  },
  {
    "id": "02ce5e07aaa775977b69590c12ab69b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 932,
    "chunk_index": 15,
    "total_chunks": 58
  },
  {
    "id": "f517cecb9808c4251bf177785b0f36d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d1d67f9261fb15a795588\ntitle: Step 53\nchallengeType: 0\ndashedName: step-53\n--description--\nDeclare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints--\nYou should declare a rangeExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/);\nYou should use const to declare your rangeExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/);\nYou should assign the result of calling",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 948,
    "chunk_index": 16,
    "total_chunks": 58
  },
  {
    "id": "15f5eb06a97c4e3babeabbc7e48f7009",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d1d67f9261fb15a795588 title: Step 53 challengeType: 0 dashedName: step-53 --description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 947,
    "chunk_index": 17,
    "total_chunks": 58
  },
  {
    "id": "7d437356e7f8787def0db2a5107dd6b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "dashedName: step-53 --description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 928,
    "chunk_index": 18,
    "total_chunks": 58
  },
  {
    "id": "6dea25f32143572a77b9e919dea6a210",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "step-53 --description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 987,
    "chunk_index": 19,
    "total_chunks": 58
  },
  {
    "id": "16f9406aacfa47202a8ccd0b6e48b3f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1005,
    "chunk_index": 20,
    "total_chunks": 58
  },
  {
    "id": "81513f35b15f977422f927dcb1b590a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1008,
    "chunk_index": 21,
    "total_chunks": 58
  },
  {
    "id": "4495aea34a1c757edac5c7840ef44996",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1026,
    "chunk_index": 22,
    "total_chunks": 58
  },
  {
    "id": "7e4e3c03f4cc436bd51c86728a867cda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1031,
    "chunk_index": 23,
    "total_chunks": 58
  },
  {
    "id": "6923d160389d1e6653acc1198a1110a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1035,
    "chunk_index": 24,
    "total_chunks": 58
  },
  {
    "id": "3c174272d3f16fb93e2edb3b31ce0006",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1069,
    "chunk_index": 25,
    "total_chunks": 58
  },
  {
    "id": "a2766885cad3aa93af469723b1d2d7f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1090,
    "chunk_index": 26,
    "total_chunks": 58
  },
  {
    "id": "6ec4631fe8cd2e7556a15240929300bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1100,
    "chunk_index": 27,
    "total_chunks": 58
  },
  {
    "id": "757ad95e54b9a5baba13193058cc3230",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1165,
    "chunk_index": 28,
    "total_chunks": 58
  },
  {
    "id": "757dd4997ece603c273665082bc9d79f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1227,
    "chunk_index": 29,
    "total_chunks": 58
  },
  {
    "id": "05f6975d9414c22e094b25ff36e188bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1308,
    "chunk_index": 30,
    "total_chunks": 58
  },
  {
    "id": "8f6df436cb5c3f5e680aa8082eb17061",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1328,
    "chunk_index": 31,
    "total_chunks": 58
  },
  {
    "id": "223bdc8c200aa7ca6964e0c4075a1903",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1341,
    "chunk_index": 32,
    "total_chunks": 58
  },
  {
    "id": "9e68d41ae263a145385a451da41a5423",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--description-- Declare a rangeExpanded variable and assign it the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/);\nYou should pass rangeRegex as the argument to",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1354,
    "chunk_index": 33,
    "total_chunks": 58
  },
  {
    "id": "4d14d1e8aedcc21f36aefa60805a50c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1345,
    "chunk_index": 34,
    "total_chunks": 58
  },
  {
    "id": "c0febe5a62c471dafe51a74bdccc61c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1348,
    "chunk_index": 35,
    "total_chunks": 58
  },
  {
    "id": "0485fcb653891132500f3391cdb45a78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1410,
    "chunk_index": 36,
    "total_chunks": 58
  },
  {
    "id": "3f3a14342afb2cea6ed664df7bbd39e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1430,
    "chunk_index": 37,
    "total_chunks": 58
  },
  {
    "id": "1074531468355b31d47f40e1204ac2bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1433,
    "chunk_index": 38,
    "total_chunks": 58
  },
  {
    "id": "8f91aca30ff2de06b7da50dbe5ffecb9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1451,
    "chunk_index": 39,
    "total_chunks": 58
  },
  {
    "id": "73fd59bb6f90b706af5edaedbcd559e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1456,
    "chunk_index": 40,
    "total_chunks": 58
  },
  {
    "id": "5d5f63c38fcb36f22ed2afcf141143a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1460,
    "chunk_index": 41,
    "total_chunks": 58
  },
  {
    "id": "39cb619a3f0a474d9b5e8bf242cd5e7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1494,
    "chunk_index": 42,
    "total_chunks": 58
  },
  {
    "id": "38c3aa2e8f75bd8c0c775099af27b688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1515,
    "chunk_index": 43,
    "total_chunks": 58
  },
  {
    "id": "d66622af329aadb1e5e02092ec590461",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1525,
    "chunk_index": 44,
    "total_chunks": 58
  },
  {
    "id": "999434951f3cd71502ea597d6bef8749",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1590,
    "chunk_index": 45,
    "total_chunks": 58
  },
  {
    "id": "fb3d0aeebe25690f45483d140c6426a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1652,
    "chunk_index": 46,
    "total_chunks": 58
  },
  {
    "id": "d628893ac68d4b1dd1a25b7128b34c09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1733,
    "chunk_index": 47,
    "total_chunks": 58
  },
  {
    "id": "9b58730cb4b5c33b7121504210faf0ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1753,
    "chunk_index": 48,
    "total_chunks": 58
  },
  {
    "id": "ce905fb08757f4e6cff35c559a0a5c1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1766,
    "chunk_index": 49,
    "total_chunks": 58
  },
  {
    "id": "dcb84fcd9c6b7fb4ad69fc6b8ade9e4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "of calling the replace() method of your x parameter Pass the rangeRegex variable as the argument --hints-- You should declare a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1832,
    "chunk_index": 50,
    "total_chunks": 58
  },
  {
    "id": "aa815c2772d78dd5cc861fc8c6c40d09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a rangeExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*(:let|var|const)\\s+rangeExpanded/); You should use const to declare your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1855,
    "chunk_index": 51,
    "total_chunks": 58
  },
  {
    "id": "aae62e16d23417d6ab4a9cfcd473bec4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded/); You should assign the result of callingreplace() on x to your rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1432,
    "chunk_index": 52,
    "total_chunks": 58
  },
  {
    "id": "f1e9f6010e08f7eede5601adc31158ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "rangeExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(/); You should pass rangeRegex as the argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 1012,
    "chunk_index": 53,
    "total_chunks": 58
  },
  {
    "id": "b8953cc03588e945f33484f9e053e1eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 578,
    "chunk_index": 54,
    "total_chunks": 58
  },
  {
    "id": "17d7fb139aa308fcf2d472200d1aa7ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "argument toreplace()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 593,
    "chunk_index": 55,
    "total_chunks": 58
  },
  {
    "id": "c7e67dd1fc2b295e2575f3f282e06ee5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 56,
    "total_chunks": 58
  },
  {
    "id": "a4bd5f34d9eff0eaacfcd18a5e19e0b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "+ num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; inputid = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d1d67f9261fb15a795588.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 57,
    "total_chunks": 58
  },
  {
    "id": "d9934ab5659075d8d365a7a7963b637d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 57
  },
  {
    "id": "4015966df14ecc49d2ca622a82d779d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 567,
    "chunk_index": 1,
    "total_chunks": 57
  },
  {
    "id": "a4e3463c0e230f45bb0603039211820a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 570,
    "chunk_index": 2,
    "total_chunks": 57
  },
  {
    "id": "c17b61c2dcf08ca43171dc7c06f236c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 634,
    "chunk_index": 3,
    "total_chunks": 57
  },
  {
    "id": "5f49046177b23c1f9e4e8f37fb52e593",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 655,
    "chunk_index": 4,
    "total_chunks": 57
  },
  {
    "id": "92716f010d5bd48b32cba74b75b04d2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 658,
    "chunk_index": 5,
    "total_chunks": 57
  },
  {
    "id": "c78b0bb158e7cb7cf9876a811a0a6514",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 676,
    "chunk_index": 6,
    "total_chunks": 57
  },
  {
    "id": "b3049997c488407590bfb8bbc19eb1be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 681,
    "chunk_index": 7,
    "total_chunks": 57
  },
  {
    "id": "a0b49c5796d0fe2a5a36a454e7b6b5c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 685,
    "chunk_index": 8,
    "total_chunks": 57
  },
  {
    "id": "ecc8a204de44c62ce5d808bb35e16322",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 719,
    "chunk_index": 9,
    "total_chunks": 57
  },
  {
    "id": "774fe0bf177865e7e970f0b76815ac03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 740,
    "chunk_index": 10,
    "total_chunks": 57
  },
  {
    "id": "e6c482b918c5affac6375a51527bb5d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 750,
    "chunk_index": 11,
    "total_chunks": 57
  },
  {
    "id": "72b69e2e67da0acb263539e608398bd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 815,
    "chunk_index": 12,
    "total_chunks": 57
  },
  {
    "id": "154de6e1d20621938925f16f04171ec1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 877,
    "chunk_index": 13,
    "total_chunks": 57
  },
  {
    "id": "fa98d6a080599d271b0177cdecb6aac7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 958,
    "chunk_index": 14,
    "total_chunks": 57
  },
  {
    "id": "0686f9d1e2c04baa305062dcdfc6126a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 978,
    "chunk_index": 15,
    "total_chunks": 57
  },
  {
    "id": "0b38419b4a2118177dfcc3496a8f9103",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 16,
    "total_chunks": 57
  },
  {
    "id": "f6d1b7483e4b318da3099e684cce5fa1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/);\nYou should pass num1 as the first argument to your rangeFromString() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1062,
    "chunk_index": 17,
    "total_chunks": 57
  },
  {
    "id": "961358c9516979f0e2509c176064a6ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/);\nYou should pass num1 as the first argument to your rangeFromString() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1065,
    "chunk_index": 18,
    "total_chunks": 57
  },
  {
    "id": "d15def2c4967f3bf2b3b013628175fec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d382c4d70ceb3dba1e830\ntitle: Step 56\nchallengeType: 0\ndashedName: step-56\n--description--\nHave your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/);\nYour callback should return the result of calling rangeFromString()js\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/);\nYou should pass num1 as the first argument to your rangeFromString() calljs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1129,
    "chunk_index": 19,
    "total_chunks": 57
  },
  {
    "id": "4ba3e940efbe1c65aca568706e77277c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1139,
    "chunk_index": 20,
    "total_chunks": 57
  },
  {
    "id": "ec2a2545c6681a23fa0f95b528134435",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1142,
    "chunk_index": 21,
    "total_chunks": 57
  },
  {
    "id": "ab8f3593a4bdde478809aa4b3c3171c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1160,
    "chunk_index": 22,
    "total_chunks": 57
  },
  {
    "id": "281faede661d461eddd52b35398e7cbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1165,
    "chunk_index": 23,
    "total_chunks": 57
  },
  {
    "id": "3ab0eafec0628372757a978b0d1f1db5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1169,
    "chunk_index": 24,
    "total_chunks": 57
  },
  {
    "id": "78a7a528a5d8f8d55d7573ccfe176ded",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1203,
    "chunk_index": 25,
    "total_chunks": 57
  },
  {
    "id": "1ebfe46b98c08be8e28bfe0fe2939c40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1224,
    "chunk_index": 26,
    "total_chunks": 57
  },
  {
    "id": "6239b9a6bfc28d092c75b671c4a51595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1234,
    "chunk_index": 27,
    "total_chunks": 57
  },
  {
    "id": "95d2148363d070677c0d6e9e23bf4be6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1299,
    "chunk_index": 28,
    "total_chunks": 57
  },
  {
    "id": "fc66510cc168888eddb683e1c5c6d036",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1361,
    "chunk_index": 29,
    "total_chunks": 57
  },
  {
    "id": "596efdb5e5b7f056cdb205f221207a61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1442,
    "chunk_index": 30,
    "total_chunks": 57
  },
  {
    "id": "e6ea181712ea556f37feed6235c04487",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1462,
    "chunk_index": 31,
    "total_chunks": 57
  },
  {
    "id": "047530f76d73402e97b61bf61700deff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1475,
    "chunk_index": 32,
    "total_chunks": 57
  },
  {
    "id": "3579408c6875358726a4c7b7b5a1c55c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d382c4d70ceb3dba1e830 title: Step 56 challengeType: 0 dashedName: step-56 --description-- Have your callback implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/);\nYou should pass num2 as the second argument to your rangeFromString() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1550,
    "chunk_index": 33,
    "total_chunks": 57
  },
  {
    "id": "5bc07b11651fab30b4b7c4130b064ece",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "implicitly return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1518,
    "chunk_index": 34,
    "total_chunks": 57
  },
  {
    "id": "dcad657b73ad90be2da7524b1b0891cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1580,
    "chunk_index": 35,
    "total_chunks": 57
  },
  {
    "id": "2824473b918b7b11fa32bf991eba115d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1600,
    "chunk_index": 36,
    "total_chunks": 57
  },
  {
    "id": "d395bc6e17e4c29fc83c315217aa9546",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1603,
    "chunk_index": 37,
    "total_chunks": 57
  },
  {
    "id": "b4ac80dfeac61575d7fe2d6174e65608",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1621,
    "chunk_index": 38,
    "total_chunks": 57
  },
  {
    "id": "fd1ec7176f551e842c623a48a6c409af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1626,
    "chunk_index": 39,
    "total_chunks": 57
  },
  {
    "id": "ce1f1be64689c9488c23f26068b3a5df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1630,
    "chunk_index": 40,
    "total_chunks": 57
  },
  {
    "id": "79e7db100e2f6716a42bc7fb7377c54d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1664,
    "chunk_index": 41,
    "total_chunks": 57
  },
  {
    "id": "0f5922497dc82650e8e60193a1544e3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1685,
    "chunk_index": 42,
    "total_chunks": 57
  },
  {
    "id": "0cf0e77f0d6a30499e09db5fd7d441cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1695,
    "chunk_index": 43,
    "total_chunks": 57
  },
  {
    "id": "d0bd4e767bea29423f478936059c2979",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1760,
    "chunk_index": 44,
    "total_chunks": 57
  },
  {
    "id": "0fefa3359c61b8e31d1907a161a3babd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1822,
    "chunk_index": 45,
    "total_chunks": 57
  },
  {
    "id": "28842df24e09679fb0d98895297d6227",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1903,
    "chunk_index": 46,
    "total_chunks": 57
  },
  {
    "id": "025ea16792b5cc8e94d6745ad4ed39af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1923,
    "chunk_index": 47,
    "total_chunks": 57
  },
  {
    "id": "cc3cc4199c309b0ba7ee158c5289baa2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1936,
    "chunk_index": 48,
    "total_chunks": 57
  },
  {
    "id": "f0a057a4a4dcd10cd7317288ef84f197",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "the result of calling rangeFromString() with num1 and num2 as the arguments --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 2059,
    "chunk_index": 49,
    "total_chunks": 57
  },
  {
    "id": "30de2367ace698f39e72cc94ae6eb394",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*\\{/); Your callback should return the result of calling rangeFromString()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(/); You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 2080,
    "chunk_index": 50,
    "total_chunks": 57
  },
  {
    "id": "b55d972baacb2c3601e69a21f1cdc683",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should pass num1 as the first argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1/); You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 1128,
    "chunk_index": 51,
    "total_chunks": 57
  },
  {
    "id": "3de8a133aacb4ded4dd03d71e57d0b68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should pass num2 as the second argument to your rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 52,
    "total_chunks": 57
  },
  {
    "id": "41333ae91975f592d49e203b9f35a482",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 635,
    "chunk_index": 53,
    "total_chunks": 57
  },
  {
    "id": "3d210b9f6afd4402959003731b12b5f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "rangeFromString() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 54,
    "total_chunks": 57
  },
  {
    "id": "a5479b779961e98c648e7dc318e356e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => {});\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 55,
    "total_chunks": 57
  },
  {
    "id": "e8c42e625f8c28bb1ec7c47c96f52dc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => {}); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99)forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d382c4d70ceb3dba1e830.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 56,
    "total_chunks": 57
  },
  {
    "id": "bfe336a78c39f51a6ead276f0498e2ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3952f6af37b6a1c241c2\ntitle: Step 60\nchallengeType: 0\ndashedName: step-60\n--description--\nNow that your map() function is receiving the returned num => charRange( ) map( ) function reference from the curried addCharacters calls, it will properly iterate over the elements and pass each element as n to that function You'll notice that you are not using your match parameter In JavaScript, it is common convention to prefix an unused parameter with an underscore _ You could also leave the parameter empty like so: (, char1) but it is often clearer to name the parameter for future readability Prefix your match parameter with an underscore --hints--\nYou should prefix your match parameter with an underscore js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 10
  },
  {
    "id": "222c124c5e1b0f1a2aea5336c304b320",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "you are not using your match parameter In JavaScript, it is common convention to prefix an unused parameter with an underscore _ You could also leave the parameter empty like so: (, char1) but it is often clearer to name the parameter for future readability Prefix your match parameter with an underscore --hints-- You should prefix your match parameter with an underscore js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 10
  },
  {
    "id": "37afc498951e1035a7d8967b919de99b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "not using your match parameter In JavaScript, it is common convention to prefix an unused parameter with an underscore _ You could also leave the parameter empty like so: (, char1) but it is often clearer to name the parameter for future readability Prefix your match parameter with an underscore --hints-- You should prefix your match parameter with an underscore js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 563,
    "chunk_index": 2,
    "total_chunks": 10
  },
  {
    "id": "6ede2340ba391f89cf860760b684598d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "not using your match parameter In JavaScript, it is common convention to prefix an unused parameter with an underscore _ You could also leave the parameter empty like so: (, char1) but it is often clearer to name the parameter for future readability Prefix your match parameter with an underscore --hints-- You should prefix your match parameter with an underscore js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 647,
    "chunk_index": 3,
    "total_chunks": 10
  },
  {
    "id": "0cce776959f909fc6a559af5c330f8e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You could also leave the parameter empty like so: (, char1) but it is often clearer to name the parameter for future readability Prefix your match parameter with an underscore --hints-- You should prefix your match parameter with an underscore js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 673,
    "chunk_index": 4,
    "total_chunks": 10
  },
  {
    "id": "6e90a8b962e2b56bb66d1d6f390b95df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an underscore --hints-- You should prefix your match parameter with an underscore js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 663,
    "chunk_index": 5,
    "total_chunks": 10
  },
  {
    "id": "a0ee727d86947b5cd44b947224002bfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 660,
    "chunk_index": 6,
    "total_chunks": 10
  },
  {
    "id": "01eecd8a297832a93df42b967ec7d772",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*; \\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice() sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 7,
    "total_chunks": 10
  },
  {
    "id": "ff8169a5878dcb4f8f49c42b23c5a192",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice() sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 10
  },
  {
    "id": "500f1d981b3bd17391471935c034a732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4698,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3952f6af37b6a1c241c2.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 9,
    "total_chunks": 10
  },
  {
    "id": "79105f96687072d4154782a727b5e57c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d38f906b94cb5fe6ce7de\ntitle: Step 59\nchallengeType: 0\ndashedName: step-59\n--description--\nYour addCharacters(char1) is also returning a function, which returns another function You need to make another function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions:\njs\nmyFunc(1)(\"hi\");\nImmediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints--\nYou should chain a function call to your addCharacters(char1) call js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 29
  },
  {
    "id": "537494ed99ecdbe9c8542f9a244c1b12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "is also returning a function, which returns another function You need to make another function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 29
  },
  {
    "id": "8c7c6d30f16e86ba4fc29b863ef1be40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "also returning a function, which returns another function You need to make another function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 2,
    "total_chunks": 29
  },
  {
    "id": "d4a4c3998b4480840e0af9b85ecba7b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "also returning a function, which returns another function You need to make another function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 578,
    "chunk_index": 3,
    "total_chunks": 29
  },
  {
    "id": "8223c9faf4bf8c0633a235244a320728",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "also returning a function, which returns another function You need to make another function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/);\nYou should pass char2 as the argument to your chained function call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 610,
    "chunk_index": 4,
    "total_chunks": 29
  },
  {
    "id": "942e079d923bdc37aff9f5be482c3867",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "another function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 5,
    "total_chunks": 29
  },
  {
    "id": "f5cd40f9c19e780139d1f16999f8d08b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 6,
    "total_chunks": 29
  },
  {
    "id": "0ca008df767c4b64d5a6be9c1edeb6f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 682,
    "chunk_index": 7,
    "total_chunks": 29
  },
  {
    "id": "6d907d958cf06964d05378ea6f5e120d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 685,
    "chunk_index": 8,
    "total_chunks": 29
  },
  {
    "id": "c78e6ffac958e97f8e3b7ca2db1cc136",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 703,
    "chunk_index": 9,
    "total_chunks": 29
  },
  {
    "id": "58b25c04a21dabc38f8f38b500f5cfd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 708,
    "chunk_index": 10,
    "total_chunks": 29
  },
  {
    "id": "a5811c98381d6f69c9f5f637c4f07d84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 712,
    "chunk_index": 11,
    "total_chunks": 29
  },
  {
    "id": "1cdc482961ed9b86945d14f6c14db50e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 746,
    "chunk_index": 12,
    "total_chunks": 29
  },
  {
    "id": "69bdefca7ac9d9b8d19c60236b697f3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 767,
    "chunk_index": 13,
    "total_chunks": 29
  },
  {
    "id": "59defe394b47906745f12b698238bb5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 777,
    "chunk_index": 14,
    "total_chunks": 29
  },
  {
    "id": "acf2ca1919c7abfc489a748436f71328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 842,
    "chunk_index": 15,
    "total_chunks": 29
  },
  {
    "id": "4116df9f832bf0d364646aed4e157176",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 904,
    "chunk_index": 16,
    "total_chunks": 29
  },
  {
    "id": "4958a1c5fd112cbc7249c4a1214e8d93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 985,
    "chunk_index": 17,
    "total_chunks": 29
  },
  {
    "id": "d4d653ea5b37c537baad46c398e99c23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 1005,
    "chunk_index": 18,
    "total_chunks": 29
  },
  {
    "id": "37a0c91d9291564beff7e45b4ba0fc5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 1018,
    "chunk_index": 19,
    "total_chunks": 29
  },
  {
    "id": "fcfe63e93eab03e8dc5c110e2888defc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 1085,
    "chunk_index": 20,
    "total_chunks": 29
  },
  {
    "id": "bff2a597b020946ff921703de1e24c2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "call to access that innermost function reference for the map() callback JavaScript allows you to immediately invoke returned functions: js myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 1169,
    "chunk_index": 21,
    "total_chunks": 29
  },
  {
    "id": "7d7c80dd365aa15f802d4a11cdfa3128",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "myFunc(1)(\"hi\"); Immediately invoke the function returned from your addCharacters(char1) call, and pass char2 as the argument --hints-- You should chain a function call to your addCharacters(char1) call js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 1193,
    "chunk_index": 22,
    "total_chunks": 29
  },
  {
    "id": "a32ff2ac48a954d3a8dc9e80cb7def69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(/); You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 1169,
    "chunk_index": 23,
    "total_chunks": 29
  },
  {
    "id": "ca065c3a743c57aa8c05dcdf0062bb42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should pass char2 as the argument to your chained function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 669,
    "chunk_index": 24,
    "total_chunks": 29
  },
  {
    "id": "581292c1da676f3f938190d9eb02a7ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 661,
    "chunk_index": 25,
    "total_chunks": 29
  },
  {
    "id": "724ee5490310bb588bb77d7c2968de31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 676,
    "chunk_index": 26,
    "total_chunks": 29
  },
  {
    "id": "5858df04ad1a31028710573d9f65d3fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)));\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 27,
    "total_chunks": 29
  },
  {
    "id": "29ea1f80f658841f393ec17f723d5474",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1))); } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5672,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d38f906b94cb5fe6ce7de.md",
      "source_type": "git_repo"
    },
    "token_count": 253,
    "chunk_index": 28,
    "total_chunks": 29
  },
  {
    "id": "63c0b7110e87cd640e0d96e1480c39f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3c146e10b0ba222bb2a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3c146e10b0ba222bb2a7\ntitle: Step 64\nchallengeType: 0\ndashedName: step-64\n--description--\nIn mathematics, an infix is a mathematical operator that appears between its two operands For example, 1 + 2 is an infix expression To parse these expressions, you will need to map the symbols to relevant functions Declare an infixToFunction variable, and assign it an empty object --hints--\nYou should declare an infixToFunction variable js\nassert match(code, /( :const|let|var)\\s+infixToFunction/);\nYou should use const to declare your infixToFunction variable js\nassert match(code, /const\\s+infixToFunction/);\nYour infixToFunction variable should be an object js\nassert isObject(infixToFunction);\nYour infixToFunction object should be empty js\nassert lengthOf(Object keys(infixToFunction), 0);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3c146e10b0ba222bb2a7.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e9c3cf15dc938dcead7540140fdf4770",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3c146e10b0ba222bb2a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3c146e10b0ba222bb2a7.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4f47f7366e9eff6668f2e8ec8ff5d6a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3c146e10b0ba222bb2a7.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(element id) && valuestartsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3c146e10b0ba222bb2a7.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0bf85019e6c53741cf86bbc6f41b68b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d037872fbbae0a8ec0e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3d037872fbbae0a8ec0e\ntitle: Step 65\nchallengeType: 0\ndashedName: step-65\n--description--\nObject values do not have to be primitive types, like a string or a number They can also be functions Give your infixToFunction object a + property That property should be a function that takes an x and y parameter and implicitly returns the sum of those two parameters Because + is not alphanumeric, you'll need to wrap it in quotes for your property --hints--\nYour infixToFunction object should have a + property js\nassert property(infixToFunction, '+');\nYour + property should be a function js\nassert isFunction(infixToFunction['+']);\nYour + function should use arrow syntax js\nassert match(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(/);\nYour + function should have x as its first parameter js\nassert match(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(\\s*x/);\nYour + function should have y as its second parameter js\nassert match(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)/);\nYour + function should use an implicit return js\nassert notMatch(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*\\{/);\nYour + function should return the sum of x and y js\nassert equal(infixToFunction['+'](1, 2), 3);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d037872fbbae0a8ec0e.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "be3c32e9ecfa0f799a0f36352299fd15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d037872fbbae0a8ec0e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your + function should have x as its first parameter js assert match(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(\\s*x/); Your + function should have y as its second parameter js assert match(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)/); Your + function should use an implicit return js assert notMatch(code, /const\\s+infixToFunction\\s*=\\s*\\{\\s*('|\"|`)\\+\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*\\{/); Your + function should return the sum of x and y js assert equal(infixToFunction['+'](1, 2), 3); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nconst infixToFunction = {\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d037872fbbae0a8ec0e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6feab52804858b86d799fb91c6a1d2cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d037872fbbae0a8ec0e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id)value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d037872fbbae0a8ec0e.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e7638279c9cde9575c533bf5215fb6eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d65be79c8bb9c7df9ff.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3d65be79c8bb9c7df9ff\ntitle: Step 66\nchallengeType: 0\ndashedName: step-66\n--description--\nNow create a - property that is a function that takes an x and y parameter and implicitly returns the result of subtracting y from x --hints--\nYour infixToFunction object should have a - property js\nassert property(infixToFunction, '-');\nYour - property should be a function js\nassert isFunction(infixToFunction['-']);\nYour - function should use arrow syntax js\nassert match(code, /('|\"|`)-\\1\\s*:\\s*\\(/);\nYour - function should have x as its first parameter js\nassert match(code, /('|\"|`)-\\1\\s*:\\s*\\(\\s*x/);\nYour - function should have y as its second parameter js\nassert match(code, /('|\"|`)-\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)/);\nYour - function should use an implicit return js\nassert notMatch(code, /('|\"|`)-\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*\\{/);\nYour - function should return the result of subtracting y from x js\nassert equal(infixToFunction['-'](1, 2), -1);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d65be79c8bb9c7df9ff.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1ada833b0b134c775f4a2cb171d7f266",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d65be79c8bb9c7df9ff.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "infixToFunction = { \"+\": (x, y) => x + y, } --fcc-editable-region-- const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d65be79c8bb9c7df9ff.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9715d515c25bf21146f8bc31f3c14e34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d65be79c8bb9c7df9ff.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); lettersforEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4112,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d65be79c8bb9c7df9ff.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6e9094f9ee40fd172190233a3ec73ec4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3d80c3b4aebc4103618e\ntitle: Step 67\nchallengeType: 0\ndashedName: step-67\n--description--\nFollowing the same pattern, add a property for multiplication * and division / with the appropriate functions --hints--\nYour infixToFunction object should have a * property js\nassert property(infixToFunction, '*');\nYour * property should be a function js\nassert isFunction(infixToFunction['*']);\nYour * function should use arrow syntax js\nassert match(code, /('|\"|`)\\*\\1\\s*:\\s*\\(/);\nYour * function should have x as its first parameter js\nassert match(code, /('|\"|`)\\*\\1\\s*:\\s*\\(\\s*x/);\nYour * function should have y as its second parameter js\nassert match(code, /('|\"|`)\\*\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)/);\nYour * function should use an implicit return js\nassert notMatch(code, /('|\"|`)\\*\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*\\{/);\nYour * function should return the result of multiplying x by y js\nassert equal(infixToFunction['*'](2, 5), 10);\nYour infixToFunction object should have a / property js\nassert property(infixToFunction, '/');\nYour / property should be a function js\nassert isFunction(infixToFunction['/']);\nYour / function should use arrow syntax js\nassert match(code, /('|\"|`)\\/\\1\\s*:\\s*\\(/);\nYour / function should have x as its first parameter js\nassert match(code, /('|\"|`)\\/\\1\\s*:\\s*\\(\\s*x/);\nYour / function should have y as its second parameter js\nassert match(code, /('|\"|`)\\/\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)/);\nYour / function should use an implicit return js\nassert notMatch(code, /('|\"|`)\\/\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*\\{/);\nYour / function should return the result of dividing x by y js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "baa7c9eba4cd7e0c6f959141ab9bac33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "'/'); Your / property should be a function js assert isFunction(infixToFunction['/']); Your / function should use arrow syntax js assert match(code, /('|\"|`)\\/\\1\\s*:\\s*\\(/); Your / function should have x as its first parameter js assert match(code, /('|\"|`)\\/\\1\\s*:\\s*\\(\\s*x/); Your / function should have y as its second parameter js assert match(code, /('|\"|`)\\/\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)/); Your / function should use an implicit return js assert notMatch(code, /('|\"|`)\\/\\1\\s*:\\s*\\(\\s*x\\s*,\\s*y\\s*\\)\\s*\\{/); Your / function should return the result of dividing x by y js assertequal(infixToFunction['/'](10, 2), 5);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\n--fcc-editable-region--\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "87264cb1bdd0f92effa95c32db7fdbb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bffc985ad7451bdf66197d77e30a907c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(element id) && valuestartsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3d80c3b4aebc4103618e.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8ca25f1f7325b2e1ff1c04872467777a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3da8501e15bcd355ba1d\ntitle: Step 68\nchallengeType: 0\ndashedName: step-68\n--description--\nNow that you have your infix functions, you need a way to evaluate them Declare an infixEval function which takes two parameters, str and regex It should implicitly return the replace() method of str, with regex and an empty callback as the arguments --hints--\nYou should declare an infixEval variable js\nassert match(code, /( :var|let|const)\\s+infixEval\\s*=/);\nYou should use const to declare your infixEval variable js\nassert match(code, /const\\s+infixEval\\s*=/);\nYour infixEval variable should be a function js\nassert isFunction(infixEval);\nYour infixEval function should use arrow syntax js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(/);\nYour infixEval function should have str as its first parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str/);\nYour infixEval function should have regex as its second parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)/);\nYour infixEval function should use an implicit return js\nassert notMatch(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*\\{/);\nYour infixEval function should return the result of calling the replace() method on str js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(/);\nYou should pass regex as the first argument to the replace() method js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex/);\nYou should pass an empty arrow function as the second argument to the replace() method js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3cda43dce063296451217d77fb26ead5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regex as its second parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)/); Your infixEval function should use an implicit return js assert notMatch(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*\\{/); Your infixEval function should return the result of calling the replace() method on str js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(/); You should pass regex as the first argument to the replace() method js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex/); You should pass an empty arrow function as the second argument to the replace() method js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\replace\\(\\s*regex\\s*,\\s*\\(\\s*\\)\\s*=>\\s*\\{\\s*\\}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "544a43e4b365e3126f11a5ca4fcbc7a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } --fcc-editable-region-- --fcc-editable-region-- const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice()sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b3d5d9961b36ffc4b71f939c1768c178",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; containerappendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3da8501e15bcd355ba1d.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2918b80ffc31bb3255c2caa78c7a28c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3e135ab3abbdbfe5c899\ntitle: Step 69\nchallengeType: 0\ndashedName: step-69\n--description--\nYour callback needs four parameters match, arg1, operator, and arg2 You will not be using the match parameter, so remember to prefix it --hints--\nYour callback function should have match as the first parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_ match/);\nYour match parameter should be prefixed with an underscore js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match/);\nYour callback function should have arg1 as the second parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1/);\nYour callback function should have operator as the third parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator/);\nYour callback function should have arg2 as the fourth parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)/);\nYour callback function should still be empty js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "1febbcf1070cb876a3d3ab8c5221b20e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_ match/); Your match parameter should be prefixed with an underscore js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match/); Your callback function should have arg1 as the second parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1/); Your callback function should have operator as the third parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator/); Your callback function should have arg2 as the fourth parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)/); Your callback function should still be empty js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*\\{\\s*\\}\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
      "source_type": "git_repo"
    },
    "token_count": 510,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7e61db3b8886156d4a2199e64ffeccfa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should have arg1 as the second parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1/); Your callback function should have operator as the third parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator/); Your callback function should have arg2 as the fourth parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)/); Your callback function should still be empty js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\n--fcc-editable-region--\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f53a1bab49b82a424e180b5ac70109c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*\\{\\s*\\}\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } --fcc-editable-region-- const infixEval = (str, regex) => strreplace(regex, () => {});\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "002959e5ff2772fafa9239216b585c4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9])/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e135ab3abbdbfe5c899.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "d63d37904f3129dbeedf13d9df94554c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3e64b15f92be6e61704e\ntitle: Step 70\nchallengeType: 0\ndashedName: step-70\n--description--\nThe regex you will be passing to your infixEval function will match two numbers with an operator between them The first number will be assigned to arg1 in the callback, the second to arg2, and the operator to operator Have your callback function implicitly return the operator property of your infixToFunction object Remember that operator is a variable which holds the property name, not the actual property name --hints--\nYour callback should use an implicit return js\nassert notMatch(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*\\{/);\nYour callback function should access the infixToFunction object js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction/);\nYour callback function should use bracket notation to access the property of the infixToFunction object that matches the value of the operator parameter js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "82038c03e3ed776b62167d8e663bd511",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "property name --hints-- Your callback should use an implicit return js assert notMatch(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*\\{/); Your callback function should access the infixToFunction object js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction/); Your callback function should use bracket notation to access the property of the infixToFunction object that matches the value of the operator parameter js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\n--fcc-editable-region--\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "24788e35a0ea109c28a7442d2c654977",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } --fcc-editable-region-- const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => {});\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0c53ad8b2df944c1903193cfc097283b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id)value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3e64b15f92be6e61704e.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "13101c5ba4b0117ddd822aeb2e49ea2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3ee7b17ae3bf48610033\ntitle: Step 71\nchallengeType: 0\ndashedName: step-71\n--description--\ninfixToFunction[operator] returns a function Call that function directly, passing arg1 and arg2 as the arguments --hints--\nYour callback function should return the result of calling infixToFunction[operator] js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(/);\nYou should pass arg1 as the first argument to your infixToFunction[operator] call js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*arg1/);\nYou should pass arg2 as the second argument to your infixToFunction[operator] call js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*arg1\\s*,\\s*arg2\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "45f38d62fafa56e3d6c96f9a50dea54c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "arg1 and arg2 as the arguments --hints-- Your callback function should return the result of calling infixToFunction[operator] js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(/); You should pass arg1 as the first argument to your infixToFunction[operator] call js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*arg1/); You should pass arg2 as the second argument to your infixToFunction[operator] call js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*arg1\\s*,\\s*arg2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\n--fcc-editable-region--\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d492be996c005c8776678e364023b35f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*arg1\\s*,\\s*arg2\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } --fcc-editable-region-- const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunction[operator]);\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7f5a98c44fbc5572a156ad2281fc01a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cellsfind(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3ee7b17ae3bf48610033.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bfb923656fed6aae47ac401bf81e31ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3f1fd12f76c02c823bb8\ntitle: Step 72\nchallengeType: 0\ndashedName: step-72\n--description--\nYou have a slight bug arg1 and arg2 are strings, not numbers infixToFunction['+'](\"1\", \"2\") would return 12, which is not mathematically correct Wrap each of your infixToFunction[operator] arguments in a parseFloat() call --hints--\nYou should wrap arg1 in a parseFloat() call js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*parseFloat\\(\\s*arg1\\s*\\)\\s*,/);\nYou should wrap arg2 in a parseFloat() call js\nassert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*parseFloat\\(\\s*arg1\\s*\\)\\s*,\\s*parseFloat\\(\\s*arg2\\s*\\)\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "50052a9cb25a49b4e6255bec55ac9a3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "slight bug arg1 and arg2 are strings, not numbers infixToFunction['+'](\"1\", \"2\") would return 12, which is not mathematically correct Wrap each of your infixToFunction[operator] arguments in a parseFloat() call --hints-- You should wrap arg1 in a parseFloat() call js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*parseFloat\\(\\s*arg1\\s*\\)\\s*,/); You should wrap arg2 in a parseFloat() call js assert match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*parseFloat\\(\\s*arg1\\s*\\)\\s*,\\s*parseFloat\\(\\s*arg2\\s*\\)\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\n--fcc-editable-region--\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0790a90eaaf80d2e95631650670bce09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+infixEval\\s*=\\s*\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*=>\\s*str\\ replace\\(\\s*regex\\s*,\\s*\\(\\s*_match\\s*,\\s*arg1\\s*,\\s*operator\\s*,\\s*arg2\\s*\\)\\s*=>\\s*infixToFunction\\s*\\[\\s*operator\\s*\\]\\s*\\(\\s*parseFloat\\(\\s*arg1\\s*\\)\\s*,\\s*parseFloat\\(\\s*arg2\\s*\\)\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } --fcc-editable-region-- const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "d01a52920cd86a2f9538766b03bdd319",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => StringfromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f0c787f300378dba5e1f501056767a3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; container appendChild(input); }) }) } const update = event => { const element = event target; const value = element value replace(/\\s/g, \"\"); if ( value includes(element id) && valuestartsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4244,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f1fd12f76c02c823bb8.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b572515ed456ff98efaff6f8f8f3ea90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f718b5f8dc102cd528e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3f718b5f8dc102cd528e\ntitle: Step 73\nchallengeType: 0\ndashedName: step-73\n--description--\nNow that you can evaluate mathematical expressions, you need to account for order of operations Declare a highPrecedence function that takes a str parameter --hints--\nYou should declare a highPrecedence variable js\nassert match(code, /( :var|let|const)\\s+highPrecedence/);\nYou should use const to declare your highPrecedence variable js\nassert match(code, /const\\s+highPrecedence/);\nYour highPrecedence variable should be a function js\nassert isFunction(highPrecedence);\nYour highPrecedence function should use arrow syntax js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour highPrecedence function should have a str parameter js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>/);\nYour highPrecedence function should be empty js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f718b5f8dc102cd528e.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5661f05015b547f3aca7fe37593f7948",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f718b5f8dc102cd528e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); --fcc-editable-region-- --fcc-editable-region-- const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f718b5f8dc102cd528e.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e1e408af43455df5cc6ef6b6d1389842",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f718b5f8dc102cd528e.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi; const rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2)); const elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9]/gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3f718b5f8dc102cd528e.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "26cd4680ff66a62539d16f8b97e9a913",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d404259f512c1a9e86ac1\ntitle: Step 74\nchallengeType: 0\ndashedName: step-74\n--description--\nIn your highPrecedence function, declare a variable using const and assign it a regex that checks if the string passed to the str parameter matches the pattern of a number followed by a * or / operator followed by another number Your function should return a boolean value Remember that you can use the test() method for this --hints--\nYou should declare a variable in your highPrecedence function for your regex js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*( :const|let|var)\\s+\\w+/);\nYou should use const to declare your regex variable js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+\\w+/);\nYour regex variable should contain a regular expression js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+\\w+\\s*=\\s*\\//);\nYour highPrecedence function should return a boolean value js\nassert isBoolean(highPrecedence(\"12*2\"));\nYour highPrecedence function should correctly check if the string matches the pattern of a number followed by a * or / operator followed by another number js\nassert isTrue(highPrecedence(\"5*3\"));\nassert isFalse(highPrecedence(\"5\"));\nassert isTrue(highPrecedence(\"10/2\"));\nassert isFalse(highPrecedence(\"*\"));\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4736,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e2c0e4df920397d138e46b8ff3ea88d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable should contain a regular expression js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+\\w+\\s*=\\s*\\//); Your highPrecedence function should return a boolean value js assert isBoolean(highPrecedence(\"12*2\")); Your highPrecedence function should correctly check if the string matches the pattern of a number followed by a * or / operator followed by another number js assert isTrue(highPrecedence(\"5*3\")); assert isFalse(highPrecedence(\"5\")); assert isTrue(highPrecedence(\"10/2\")); assert isFalse(highPrecedence(\"*\")); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\nconst highPrecedence = str => {\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4736,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d18e4ea9cb895fe8a454bdbcba2975a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start)map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4736,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "169105d371245f613c4572e91f929b2e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); letters forEach(letter => { const input = document createElement(\"input\"); input type = \"text\"; input id = letter + number; input ariaLabel = letter + number; input onchange = update; containerappendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4736,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d404259f512c1a9e86ac1.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "16fb5ab69e5a1c9016dae8d65383cb03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d40c543943ec250039682\ntitle: Step 77\nchallengeType: 0\ndashedName: step-77\n--description--\nNow that you have a regular expression to match multiplication or division, you can evaluate that expression Declare a str2 variable and assign it the result of calling infixEval with str and regex as arguments --hints--\nYou should declare a str2 variable js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :const|let|var)\\s+str2/);\nYou should use const to declare your str2 variable js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/);\nYou should assign str2 the result of calling your infixEval function js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/);\nYou should pass str as the first argument to your infixEval call js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "956286ee90c573c434308ee518bf554d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :const|let|var)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling your infixEval function js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass str as the first argument to your infixEval call js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str/);\nYou should pass regex as the second argument to your infixEval call js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "45f71c5b6b75e21e00c87ee00628fd9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare your str2 variable js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling your infixEval function js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass str as the first argument to your infixEval call js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str/); You should pass regex as the second argument to your infixEval call js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "b3fb11819c36c484acaccf6522fa65a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling your infixEval function js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass str as the first argument to your infixEval call js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str/); You should pass regex as the second argument to your infixEval call js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "e0ac9dc295e2bcc0c12d30e578ebeb42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass str as the first argument to your infixEval call js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str/); You should pass regex as the second argument to your infixEval call js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 519,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "1fc37f1d67a430763515f7c250b1cb6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "c515afaf5ec129e61ba0ba13a598ee0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "- 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9]):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40c543943ec250039682.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "17d5b9037f3d17e6cf1923e362e4763b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d40fe4b7b50c30c2b4cd8\ntitle: Step 78\nchallengeType: 0\ndashedName: step-78\n--description--\nYour infixEval function will only evaluate the first multiplication or division operation, because regex isn't global This means you'll want to use a recursive approach to evaluate the entire string If infixEval does not find any matches, it will return the str value as-is Using a ternary expression, check if str2 is equal to str If it is, return str, otherwise return the result of calling highPrecedence() on str2 --hints--\nYour highPrecedence function should use the return keyword js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/);\nYou should use the return keyword with a condition to check if str is equal to str2 js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/);\nYou should use ternary syntax with your return statement js\nassert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 0,
    "total_chunks": 45
  },
  {
    "id": "7b151037109935769e7d01f8ab3a2af2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str, otherwise return the result of calling highPrecedence() on str2 --hints-- Your highPrecedence function should use the return keyword js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 45
  },
  {
    "id": "f10bbddb201ab9d83e2b64191a6eed86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 --hints-- Your highPrecedence function should use the return keyword js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/);\nIf the ternary condition is true, you should return str js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 45
  },
  {
    "id": "0139c68424ba1295aa1cf30105b32267",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 525,
    "chunk_index": 3,
    "total_chunks": 45
  },
  {
    "id": "106eb30e3285be3fea7246e1686d061e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 526,
    "chunk_index": 4,
    "total_chunks": 45
  },
  {
    "id": "92baa552e1f1ec1318e00f8ef0ceb175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 527,
    "chunk_index": 5,
    "total_chunks": 45
  },
  {
    "id": "134ede202503a63242694e748d96226b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 6,
    "total_chunks": 45
  },
  {
    "id": "0fb73b87dc787db955b0aac395844f90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 548,
    "chunk_index": 7,
    "total_chunks": 45
  },
  {
    "id": "b71085babd976d542c313abacbed8702",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 552,
    "chunk_index": 8,
    "total_chunks": 45
  },
  {
    "id": "7c945ff971c4768ef908bf24ba1360bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 553,
    "chunk_index": 9,
    "total_chunks": 45
  },
  {
    "id": "66011c2d75ac9c031c00924a81c2df48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 564,
    "chunk_index": 10,
    "total_chunks": 45
  },
  {
    "id": "9fd5200596858b9f8b5b77be73d554bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 11,
    "total_chunks": 45
  },
  {
    "id": "a5957783312e8c05465870d227006192",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 601,
    "chunk_index": 12,
    "total_chunks": 45
  },
  {
    "id": "3f2b99fa9c5c2f2ddd56b5fe423d6797",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 624,
    "chunk_index": 13,
    "total_chunks": 45
  },
  {
    "id": "f4e8af5944628c31cd5eeaf3c89ea0e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return/); You should use the return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/);\nIf the ternary condition is false, you should return the result of calling highPrecedence()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 650,
    "chunk_index": 14,
    "total_chunks": 45
  },
  {
    "id": "0466a99fe62878d2ecd9f0d8026d0eb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "return keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 524,
    "chunk_index": 15,
    "total_chunks": 45
  },
  {
    "id": "01d6ab33d8af52fc7062b04195d7f7e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "keyword with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 570,
    "chunk_index": 16,
    "total_chunks": 45
  },
  {
    "id": "058334fef535cc021a6d69afc31be5c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 573,
    "chunk_index": 17,
    "total_chunks": 45
  },
  {
    "id": "d4a0e3c3ddd72eaf0693c0b8e2045bd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 18,
    "total_chunks": 45
  },
  {
    "id": "c3c7f211c3d1130721497bca71dd0a6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 582,
    "chunk_index": 19,
    "total_chunks": 45
  },
  {
    "id": "77b3c1128390e84c7a672fc91756c8c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 595,
    "chunk_index": 20,
    "total_chunks": 45
  },
  {
    "id": "0105da556c517385dd6ef48f19a7ebbc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 599,
    "chunk_index": 21,
    "total_chunks": 45
  },
  {
    "id": "74cef90a4d86ede4b8956f8c577962ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 22,
    "total_chunks": 45
  },
  {
    "id": "95d3f4daa2f2d9d77fb3850c8a26e1c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 611,
    "chunk_index": 23,
    "total_chunks": 45
  },
  {
    "id": "c0d85634aa9551e8fc1a1541c5f1b5ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 643,
    "chunk_index": 24,
    "total_chunks": 45
  },
  {
    "id": "c3680ffc130fa71e73c77888f5ac77bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 648,
    "chunk_index": 25,
    "total_chunks": 45
  },
  {
    "id": "2867a6e9e68b3ace346b59eaf0de72a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 671,
    "chunk_index": 26,
    "total_chunks": 45
  },
  {
    "id": "e6b457f8e397c34b66032aae87cf5cc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with a condition to check if str is equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/);\nYou should pass str2 to your highPrecedence() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 27,
    "total_chunks": 45
  },
  {
    "id": "84007ec7ca1b245248b666c0a7836c38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "equal to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 695,
    "chunk_index": 28,
    "total_chunks": 45
  },
  {
    "id": "e058112de87c557c4fcf80eb890e2bf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 741,
    "chunk_index": 29,
    "total_chunks": 45
  },
  {
    "id": "761b6f4b5079cc2b85c19839460c5182",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 744,
    "chunk_index": 30,
    "total_chunks": 45
  },
  {
    "id": "c6f01b9287037020899ac09df1a1c7f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 745,
    "chunk_index": 31,
    "total_chunks": 45
  },
  {
    "id": "23a3ef00a53ae704c941f1bd857019b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 753,
    "chunk_index": 32,
    "total_chunks": 45
  },
  {
    "id": "d1d4544983d0a9a852d7434223e73ec0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 766,
    "chunk_index": 33,
    "total_chunks": 45
  },
  {
    "id": "63906a4cb516b3f93e9724c8e9da9976",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 770,
    "chunk_index": 34,
    "total_chunks": 45
  },
  {
    "id": "1a9c40a8d288892c799dfc14fd7d1b81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 771,
    "chunk_index": 35,
    "total_chunks": 45
  },
  {
    "id": "c17c8a535c372972e90ea4ea5fab25c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 782,
    "chunk_index": 36,
    "total_chunks": 45
  },
  {
    "id": "6c377c1fbcee8a277f02ef145f6b8b63",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 814,
    "chunk_index": 37,
    "total_chunks": 45
  },
  {
    "id": "9af0a712a951b308c693e3a2d2148085",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 819,
    "chunk_index": 38,
    "total_chunks": 45
  },
  {
    "id": "bc99b7ddab4eaf25121fc9a4c89fe958",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 842,
    "chunk_index": 39,
    "total_chunks": 45
  },
  {
    "id": "d997f4a0c511c1e57ce53557d4b7b622",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "str2 js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)/); You should use ternary syntax with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(\\s*str2\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 920,
    "chunk_index": 40,
    "total_chunks": 45
  },
  {
    "id": "40a29e4962b473141be2cfc7ba0c853b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "with your return statement js assert match(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*; \\s*return\\s+( :str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\/); If the ternary condition is true, you should return str js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str/); If the ternary condition is false, you should return the result of calling highPrecedence()js assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(/); You should pass str2 to your highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(\\s*str2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 853,
    "chunk_index": 41,
    "total_chunks": 45
  },
  {
    "id": "dd75f214a95ebca37606512a6ca5518e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "highPrecedence() calljs assertmatch(code, /const\\s+highPrecedence\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*{\\s*const\\s+regex\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\*\\\\\\/|\\\\\\/*)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*str\\s*,\\s*regex\\s*\\)\\s*;\\s*return\\s+(:str\\s*===\\s*str2|str2\\s*===\\s*str)\\s*\\\\s*str\\s*:\\s*highPrecedence\\(\\s*str2\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\n--fcc-editable-region--\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\n}\n--fcc-editable-region--\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 42,
    "total_chunks": 45
  },
  {
    "id": "929fe2d6a56728470155f4d20ac6bd92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); } --fcc-editable-region-- const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length)average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 43,
    "total_chunks": 45
  },
  {
    "id": "65f68acbdd938a2f8f7cb806d69d8b78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99)forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d40fe4b7b50c30c2b4cd8.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 44,
    "total_chunks": 45
  },
  {
    "id": "373a1156dd8042c8a300cf76118fa34e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d41e23b583fc3b8cc4579.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d41e23b583fc3b8cc4579\ntitle: Step 79\nchallengeType: 0\ndashedName: step-79\n--description--\nNow you can start applying your function parsing logic to a string Declare a function called applyFunction, which takes a str parameter --hints--\nYou should declare an applyFunction variable js\nassert match(code, /( :var|let|const)\\s+applyFunction\\s*=/);\nYou should use const to declare your applyFunction variable js\nassert match(code, /const\\s+applyFunction\\s*=/);\nYour applyFunction variable should be a function js\nassert isFunction(applyFunction);\nYour applyFunction function should use arrow syntax js\nassert match(code,  /const\\s+applyFunction\\s*=\\s*(\\([^)]*\\)|[^\\s()]+)\\s*=>/);\nYour applyFunction function should have a str parameter js\nassert match(code,  /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>/);\nYour applyFunction should be empty js\nassert match(code,  /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d41e23b583fc3b8cc4579.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d1627736c223dce8521cf82169bed8ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d41e23b583fc3b8cc4579.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => str replace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d41e23b583fc3b8cc4579.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c8dbdc070c635ed6f7e0b57171772a2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d41e23b583fc3b8cc4579.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "+ index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi; const rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2)); const elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = xreplace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4473,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d41e23b583fc3b8cc4579.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "df5057c96587c6bded59ea6529b0a930",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d423fade4a9c4636acd13.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d423fade4a9c4636acd13\ntitle: Step 80\nchallengeType: 0\ndashedName: step-80\n--description--\nFirst you need to handle the higher precedence operators Declare a noHigh variable, and assign it the result of calling highPrecedence() with str as an argument --hints--\nYou should declare a noHigh variable js\nassert match(code,  /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*( :var|let|const)\\s+noHigh\\s*=/);\nYou should use const to declare your noHigh variable js\nassert match(code,  /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=/);\nYou should assign noHigh the result of calling highPrecedence() js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(/);\nYou should pass str as the argument to your highPrecedence() call js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n} label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4513,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d423fade4a9c4636acd13.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7cced206dfb81191412eec40e42843e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d423fade4a9c4636acd13.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); } label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4513,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d423fade4a9c4636acd13.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ca4c5a2c561c83e42918bbad1aa0938f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d423fade4a9c4636acd13.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/ 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } --fcc-editable-region-- const applyFunction = str => { } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cellsfind(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4513,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d423fade4a9c4636acd13.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "eaab5dd7729c36ec8c3c8f506598b428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d42f58deb2fc52adc6611\ntitle: Step 81\nchallengeType: 0\ndashedName: step-81\n--description--\nNow that you've parsed and evaluated the multiplication and division operators, you need to do the same with the addition and subtraction operators Declare an infix variable, and assign it a regular expression that matches a number (including decimal numbers) followed by a + or - operator followed by another number --hints--\nYou should declare an infix variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*( :const|let|var)\\s+infix\\s*=/);\nYou should use const to declare your infix variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=/);\nYour infix variable should be a regular expression js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\//);\nYour infix regex should use a capture group js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/);\nYour first capture group should use a character class js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 0,
    "total_chunks": 26
  },
  {
    "id": "ad357b68362c98c48d52e41a9b8880ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "numbers) followed by a + or - operator followed by another number --hints-- You should declare an infix variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*( :const|let|var)\\s+infix\\s*=/); You should use const to declare your infix variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=/); Your infix variable should be a regular expression js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\//); Your infix regex should use a capture group js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/); Your first capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/);\nYour first capture group should match one or more digits or decimal points Use the \\d character class js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 26
  },
  {
    "id": "3bef6d9061213f78634b26f6c603812a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*( :const|let|var)\\s+infix\\s*=/); You should use const to declare your infix variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=/); Your infix variable should be a regular expression js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\//); Your infix regex should use a capture group js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/); Your first capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 26
  },
  {
    "id": "ce1fd3b896af2503653db7508841c32d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*( :const|let|var)\\s+infix\\s*=/); You should use const to declare your infix variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=/); Your infix variable should be a regular expression js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\//); Your infix regex should use a capture group js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/); Your first capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/);\nYour infix regex should use a second capture group js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 26
  },
  {
    "id": "1feb23995ddfebfe9df9364e2888c7a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=/); Your infix variable should be a regular expression js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\//); Your infix regex should use a capture group js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/); Your first capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 26
  },
  {
    "id": "706cedcea7537dd261fb6b8c25c0be7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=/); Your infix variable should be a regular expression js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\//); Your infix regex should use a capture group js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/); Your first capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/);\nYour second capture group should use a character class js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 5,
    "total_chunks": 26
  },
  {
    "id": "9e265ff8c0d85cdc8ff3874815f535cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your infix regex should use a capture group js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(/); Your first capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/);\nYour second capture group should match either the + or - operator js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 26
  },
  {
    "id": "8a6c378b0c3045ab86493ebc59ec4ab1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 7,
    "total_chunks": 26
  },
  {
    "id": "b1de30436b14cb62285b28b3cb7b25a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[/); Your first capture group should match one or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/);\nYour infix regex should use a third capture group",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 26
  },
  {
    "id": "dc3a93caf236e946704e068e70ae4e40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "or more digits or decimal points Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 9,
    "total_chunks": 26
  },
  {
    "id": "a2c2c424eb5bdeed6165f18326528fb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 10,
    "total_chunks": 26
  },
  {
    "id": "f96f41e98cf322af333dccfd41afe25a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Use the \\d character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)/); Your infix regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/);\nYour third capture group should be the same as your first capture group",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 525,
    "chunk_index": 11,
    "total_chunks": 26
  },
  {
    "id": "492d9c0c66f71a75ed4c9cbd1e0331b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regex should use a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 12,
    "total_chunks": 26
  },
  {
    "id": "573f1a70a9461dce76bbe6b6a3c6a0b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 13,
    "total_chunks": 26
  },
  {
    "id": "66d1fdd114d8a73d43c8b41490114567",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 14,
    "total_chunks": 26
  },
  {
    "id": "e58f523a24be119d2ab658212993b59e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 15,
    "total_chunks": 26
  },
  {
    "id": "49dffaf18f07a6b9cdc4169bc696da3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 16,
    "total_chunks": 26
  },
  {
    "id": "112c7cec7fe5338f836fa677fb346faf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 525,
    "chunk_index": 17,
    "total_chunks": 26
  },
  {
    "id": "7071c74e2e3ea9023e9740bac6d9f891",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 529,
    "chunk_index": 18,
    "total_chunks": 26
  },
  {
    "id": "a643bc822d25c6ee0d9d1e7604efd118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 530,
    "chunk_index": 19,
    "total_chunks": 26
  },
  {
    "id": "a67d6d73593ef1245434a4571e0836fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 541,
    "chunk_index": 20,
    "total_chunks": 26
  },
  {
    "id": "cf084a4303623c435338477eb76a4355",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "a second capture group js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(/); Your second capture group should use a character class js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 21,
    "total_chunks": 26
  },
  {
    "id": "945fbacf673400a667691640c50c07f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[/); Your second capture group should match either the + or - operator js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)/); Your infix regex should use a third capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(/); Your third capture group should be the same as your first capture groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 587,
    "chunk_index": 22,
    "total_chunks": 26
  },
  {
    "id": "b801059290b61b630abc64c747c45da8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "groupjs assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 23,
    "total_chunks": 26
  },
  {
    "id": "d00811e86bd535fdcb9b135d4ccb1718",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=== str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 24,
    "total_chunks": 26
  },
  {
    "id": "f82ba83acbd17ab9b8065aff6a31dd9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); lettersforEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6786,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d42f58deb2fc52adc6611.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 25,
    "total_chunks": 26
  },
  {
    "id": "a6fb95f72d6239098cc352dcc0833dc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 81
  },
  {
    "id": "6a462a3a9e8c7794c9544ce86b7972e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 518,
    "chunk_index": 1,
    "total_chunks": 81
  },
  {
    "id": "608d1ce428b6ec6d2f054b582ba358b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 2,
    "total_chunks": 81
  },
  {
    "id": "2e708787b5615eec0af9430a04d174ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 598,
    "chunk_index": 3,
    "total_chunks": 81
  },
  {
    "id": "05e8d761c789af2e0f3b6ba63c0abf91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 632,
    "chunk_index": 4,
    "total_chunks": 81
  },
  {
    "id": "d1dee7951cffdaa790bc0e637c8ea829",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 5,
    "total_chunks": 81
  },
  {
    "id": "5070050c3222d37ed4856bd333225bef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 6,
    "total_chunks": 81
  },
  {
    "id": "7ee93a03d0f7f125cb37864c3ce16767",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 685,
    "chunk_index": 7,
    "total_chunks": 81
  },
  {
    "id": "c65d9169889cd4af91fc8e457596cb68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3bc75fe0c9b972da3323\ntitle: Step 63\nchallengeType: 0\ndashedName: step-63\n--description--\nUpdate your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints--\nYour callback function should use an implicit return js\nassert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/);\nYour callback function should call idToText()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 724,
    "chunk_index": 8,
    "total_chunks": 81
  },
  {
    "id": "9e74bf25f22492a70e0b6ff424418dca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3bc75fe0c9b972da3323 title: Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 718,
    "chunk_index": 9,
    "total_chunks": 81
  },
  {
    "id": "944880aaa1ab7e1c01ac5b1d36a4b601",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "title: Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 767,
    "chunk_index": 10,
    "total_chunks": 81
  },
  {
    "id": "54e1ba921ef6c7d4e9f6f39be68d3ed4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 786,
    "chunk_index": 11,
    "total_chunks": 81
  },
  {
    "id": "7dbe3ad63c09949fb11c6c4391ca026c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 789,
    "chunk_index": 12,
    "total_chunks": 81
  },
  {
    "id": "9a438a2a9ea3f45184cc4aa8561809bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 807,
    "chunk_index": 13,
    "total_chunks": 81
  },
  {
    "id": "28f29b663f2f07095dd58a4955403208",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 812,
    "chunk_index": 14,
    "total_chunks": 81
  },
  {
    "id": "185c84dcada7e2b263ce83810caf1f7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 816,
    "chunk_index": 15,
    "total_chunks": 81
  },
  {
    "id": "48ac1a428aef16949cb1f957a4ac56c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 850,
    "chunk_index": 16,
    "total_chunks": 81
  },
  {
    "id": "b35a419bcec3d5f0c36299295c9fe769",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 871,
    "chunk_index": 17,
    "total_chunks": 81
  },
  {
    "id": "69bf4dc2fb1d756c56cda8b5bda07136",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 881,
    "chunk_index": 18,
    "total_chunks": 81
  },
  {
    "id": "be0de23431fc387763d14cdc74f2fa12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 946,
    "chunk_index": 19,
    "total_chunks": 81
  },
  {
    "id": "9da7974e8cf5db39ba6f4f28f161133b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1008,
    "chunk_index": 20,
    "total_chunks": 81
  },
  {
    "id": "2065816bffc0d969ac22d2528eb526ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1089,
    "chunk_index": 21,
    "total_chunks": 81
  },
  {
    "id": "08bca7792708fbbd57efc5830422bc41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1109,
    "chunk_index": 22,
    "total_chunks": 81
  },
  {
    "id": "a91dfafe81b10d3f9dedb1bd6bd7718b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1122,
    "chunk_index": 23,
    "total_chunks": 81
  },
  {
    "id": "81b1068c8ad8d7ecb1bded5af48ccc50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1189,
    "chunk_index": 24,
    "total_chunks": 81
  },
  {
    "id": "9df59fc7e4f35586b08544c4d6b5b137",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1223,
    "chunk_index": 25,
    "total_chunks": 81
  },
  {
    "id": "fc147119aec60ccb3bc75d94f9c40341",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1253,
    "chunk_index": 26,
    "total_chunks": 81
  },
  {
    "id": "be316487b6e43cc7c103b04aa461ad1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1261,
    "chunk_index": 27,
    "total_chunks": 81
  },
  {
    "id": "aba31e3c3462f38934cddd099cab0200",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1276,
    "chunk_index": 28,
    "total_chunks": 81
  },
  {
    "id": "d27d526bef0fb13f7f36a0f7568cac1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Step 63 challengeType: 0 dashedName: step-63 --description-- Update your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/);\nYou should pass match to your idToText() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1321,
    "chunk_index": 29,
    "total_chunks": 81
  },
  {
    "id": "8fc2e5cd96194dba5ba431b45b58197f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1306,
    "chunk_index": 30,
    "total_chunks": 81
  },
  {
    "id": "82f3b3f5ad011cda14d8e9408bf32976",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "callback function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1368,
    "chunk_index": 31,
    "total_chunks": 81
  },
  {
    "id": "b5d1c62ca086b6e73bac600fea26bb26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1388,
    "chunk_index": 32,
    "total_chunks": 81
  },
  {
    "id": "5050542136cdd52288ae7b42090af0a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1391,
    "chunk_index": 33,
    "total_chunks": 81
  },
  {
    "id": "ab3cee8e333ba081c61e5267c9c0f6c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1409,
    "chunk_index": 34,
    "total_chunks": 81
  },
  {
    "id": "6d65d5034fe9e616bd00d36a67230153",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1414,
    "chunk_index": 35,
    "total_chunks": 81
  },
  {
    "id": "dcce680fd48d2ca10d9ca1ab5380fae9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1418,
    "chunk_index": 36,
    "total_chunks": 81
  },
  {
    "id": "31f37d878cef13a0f4cc79048f1221d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1452,
    "chunk_index": 37,
    "total_chunks": 81
  },
  {
    "id": "7d44d98edde4c9d8db3c411cd94c798f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1473,
    "chunk_index": 38,
    "total_chunks": 81
  },
  {
    "id": "d80912a94128291b1735fb44754e2f00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1483,
    "chunk_index": 39,
    "total_chunks": 81
  },
  {
    "id": "19b53e9273d2d0edee287a0431604730",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1548,
    "chunk_index": 40,
    "total_chunks": 81
  },
  {
    "id": "0029a41fe9b3fc3345d5c4f08643b9b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1610,
    "chunk_index": 41,
    "total_chunks": 81
  },
  {
    "id": "aac4631504d8feea2ab525b37e3d9858",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1691,
    "chunk_index": 42,
    "total_chunks": 81
  },
  {
    "id": "efe9da94bb6a6766f23089fe87ccda17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1711,
    "chunk_index": 43,
    "total_chunks": 81
  },
  {
    "id": "852f02e6de586a7f049862342d5b3ef4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1724,
    "chunk_index": 44,
    "total_chunks": 81
  },
  {
    "id": "0aa191e942e0d105ce8d3f800c420768",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1791,
    "chunk_index": 45,
    "total_chunks": 81
  },
  {
    "id": "282a1424e9c13ca30a38b1403cc7ce0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1825,
    "chunk_index": 46,
    "total_chunks": 81
  },
  {
    "id": "405a95cd90a335245dc07f1221111f45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1855,
    "chunk_index": 47,
    "total_chunks": 81
  },
  {
    "id": "30bf4625069f54ef66af93ea36d0c4a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1863,
    "chunk_index": 48,
    "total_chunks": 81
  },
  {
    "id": "0c66d33c504f2d12ddd957d285e12943",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1878,
    "chunk_index": 49,
    "total_chunks": 81
  },
  {
    "id": "1747306465ce2dc2f3b0adc9e6d6fd48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function to return the result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/);\nYou should call the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1921,
    "chunk_index": 50,
    "total_chunks": 81
  },
  {
    "id": "d1a81d78b95deef5032021cfb49ef499",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of calling idToText() with match as the argument Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1931,
    "chunk_index": 51,
    "total_chunks": 81
  },
  {
    "id": "7c78df933ebc7fb4754264cb3f9a152f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1922,
    "chunk_index": 52,
    "total_chunks": 81
  },
  {
    "id": "19b84502a3cdfea08e850f8fd96a1f07",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 1984,
    "chunk_index": 53,
    "total_chunks": 81
  },
  {
    "id": "9e52aaabbdc17c2f172134af82b14e1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2004,
    "chunk_index": 54,
    "total_chunks": 81
  },
  {
    "id": "d7fcabf2aa327b9f36e403ccb0427e93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2007,
    "chunk_index": 55,
    "total_chunks": 81
  },
  {
    "id": "241f517243ef5ae6075d5080d188f23e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2025,
    "chunk_index": 56,
    "total_chunks": 81
  },
  {
    "id": "6b9059cd4e0ed8aac1b1db468cf1992c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2030,
    "chunk_index": 57,
    "total_chunks": 81
  },
  {
    "id": "28005aea6659184005664ffb6a24a7cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2034,
    "chunk_index": 58,
    "total_chunks": 81
  },
  {
    "id": "74c83727660f4f87520eb8d53fed6ea7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2068,
    "chunk_index": 59,
    "total_chunks": 81
  },
  {
    "id": "9eac2c623d9fb7c6cbf64dbc9ce956dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2089,
    "chunk_index": 60,
    "total_chunks": 81
  },
  {
    "id": "66737911d3b450742f80290bfe2bcfc6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2099,
    "chunk_index": 61,
    "total_chunks": 81
  },
  {
    "id": "4eb517696cf7e681edbebafd133f3a4d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2164,
    "chunk_index": 62,
    "total_chunks": 81
  },
  {
    "id": "b3e4441f484901f08c88260be6441d50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2226,
    "chunk_index": 63,
    "total_chunks": 81
  },
  {
    "id": "6f2be0704dd4b513d9881e610e589852",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2307,
    "chunk_index": 64,
    "total_chunks": 81
  },
  {
    "id": "25966ef5f3b1dc8b85882c40f80bf56b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2327,
    "chunk_index": 65,
    "total_chunks": 81
  },
  {
    "id": "38b3da43bc6bc17985e07fe9a34d1c1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2340,
    "chunk_index": 66,
    "total_chunks": 81
  },
  {
    "id": "a7956c5d3e07de3416aa65ae6fd88094",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2407,
    "chunk_index": 67,
    "total_chunks": 81
  },
  {
    "id": "b248d7b5368dd4f87cd561ecb15bdca4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2441,
    "chunk_index": 68,
    "total_chunks": 81
  },
  {
    "id": "b45f2191a1c7e9840104c1847e4f2720",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2471,
    "chunk_index": 69,
    "total_chunks": 81
  },
  {
    "id": "561f7bbc14892a23150ea37a6889d011",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2479,
    "chunk_index": 70,
    "total_chunks": 81
  },
  {
    "id": "1de5ebb8914dec64096299d99e7a65b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2494,
    "chunk_index": 71,
    "total_chunks": 81
  },
  {
    "id": "baed962afed60eb3e9958ff918844473",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2531,
    "chunk_index": 72,
    "total_chunks": 81
  },
  {
    "id": "2f999c02be24ecb53df2f26fb75ed8ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText() --hints-- Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2596,
    "chunk_index": 73,
    "total_chunks": 81
  },
  {
    "id": "40287a61a8e2ad96d18a479a2a084e43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Your callback function should use an implicit return js assert notMatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{/); Your callback function should call idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2613,
    "chunk_index": 74,
    "total_chunks": 81
  },
  {
    "id": "63236c0c4dd27ef30eeaaf1d9dd9685d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(/); You should pass match to your idToText() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\s*/); You should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 2008,
    "chunk_index": 75,
    "total_chunks": 81
  },
  {
    "id": "be899b890252eeb73a9426bb832a9b9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should call thetoUpperCase() method of match as you pass it to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 778,
    "chunk_index": 76,
    "total_chunks": 81
  },
  {
    "id": "f686f471f1fe97c826c4086973ad1e27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 769,
    "chunk_index": 77,
    "total_chunks": 81
  },
  {
    "id": "b80718425f58d20a9b62748a03b090ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to idToText()js assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*idToText\\(\\s*match\\toUpperCase\\(\\s*\\)\\s*\\)/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 78,
    "total_chunks": 81
  },
  {
    "id": "4c5e5054255d86074c8bdbaf7ca1b872",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => {})\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 79,
    "total_chunks": 81
  },
  {
    "id": "025ea398115e3a521f8713d880bf0c9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "num2) => range(parseInt(num1), parseInt(num2)); const elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => {}) } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = documentcreateElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3bc75fe0c9b972da3323.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 80,
    "total_chunks": 81
  },
  {
    "id": "cc5fbad7b5c596294e9841969aa7a1ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d43587d926bc5b6cb2e50\ntitle: Step 82\nchallengeType: 0\ndashedName: step-82\n--description--\nDeclare a str2 variable, and assign it the result of calling infixEval() with noHigh and infix as arguments --hints--\nYou should declare a str2 variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/);\nYou should use const to declare your str2 variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/);\nYou should assign str2 the result of calling infixEval() js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/);\nYou should pass noHigh as the first argument to infixEval() js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 0,
    "total_chunks": 27
  },
  {
    "id": "9287142ddcf17e45b1a89c32201d9589",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 27
  },
  {
    "id": "f3ac5c905e7b9da7bbdc7c97f8229270",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 507,
    "chunk_index": 2,
    "total_chunks": 27
  },
  {
    "id": "4191c2dadad64aa28298fd5d687a0771",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 3,
    "total_chunks": 27
  },
  {
    "id": "78ee34bcec222dcfd70a7b9ea1d40a10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 512,
    "chunk_index": 4,
    "total_chunks": 27
  },
  {
    "id": "3b3c98e185323dadb1ee95c9f0cc4ce6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 520,
    "chunk_index": 5,
    "total_chunks": 27
  },
  {
    "id": "e64fbad96dabe1089fd58a13af323ed7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 530,
    "chunk_index": 6,
    "total_chunks": 27
  },
  {
    "id": "09c1bdeb762da095f0192592a2a48ff4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 7,
    "total_chunks": 27
  },
  {
    "id": "a7dac8f3c6d581e3513e2892c515fda7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 535,
    "chunk_index": 8,
    "total_chunks": 27
  },
  {
    "id": "1a00df447ce05fbdcf8c185cc765c171",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 546,
    "chunk_index": 9,
    "total_chunks": 27
  },
  {
    "id": "b52652b9dad4e8e0c8dd3f5e31b0dd0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/);\nYou should pass infix as the second argument to infixEval()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 581,
    "chunk_index": 10,
    "total_chunks": 27
  },
  {
    "id": "d8f8cce8bc5c0afa54ced17c5a90ab57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 11,
    "total_chunks": 27
  },
  {
    "id": "6b4b96ec2ec138e228f6280fe2191a0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 554,
    "chunk_index": 12,
    "total_chunks": 27
  },
  {
    "id": "0b0076539bb57f1aed2c379a896b3b84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 569,
    "chunk_index": 13,
    "total_chunks": 27
  },
  {
    "id": "55f7f7f007592afc1972696658b91db1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 573,
    "chunk_index": 14,
    "total_chunks": 27
  },
  {
    "id": "6ee11fd41c53cf181230e75d93df3965",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 574,
    "chunk_index": 15,
    "total_chunks": 27
  },
  {
    "id": "1a5eed458f9f4901589078b1274fa34a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 582,
    "chunk_index": 16,
    "total_chunks": 27
  },
  {
    "id": "a389e3e67ef3969259cc33a7c76ad5f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 592,
    "chunk_index": 17,
    "total_chunks": 27
  },
  {
    "id": "a8af55850d2a16540de7b90ff758ef2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 596,
    "chunk_index": 18,
    "total_chunks": 27
  },
  {
    "id": "07d5168769c2f13fbf820162325a103a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 597,
    "chunk_index": 19,
    "total_chunks": 27
  },
  {
    "id": "ed487f9c7fde0d2c9a8f77388db88e13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 608,
    "chunk_index": 20,
    "total_chunks": 27
  },
  {
    "id": "deb02882b3d60e36d5a83ba6720fc884",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 642,
    "chunk_index": 21,
    "total_chunks": 27
  },
  {
    "id": "cd4b0645e0588e8bf713d72d993d8118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*( :let|var|const)\\s+str2/); You should use const to declare your str2 variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 698,
    "chunk_index": 22,
    "total_chunks": 27
  },
  {
    "id": "ce1807b58750c202b1c4a16b93b5b273",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2/); You should assign str2 the result of calling infixEval() js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(/); You should pass noHigh as the first argument to infixEval() js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh/); You should pass infix as the second argument to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 671,
    "chunk_index": 23,
    "total_chunks": 27
  },
  {
    "id": "a6c4d6c31a0978d7a8921bd17932344a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "to infixEval()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 24,
    "total_chunks": 27
  },
  {
    "id": "c7650f0a00259ece61994aa383fae352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=== str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => nums reduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Mathceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 25,
    "total_chunks": 27
  },
  {
    "id": "b7835ffe23239d4d72d96b93c3861c12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "=> idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; containerappendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d43587d926bc5b6cb2e50.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 26,
    "total_chunks": 27
  },
  {
    "id": "460e913f39cb3bcdad8ce1d0717b6d8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d448479c8fdc8dcec868c\ntitle: Step 83\nchallengeType: 0\ndashedName: step-83\n--description--\nDeclare a functionCall variable, and assign it this regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i\nThis expression will look for function calls like sum(1, 4) --hints--\nYou should declare a functionCall variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/);\nYou should use const to declare your functionCall variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/);\nYou should assign functionCall the provided regular expression js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "1d66b9ee0e6f18b903b47122ce7a7162",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable, and assign it this regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "c58d0a59abd6bdae9f15c3b8cbfcec3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "79391501e6086b4d8144a07fa7d7eba5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "28908081e1ff03b4a4e71fa194c3d281",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "d1a80114e7c990fb2dcf1644a708d006",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 514,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "e9dd11d056c9fe8f9003cc49c620037c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 548,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "4263071782f868df81bc1f0f5419530d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 581,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "176aab5d7d61195e0aaa21f27bfcc050",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "regular expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "0a53a9f9dc7fb4dcf54651c8a5d560ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 589,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "f9736d473ae455df194f5aabc7b8da7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "expression: /([a-z0-9]*)\\(([0-9 , ]*)\\)( *\\()/i This expression will look for function calls like sum(1, 4) --hints-- You should declare a functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 652,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "d4be38a924f888b21c67895906a59ee3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*( :const|let|var)\\s+functionCall\\s*=/); You should use const to declare your functionCall variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=/); You should assign functionCall the provided regular expression js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 700,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "74f15b481ea2537c432ca573dffd0d08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*\\,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "59a258aec94db12f302987055cde681c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "+ el, 0); const average = nums => sum(nums) / nums length; const median = nums => { const sorted = nums slice() sort((a, b) => a - b); const length = sorted length; const middle = length / 2 - 1; return isEven(length) average([sorted[middle], sorted[middle + 1]]) : sorted[Math ceil(middle)]; } const spreadsheetFunctions = { sum, average, median } --fcc-editable-region-- const applyFunction = str => { const noHigh = highPrecedence(str); const infix = /([\\d ]+)([+-])([\\d]+)/;\nconst str2 = infixEval(noHigh, infix);\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "671cbec5fb25c87816f809d4f28eb66d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; const cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase())); } window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; label textContent = name; container appendChild(label); } const letters = charRange(\"A\", \"J\"); letters forEach(createLabel); range(1, 99) forEach(number => { createLabel(number); lettersforEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5162,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d448479c8fdc8dcec868c.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "7a4f69116eb1684cf01ce5e88bf2ab38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d451c2e44afca71b67818\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nDeclare an apply function that takes a fn and args parameter --hints--\nYou should declare an apply variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/);\nYou should use const to declare your apply variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 98
  },
  {
    "id": "e8a638ce18ef92c2f249a40566dff0b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d451c2e44afca71b67818\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nDeclare an apply function that takes a fn and args parameter --hints--\nYou should declare an apply variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/);\nYou should use const to declare your apply variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 532,
    "chunk_index": 1,
    "total_chunks": 98
  },
  {
    "id": "9d7bed21406b0db12a337aa684fc904e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d451c2e44afca71b67818\ntitle: Step 85\nchallengeType: 0\ndashedName: step-85\n--description--\nDeclare an apply function that takes a fn and args parameter --hints--\nYou should declare an apply variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/);\nYou should use const to declare your apply variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 2,
    "total_chunks": 98
  },
  {
    "id": "d07af9c6aec3028d07999940c128b3a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 531,
    "chunk_index": 3,
    "total_chunks": 98
  },
  {
    "id": "54023e6ff78a453ef4397c931e227da2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 540,
    "chunk_index": 4,
    "total_chunks": 98
  },
  {
    "id": "89c8ff0107abfb289389b1093820deeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 553,
    "chunk_index": 5,
    "total_chunks": 98
  },
  {
    "id": "7e84012af1211f519f663d2bf16c2c00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 572,
    "chunk_index": 6,
    "total_chunks": 98
  },
  {
    "id": "7ce41592eb75ff33cdd46d2e39c4504a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 586,
    "chunk_index": 7,
    "total_chunks": 98
  },
  {
    "id": "cae97c98bef321d40cdb9debc93b9602",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 598,
    "chunk_index": 8,
    "total_chunks": 98
  },
  {
    "id": "e63315821768002e6b5445d6c3019589",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d451c2e44afca71b67818 title: Step 85 challengeType: 0 dashedName: step-85 --description-- Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/);\nYour apply variable should be assigned an arrow function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 617,
    "chunk_index": 9,
    "total_chunks": 98
  },
  {
    "id": "1eb042555ae3b909b82af06df74f509b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Declare an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 588,
    "chunk_index": 10,
    "total_chunks": 98
  },
  {
    "id": "0912419f0fe9232825137723544e8c49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 600,
    "chunk_index": 11,
    "total_chunks": 98
  },
  {
    "id": "a0dcc25181c596a336ea7a0d30d502b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 644,
    "chunk_index": 12,
    "total_chunks": 98
  },
  {
    "id": "99453404adf1fe299676d4b150f7cc41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 660,
    "chunk_index": 13,
    "total_chunks": 98
  },
  {
    "id": "a8f3c7ea3e8022a565b964544c907f7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 664,
    "chunk_index": 14,
    "total_chunks": 98
  },
  {
    "id": "983f629ff650480a51fa2dc077fcd6a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 665,
    "chunk_index": 15,
    "total_chunks": 98
  },
  {
    "id": "628d1fdd7f3b462d6cbc6e5f03d642ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 673,
    "chunk_index": 16,
    "total_chunks": 98
  },
  {
    "id": "5c3e7173fa5225a2eaca94e63d7b476e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 683,
    "chunk_index": 17,
    "total_chunks": 98
  },
  {
    "id": "33b4eebadb84b2acb1818809cc4006a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 687,
    "chunk_index": 18,
    "total_chunks": 98
  },
  {
    "id": "2c531bdfc86d8d668f23dea7f631239a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 688,
    "chunk_index": 19,
    "total_chunks": 98
  },
  {
    "id": "962db8f2fe745c9d23e85794a030ba3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 699,
    "chunk_index": 20,
    "total_chunks": 98
  },
  {
    "id": "105ff3ad19dca2386e939195dce92fa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 733,
    "chunk_index": 21,
    "total_chunks": 98
  },
  {
    "id": "6c61a3a2998793f75f0a5e1b9c2a79bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 766,
    "chunk_index": 22,
    "total_chunks": 98
  },
  {
    "id": "0971b9d59cf55e36d62afceacbe9632e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 774,
    "chunk_index": 23,
    "total_chunks": 98
  },
  {
    "id": "ed3a0c62e740d5a5e74936a8a36284b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 774,
    "chunk_index": 24,
    "total_chunks": 98
  },
  {
    "id": "81fbbe6c281ad9bb1d12c7f637039972",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 783,
    "chunk_index": 25,
    "total_chunks": 98
  },
  {
    "id": "b48cba4bfd7d8e7add271af63b4fb31c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 796,
    "chunk_index": 26,
    "total_chunks": 98
  },
  {
    "id": "3dbd8ff7cbd6aabb2ae01661b5daadbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 815,
    "chunk_index": 27,
    "total_chunks": 98
  },
  {
    "id": "9eb461eb9e83b2aae45dcf1a9fa8afc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 829,
    "chunk_index": 28,
    "total_chunks": 98
  },
  {
    "id": "426a7fb965852c838a925ff296ee85ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 841,
    "chunk_index": 29,
    "total_chunks": 98
  },
  {
    "id": "75f7d536df6c021064fc6c1e7069abd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function that takes a fn and args parameter --hints-- You should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/);\nYour apply function should have fn as its first parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 864,
    "chunk_index": 30,
    "total_chunks": 98
  },
  {
    "id": "537685e5793bba7ee27a55f1631ccdd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 855,
    "chunk_index": 31,
    "total_chunks": 98
  },
  {
    "id": "7d2231182e78b7469a7194d2b0499a08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 867,
    "chunk_index": 32,
    "total_chunks": 98
  },
  {
    "id": "a483ba843a3d7eec38e3b501843f0a44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 911,
    "chunk_index": 33,
    "total_chunks": 98
  },
  {
    "id": "d500c8728a618928ca42097bd5f4eb67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 927,
    "chunk_index": 34,
    "total_chunks": 98
  },
  {
    "id": "b0ba4aa9e96094138bf14a69b1576464",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 931,
    "chunk_index": 35,
    "total_chunks": 98
  },
  {
    "id": "ddf5735bf1df7f39b44910cf8ef97701",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 932,
    "chunk_index": 36,
    "total_chunks": 98
  },
  {
    "id": "00158c29fa442caba132e6595e16a617",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 940,
    "chunk_index": 37,
    "total_chunks": 98
  },
  {
    "id": "721e6559381f00572d9d8682a6793f87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 950,
    "chunk_index": 38,
    "total_chunks": 98
  },
  {
    "id": "2a27a7f2a511dce064e50c9067226075",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 954,
    "chunk_index": 39,
    "total_chunks": 98
  },
  {
    "id": "f2a36b6f6bb000e37fe08947d602b401",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 955,
    "chunk_index": 40,
    "total_chunks": 98
  },
  {
    "id": "942ec7483160d34ed6ec6039390a2947",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 966,
    "chunk_index": 41,
    "total_chunks": 98
  },
  {
    "id": "5157cb7e9752f5750aab02bb29394fc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1000,
    "chunk_index": 42,
    "total_chunks": 98
  },
  {
    "id": "33eb2c651b7cf8c98937381ec53d7f46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1033,
    "chunk_index": 43,
    "total_chunks": 98
  },
  {
    "id": "ade9c2fed4d5e6b0f7ecb42b802c3535",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "an apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1041,
    "chunk_index": 44,
    "total_chunks": 98
  },
  {
    "id": "7e5c3347d43b26e8089af04abb099852",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1041,
    "chunk_index": 45,
    "total_chunks": 98
  },
  {
    "id": "7683223799355bc0fd3ea9dca2fcbeb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1050,
    "chunk_index": 46,
    "total_chunks": 98
  },
  {
    "id": "53bea9d7400b51699c14d00c2f3095d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1063,
    "chunk_index": 47,
    "total_chunks": 98
  },
  {
    "id": "c6f4c9d356c2760082ed23f615ea9e18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1082,
    "chunk_index": 48,
    "total_chunks": 98
  },
  {
    "id": "f3144b87061f9c86e7a5714ee1f22e0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1096,
    "chunk_index": 49,
    "total_chunks": 98
  },
  {
    "id": "1509e83a05d1b544ff1b3e62d46c3856",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1108,
    "chunk_index": 50,
    "total_chunks": 98
  },
  {
    "id": "6688103d0677f65ca887a0a5a829b9d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/);\nYour apply function should have args as its second parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1135,
    "chunk_index": 51,
    "total_chunks": 98
  },
  {
    "id": "bf0aedc038365cda13e4a084959ba018",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1054,
    "chunk_index": 52,
    "total_chunks": 98
  },
  {
    "id": "7f72dc5809fc76e4ad3f5ce78a251674",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1059,
    "chunk_index": 53,
    "total_chunks": 98
  },
  {
    "id": "67acff59d0750b43c09103b022e37284",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1094,
    "chunk_index": 54,
    "total_chunks": 98
  },
  {
    "id": "465cfcfefdc03a103bb183f00559ab76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1110,
    "chunk_index": 55,
    "total_chunks": 98
  },
  {
    "id": "aa5119af1b6450e9e3974ec5233eb940",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1114,
    "chunk_index": 56,
    "total_chunks": 98
  },
  {
    "id": "147f5f109b82924bc62fb60a032c23e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1115,
    "chunk_index": 57,
    "total_chunks": 98
  },
  {
    "id": "99de25500ae6beca38aef3177676d96f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1123,
    "chunk_index": 58,
    "total_chunks": 98
  },
  {
    "id": "6e64783ecbe94ee20c11b9e8b93b4c18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1133,
    "chunk_index": 59,
    "total_chunks": 98
  },
  {
    "id": "e0a29dc4675ea15b0ab399500db49d67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1137,
    "chunk_index": 60,
    "total_chunks": 98
  },
  {
    "id": "687276d7919d252302fbaf8bc4dfb9a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1138,
    "chunk_index": 61,
    "total_chunks": 98
  },
  {
    "id": "b6adee718b1f5642c43767126595284f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1149,
    "chunk_index": 62,
    "total_chunks": 98
  },
  {
    "id": "d10305f974cd02e7560c1ea9dceff2d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1183,
    "chunk_index": 63,
    "total_chunks": 98
  },
  {
    "id": "a23edeb4f7c99c79f31648ec51208bd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1216,
    "chunk_index": 64,
    "total_chunks": 98
  },
  {
    "id": "7c801fe0f68eb2b4dd8b55b6b845feec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1224,
    "chunk_index": 65,
    "total_chunks": 98
  },
  {
    "id": "d769c74baa8cceddb8e43aac8ded0f78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1222,
    "chunk_index": 66,
    "total_chunks": 98
  },
  {
    "id": "6103b4fbf5153ff64bda0cd8992545fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1231,
    "chunk_index": 67,
    "total_chunks": 98
  },
  {
    "id": "bfda1262dd63f7bc7b4bb1fe9886501b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1244,
    "chunk_index": 68,
    "total_chunks": 98
  },
  {
    "id": "70f2acc296f5d121ba4ff071d077fdc8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1263,
    "chunk_index": 69,
    "total_chunks": 98
  },
  {
    "id": "08c3db2029aaca5ecbc297b8bf31e411",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1277,
    "chunk_index": 70,
    "total_chunks": 98
  },
  {
    "id": "1d9f612972db7b3b1dd47e356a57b91d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1289,
    "chunk_index": 71,
    "total_chunks": 98
  },
  {
    "id": "fac04d52e01a7906b523702597c51636",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/);\nYour apply function should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1320,
    "chunk_index": 72,
    "total_chunks": 98
  },
  {
    "id": "9535fa673d846211c9100ddb295b1382",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1234,
    "chunk_index": 73,
    "total_chunks": 98
  },
  {
    "id": "03d72b06a184a47fcc1ad38be36b38b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1246,
    "chunk_index": 74,
    "total_chunks": 98
  },
  {
    "id": "75bd3ab88f982159dacf99670a84548b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1280,
    "chunk_index": 75,
    "total_chunks": 98
  },
  {
    "id": "33bacd426810b167643e5d20d57047c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1296,
    "chunk_index": 76,
    "total_chunks": 98
  },
  {
    "id": "663770376159701f6a2c7284b0404d10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1300,
    "chunk_index": 77,
    "total_chunks": 98
  },
  {
    "id": "fe1cbe919f5c48111049273c25311185",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1301,
    "chunk_index": 78,
    "total_chunks": 98
  },
  {
    "id": "e78e6cc2b55fad86a2c837a0411ec2be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1309,
    "chunk_index": 79,
    "total_chunks": 98
  },
  {
    "id": "1631524d583a2a757f2be939da835ad6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1319,
    "chunk_index": 80,
    "total_chunks": 98
  },
  {
    "id": "a094cfa3efa00c351f1b20f3e5066089",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1323,
    "chunk_index": 81,
    "total_chunks": 98
  },
  {
    "id": "8663e09d7ff3fb6326a68fc1ed734fe8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1324,
    "chunk_index": 82,
    "total_chunks": 98
  },
  {
    "id": "530ba64590398cb9c8cdbfe6179c44be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1335,
    "chunk_index": 83,
    "total_chunks": 98
  },
  {
    "id": "c4a342adcf90116928fed75927f2fe10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1369,
    "chunk_index": 84,
    "total_chunks": 98
  },
  {
    "id": "1ac57ac2120f212d9dfe240b4c705757",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1402,
    "chunk_index": 85,
    "total_chunks": 98
  },
  {
    "id": "cc06fba649b17f8b928339aeb05fbc48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1410,
    "chunk_index": 86,
    "total_chunks": 98
  },
  {
    "id": "b22dfb7d9ba945f14e7a3d65262bcb0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1398,
    "chunk_index": 87,
    "total_chunks": 98
  },
  {
    "id": "20c4de0d407ef337e6541a4c430543c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1407,
    "chunk_index": 88,
    "total_chunks": 98
  },
  {
    "id": "7576ad090c10f50952160cb5bc4c2100",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1420,
    "chunk_index": 89,
    "total_chunks": 98
  },
  {
    "id": "09019ce12237ff47c55da0cfab9bc265",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1439,
    "chunk_index": 90,
    "total_chunks": 98
  },
  {
    "id": "eb991c711f6fb86a5179de9d0c049756",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1453,
    "chunk_index": 91,
    "total_chunks": 98
  },
  {
    "id": "2124d227956775099587624cba4eed1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1465,
    "chunk_index": 92,
    "total_chunks": 98
  },
  {
    "id": "88d0b8874d02f77086c3e5cc4fdaae66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*( :var|let|const)\\s+apply\\s*=/); You should use const to declare your apply variable js assert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1555,
    "chunk_index": 93,
    "total_chunks": 98
  },
  {
    "id": "5147f02fe907d53ac4e9f7d13c34cfe1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=/); Your apply variable should be assigned an arrow functionjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(/); Your apply function should have fn as its first parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn/); Your apply function should have args as its second parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)/); Your apply function should be emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 1500,
    "chunk_index": 94,
    "total_chunks": 98
  },
  {
    "id": "4e95885e9224308d3bbd5b5f652f2be4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "emptyjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;\\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 95,
    "total_chunks": 98
  },
  {
    "id": "ca7dd38e55c7619d4c956c134b4307f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums reduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\nconst toNumberList = args => args split(\",\") map(parseFloat);\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 96,
    "total_chunks": 98
  },
  {
    "id": "b577b3036e8fdadc24a09b2a440d7b9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; const toNumberList = args => args split(\",\") map(parseFloat); } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9])/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d451c2e44afca71b67818.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 97,
    "total_chunks": 98
  },
  {
    "id": "b296efc8adf9a80de13aff3eb4791433",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d44da986f2bc9b72f5fe2\ntitle: Step 84\nchallengeType: 0\ndashedName: step-84\n--description--\nDeclare a toNumberList function that takes an args parameter and implicitly returns the result of splitting the args by commas Then chain a map method to your split method and pass in parseFloat as the argument to the map method --hints--\nYou should declare a toNumberList variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/);\nYou should use const to declare your toNumberList variable js\nassert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 136
  },
  {
    "id": "db3237742ca8c2d6cd1b2cccf92b07d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "result of splitting the args by commas Then chain a map method to your split method and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/);\nYour toNumberList variable should be an arrow function js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 136
  },
  {
    "id": "24799cf37fab8632edcd5647c1ecd625",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "method and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 541,
    "chunk_index": 2,
    "total_chunks": 136
  },
  {
    "id": "08264b746d77bf2eb06335e09ea480b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 556,
    "chunk_index": 3,
    "total_chunks": 136
  },
  {
    "id": "880b8bc3b78f9c357f91125ab48e6fe6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 560,
    "chunk_index": 4,
    "total_chunks": 136
  },
  {
    "id": "3c9ae4c70c0feccdc9709fd0f2b6cae3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 561,
    "chunk_index": 5,
    "total_chunks": 136
  },
  {
    "id": "f13086818dfa5f4ae22f488b929ccfbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 569,
    "chunk_index": 6,
    "total_chunks": 136
  },
  {
    "id": "0e7c737ef2e84d8eb9189cf115c633a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 579,
    "chunk_index": 7,
    "total_chunks": 136
  },
  {
    "id": "febb7c512e7bedc88054875583806683",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 583,
    "chunk_index": 8,
    "total_chunks": 136
  },
  {
    "id": "57f7c8fb75abb13ecfeb8b3f6bd88449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 9,
    "total_chunks": 136
  },
  {
    "id": "3f5a6a7be288a28793a470a0cb8b3561",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 595,
    "chunk_index": 10,
    "total_chunks": 136
  },
  {
    "id": "455b2be7d04f8f3cccf078376bb3b189",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 629,
    "chunk_index": 11,
    "total_chunks": 136
  },
  {
    "id": "7d4aba114ef3abda97ff058ffa8c7de3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 662,
    "chunk_index": 12,
    "total_chunks": 136
  },
  {
    "id": "136a09b5a67443db238ccfbc2509f9be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 13,
    "total_chunks": 136
  },
  {
    "id": "e4f44ec7162d3de6a5f9064b67559646",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 670,
    "chunk_index": 14,
    "total_chunks": 136
  },
  {
    "id": "ddddf53ac45a674752f8927593cd438d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 679,
    "chunk_index": 15,
    "total_chunks": 136
  },
  {
    "id": "451837d826f8ac588e5f8ee5b5db3653",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 696,
    "chunk_index": 16,
    "total_chunks": 136
  },
  {
    "id": "12f46a67e06ba988db00321d0e45b0b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 699,
    "chunk_index": 17,
    "total_chunks": 136
  },
  {
    "id": "4f0411b14253b581ea1bdc9314b7c57a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "pass in parseFloat as the argument to the map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/);\nYour toNumberList function should have an args parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 719,
    "chunk_index": 18,
    "total_chunks": 136
  },
  {
    "id": "3e2fcc652633832a48c0bf741ef043cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "map method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 714,
    "chunk_index": 19,
    "total_chunks": 136
  },
  {
    "id": "02b877aef466541fe33ede9c1e0d4d7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "method --hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 770,
    "chunk_index": 20,
    "total_chunks": 136
  },
  {
    "id": "1bc97e29575ae00b206b7830a8c142c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 785,
    "chunk_index": 21,
    "total_chunks": 136
  },
  {
    "id": "f58c7088be4a221ebc499b4fe0af5bd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 789,
    "chunk_index": 22,
    "total_chunks": 136
  },
  {
    "id": "bcb9176d03b2c8ce7874677767647a98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 790,
    "chunk_index": 23,
    "total_chunks": 136
  },
  {
    "id": "a522ed5abdd1568f47ba4fd44c1fe098",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 798,
    "chunk_index": 24,
    "total_chunks": 136
  },
  {
    "id": "938735eb494983618f34d0abb7542135",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 808,
    "chunk_index": 25,
    "total_chunks": 136
  },
  {
    "id": "84b9694ad5468b3dd63db27804a5e404",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 812,
    "chunk_index": 26,
    "total_chunks": 136
  },
  {
    "id": "20b77f0baaca2654d3baa0ccd1a04be8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 813,
    "chunk_index": 27,
    "total_chunks": 136
  },
  {
    "id": "98db8a6f6cbbbd2990d6fdd17709e9c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 824,
    "chunk_index": 28,
    "total_chunks": 136
  },
  {
    "id": "9fba1cbcf31f1dd9adefabad0508adb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 858,
    "chunk_index": 29,
    "total_chunks": 136
  },
  {
    "id": "9688078b93fd1c38f99c1eaa481eea2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 891,
    "chunk_index": 30,
    "total_chunks": 136
  },
  {
    "id": "08521c45d9e392898305f8697e387b18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 899,
    "chunk_index": 31,
    "total_chunks": 136
  },
  {
    "id": "da7e4a91028c97e50163b9cd68b54a2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 897,
    "chunk_index": 32,
    "total_chunks": 136
  },
  {
    "id": "82fc95ad8fbdc42c69a9eeda4c64eaa3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 906,
    "chunk_index": 33,
    "total_chunks": 136
  },
  {
    "id": "9a69fb579ef349777d05d04a634268d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should declare a toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/);\nYour toNumberList function should use an implicit return",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 944,
    "chunk_index": 34,
    "total_chunks": 136
  },
  {
    "id": "ea1ee3a2d6bc648ac49cce56f218de88",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 937,
    "chunk_index": 35,
    "total_chunks": 136
  },
  {
    "id": "7e672a9dce2a397d4be6b63aea77e403",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 992,
    "chunk_index": 36,
    "total_chunks": 136
  },
  {
    "id": "18fdee5dbbbe6723717abe47c497e3ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 952,
    "chunk_index": 37,
    "total_chunks": 136
  },
  {
    "id": "bb874e28ba27c1ebfa7d6341be13e1d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 956,
    "chunk_index": 38,
    "total_chunks": 136
  },
  {
    "id": "00fa8c602aecfa881b1914ed553f34aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 957,
    "chunk_index": 39,
    "total_chunks": 136
  },
  {
    "id": "30de263dcd89dbe0b66429bb82c7a35e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 965,
    "chunk_index": 40,
    "total_chunks": 136
  },
  {
    "id": "1a8009949f44b6f5cdedce4f8f17b4a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 975,
    "chunk_index": 41,
    "total_chunks": 136
  },
  {
    "id": "7f04de0feed4990eaa4e75816ed7b870",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 979,
    "chunk_index": 42,
    "total_chunks": 136
  },
  {
    "id": "7b4ca377b1490ca2003baf22d2f7442e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 980,
    "chunk_index": 43,
    "total_chunks": 136
  },
  {
    "id": "b6b1895d9fd692a3543b12c8132ebaa4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 991,
    "chunk_index": 44,
    "total_chunks": 136
  },
  {
    "id": "9073054181bc34c64702462395235da7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1025,
    "chunk_index": 45,
    "total_chunks": 136
  },
  {
    "id": "fc241d0c198a291924237e118118447c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1058,
    "chunk_index": 46,
    "total_chunks": 136
  },
  {
    "id": "fdc9f5e0311a8efd7e9412e49ad9f170",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1066,
    "chunk_index": 47,
    "total_chunks": 136
  },
  {
    "id": "ec54ae05e27200c727359f5898435905",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1050,
    "chunk_index": 48,
    "total_chunks": 136
  },
  {
    "id": "3321df2c15cd7ee1403099b0ddca8b2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1059,
    "chunk_index": 49,
    "total_chunks": 136
  },
  {
    "id": "d22fff3d054bec904392da92a71bf287",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/);\nYour toNumberList function should return the result of calling the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1102,
    "chunk_index": 50,
    "total_chunks": 136
  },
  {
    "id": "943414f7dbd5fc0f7382f59c9cc8461f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of args",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1000,
    "chunk_index": 51,
    "total_chunks": 136
  },
  {
    "id": "7a154f677ac15cfd35feb03490b20756",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*( :const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 984,
    "chunk_index": 52,
    "total_chunks": 136
  },
  {
    "id": "eed69627a68acf7739ea01639407c824",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":const|let|var)\\s+toNumberList\\s*=/); You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1039,
    "chunk_index": 53,
    "total_chunks": 136
  },
  {
    "id": "00970b0a55c72f334528127edf5b1b6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1039,
    "chunk_index": 54,
    "total_chunks": 136
  },
  {
    "id": "6b4e058c2d6a337c2d64f76df0b617d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1043,
    "chunk_index": 55,
    "total_chunks": 136
  },
  {
    "id": "57f88e26ef7628a6969432e6dc2c7e50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1044,
    "chunk_index": 56,
    "total_chunks": 136
  },
  {
    "id": "31680aab58414340c09f577ed2ec2354",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1052,
    "chunk_index": 57,
    "total_chunks": 136
  },
  {
    "id": "9e998746ca670922db30aeb00d2ad352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1062,
    "chunk_index": 58,
    "total_chunks": 136
  },
  {
    "id": "aed3d37bc3e019cb096403a4be28596d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1066,
    "chunk_index": 59,
    "total_chunks": 136
  },
  {
    "id": "882c983446329bfca399320885241b1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1067,
    "chunk_index": 60,
    "total_chunks": 136
  },
  {
    "id": "8d5bb775b69364cc22ce4681c8b78611",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1078,
    "chunk_index": 61,
    "total_chunks": 136
  },
  {
    "id": "fe3e98b33b8e0b864dac80c6b6d629b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1112,
    "chunk_index": 62,
    "total_chunks": 136
  },
  {
    "id": "0768325642c62a05c8533de542679445",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1145,
    "chunk_index": 63,
    "total_chunks": 136
  },
  {
    "id": "166ad7c768293cbc0581f497f43385dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1153,
    "chunk_index": 64,
    "total_chunks": 136
  },
  {
    "id": "c5514e30df0cf12d30a094cd29bfb06a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1153,
    "chunk_index": 65,
    "total_chunks": 136
  },
  {
    "id": "7175fd0b252cbd286ce2981d06c78e51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1162,
    "chunk_index": 66,
    "total_chunks": 136
  },
  {
    "id": "05d2bc05f114aa2820308461104e7faf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1193,
    "chunk_index": 67,
    "total_chunks": 136
  },
  {
    "id": "29cf1f0ff5bb03b3a3f3f4235b178ec6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should use const to declare your toNumberList variable js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/);\nYou should split args on the \",\" character",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1205,
    "chunk_index": 68,
    "total_chunks": 136
  },
  {
    "id": "92e1a9a1b93cc8e58819a56c3ada62b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1198,
    "chunk_index": 69,
    "total_chunks": 136
  },
  {
    "id": "02e6f4c9965dae591fc42082561c91c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assert match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1210,
    "chunk_index": 70,
    "total_chunks": 136
  },
  {
    "id": "957a86d1d6cd9d137697e24155e0cc51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1254,
    "chunk_index": 71,
    "total_chunks": 136
  },
  {
    "id": "f0420aca5b94d5c9ce8d3597db3cdb42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1270,
    "chunk_index": 72,
    "total_chunks": 136
  },
  {
    "id": "f774c7011832e6a13db99388b6615514",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1274,
    "chunk_index": 73,
    "total_chunks": 136
  },
  {
    "id": "1a82630919974f83fa74a3166783a74a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1275,
    "chunk_index": 74,
    "total_chunks": 136
  },
  {
    "id": "b51838941c9282edd59505da60f5374c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1283,
    "chunk_index": 75,
    "total_chunks": 136
  },
  {
    "id": "59d0673c645bfc7b15787a6c1bc9bd90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1293,
    "chunk_index": 76,
    "total_chunks": 136
  },
  {
    "id": "604f141725e01c5b5f636635d41d3bbd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1297,
    "chunk_index": 77,
    "total_chunks": 136
  },
  {
    "id": "ca705076df6d2bd5d8b9bfcfb258847f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1298,
    "chunk_index": 78,
    "total_chunks": 136
  },
  {
    "id": "b6a9a89028e3825784c318bb0cdb5d1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1309,
    "chunk_index": 79,
    "total_chunks": 136
  },
  {
    "id": "afbe3d1856851c7dc3b119b147b173c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1343,
    "chunk_index": 80,
    "total_chunks": 136
  },
  {
    "id": "37fac0c5d6bfba5dc5d6fcdd0d8cbe69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1376,
    "chunk_index": 81,
    "total_chunks": 136
  },
  {
    "id": "60c8fcf31fb0b367697c0a62c0232503",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "match(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1384,
    "chunk_index": 82,
    "total_chunks": 136
  },
  {
    "id": "f262791f6907dd12a242f9517d403e27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1382,
    "chunk_index": 83,
    "total_chunks": 136
  },
  {
    "id": "7a28253e985bdf1fa71d1568fd7381d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1391,
    "chunk_index": 84,
    "total_chunks": 136
  },
  {
    "id": "b0bb1271b6c1b4bfce3da475061d8632",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1404,
    "chunk_index": 85,
    "total_chunks": 136
  },
  {
    "id": "91d26f2528f705bb8fbc4aebfafa02f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1423,
    "chunk_index": 86,
    "total_chunks": 136
  },
  {
    "id": "e8ed0c3d624f7dd1101c978d3e557786",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/);\nYou should chain the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1442,
    "chunk_index": 87,
    "total_chunks": 136
  },
  {
    "id": "95ea4126f029c43c7331a041cf39e0a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1370,
    "chunk_index": 88,
    "total_chunks": 136
  },
  {
    "id": "9bf553aa2a4aca63b68f847df28b0035",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "|\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1352,
    "chunk_index": 89,
    "total_chunks": 136
  },
  {
    "id": "71514e257dcc5e2c945442be465170f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1354,
    "chunk_index": 90,
    "total_chunks": 136
  },
  {
    "id": "676695ae9b50a95781f00ceed1383b21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1355,
    "chunk_index": 91,
    "total_chunks": 136
  },
  {
    "id": "0178c46b1e07231e17ba459f2556f201",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1333,
    "chunk_index": 92,
    "total_chunks": 136
  },
  {
    "id": "2b665d0b5a643647965bbec6b14a87ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1349,
    "chunk_index": 93,
    "total_chunks": 136
  },
  {
    "id": "0431152d52736a45a7b62359584ee8bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1353,
    "chunk_index": 94,
    "total_chunks": 136
  },
  {
    "id": "c1de78ef00ec1404278f149a3c1a15fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1354,
    "chunk_index": 95,
    "total_chunks": 136
  },
  {
    "id": "b73a4d2f5e586c365adefc3479219eff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1362,
    "chunk_index": 96,
    "total_chunks": 136
  },
  {
    "id": "764a3101c49be80f6f380d2f8a77ebb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1372,
    "chunk_index": 97,
    "total_chunks": 136
  },
  {
    "id": "2a229e1436153220523f9fcebabb5807",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1376,
    "chunk_index": 98,
    "total_chunks": 136
  },
  {
    "id": "687181f92039ea10e12f68bde6f74fa0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1377,
    "chunk_index": 99,
    "total_chunks": 136
  },
  {
    "id": "1c098ad561ad8287580b4ae65057a2b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1388,
    "chunk_index": 100,
    "total_chunks": 136
  },
  {
    "id": "4390b59f8786172a645767ed1b690c78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1422,
    "chunk_index": 101,
    "total_chunks": 136
  },
  {
    "id": "ff5fa804679ab4b528a06258401995b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1455,
    "chunk_index": 102,
    "total_chunks": 136
  },
  {
    "id": "cf9dfc1b49ca7604f709c9e731427653",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ", \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1463,
    "chunk_index": 103,
    "total_chunks": 136
  },
  {
    "id": "da6d0e530e5a3c28dda2d384f38e720d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1463,
    "chunk_index": 104,
    "total_chunks": 136
  },
  {
    "id": "57f657ed1a1edc8c929fbc18453a749d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1472,
    "chunk_index": 105,
    "total_chunks": 136
  },
  {
    "id": "b7f698a5462b480388720bb347965bfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1485,
    "chunk_index": 106,
    "total_chunks": 136
  },
  {
    "id": "3cc2ea674769af367f3aa74dfd2e2a89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1504,
    "chunk_index": 107,
    "total_chunks": 136
  },
  {
    "id": "e5d205aa95eda0bc5d4d39335ff13ba2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1518,
    "chunk_index": 108,
    "total_chunks": 136
  },
  {
    "id": "785ebc231481550b4a18089d0ae3fc92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=/); Your toNumberList variable should be an arrow function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/);\nYou should pass a reference to parseFloat as the callback to",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1533,
    "chunk_index": 109,
    "total_chunks": 136
  },
  {
    "id": "93e55ae6ed907d925f7be5f91499669e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1495,
    "chunk_index": 110,
    "total_chunks": 136
  },
  {
    "id": "42205b220ba81c8e26800ca115ffbdde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "function js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1498,
    "chunk_index": 111,
    "total_chunks": 136
  },
  {
    "id": "d06f4e0c46b4d181507a164af570c54d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1510,
    "chunk_index": 112,
    "total_chunks": 136
  },
  {
    "id": "440e8131e6d92a6b746c6b2fe3398c3a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1554,
    "chunk_index": 113,
    "total_chunks": 136
  },
  {
    "id": "a29fcd418a74682f2edad25b20b9084b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1570,
    "chunk_index": 114,
    "total_chunks": 136
  },
  {
    "id": "e636bc62751bcd3be120dbfbabce4421",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1574,
    "chunk_index": 115,
    "total_chunks": 136
  },
  {
    "id": "328e1bcc1cb4b9ef62bc8807e8705327",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1575,
    "chunk_index": 116,
    "total_chunks": 136
  },
  {
    "id": "962bbf9364eb269235491c749bb2f64b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1583,
    "chunk_index": 117,
    "total_chunks": 136
  },
  {
    "id": "d6f8db695bfaa4ee86104907fde67fd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1593,
    "chunk_index": 118,
    "total_chunks": 136
  },
  {
    "id": "45bb1c8cb307635c272100b68be718c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1597,
    "chunk_index": 119,
    "total_chunks": 136
  },
  {
    "id": "6303a221d7dd88953a258ba784c12d9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1598,
    "chunk_index": 120,
    "total_chunks": 136
  },
  {
    "id": "1aea10baf31682477440967fb2068f4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1609,
    "chunk_index": 121,
    "total_chunks": 136
  },
  {
    "id": "1f370f04b2a7752930a4b8c3cf4c9cc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1643,
    "chunk_index": 122,
    "total_chunks": 136
  },
  {
    "id": "e6545b857c72b608501b90305158b41e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1676,
    "chunk_index": 123,
    "total_chunks": 136
  },
  {
    "id": "f9caa9933aa934934c51f5711854871c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1684,
    "chunk_index": 124,
    "total_chunks": 136
  },
  {
    "id": "d811bda90e9ddab4a930651d584a758d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1681,
    "chunk_index": 125,
    "total_chunks": 136
  },
  {
    "id": "1c706e2827991105a9404917ee0c51e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1690,
    "chunk_index": 126,
    "total_chunks": 136
  },
  {
    "id": "31d7c38450f9575dafcfd64a10821de4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1703,
    "chunk_index": 127,
    "total_chunks": 136
  },
  {
    "id": "87534d4ca50b3917d06745a7aa370f01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1722,
    "chunk_index": 128,
    "total_chunks": 136
  },
  {
    "id": "bb24dae982c8dfdd32fce0acd06dbcd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1736,
    "chunk_index": 129,
    "total_chunks": 136
  },
  {
    "id": "4d828ecea841f552bdf8280629e746da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1748,
    "chunk_index": 130,
    "total_chunks": 136
  },
  {
    "id": "069204c9d8173f805a40c0398f2eeec1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "/const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*(:args)\\s*\\)|args)\\s*=>/); Your toNumberList function should have an args parameterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>/); Your toNumberList function should use an implicit returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1804,
    "chunk_index": 131,
    "total_chunks": 136
  },
  {
    "id": "ec7437bc510dcc2c8a7d1b05982a3174",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "returnjs assertnotMatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*\\{/); Your toNumberList function should return the result of calling thesplit() method of argsjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(/); You should split args on the \",\" characterjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)/); You should chain themap() method to thesplit() methodjs assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(/); You should pass a reference to parseFloat as the callback tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst infixToFunction = {\n\"+\": (x, y) => x + y,\n\"-\": (x, y) => x - y,\n\"*\": (x, y) => x * y,\n\"/\": (x, y) => x / y,\n}\nconst infixEval = (str, regex) => str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 1425,
    "chunk_index": 132,
    "total_chunks": 136
  },
  {
    "id": "ffd52ea7afd4db07cb8319624b8486c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "tomap()js assertmatch(code, /const\\s+applyFunction\\s*=\\s*(:\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*;\\s*const\\s+infix\\s*=\\s*\\/\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\(\\[(:\\+-|-\\+)\\]\\)\\(\\[(:\\\\d\\|\\\\\\d)\\]\\+\\)\\/\\s*;\\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*;\\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\, \\]\\*\\)\\\\\\)\\(\\\\\\*\\\\\\(\\)\\/i\\s*;\\s*const\\s+toNumberList\\s*=\\s*(:\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\split\\(\\s*('|\"|`),\\1\\s*\\)\\map\\(\\s*parseFloat\\s*\\)\\s*;/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const infixToFunction = { \"+\": (x, y) => x + y, \"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator);\nconst highPrecedence = str => {\nconst regex = /([\\d ]+)([*\\/])([\\d ]+)/;\nconst str2 = infixEval(str, regex);\nreturn str === str2 str : highPrecedence(str2);\n}\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 133,
    "total_chunks": 136
  },
  {
    "id": "59d948c50924e0d347ce64d667e0aa57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\"-\": (x, y) => x - y, \"*\": (x, y) => x * y, \"/\": (x, y) => x / y, } const infixEval = (str, regex) => strreplace(regex, (_match, arg1, operator, arg2) => infixToFunctionoperator); const highPrecedence = str => { const regex = /([\\d ]+)([*\\/])([\\d ]+)/; const str2 = infixEval(str, regex); return str === str2 str : highPrecedence(str2); } const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums length;\nconst median = nums => {\nconst sorted = nums slice() sort((a, b) => a - b);\nconst length = sorted length;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\n--fcc-editable-region--\nconst applyFunction = str => {\nconst noHigh = highPrecedence(str);\nconst infix = /([\\d ]+)([+-])([\\d ]+)/;\nconst str2 = infixEval(noHigh, infix);\nconst functionCall = /([a-z0-9])(([0-9 , ]))( *()/i;\n}\n--fcc-editable-region--\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 134,
    "total_chunks": 136
  },
  {
    "id": "5db07fe577bf184983133331746aeb42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "infix = /([\\d ]+)([+-])([\\d ]+)/; const str2 = infixEval(noHigh, infix); const functionCall = /([a-z0-9])(([0-9 , ]))( *()/i; } --fcc-editable-region-- const range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index); const charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code)); const evalFormula = (x, cells) => { const idToText = id => cells find(cell => cell id === id) value; const rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9])/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\nconst cellExpanded = rangeExpanded replace(cellRegex, match => idToText(match toUpperCase()));\n}\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel textContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8916,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d44da986f2bc9b72f5fe2.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 135,
    "total_chunks": 136
  },
  {
    "id": "6a3cf7656b5be8dad68d8fdf5e8ee3b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 144
  },
  {
    "id": "467e615aa1037246fbf1a9256ff5db17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 517,
    "chunk_index": 1,
    "total_chunks": 144
  },
  {
    "id": "5fe094ea98ec803962950ae2b41aebce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 2,
    "total_chunks": 144
  },
  {
    "id": "1fa808d471623690d454bf656ad85777",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 618,
    "chunk_index": 3,
    "total_chunks": 144
  },
  {
    "id": "a3423002de2fd8bba157d8e8210f82a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 648,
    "chunk_index": 4,
    "total_chunks": 144
  },
  {
    "id": "2656041eb929ec68884c99002acdbdf4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 656,
    "chunk_index": 5,
    "total_chunks": 144
  },
  {
    "id": "123a7e7ca0fb8b8f92d2451c7aea149b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/);\nYou should use const to declare your cellExpanded variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 680,
    "chunk_index": 6,
    "total_chunks": 144
  },
  {
    "id": "828cd787865c959d5e5992c8792404a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/);\nYou should use const to declare your cellExpanded variablejs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 683,
    "chunk_index": 7,
    "total_chunks": 144
  },
  {
    "id": "54c083345d653f0a1e37764dbf387a04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d3b27cd3c56b875256301\ntitle: Step 62\nchallengeType: 0\ndashedName: step-62\n--description--\nDeclare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints--\nYou should declare a cellExpanded variable js\nassert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/);\nYou should use const to declare your cellExpanded variablejs\nassertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 747,
    "chunk_index": 8,
    "total_chunks": 144
  },
  {
    "id": "a11f18da8d0497f61c9d1c0f09366f59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 758,
    "chunk_index": 9,
    "total_chunks": 144
  },
  {
    "id": "d386173313d082a858ed6add0dfac7de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 761,
    "chunk_index": 10,
    "total_chunks": 144
  },
  {
    "id": "afe702dda8f7e454f4a3404ea41d38a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 779,
    "chunk_index": 11,
    "total_chunks": 144
  },
  {
    "id": "f8f7c716c35b3bdb97309212bd25ba50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 784,
    "chunk_index": 12,
    "total_chunks": 144
  },
  {
    "id": "036d7d5453c9a9900a4ea4a113736277",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 788,
    "chunk_index": 13,
    "total_chunks": 144
  },
  {
    "id": "d5c4002fe049c710ffc58f996bfd0c01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 822,
    "chunk_index": 14,
    "total_chunks": 144
  },
  {
    "id": "b85b8070b7dbd9eeefd33293024e5f85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 843,
    "chunk_index": 15,
    "total_chunks": 144
  },
  {
    "id": "6a334eba6946dbad9c677c15ca67d434",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 853,
    "chunk_index": 16,
    "total_chunks": 144
  },
  {
    "id": "1f368b874fba18d8e928ffe3a3a55213",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 918,
    "chunk_index": 17,
    "total_chunks": 144
  },
  {
    "id": "9bfefb48acac7ba3abf7f6064afa2002",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 980,
    "chunk_index": 18,
    "total_chunks": 144
  },
  {
    "id": "e791930928f589a31dc163ab69e6bd2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1061,
    "chunk_index": 19,
    "total_chunks": 144
  },
  {
    "id": "be39664c6e6f861daa883de689f36bb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1081,
    "chunk_index": 20,
    "total_chunks": 144
  },
  {
    "id": "ee7b2860da330d06aee1aa75f5f6492d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1094,
    "chunk_index": 21,
    "total_chunks": 144
  },
  {
    "id": "f8ef9d7b009fc177b726edc38116aa43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1161,
    "chunk_index": 22,
    "total_chunks": 144
  },
  {
    "id": "70e739a2de7acd7874c316155c4d0bb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1195,
    "chunk_index": 23,
    "total_chunks": 144
  },
  {
    "id": "07c0648b73ef1ad9a4a3a2fac9a4283a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1225,
    "chunk_index": 24,
    "total_chunks": 144
  },
  {
    "id": "2496a8ec7ebbcd2ffd13ac553a839e32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1233,
    "chunk_index": 25,
    "total_chunks": 144
  },
  {
    "id": "8952093074f4da506c940fe98004b2c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "646d3b27cd3c56b875256301 title: Step 62 challengeType: 0 dashedName: step-62 --description-- Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/);\nYou should assign cellExpanded the result of calling the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1252,
    "chunk_index": 26,
    "total_chunks": 144
  },
  {
    "id": "1933570b2d94996e298cf704833d7f0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Declare a cellExpanded variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpanded",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1226,
    "chunk_index": 27,
    "total_chunks": 144
  },
  {
    "id": "2aa868913bb7f64d5c307aff9b544389",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1225,
    "chunk_index": 28,
    "total_chunks": 144
  },
  {
    "id": "6edfdab63e16bd61381274ca37c072c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "and assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1287,
    "chunk_index": 29,
    "total_chunks": 144
  },
  {
    "id": "aae26d66b4e7f6c85dce839f7db8589b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1307,
    "chunk_index": 30,
    "total_chunks": 144
  },
  {
    "id": "0ce8a2431f362e8dc2e4f138db23e7dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1310,
    "chunk_index": 31,
    "total_chunks": 144
  },
  {
    "id": "c75893ccffb558cd0229b9d4388652d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1328,
    "chunk_index": 32,
    "total_chunks": 144
  },
  {
    "id": "71335f932164852ba098c86c02a909de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1333,
    "chunk_index": 33,
    "total_chunks": 144
  },
  {
    "id": "3d209f39c3a56654768a5e5ede8f8ab4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1337,
    "chunk_index": 34,
    "total_chunks": 144
  },
  {
    "id": "072a89a74fbda911ce5448653b01c4d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1371,
    "chunk_index": 35,
    "total_chunks": 144
  },
  {
    "id": "8122676a0918f55f66d338b79467d6d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1392,
    "chunk_index": 36,
    "total_chunks": 144
  },
  {
    "id": "92e4c6e7af4be420415c2306a1a882ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1402,
    "chunk_index": 37,
    "total_chunks": 144
  },
  {
    "id": "42eac1aefe491ab730a07781f842de71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1467,
    "chunk_index": 38,
    "total_chunks": 144
  },
  {
    "id": "f97a6e0b16815c3d7ddcfc585d374adb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1529,
    "chunk_index": 39,
    "total_chunks": 144
  },
  {
    "id": "13b3c088a6ee05cb19a5511081ef152e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1610,
    "chunk_index": 40,
    "total_chunks": 144
  },
  {
    "id": "0775f8a7181df135b74c064ed87568cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1630,
    "chunk_index": 41,
    "total_chunks": 144
  },
  {
    "id": "f82b0a8abc31ad07302e859c7e0d48b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1643,
    "chunk_index": 42,
    "total_chunks": 144
  },
  {
    "id": "c07aab6fd18904e5ebdbfd639541260c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1710,
    "chunk_index": 43,
    "total_chunks": 144
  },
  {
    "id": "f9d3d074461e18ea6a0148de705a7508",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1744,
    "chunk_index": 44,
    "total_chunks": 144
  },
  {
    "id": "1e7a3e6ee53f53fab2611647d1647305",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1774,
    "chunk_index": 45,
    "total_chunks": 144
  },
  {
    "id": "030fbd84d9b48f0599371bc3f324e799",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1782,
    "chunk_index": 46,
    "total_chunks": 144
  },
  {
    "id": "33093baf2e45ec23f1a4a54c178c119e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1797,
    "chunk_index": 47,
    "total_chunks": 144
  },
  {
    "id": "295e5555e93e0665454ce04524bfef05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "assign it the value of calling replace() on your rangeExpanded variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/);\nYou should pass cellRegex as the first argument to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1812,
    "chunk_index": 48,
    "total_chunks": 144
  },
  {
    "id": "09c41d52f7e55d025734d0e0591be051",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "variable Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1803,
    "chunk_index": 49,
    "total_chunks": 144
  },
  {
    "id": "96b4476223030be635d3bc0be315bee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Pass it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1805,
    "chunk_index": 50,
    "total_chunks": 144
  },
  {
    "id": "7be662491b56343da1261af27b23a6ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "it your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1867,
    "chunk_index": 51,
    "total_chunks": 144
  },
  {
    "id": "1d8f005e24b54e1bb8a7f888a983514e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1887,
    "chunk_index": 52,
    "total_chunks": 144
  },
  {
    "id": "fbb6a0697d546ba872a1707af3182bac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1890,
    "chunk_index": 53,
    "total_chunks": 144
  },
  {
    "id": "2cb0cc4e5e8dcd27c572ed48769ad799",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1908,
    "chunk_index": 54,
    "total_chunks": 144
  },
  {
    "id": "5bdcce87ddfe0c40dd90559cafc9884d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1913,
    "chunk_index": 55,
    "total_chunks": 144
  },
  {
    "id": "912275a43dc0363ab26ca9e70aad4d6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1917,
    "chunk_index": 56,
    "total_chunks": 144
  },
  {
    "id": "414bf2809ec06705104d15836977c147",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1951,
    "chunk_index": 57,
    "total_chunks": 144
  },
  {
    "id": "ec35bfca3118dc5b9edebaec8196b0e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1972,
    "chunk_index": 58,
    "total_chunks": 144
  },
  {
    "id": "6624ba8839a1537c5d01762df1a4137f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1982,
    "chunk_index": 59,
    "total_chunks": 144
  },
  {
    "id": "72da103e42b19f9ce3b3710f4de7186a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2047,
    "chunk_index": 60,
    "total_chunks": 144
  },
  {
    "id": "b2988f01ba1fbd167880d4b80231daed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2109,
    "chunk_index": 61,
    "total_chunks": 144
  },
  {
    "id": "9898963ce3cb4fc1794c024a37cfa336",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2190,
    "chunk_index": 62,
    "total_chunks": 144
  },
  {
    "id": "a56ea93e446e2dce0a9a81ece3333d7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2210,
    "chunk_index": 63,
    "total_chunks": 144
  },
  {
    "id": "000c61580428eb25a97deff7e7da8563",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2223,
    "chunk_index": 64,
    "total_chunks": 144
  },
  {
    "id": "1e17f74d64c79c5e0cc40891113061bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2290,
    "chunk_index": 65,
    "total_chunks": 144
  },
  {
    "id": "d2b1ae49c08875f7c60af738ab1e86b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2324,
    "chunk_index": 66,
    "total_chunks": 144
  },
  {
    "id": "e6cfdddc2a74ea59fb399e75652edb82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2354,
    "chunk_index": 67,
    "total_chunks": 144
  },
  {
    "id": "f177bfc04fd610cbc90b4de342209b51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2362,
    "chunk_index": 68,
    "total_chunks": 144
  },
  {
    "id": "beb89ba72ae1096b92a94597c4e43bdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2377,
    "chunk_index": 69,
    "total_chunks": 144
  },
  {
    "id": "9f6b9b9505c0cac03b46453af56bd159",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "your cellRegex and an empty callback function The callback function should take a match parameter --hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/);\nYou should pass a callback function using arrow syntax as the second argument to your",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2401,
    "chunk_index": 70,
    "total_chunks": 144
  },
  {
    "id": "5a7b5a6dff40d3d02e0cca1084a90c59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "--hints-- You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2388,
    "chunk_index": 71,
    "total_chunks": 144
  },
  {
    "id": "be0cd4646bf5bcd87e46102d2e5bea2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "You should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2388,
    "chunk_index": 72,
    "total_chunks": 144
  },
  {
    "id": "014584ce539c54eeabc2f2108b2fb018",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "should declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2450,
    "chunk_index": 73,
    "total_chunks": 144
  },
  {
    "id": "87371c24f9c06d948f9c6dbe3ff39171",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2470,
    "chunk_index": 74,
    "total_chunks": 144
  },
  {
    "id": "68893eaeac447d6744d7375e3c69fd1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2473,
    "chunk_index": 75,
    "total_chunks": 144
  },
  {
    "id": "a16ca229e944d56092adade7f40e411b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2491,
    "chunk_index": 76,
    "total_chunks": 144
  },
  {
    "id": "c72269d6538cc78f198469ef801dec87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2496,
    "chunk_index": 77,
    "total_chunks": 144
  },
  {
    "id": "66a87aef4455cc13cba32aea5c9858e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2500,
    "chunk_index": 78,
    "total_chunks": 144
  },
  {
    "id": "57320a8f8f0b5ca8685b2377813edf00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2534,
    "chunk_index": 79,
    "total_chunks": 144
  },
  {
    "id": "6a3026a7ae0fed44f381437775c2bcf4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2555,
    "chunk_index": 80,
    "total_chunks": 144
  },
  {
    "id": "d2dcd8a473b06b0edb3a7c3159a15a42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2565,
    "chunk_index": 81,
    "total_chunks": 144
  },
  {
    "id": "94256c0a9327fba125ea4f94ccebd7d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2630,
    "chunk_index": 82,
    "total_chunks": 144
  },
  {
    "id": "5964fdb52ad8e92d62cb12d4f6afbdce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2692,
    "chunk_index": 83,
    "total_chunks": 144
  },
  {
    "id": "6dcb030d5c1965226e713e3b1e236c19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2773,
    "chunk_index": 84,
    "total_chunks": 144
  },
  {
    "id": "fe12d2844cf63249d927bf48f8e9d5e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2793,
    "chunk_index": 85,
    "total_chunks": 144
  },
  {
    "id": "c13873f2dcde28a2032679154485ecd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2806,
    "chunk_index": 86,
    "total_chunks": 144
  },
  {
    "id": "db0c8eefb2185c1a796f28db5d43de7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2873,
    "chunk_index": 87,
    "total_chunks": 144
  },
  {
    "id": "3f0a60e48055b67c8ae3bb0a4dd8fe10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2907,
    "chunk_index": 88,
    "total_chunks": 144
  },
  {
    "id": "b47a8ced2c1e4cf7291b4d9661c52500",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2937,
    "chunk_index": 89,
    "total_chunks": 144
  },
  {
    "id": "1e54266c92e78a7be6683b821512a340",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2945,
    "chunk_index": 90,
    "total_chunks": 144
  },
  {
    "id": "8e5fcd729f698db78cc7a056078792c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2960,
    "chunk_index": 91,
    "total_chunks": 144
  },
  {
    "id": "0655595ec66890d9b02675a2e94d4120",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2976,
    "chunk_index": 92,
    "total_chunks": 144
  },
  {
    "id": "4108b1498537d609a8a93a2909922ee5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2979,
    "chunk_index": 93,
    "total_chunks": 144
  },
  {
    "id": "bbb69d7f25f902b94978bedc86924f36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "declare a cellExpanded variable js assert match(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\ find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/);\nYour callback function should have a match parameter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2997,
    "chunk_index": 94,
    "total_chunks": 144
  },
  {
    "id": "03796e53cab00fb0c3a57b0c47e48c46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*( :cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2929,
    "chunk_index": 95,
    "total_chunks": 144
  },
  {
    "id": "d3ac03d3c742deb5f71a6de0811c4159",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": ":cell\\ id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2971,
    "chunk_index": 96,
    "total_chunks": 144
  },
  {
    "id": "040d135212a027482fc2bd3c8a5dcfda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2989,
    "chunk_index": 97,
    "total_chunks": 144
  },
  {
    "id": "08d6d97f61cc5c5b4f581071fdc0b147",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 2992,
    "chunk_index": 98,
    "total_chunks": 144
  },
  {
    "id": "d5a64781f1dba9ed6516c4cf2ccc2acf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3010,
    "chunk_index": 99,
    "total_chunks": 144
  },
  {
    "id": "865aa71a172bc5f3f0067e9d80e807fd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3015,
    "chunk_index": 100,
    "total_chunks": 144
  },
  {
    "id": "6208942a1c1bbc867e546010a8e36b23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3019,
    "chunk_index": 101,
    "total_chunks": 144
  },
  {
    "id": "c49a2c10ee2d9a925a44879481f016fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3053,
    "chunk_index": 102,
    "total_chunks": 144
  },
  {
    "id": "781780274addb5f036f476d72f9c3c6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3074,
    "chunk_index": 103,
    "total_chunks": 144
  },
  {
    "id": "75ce66639300796a564f0f2598e211bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3084,
    "chunk_index": 104,
    "total_chunks": 144
  },
  {
    "id": "83c0ebbce3a62cfb660684503dc94c77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3149,
    "chunk_index": 105,
    "total_chunks": 144
  },
  {
    "id": "b0991c04e442b12e512fe08bbcf49a84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3211,
    "chunk_index": 106,
    "total_chunks": 144
  },
  {
    "id": "c1dc6c51d41507e519509efc976df53e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3292,
    "chunk_index": 107,
    "total_chunks": 144
  },
  {
    "id": "e0e7046c1c2772f3914d0fcef6c4879c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3312,
    "chunk_index": 108,
    "total_chunks": 144
  },
  {
    "id": "c67e5351154a760c8f88ea9ae2694cd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3325,
    "chunk_index": 109,
    "total_chunks": 144
  },
  {
    "id": "e5be8af98b07f68b7d8fbf015194a38a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3392,
    "chunk_index": 110,
    "total_chunks": 144
  },
  {
    "id": "158e4aa503a3def264545aca111ea02e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3426,
    "chunk_index": 111,
    "total_chunks": 144
  },
  {
    "id": "263115fa24c30f05f14390c6fd3729aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3456,
    "chunk_index": 112,
    "total_chunks": 144
  },
  {
    "id": "c2a41843975c1fc5e788482dcfb363e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3464,
    "chunk_index": 113,
    "total_chunks": 144
  },
  {
    "id": "93a858b061519f37e6e69e6cb3962d11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3479,
    "chunk_index": 114,
    "total_chunks": 144
  },
  {
    "id": "d14955cccddba3643a8f4d406a9279d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id\\s*===\\s*id|id\\s*===\\s*cell\\ id)\\s*\\)\\ value\\s*; \\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\ \\)\\/(gi|ig)\\s*; \\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/);\nYour callback function should be empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3512,
    "chunk_index": 115,
    "total_chunks": 144
  },
  {
    "id": "e8bbce1538f82f61c94b30c8761939ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*; \\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3419,
    "chunk_index": 116,
    "total_chunks": 144
  },
  {
    "id": "77cf4d30d904e6274f4a8d2f0590415e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*; \\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3416,
    "chunk_index": 117,
    "total_chunks": 144
  },
  {
    "id": "50a64732d8e1506e70fa710328990381",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3374,
    "chunk_index": 118,
    "total_chunks": 144
  },
  {
    "id": "badcc8fc69768ff597d45c85c1bd8946",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3377,
    "chunk_index": 119,
    "total_chunks": 144
  },
  {
    "id": "7e99e1f83b83c9d09a27924fdcd026eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3395,
    "chunk_index": 120,
    "total_chunks": 144
  },
  {
    "id": "63eedc280a058a1efcfa43984449ae69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3400,
    "chunk_index": 121,
    "total_chunks": 144
  },
  {
    "id": "5bb0508a52ccc742ecc0fed40c659773",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3404,
    "chunk_index": 122,
    "total_chunks": 144
  },
  {
    "id": "4c5d68d1718fbf09149148c757e3cc2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3438,
    "chunk_index": 123,
    "total_chunks": 144
  },
  {
    "id": "820bd9c688be07cc27b611a4415615d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3459,
    "chunk_index": 124,
    "total_chunks": 144
  },
  {
    "id": "960b56bb19369ba4fe9a0f42ca0bf15f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3469,
    "chunk_index": 125,
    "total_chunks": 144
  },
  {
    "id": "3718f64627ea43a2eaf2ee35ae931382",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3534,
    "chunk_index": 126,
    "total_chunks": 144
  },
  {
    "id": "0e73ab1851145ac83ad88c5e59c42b24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3596,
    "chunk_index": 127,
    "total_chunks": 144
  },
  {
    "id": "c059d94e3450600e3e61ca559f724e47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3677,
    "chunk_index": 128,
    "total_chunks": 144
  },
  {
    "id": "0cf699d14bb9437a150a1ad1ec2787a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3697,
    "chunk_index": 129,
    "total_chunks": 144
  },
  {
    "id": "ce6809fafbf79263780710f8eb6b5516",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3710,
    "chunk_index": 130,
    "total_chunks": 144
  },
  {
    "id": "386cdf1e6dcb4d95c790c986791bdc47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3777,
    "chunk_index": 131,
    "total_chunks": 144
  },
  {
    "id": "6da9afef09f2b95bb3e2a02fd46b0c2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3811,
    "chunk_index": 132,
    "total_chunks": 144
  },
  {
    "id": "06381acab3d0c944a5454283d6100bfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3841,
    "chunk_index": 133,
    "total_chunks": 144
  },
  {
    "id": "c0f77ab198157d285964bd5ddf1b97a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3849,
    "chunk_index": 134,
    "total_chunks": 144
  },
  {
    "id": "017a514c13baa1843b84bc6a3174ed9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3864,
    "chunk_index": 135,
    "total_chunks": 144
  },
  {
    "id": "9e282a9a011cab6da5971eb0dca14870",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\ map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*(var|let|const)\\s+cellExpanded/); You should use const to declare your cellExpanded variablejs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded/); You should assign cellExpanded the result of calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}/);\n--seed--\n--seed-contents--\n```html\nFunctional Programming Spreadsheet\n```\n```css\ncontainer {\ndisplay: grid;\ngrid-template-columns: 50px repeat(10, 200px);\ngrid-template-rows: repeat(11, 30px);\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3952,
    "chunk_index": 136,
    "total_chunks": 144
  },
  {
    "id": "e45a25c66ff83ede617936555e087c8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "calling thereplace() method of rangeExpandedjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(/); You should pass cellRegex as the first argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex/); You should pass a callback function using arrow syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label {\nbackground-color: lightgray;\ntext-align: center;\nvertical-align: middle;\nline-height: 30px;\n}\n```\n```js\nconst isEven = num => num % 2 === 0;\nconst sum = nums => nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 3143,
    "chunk_index": 137,
    "total_chunks": 144
  },
  {
    "id": "1fa41ca9744aa873a99701070960aa95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "syntax as the second argument to yourreplace() calljs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*(:match)\\s*\\)|match)\\s*=>/); Your callback function should have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0);\nconst average = nums => sum(nums) / nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1968,
    "chunk_index": 138,
    "total_chunks": 144
  },
  {
    "id": "681f964d0a51859f2106f47e50bc97d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "have a match parameterjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>/); Your callback function should be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength;\nconst median = nums => {\nconst sorted = nums",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 1361,
    "chunk_index": 139,
    "total_chunks": 144
  },
  {
    "id": "c2158525c7ab4f645f0d906974cd57fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 752,
    "chunk_index": 140,
    "total_chunks": 144
  },
  {
    "id": "3d85e5bd394e7d753738685d693231be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "be emptyjs assertmatch(code, /const\\s+evalFormula\\s*=\\s*\\(\\s*x\\s*,\\s*cells\\s*\\)\\s*=>\\s*{\\s*const\\s+idToText\\s*=\\s*(\\(\\s*id\\s*\\)|id)\\s*=>\\s*cells\\find\\(\\s*(\\(\\s*cell\\s*\\)|cell)\\s*=>\\s*(:cell\\id\\s*===\\s*id|id\\s*===\\s*cell\\id)\\s*\\)\\value\\s*;\\s*const\\s+rangeRegex\\s*=\\s*\\/\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\):\\(\\[A-J\\]\\)\\(\\[1-9\\]\\[0-9\\]\\\\)\\/(gi|ig)\\s*;\\s*const\\s+rangeFromString\\s*=\\s*\\(\\s*num1\\s*,\\s*num2\\s*\\)\\s*=>\\s*range\\(\\s*parseInt\\(\\s*num1\\s*\\)\\s*,\\s*parseInt\\(\\s*num2\\s*\\)\\s*\\)\\s*;\\s*const\\s+elemValue\\s*=\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*(\\(\\s*character\\s*\\)|character)\\s*=>\\s*idToText\\(\\s*character\\s*\\+\\s*num\\s*\\)\\s*;\\s*const\\s+addCharacters\\s*=\\s*(\\(\\s*character1\\s*\\)|character1)\\s*=>\\s*(\\(\\s*character2\\s*\\)|character2)\\s*=>\\s*(\\(\\s*num\\s*\\)|num)\\s*=>\\s*charRange\\(\\s*character1\\s*,\\s*character2\\s*\\)\\map\\(\\s*elemValue\\(\\s*num\\s*\\)\\s*\\)\\s*;\\s*const\\s+rangeExpanded\\s*=\\s*x\\replace\\(\\s*rangeRegex\\s*,\\s*\\(\\s*_match\\s*,\\s*char1\\s*,\\s*num1\\s*,\\s*char2\\s*,\\s*num2\\s*\\)\\s*=>\\s*rangeFromString\\(\\s*num1\\s*,\\s*num2\\s*\\)\\map\\(\\s*addCharacters\\s*\\(\\s*char1\\s*\\)\\(\\s*char2\\s*\\)\\s*\\)\\s*\\)\\s*;\\s*const\\s+cellRegex\\s*=\\s*\\/\\[A-J\\]\\[1-9\\]\\[0-9\\]\\\\/(gi|ig)\\s*;\\s*const\\s+cellExpanded\\s*=\\s*rangeExpanded\\replace\\(\\s*cellRegex\\s*,\\s*(\\(\\s*match\\s*\\)|match)\\s*=>\\s*\\{\\s*\\}/); --seed-- --seed-contents-- ```html Functional Programming Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b);\nconst length = sorted",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 767,
    "chunk_index": 141,
    "total_chunks": 144
  },
  {
    "id": "e5637fd2c07f424493630e19ba7603ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "Spreadsheet ``` ```css container { display: grid; grid-template-columns: 50px repeat(10, 200px); grid-template-rows: repeat(11, 30px); }label { background-color: lightgray; text-align: center; vertical-align: middle; line-height: 30px; } ``` ```js const isEven = num => num % 2 === 0; const sum = nums => numsreduce((acc, el) => acc + el, 0); const average = nums => sum(nums) / numslength; const median = nums => { const sorted = numsslice()sort((a, b) => a - b); const length = sortedlength;\nconst middle = length / 2 - 1;\nreturn isEven(length) average([sorted[middle], sorted[middle + 1]])\n: sorted[Math ceil(middle)];\n}\nconst spreadsheetFunctions = {\nsum,\naverage,\nmedian\n}\nconst range = (start, end) => Array(end - start + 1) fill(start) map((element, index) => element + index);\nconst charRange = (start, end) => range(start charCodeAt(0), end charCodeAt(0)) map(code => String fromCharCode(code));\n--fcc-editable-region--\nconst evalFormula = (x, cells) => {\nconst idToText = id => cells find(cell => cell id === id) value;\nconst rangeRegex = /([A-J])([1-9][0-9] ):([A-J])([1-9][0-9] )/gi;\nconst rangeFromString = (num1, num2) => range(parseInt(num1), parseInt(num2));\nconst elemValue = num => character => idToText(character + num);\nconst addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num));\nconst rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2)));\nconst cellRegex = /[A-J][1-9][0-9] /gi;\n}\n--fcc-editable-region--\nwindow onload = () => {\nconst container = document getElementById(\"container\");\nconst createLabel = (name) => {\nconst label = document createElement(\"div\");\nlabel className = \"label\";\nlabel",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 142,
    "total_chunks": 144
  },
  {
    "id": "b4dac4ab937f8fe7d895210aad5ab51b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "= (num1, num2) => range(parseInt(num1), parseInt(num2)); const elemValue = num => character => idToText(character + num); const addCharacters = character1 => character2 => num => charRange(character1, character2) map(elemValue(num)); const rangeExpanded = x replace(rangeRegex, (_match, char1, num1, char2, num2) => rangeFromString(num1, num2) map(addCharacters(char1)(char2))); const cellRegex = /[A-J][1-9][0-9] /gi; } --fcc-editable-region-- window onload = () => { const container = document getElementById(\"container\"); const createLabel = (name) => { const label = document createElement(\"div\"); label className = \"label\"; labeltextContent = name;\ncontainer appendChild(label);\n}\nconst letters = charRange(\"A\", \"J\");\nletters forEach(createLabel);\nrange(1, 99) forEach(number => {\ncreateLabel(number);\nletters forEach(letter => {\nconst input = document createElement(\"input\");\ninput type = \"text\";\ninput id = letter + number;\ninput ariaLabel = letter + number;\ninput onchange = update;\ncontainer appendChild(input);\n})\n})\n}\nconst update = event => {\nconst element = event target;\nconst value = element value replace(/\\s/g, \"\");\nif ( value includes(element id) && value startsWith('=')) {\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12396,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d3b27cd3c56b875256301.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 143,
    "total_chunks": 144
  },
  {
    "id": "31d33a064254c0f9b7cbde7c7c6771df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
    "source_type": "git_repo",
    "title": "Functional Programming Spreadsheet",
    "content": "id: 646d4554721d43cb19a68bc4\ntitle: Step 86\nchallengeType: 0\ndashedName: step-86\n--description--\nThe fn parameter will be passed the name of a function, such as \"SUM\" Update apply to implicitly return the function from your spreadsheetFunctions object using the fn variable as the key for the object access Remember that fn might not contain a lowercase string, so you'll need to convert it to a lowercase string --hints--\nYour apply function should use an implicit return js\nassert notMatch(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[( :\\+-|-\\+)\\]\\)\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\/\\s*; \\s*const\\s+str2\\s*=\\s*infixEval\\(\\s*noHigh\\s*,\\s*infix\\s*\\)\\s*; \\s*const\\s+functionCall\\s*=\\s*\\/\\(\\[a-z0-9\\]\\*\\)\\\\\\(\\(\\[0-9\\ , \\]\\*\\)\\\\\\)\\(\\ \\ \\*\\\\\\(\\)\\/i\\s*; \\s*const\\s+toNumberList\\s*=\\s*( :\\(\\s*args\\s*\\)|args)\\s*=>\\s*args\\ split\\(\\s*('|\"|`),\\1\\s*\\)\\ map\\(\\s*parseFloat\\s*\\)\\s*; \\s*const\\s+apply\\s*=\\s*\\(\\s*fn\\s*,\\s*args\\s*\\)\\s*=>\\s*\\{/);\nYour apply function should access the spreadsheetFunctions object js\nassert match(code, /const\\s+applyFunction\\s*=\\s*( :\\(\\s*str\\s*\\)|str)\\s*=>\\s*\\{\\s*const\\s+noHigh\\s*=\\s*highPrecedence\\(\\s*str\\s*\\)\\s*; \\s*const\\s+infix\\s*=\\s*\\/\\(\\[( :\\\\d\\ |\\ \\\\d)\\]\\+\\)\\(\\[(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\15-javascript-algorithms-and-data-structures-22\\learn-functional-programming-by-building-a-spreadsheet\\646d4554721d43cb19a68bc4.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 60
  }
]