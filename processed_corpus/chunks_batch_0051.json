[
  {
    "id": "46aad5ddb76c970d9c40704318f2eda6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\conclusion.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da6\ntitle: Conclusion\nchallengeType: 11\nvideoId: LMNub5frQi4\nbilibiliIds:\naid: 208033449\nbvid: BV1Wh411p79h\ncid: 409139716\ndashedName: conclusion\n--questions--\n--text--\nMost people that are experts in AI or machine learning usually...:\n--answers--\nhave one specialization.\nhave many specializations.\nhave a deep understanding of many different frameworks.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\conclusion.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a92d494223a49808003a2f1f4d8151c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks-evaluating-the-model.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d99\ntitle: 'Convolutional Neural Networks: Evaluating the Model'\nchallengeType: 11\nvideoId: eCATNvwraXg\nbilibiliIds:\naid: 933030136\nbvid: BV1hM4y1g7Bx\ncid: 409132265\ndashedName: convolutional-neural-networks-evaluating-the-model\n--questions--\n--text--\nWhat is not a good way to increase the accuracy of a convolutional neural network?\n--answers--\nAugmenting the data you already have.\nUsing a pre-trained model.\nUsing your test data to retrain the model.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 550,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks-evaluating-the-model.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12430bb1ac08921bdd7776debf701a65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\book-recommendation-engine-using-knn.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f8e3ac417301a38fb92f\ntitle: Book Recommendation Engine using KNN\nchallengeType: 10\nforumTopicId: 462378\ndashedName: book-recommendation-engine-using-knn\n--description--\nYou will be working on this project with Google Colaboratory After going to that link, create a copy of the notebook either in your own account or locally Once you complete the project and it passes the test (included at that link), submit your project link below If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link \"\nWe are still developing the interactive instructional content for the machine learning curriculum For now, you can go through the video challenges in this certification You may also have to seek out additional learning resources, similar to what you would do when working on a real-world project --instructions--\nIn this challenge, you will create a book recommendation algorithm using K-Nearest Neighbors In this project, you will use the Book-Crossings dataset, which contains 1 1 million ratings (scale of 1-10) of 270,000 books by 90,000 users The dataset is already imported in the notebook, so no additional download is required Use NearestNeighbors from sklearn neighbors to develop a model that shows books that are similar to a given book The Nearest Neighbors algorithm measures the distance to determine the “closeness” of instances Create a function named get_recommends that takes a book title (from the dataset) as an argument and returns a list of 5 similar books with their distances from the book argument This code:\npy\nget_recommends(\"The Queen of the Damned (Vampire Chronicles (Paperback))\")\nshould return:\npy\n[\n'The Queen of the Damned (Vampire Chronicles (Paperback))',\n[\n['Catch 22', 0 793983519077301],\n['The Witching Hour (Lives of the Mayfair Witches)', 0 7448656558990479],\n['Interview with the Vampire', 0 7345068454742432],\n['The Tale of the Body Thief (Vampire Chronicles (Paperback))', 0 5376338362693787],\n['The Vampire Lestat (Vampire Chronicles, Book II)', 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\book-recommendation-engine-using-knn.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "57a5f3336bec964dfe5eeaa4a6e68f1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\book-recommendation-engine-using-knn.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a list of 5 similar books with their distances from the book argument This code: py get_recommends(\"The Queen of the Damned (Vampire Chronicles (Paperback))\") should return: py [ 'The Queen of the Damned (Vampire Chronicles (Paperback))', [ ['Catch 22', 0 793983519077301], ['The Witching Hour (Lives of the Mayfair Witches)', 0 7448656558990479], ['Interview with the Vampire', 0 7345068454742432], ['The Tale of the Body Thief (Vampire Chronicles (Paperback))', 0 5376338362693787], ['The Vampire Lestat (Vampire Chronicles, Book II)', 05178412199020386]\n]\n]\nNotice that the data returned from get_recommends() is a list The first element in the list is the book title passed into the function The second element in the list is a list of five more lists Each of the five lists contains a recommended book and the distance from the recommended book to the book passed into the function If you graph the dataset (optional), you will notice that most books are not rated frequently To ensure statistical significance, remove from the dataset users with less than 200 ratings and books with less than 100 ratings The first three cells import libraries you may need and the data to use The final cell is for testing Write all your code in between those cells --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\book-recommendation-engine-using-knn.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "960737ce2a8cce264ad0e9bfd1b93182",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks-picking-a-pretrained-model.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d9a\ntitle: 'Convolutional Neural Networks: Picking a Pretrained Model'\nchallengeType: 11\nvideoId: h1XUt1AgIOI\nbilibiliIds:\naid: 463063633\nbvid: BV1qL411x73q\ncid: 409132626\ndashedName: convolutional-neural-networks-picking-a-pretrained-model\n--questions--\n--text--\nFill in the blanks below to use Google's pre-trained MobileNet V2 model as a base for a convolutional neural network:\npy\nbase_model = tf.__A__.applications.__B__(input_shape=(160, 160, 3),\ninclude_top=__C__,\nweights='imagenet'\n)\n--answers--\nA: keras\nB: MobileNetV2\nC: False\nA: Keras\nB: MobileNetV2\nC: True\nA: keras\nB: mobile_net_v2\nC: False\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks-picking-a-pretrained-model.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0d203d78e5cc0d20c53f2ce3b1ea0f98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks-the-convolutional-layer.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d97\ntitle: 'Convolutional Neural Networks: The Convolutional Layer'\nchallengeType: 11\nvideoId: LrdmcQpTyLw\nbilibiliIds:\naid: 805608595\nbvid: BV1Q34y1S7nr\ncid: 409131585\ndashedName: convolutional-neural-networks-the-convolutional-layer\n--questions--\n--text--\nWhat are the three main properties of each convolutional layer?\n--answers--\nInput size, the number of filters, and the sample size of the filters.\nInput size, input dimensions, and the color values of the input.\nInput size, input padding, and stride.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks-the-convolutional-layer.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1348695e6142c0d6d4a79252cd2e20ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\rock-paper-scissors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f8d6ac417301a38fb92d\ntitle: Rock Paper Scissors\nchallengeType: 10\nforumTopicId: 462376\ndashedName: rock-paper-scissors\n--description--\nFor this challenge, you will create a program to play Rock, Paper, Scissors A program that picks at random will usually win 50% of the time To pass this challenge your program must play matches against four different bots, winning at least 60% of the games in each match You will be working on this project with our Gitpod starter code We are still developing the interactive instructional part of the machine learning curriculum For now, you will have to use other resources to learn how to pass this challenge --instructions--\nIn the file RPS py you are provided with a function called player The function takes an argument that is a string describing the last move of the opponent (\"R\", \"P\", or \"S\") The function should return a string representing the next move for it to play (\"R\", \"P\", or \"S\") A player function will receive an empty string as an argument for the first game in a match since there is no previous play The file RPS py shows an example function that you will need to update The example function is defined with two arguments (player(prev_play, opponent_history = [])) The function is never called with a second argument so that one is completely optional The reason why the example function contains a second argument (opponent_history = []) is because that is the only way to save state between consecutive calls of the player function You only need the opponent_history argument if you want to keep track of the opponent_history Hint: To defeat all four opponents, your program may need to have multiple strategies that change depending on the plays of the opponent Development\nDo not modify RPS_game py Write all your code in RPS py For development, you can use main py to test your code main py imports the game function and bots from RPS_game py To test your code, play a game with the play function The play function takes four arguments:\ntwo players to play against each other (the players are actually functions)\nthe number of games to play in the match\nan optional argument to see a log of each game Set it to True to see these messages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\rock-paper-scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c5627eb53810c32c00b2ab7a18043bdd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\rock-paper-scissors.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you can use main py to test your code main py imports the game function and bots from RPS_game py To test your code, play a game with the play function The play function takes four arguments: two players to play against each other (the players are actually functions) the number of games to play in the match an optional argument to see a log of each game Set it to True to see these messagespy\nplay(player1, player2, num_games[, verbose])\nFor example, here is how you would call the function if you want player and quincy to play 1000 games against each other and you want to see the results of each game:\npy\nplay(player, quincy, 1000, verbose=True)\nTesting\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience If you uncomment the last line in main py, the tests will run automatically whenever you run python main py in the console Submitting\nCopy your project's URL and submit it to freeCodeCamp --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\rock-paper-scissors.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4a0c6349dbd2111891504458f5687583",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d96\ntitle: Convolutional Neural Networks\nchallengeType: 11\nvideoId: _1kTP7uoU9E\nbilibiliIds:\naid: 805604251\nbvid: BV1D34y1S7zS\ncid: 409131358\ndashedName: convolutional-neural-networks\n--description--\nThe next few video lessons will reference this Colab notebook.\n--questions--\n--text--\nDense neural networks analyze input on a global scale and recognize patterns in specific areas. Convolutional neural networks...:\n--answers--\nalso analyze input globally and extract features from specific areas.\ndo not work well for image classification or object detection.\nscan through the entire input a little at a time and learn local patterns.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 840,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\convolutional-neural-networks.md",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e69384bfb90dc5774e0c20ed2e40e946",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-building-the-model.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d8e\ntitle: 'Core Learning Algorithms: Building the Model'\nchallengeType: 11\nvideoId: 5wHw8BTd2ZQ\nbilibiliIds:\naid: 763068584\nbvid: BV1s64y1a7WR\ncid: 409128675\ndashedName: core-learning-algorithms-building-the-model\n--questions--\n--text--\nWhat kind of estimator/model does TensorFlow recommend using for classification?\n--answers--\nLinearClassifier\nDNNClassifier\nBoostedTreesClassifier\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 482,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-building-the-model.md",
      "source_type": "git_repo"
    },
    "token_count": 138,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a69527a3a707c986f0685cb748a1526",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-classification.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d8d\ntitle: 'Core Learning Algorithms: Classification'\nchallengeType: 11\nvideoId: qFF7ZQNvK9E\nbilibiliIds:\naid: 505531167\nbvid: BV1Vg411c7av\ncid: 409128427\ndashedName: core-learning-algorithms-classification\n--questions--\n--text--\nWhat is classification?\n--answers--\nThe process of separating data points into different classes.\nPredicting a numeric value or forecast based on independent and dependent variables.\nNone of the above.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-classification.md",
      "source_type": "git_repo"
    },
    "token_count": 141,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12b06efce56e961e1bec3a8e62140e36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-hidden-markov-models.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d90\ntitle: 'Core Learning Algorithms: Hidden Markov Models'\nchallengeType: 11\nvideoId: IZg24y4wEPY\nbilibiliIds:\naid: 633081400\nbvid: BV1tb4y1y72V\ncid: 409129376\ndashedName: core-learning-algorithms-hidden-markov-models\n--questions--\n--text--\nWhat makes a Hidden Markov model different than linear regression or classification?\n--answers--\nIt uses probability distributions to predict future events or states.\nIt analyzes the relationship between independent and dependent variables to make predictions.\nIt separates data points into separate categories.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 645,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-hidden-markov-models.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4f8d54aadbfab31472fe2ab05561698d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-clustering.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d8f\ntitle: 'Core Learning Algorithms: Clustering'\nchallengeType: 11\nvideoId: 8sqIaHc9Cz4\nbilibiliIds:\naid: 720567137\nbvid: BV1BQ4y1r7UY\ncid: 409129005\ndashedName: core-learning-algorithms-clustering\n--questions--\n--text--\nWhich of the following steps is not part of the K-Means algorithm?\n--answers--\nRandomly pick K points to place K centeroids.\nAssign each K point to the closest K centeroid.\nMove each K centeroid into the middle of all of their data points.\nShuffle the K points so they're redistributed randomly.\nReassign each K point to the closest K centeroid.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 675,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-clustering.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "abf077404ecdb75897affedb8db0e2e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-using-probabilities-to-make-predictions.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d91\ntitle: 'Core Learning Algorithms: Using Probabilities to make Predictions'\nchallengeType: 11\nvideoId: fYAYvLUawnc\nbilibiliIds:\naid: 763245369\nbvid: BV1B64y187gE\ncid: 414731624\ndashedName: core-learning-algorithms-using-probabilities-to-make-predictions\n--questions--\n--text--\nWhat TensorFlow module should you import to implement .HiddenMarkovModel()?\n--answers--\ntensorflow.keras\ntensorflow_gpu\ntensorflow_probability\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-using-probabilities-to-make-predictions.md",
      "source_type": "git_repo"
    },
    "token_count": 142,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4b8ed9c806236cfaa67485d00f699d2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-the-training-process.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d8c\ntitle: 'Core Learning Algorithms: The Training Process'\nchallengeType: 11\nvideoId: _cEwvqVoBhI\nbilibiliIds:\naid: 335593652\nbvid: BV12R4y1H7Fi\ncid: 409128047\ndashedName: core-learning-algorithms-the-training-process\n--questions--\n--text--\nWhat are epochs?\n--answers--\nThe number of times the model will see the same data.\nA type of graph.\nThe number of elements you feed to the model at once.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-the-training-process.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ecf8e76e46bc6ba99f4ac64e2921bfd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-training-and-testing-data.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d8b\ntitle: 'Core Learning Algorithms: Training and Testing Data'\nchallengeType: 11\nvideoId: wz9J1slsi7I\nbilibiliIds:\naid: 335509743\nbvid: BV1rA411F7bG\ncid: 409127635\ndashedName: core-learning-algorithms-training-and-testing-data\n--questions--\n--text--\nWhat is categorical data?\n--answers--\nAnother term for one-hot encoding.\nAny data that is not numeric.\nAny data that is represented numerically.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 488,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-training-and-testing-data.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a26a4794a5a02d0b31353576b6afc66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-working-with-data.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d8a\ntitle: 'Core Learning Algorithms: Working with Data'\nchallengeType: 11\nvideoId: u85IOSsJsPI\nbilibiliIds:\naid: 675550447\nbvid: BV1RU4y1w7up\ncid: 409127383\ndashedName: core-learning-algorithms-working-with-data\n--questions--\n--text--\nWhat does the pandas .head() function do?\n--answers--\nReturns the number of entries in a data frame.\nReturns the number of columns in a data frame.\nBy default, shows the first five rows or entries in a data frame.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 543,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms-working-with-data.md",
      "source_type": "git_repo"
    },
    "token_count": 154,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2556ce37b02c2c4a27b0bb8e0a496b04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d89\ntitle: Core Learning Algorithms\nchallengeType: 11\nvideoId: u5lZURgcWnU\nbilibiliIds:\naid: 763034025\nbvid: BV1A64y1a7g4\ncid: 409127051\ndashedName: core-learning-algorithms\n--description--\nThe next few video lessons will reference this Colab notebook.\n--questions--\n--text--\nWhich type of analysis would be best suited for the following problem?:\nYou have the average temperature in the month of March for the last 100 years. Using this data, you want to predict the average temperature in the month of March 5 years from now.\n--answers--\nMultiple regression\nCorrelation\nDecision tree\nLinear regression\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 815,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\core-learning-algorithms.md",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb45f614bd99b4597502c6dd251d83b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\creating-a-convolutional-neural-network.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d98\ntitle: Creating a Convolutional Neural Network\nchallengeType: 11\nvideoId: kfv0K8MtkIc\nbilibiliIds:\naid: 420605824\nbvid: BV1p341127wW\ncid: 409131869\ndashedName: creating-a-convolutional-neural-network\n--questions--\n--text--\nFill in the blanks below to complete the architecture for a convolutional neural network:\npy\nmodel = models.__A__()\nmodel.add(layers.__B__(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(layers.__C__(2, 2))\nmodel.add(layers.__B__(64, (3, 3), activation='relu'))\nmodel.add(layers.__C__(2, 2))\nmodel.add(layers.__B__(32, (3, 3), activation='relu'))\nmodel.add(layers.__C__(2, 2))\n--answers--\nA: Sequential\nB: add\nC: Wrapper\nA: keras\nB: Cropping2D\nC: AlphaDropout\nA: Sequential\nB: Conv2D\nC: MaxPooling2D\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\creating-a-convolutional-neural-network.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c13c23e77647207e0bcb6840d6fb1a48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\introduction-to-tensorflow.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d88\ntitle: Introduction to TensorFlow\nchallengeType: 11\nvideoId: r9hRyGGjOgQ\nbilibiliIds:\naid: 675554869\nbvid: BV1dU4y1w7vw\ncid: 409126541\ndashedName: introduction-to-tensorflow\n--description--\nThe next few video lessons will reference this Colab notebook.\n--questions--\n--text--\nWhich of the following is not a type of tensor?\n--answers--\nVariable\nFlowing\nPlaceholder\nSparseTensor\nConstant\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 611,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\introduction-to-tensorflow.md",
      "source_type": "git_repo"
    },
    "token_count": 144,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2046f8bc2083369cf6520bc838aadf3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\introduction-machine-learning-fundamentals.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d87\ntitle: 'Introduction: Machine Learning Fundamentals'\nchallengeType: 11\nvideoId: KwL1qTR5MT8\nbilibiliIds:\naid: 293071716\nbvid: BV1Yf4y1n7R2\ncid: 409125921\ndashedName: introduction-machine-learning-fundamentals\n--questions--\n--text--\nWhich statement below is false?\n--answers--\nNeural networks are modeled after the way the human brain works.\nComputer programs that play tic-tac-toe or chess against human players are examples of simple artificial intelligence.\nMachine learning is a subset of artificial intelligence.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 616,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\introduction-machine-learning-fundamentals.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0bee9dd9af87d14473097781aaa51afb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\cat-and-dog-image-classifier.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f8dcac417301a38fb92e\ntitle: Cat and Dog Image Classifier\nchallengeType: 10\nforumTopicId: 462377\ndashedName: cat-and-dog-image-classifier\n--description--\nYou will be working on this project with Google Colaboratory After going to that link, create a copy of the notebook either in your own account or locally Once you complete the project and it passes the test (included at that link), submit your project link below If you are submitting a Google Colaboratory link, make sure to turn on link sharing for \"anyone with the link \"\nWe are still developing the interactive instructional content for the machine learning curriculum For now, you can go through the video challenges in this certification You may also have to seek out additional learning resources, similar to what you would do when working on a real-world project --instructions--\nFor this challenge, you will complete the code  to classify images of dogs and cats You will use TensorFlow 2 0 and Keras to create a convolutional neural network that correctly classifies images of cats and dogs at least 63% of the time (Extra credit if you get it to 70% accuracy )\nSome of the code is given to you but some code you must fill in to complete this challenge Read the instruction in each text cell so you will know what you have to do in each code cell The first code cell imports the required libraries The second code cell downloads the data and sets key variables The third cell is the first place you will write your own code The structure of the dataset files that are downloaded looks like this (You will notice that the test directory has no subdirectories and the images are not labeled):\npy\ncats_and_dogs\n|__ train:\n|______ cats: [cat 0 jpg, cat 1 jpg ]\n|______ dogs: [dog 0 jpg, dog 1 jpg ]\n|__ validation:\n|______ cats: [cat 2000 jpg, cat 2001 jpg ]\n|______ dogs: [dog 2000 jpg, dog 2001 jpg ]\n|__ test: [1 jpg, 2 jpg ]\nYou can tweak epochs and batch size if you like, but it is not required The following instructions correspond to specific cell numbers, indicated with a comment at the top of the cell (such as # 3) Cell 3\nNow it is your turn Set each of the variables in this cell correctly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\cat-and-dog-image-classifier.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8f841655470af452ba072dae34d0665a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\cat-and-dog-image-classifier.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[cat 2000 jpg, cat 2001 jpg ] |______ dogs: [dog 2000 jpg, dog 2001 jpg ] |__ test: [1 jpg, 2 jpg ] You can tweak epochs and batch size if you like, but it is not required The following instructions correspond to specific cell numbers, indicated with a comment at the top of the cell (such as # 3) Cell 3 Now it is your turn Set each of the variables in this cell correctly(They should no longer equal None )\nCreate image generators for each of the three image data sets (train, validation, test) Use ImageDataGenerator to read / decode the images and convert them into floating point tensors Use the rescale argument (and no other arguments for now) to rescale the tensors from values between 0 and 255 to values between 0 and 1 For the *_data_gen variables, use the flow_from_directory method Pass in the batch size, directory, target size ((IMG_HEIGHT, IMG_WIDTH)), class mode, and anything else required test_data_gen will be the trickiest one For test_data_gen, make sure to pass in shuffle=False to the flow_from_directory method This will make sure the final predictions stay in the order that our test expects For test_data_gen it will also be helpful to observe the directory structure After you run the code, the output should look like this:\npy\nFound 2000 images belonging to 2 classes Found 1000 images belonging to 2 classes Found 50 images belonging to 1 class Cell 4\nThe plotImages function will be used a few times to plot images It takes an array of images and a probabilities list, although the probabilities list is optional This code is given to you If you created the train_data_gen variable correctly, then running this cell will plot five random training images Cell 5\nRecreate the train_image_generator using ImageDataGenerator Since there are a small number of training examples, there is a risk of overfitting One way to fix this problem is by creating more training data from existing training examples by using random transformations Add 4-6 random transformations as arguments to ImageDataGenerator Make sure to rescale the same as before Cell 6\nYou don't have to do anything for this cell train_data_gen is created just like before but with the new train_image_generator Then, a single image is plotted five different times using different variations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\cat-and-dog-image-classifier.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ca3eb420412c1f2a7fbcc500d2eb3b10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\cat-and-dog-image-classifier.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "there is a risk of overfitting One way to fix this problem is by creating more training data from existing training examples by using random transformations Add 4-6 random transformations as arguments to ImageDataGenerator Make sure to rescale the same as before Cell 6 You don't have to do anything for this cell train_data_gen is created just like before but with the new train_image_generator Then, a single image is plotted five different times using different variationsCell 7\nIn this cell, create a model for the neural network that outputs class probabilities It should use the Keras Sequential model It will probably involve a stack of Conv2D and MaxPooling2D layers and then a fully connected layer on top that is activated by a ReLU activation function Compile the model passing the arguments to set the optimizer and loss Also pass in metrics=['accuracy'] to view training and validation accuracy for each training epoch Cell 8\nUse the fit method on your model to train the network Make sure to pass in arguments for x, steps_per_epoch, epochs, validation_data, and validation_steps Cell 9\nRun this cell to visualize the accuracy and loss of the model Cell 10\nNow it is time to use your model to predict whether a brand new image is a cat or a dog In this cell, get the probability that each test image (from test_data_gen) is a dog or a cat probabilities should be a list of integers Call the plotImages function and pass in the test images and the probabilities corresponding to each test image After you run the cell, you should see all 50 test images with a label showing the percentage of \"sure\" that the image is a cat or a dog The accuracy will correspond to the accuracy shown in the graph above (after running the previous cell) More training images could lead to a higher accuracy Cell 11\nRun this final cell to see if you passed the challenge or if you need to keep trying --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\machine-learning-with-python-projects\\cat-and-dog-image-classifier.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c152b48f1fe5ee3055716b7d5360eab1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-building-the-model.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da1\ntitle: 'Natural Language Processing With RNNs: Building the Model'\nchallengeType: 11\nvideoId: 32WBFS7lfsw\nbilibiliIds:\naid: 848015573\nbvid: BV1YL4y1a7WS\ncid: 409138016\ndashedName: natural-language-processing-with-rnns-building-the-model\n--questions--\n--text--\nFill in the blanks below to complete the build_model function:\npy\ndef build_mode(vocab_size, embedding_dim, rnn_units, batch_size):\nmodel = tf.keras.Sequential([\ntf.keras.layers.Embedding(vocab_size,\nembedding_dim,\nbatch_input_shape=[batch_size, None]),\ntf.keras.layers.__A__(rnn_units,\nreturn_sequences=__B__,\nrecurrent_initializer='glorot_uniform),\ntf.keras.layers.Dense(__C__)\n])\n__D__\n--answers--\nA: ELU\nB: True\nC: vocab_size\nD: return model\nA: LSTM\nB: False\nC: batch_size\nD: return model\nA: LSTM\nB: True\nC: vocab_size\nD: return model\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1101,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-building-the-model.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "589102b649b3e436091b6e7f28ac09b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-create-a-play-generator.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da0\ntitle: 'Natural Language Processing With RNNs: Create a Play Generator'\nchallengeType: 11\nvideoId: j5xsxjq_Xk8\nbilibiliIds:\naid: 720525759\nbvid: BV1xQ4y1r7tw\ncid: 409137674\ndashedName: natural-language-processing-with-rnns-create-a-play-generator\n--questions--\n--text--\nFill in the blanks below to create the training examples for the RNN:\npy\nchar_dataset = tf.data.__A__.__B__(text_as_int)\n--answers--\nA: Dataset\nB: from_tensor_slices\nA: data\nB: from_tensors\nA: DataSet\nB: from_generator\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 607,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-create-a-play-generator.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "dc00cf6fffeb3d6cfe71afbf2876eb4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-making-predictions.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d9f\ntitle: 'Natural Language Processing With RNNs: Making Predictions'\nchallengeType: 11\nvideoId: WO1hINnBj20\nbilibiliIds:\naid: 848023400\nbvid: BV1WL4y1a75i\ncid: 409136303\ndashedName: natural-language-processing-with-rnns-making-predictions\n--questions--\n--text--\nBefore you make a prediction with your own review, you should...:\n--answers--\ndecode the training dataset and compare the results to the test data.\nuse the encodings from the training dataset to encode your review.\nassign random values between 0 and the maximum number of vocabulary in your dataset to each word in your review.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 683,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-making-predictions.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5e30ef9aa2adbd570149b56833f314dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-recurring-neural-networks.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d9d\ntitle: 'Natural Language Processing With RNNs: Recurring Neural Networks'\nchallengeType: 11\nvideoId: bX5681NPOcA\nbilibiliIds:\naid: 335605808\nbvid: BV1SR4y1H7ri\ncid: 409135641\ndashedName: natural-language-processing-with-rnns-recurring-neural-networks\n--questions--\n--text--\nWhat is true about Recurrent Neural Networks?\n--answers--\n1: They are a type of feed-forward neural network.\n2: They maintain an internal memory/state of the input that was already processed.\n3: RNN's contain a loop and process one piece of input at a time.\n4: Both 2 and 3.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-recurring-neural-networks.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "914b51687181802559fdb16308d94097",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-part-2.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d9c\ntitle: 'Natural Language Processing With RNNs: Part 2'\nchallengeType: 11\nvideoId: mUU9YXOFbZg\nbilibiliIds:\naid: 975558435\nbvid: BV1L44y1b7Lp\ncid: 409135242\ndashedName: natural-language-processing-with-rnns-part-2\n--questions--\n--text--\nWord embeddings are...:\n--answers--\nan unordered group of encoded words that describes the frequency of words in a given document.\na group of encoded words that preserves the original order of the words in a given document.\na vectorized representation of words in a given document that places words with similar meanings near each other.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-part-2.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b4dace4451be90b804c2be8dfc700df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-sentimental-analysis.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d9e\ntitle: 'Natural Language Processing With RNNs: Sentiment Analysis'\nchallengeType: 11\nvideoId: lYeLtu8Nq7c\nbilibiliIds:\naid: 933111408\nbvid: BV1TM4y137VB\ncid: 409135996\ndashedName: natural-language-processing-with-rnns-sentiment-analysis\n--questions--\n--text--\nFill in the blanks below to create the model for the RNN:\npy\nmodel = __A__.keras.Sequential([\n__A__.keras.layers.__B__(88584, 32),\n__A__.keras.layers.__C__(32),\n__A__.keras.layers.Dense(1, activation='sigmoid')\n])\n--answers--\nA: tensor_flow\nB: embedding\nC: LSTM\nA: tf\nB: Embedding\nC: AlphaDropout\nA: tf\nB: Embedding\nC: LSTM\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-sentimental-analysis.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "840215a6fe8a16734f7e90432050a782",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d9b\ntitle: Natural Language Processing With RNNs\nchallengeType: 11\nvideoId: ZyCaF5S-lKg\nbilibiliIds:\naid: 548105306\nbvid: BV1nq4y1K7VU\ncid: 409134745\ndashedName: natural-language-processing-with-rnns\n--description--\nThe next few video lessons will reference this Colab notebook.\n--questions--\n--text--\nNatural Language Processing is a branch of artificial intelligence that...:\n--answers--\ndeals with how computers understand and process natural/human languages.\ntranslates image data into natural/human languages.\nis focused on translating computer languages into natural/human languages.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "09709ff87f0c37520adcb4bf63435610",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-activation-functions.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d93\ntitle: 'Neural Networks: Activation Functions'\nchallengeType: 11\nvideoId: S45tqW6BqRs\nbilibiliIds:\naid: 675610466\nbvid: BV1wU4y1A7TJ\ncid: 409130203\ndashedName: neural-networks-activation-functions\n--questions--\n--text--\nWhich activation function squishes values between -1 and 1?\n--answers--\nReLU (Rectified Linear Unit)\nTanh (Hyperbolic Tangent)\nSigmoid\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-activation-functions.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "527f902e28eaec669d36f3ef99ebd881",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-training-the-model.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da2\ntitle: 'Natural Language Processing With RNNs: Training the Model'\nchallengeType: 11\nvideoId: hEUiK7j9UI8\nbilibiliIds:\naid: 250542136\nbvid: BV19v411w7Fi\ncid: 409138327\ndashedName: natural-language-processing-with-rnns-training-the-model\n--questions--\n--text--\nFill in the blanks below to save your model's checkpoints in the ./checkpoints directory and call the latest checkpoint for training:\n```py\ncheckpoint_dir = A\ncheckpoint_prefix = os.path.join(checkpoint_dir, 'ckpt_{epoch}')\ncheckpoint_callback = tf.keras.callbacks.B(\nfilepath=checkpoint_prefix,\nsave_weights_only=True\n)\nhistory = model.fit(data, epochs=2, callbacks=[C])\n```\n--answers--\nA: './training_checkpoints'\nB: ModelCheckpoint\nC: checkpoint_prefix\nA: './checkpoints'\nB: ModelCheckpoint\nC: checkpoint_callback\nA: './checkpoints'\nB: BaseLogger\nC: checkpoint_callback\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 977,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\natural-language-processing-with-rnns-training-the-model.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e1f3d3310dd3fe0af4ab75f26ed34d98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-creating-a-model.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d95\ntitle: 'Neural Networks: Creating a Model'\nchallengeType: 11\nvideoId: K8bz1bmOCTw\nbilibiliIds:\naid: 848109040\nbvid: BV1EL4y1878f\ncid: 409130886\ndashedName: neural-networks-creating-a-model\n--questions--\n--text--\nFill in the blanks below to build a sequential model of dense layers:\npy\nmodel = __A__.__B__([\n__A__.layers.Flatten(input_shape=(28, 28)),\n__A__.layers.__C__(128, activation='relu'),\n__A__.layers.__C__(10, activation='softmax')\n])\n--answers--\nA: keras\nB: Sequential\nC: Dense\nA: tf\nB: Sequential\nC: Categorical\nA: keras\nB: sequential\nC: dense\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-creating-a-model.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6c2da20636980881a4f57b44a46e079d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-optimizers.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d94\ntitle: 'Neural Networks: Optimizers'\nchallengeType: 11\nvideoId: hdOtRPQe1o4\nbilibiliIds:\naid: 763064173\nbvid: BV1364y1a7eM\ncid: 409130557\ndashedName: neural-networks-optimizers\n--questions--\n--text--\nWhat is an optimizer function?\n--answers--\nA function that increases the accuracy of a model's predictions.\nA function that implements the gradient descent and backpropagation algorithms for you.\nA function that reduces the time a model needs to train.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 548,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-optimizers.md",
      "source_type": "git_repo"
    },
    "token_count": 153,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c50830261cb19138c05183092c32893f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-with-tensorflow.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e8f2f13c4cdbe86b5c72d92\ntitle: Neural Networks with TensorFlow\nchallengeType: 11\nvideoId: uisdfrNrZW4\nbilibiliIds:\naid: 378031840\nbvid: BV1Qf4y1c7Dc\ncid: 409129888\ndashedName: neural-networks-with-tensorflow\n--description--\nThe next few video lessons will reference this Colab notebook.\n--questions--\n--text--\nA densely connected neural network is one in which...:\n--answers--\nall the neurons in the current layer are connected to one neuron in the previous layer.\nall the neurons in each layer are connected randomly.\nall the neurons in the current layer are connected to every neuron in the previous layer.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 793,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\neural-networks-with-tensorflow.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fbb911a14f34f67105e74bedb5d44fe3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\reinforcement-learning-with-q-learning-example.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da5\ntitle: 'Reinforcement Learning With Q-Learning: Example'\nchallengeType: 11\nvideoId: RBBSNta234s\nbilibiliIds:\naid: 848073871\nbvid: BV1uL4y187Eq\ncid: 409139471\ndashedName: reinforcement-learning-with-q-learning-example\n--questions--\n--text--\nFill in the blanks to complete the following Q-Learning equation:\npy\nQ[__A__, __B__] = Q[__A__, __B__] + LEARNING_RATE * (reward + GAMMA * np.max(Q[__C__, :]) - Q[__A__, __B__])\n--answers--\nA: state\nB: action\nC: next_state\nA: state\nB: action\nC: prev_state\nA: state\nB: reaction\nC: next_state\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 658,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\reinforcement-learning-with-q-learning-example.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13b8be05b35aa08c75126bec9e878966",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\reinforcement-learning-with-q-learning-part-2.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da4\ntitle: 'Reinforcement Learning With Q-Learning: Part 2'\nchallengeType: 11\nvideoId: DX7hJuaUZ7o\nbilibiliIds:\naid: 420570359\nbvid: BV1G341127zr\ncid: 409139190\ndashedName: reinforcement-learning-with-q-learning-part-2\n--questions--\n--text--\nWhat can happen if the agent does not have a good balance of taking random actions and using learned actions?\n--answers--\nThe agent will always try to minimize its reward for the current state/action, leading to local minima.\nThe agent will always try to maximize its reward for the current state/action, leading to local maxima.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 657,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\reinforcement-learning-with-q-learning-part-2.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "89e19ac376b7f797145b2c7d694212f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\reinforcement-learning-with-q-learning.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e8f2f13c4cdbe86b5c72da3\ntitle: Reinforcement Learning With Q-Learning\nchallengeType: 11\nvideoId: Cf7DSU0gVb4\nbilibiliIds:\naid: 463025802\nbvid: BV1iL411x7L6\ncid: 409138811\ndashedName: reinforcement-learning-with-q-learning\n--description--\nThe next few video lessons will reference this Colab notebook.\n--questions--\n--text--\nThe key components of reinforcement learning are...\n--answers--\nenvironment, representative, state, reaction, and reward.\nenvironment, agent, state, action, and reward.\nhabitat, agent, state, action, and punishment.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 724,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\11-machine-learning-with-python\\tensorflow\\reinforcement-learning-with-q-learning.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "10bab00a50b08abee7846160bc8f438e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-bubble-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 8d5123c8c441eddfaeb5bdef\ntitle: Implement Bubble Sort\nchallengeType: 1\nforumTopicId: 301612\ndashedName: implement-bubble-sort\n--description--\nThis is the first of several challenges on sorting algorithms Given an array of unsorted items, we want to be able to return a sorted array We will see several different methods to do this and learn some tradeoffs between these different approaches While most modern languages have built-in sorting methods for operations like this, it is still important to understand some of the common basic approaches and learn how they can be implemented Here we will see bubble sort The bubble sort method starts at the beginning of an unsorted array and 'bubbles up' unsorted values towards the end, iterating through the array until it is completely sorted It does this by comparing adjacent items and swapping them if they are out of order The method continues looping through the array until no swaps occur at which point the array is sorted This method requires multiple iterations through the array and for average and worst cases has quadratic time complexity While simple, it is usually impractical in most situations Instructions: Write a function bubbleSort which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest --hints--\nbubbleSort should be a function js\nassert isFunction(bubbleSort);\nbubbleSort should return a sorted array (least to greatest) js\nfunction isSorted(a){\nfor(let i = 0; i < a length - 1; i++)\nif(a[i] > a[i + 1])\nreturn false;\nreturn true;\n}\nassert isTrue(\nisSorted(\nbubbleSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n])\n)\n);\nbubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-bubble-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9b0c7ad541755ed77b4cf8dad0c49648",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-bubble-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "be a function js assert isFunction(bubbleSort); bubbleSort should return a sorted array (least to greatest) js function isSorted(a){ for(let i = 0; i < a length - 1; i++) if(a[i] > a[i + 1]) return false; return true; } assert isTrue( isSorted( bubbleSort([ 1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92 ]) ) ); bubbleSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js assertsameMembers(\nbubbleSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n]),\n[1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]\n);\nbubbleSort should not use the built-in sort() method js\nfunction isBuiltInSortUsed(){\nlet sortUsed = false;\nconst temp = Array prototype sort;\nArray prototype sort = () => sortUsed = true;\ntry {\nbubbleSort([0, 1]);\n} finally {\nArray prototype sort = temp;\n}\nreturn sortUsed;\n}\nassert isFalse(isBuiltInSortUsed());\n--seed--\n--seed-contents--\njs\nfunction bubbleSort(array) {\n// Only change code below this line\nreturn array;\n// Only change code above this line\n}\n--solutions--\njs\nfunction bubbleSort(array) {\nfor (let i = 0; i < array length; i++) {\nlet swapped = false;\nfor (let j = 1; j < array length; j++) {\nif (array[j - 1] > array[j]) {\nlet temp = array[j-1];\narray[j-1] =  array[j];\narray[j] = temp;\nswapped = true;\n}\n}\nif (swapped === false) {\nbreak;\n}\n}\nreturn array;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-bubble-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4a13cf07a364e6b4b1c59c13366f5345",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-insertion-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8259367417b2b2512c86\ntitle: Implement Insertion Sort\nchallengeType: 1\nforumTopicId: 301613\ndashedName: implement-insertion-sort\n--description--\nThe next sorting method we'll look at is insertion sort This method works by building up a sorted array at the beginning of the list It begins the sorted array with the first element Then it inspects the next element and swaps it backwards into the sorted array until it is in sorted position It continues iterating through the list and swapping new items backwards into the sorted portion until it reaches the end This algorithm has quadratic time complexity in the average and worst cases Instructions: Write a function insertionSort which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest --hints--\ninsertionSort should be a function js\nassert isFunction(insertionSort);\ninsertionSort should return a sorted array (least to greatest) js\nfunction isSorted(a){\nfor(let i = 0; i < a length - 1; i++)\nif(a[i] > a[i + 1])\nreturn false;\nreturn true;\n}\nassert isTrue(\nisSorted(\ninsertionSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n])\n)\n);\ninsertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js\nassert sameMembers(\ninsertionSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n]),\n[1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]\n);\ninsertionSort([5, 4, 33, 2, 8]) should return [2, 4, 5, 8, 33] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-insertion-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4fa6967e31a072c1af477a04562c6489",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-insertion-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "63, 123, 43, 2, 55, 1, 234, 92 ]) ) ); insertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js assert sameMembers( insertionSort([ 1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92 ]), [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92] ); insertionSort([5, 4, 33, 2, 8]) should return [2, 4, 5, 8, 33] js assertdeepEqual(insertionSort([5, 4, 33, 2, 8]), [2, 4, 5, 8, 33])\ninsertionSort should not use the built-in sort() method js\nfunction isBuiltInSortUsed(){\nlet sortUsed = false;\nconst temp = Array prototype sort;\nArray prototype sort = () => sortUsed = true;\ntry {\ninsertionSort([0, 1]);\n} finally {\nArray prototype sort = temp;\n}\nreturn sortUsed;\n}\nassert isFalse(isBuiltInSortUsed());\n--seed--\n--seed-contents--\njs\nfunction insertionSort(array) {\n// Only change code below this line\nreturn array;\n// Only change code above this line\n}\n--solutions--\njs\nfunction insertionSort (array) {\nfor (let currentIndex = 0; currentIndex < array length; currentIndex++) {\nlet current = array[currentIndex];\nlet j = currentIndex - 1;\nwhile (j > -1 && array[j] > current) {\narray[j + 1] = array[j];\nj--;\n}\narray[j + 1] = current;\n}\nreturn array;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-insertion-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dfab1af4b07f455108704a1574f166ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-merge-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825c367417b2b2512c8f\ntitle: Implement Merge Sort\nchallengeType: 1\nforumTopicId: 301614\ndashedName: implement-merge-sort\n--description--\nAnother common intermediate sorting algorithm is merge sort Like quick sort, merge sort also uses a divide-and-conquer, recursive methodology to sort an array It takes advantage of the fact that it is relatively easy to sort two arrays as long as each is sorted in the first place But we'll start with only one array as input, so how do we get to two sorted arrays from that Well, we can recursively divide the original input in two until we reach the base case of an array with one item A single-item array is naturally sorted, so then we can start combining This combination will unwind the recursive calls that split the original array, eventually producing a final sorted array of all the elements The steps of merge sort, then, are:\n1) Recursively split the input array in half until a sub-array with only one element is produced 2) Merge each sorted sub-array together to produce the final sorted array Merge sort is an efficient sorting method, with time complexity of O(nlog(n)) This algorithm is popular because it is performant and relatively easy to implement As an aside, this will be the last sorting algorithm we cover here However, later in the section on tree data structures we will describe heap sort, another efficient sorting method that requires a binary heap in its implementation Instructions: Write a function mergeSort which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest A good way to implement this is to write one function, for instance merge, which is responsible for merging two sorted arrays, and another function, for instance mergeSort, which is responsible for the recursion that produces single-item arrays to feed into merge Good luck --hints--\nmergeSort should be a function js\nassert isFunction(mergeSort);\nmergeSort should return a sorted array (least to greatest) js\nfunction isSorted(a){\nfor(let i = 0; i < a length - 1; i++)\nif(a[i] > a[i + 1])\nreturn false;\nreturn true;\n}\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-merge-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a6bcd2ce3cbce7b7908602b654633828",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-merge-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for instance merge, which is responsible for merging two sorted arrays, and another function, for instance mergeSort, which is responsible for the recursion that produces single-item arrays to feed into merge Good luck --hints-- mergeSort should be a function js assert isFunction(mergeSort); mergeSort should return a sorted array (least to greatest) js function isSorted(a){ for(let i = 0; i < a length - 1; i++) if(a[i] > a[i + 1]) return false; return true; } assertisTrue(\nisSorted(\nmergeSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n])\n)\n);\nmergeSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js\nassert sameMembers(\nmergeSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n]),\n[1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]\n);\nmergeSort should not use the built-in sort() method js\nfunction isBuiltInSortUsed(){\nlet sortUsed = false;\nconst temp = Array prototype sort;\nArray prototype sort = () => sortUsed = true;\ntry {\nmergeSort([0, 1]);\n} finally {\nArray prototype sort = temp;\n}\nreturn sortUsed;\n}\nassert isFalse(isBuiltInSortUsed());\n--seed--\n--seed-contents--\njs\nfunction mergeSort(array) {\n// Only change code below this line\nreturn array;\n// Only change code above this line\n}\n--solutions--\n```js\nfunction mergeSort(array) {\nif (array length === 1) {\nreturn array;\n} else {\nconst splitIndex = Math floor(array length / 2);\nreturn merge(\nmergeSort(array slice(0, splitIndex)),\nmergeSort(array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-merge-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "59f11263e16ddbb52a1279190dc53a31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-merge-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() => sortUsed = true; try { mergeSort([0, 1]); } finally { Array prototype sort = temp; } return sortUsed; } assert isFalse(isBuiltInSortUsed()); --seed-- --seed-contents-- js function mergeSort(array) { // Only change code below this line return array; // Only change code above this line } --solutions-- ```js function mergeSort(array) { if (array length === 1) { return array; } else { const splitIndex = Math floor(array length / 2); return merge( mergeSort(array slice(0, splitIndex)), mergeSort(arrayslice(splitIndex))\n);\n}\n// Merge two sorted arrays\nfunction merge(array1, array2) {\nlet merged = [];\nwhile (array1 length && array2 length) {\nif (array1[0] < array2[0]) {\nmerged push(array1 shift());\n} else if (array1[0] > array2[0]) {\nmerged push(array2 shift());\n} else {\nmerged push(array1 shift(), array2 shift());\n}\n}\n// After looping ends, one array is empty, and other array contains only\n// values greater than all values in `merged`\nreturn [ merged, array1, array2];\n}\n}\nmergeSort([1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-merge-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1d6801e63ad97893d557ff358d41960f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: a3f503de51cf954ede28891d\ntitle: Find the Symmetric Difference\nchallengeType: 1\nforumTopicId: 301611\ndashedName: find-the-symmetric-difference\n--description--\nThe mathematical term symmetric difference (△ or ⊕) of two sets is the set of elements which are in either of the two sets but not in both For example, for sets A = {1, 2, 3} and B = {2, 3, 4}, A △ B = {1, 4} Symmetric difference is a binary operation, which means it operates on only two elements So to evaluate an expression involving symmetric differences among three elements (A △ B △ C), you must complete one operation at a time Thus, for sets A and B above, and C = {2, 3}, A △ B △ C = (A △ B) △ C = {1, 4} △ {2, 3} = {1, 2, 3, 4} --instructions--\nCreate a function that takes two or more arrays and returns an array of their symmetric difference The returned array must contain only unique values (no duplicates) --hints--\nsym([1, 2, 3], [5, 2, 1, 4]) should return [3, 4, 5] js\nassert sameMembers(sym([1, 2, 3], [5, 2, 1, 4]), [3, 4, 5]);\nsym([1, 2, 3], [5, 2, 1, 4]) should contain only three elements js\nassert equal(sym([1, 2, 3], [5, 2, 1, 4]) length, 3);\nsym([1, 2, 3, 3], [5, 2, 1, 4]) should return [3, 4, 5] js\nassert sameMembers(sym([1, 2, 3, 3], [5, 2, 1, 4]), [3, 4, 5]);\nsym([1, 2, 3, 3], [5, 2, 1, 4]) should contain only three elements js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a60d405f95078eb2d7e49d5327a4f1cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js assert sameMembers(sym([1, 2, 3], [5, 2, 1, 4]), [3, 4, 5]); sym([1, 2, 3], [5, 2, 1, 4]) should contain only three elements js assert equal(sym([1, 2, 3], [5, 2, 1, 4]) length, 3); sym([1, 2, 3, 3], [5, 2, 1, 4]) should return [3, 4, 5] js assert sameMembers(sym([1, 2, 3, 3], [5, 2, 1, 4]), [3, 4, 5]); sym([1, 2, 3, 3], [5, 2, 1, 4]) should contain only three elements js assertequal(sym([1, 2, 3, 3], [5, 2, 1, 4]) length, 3);\nsym([1, 2, 3], [5, 2, 1, 4, 5]) should return [3, 4, 5] js\nassert sameMembers(sym([1, 2, 3], [5, 2, 1, 4, 5]), [3, 4, 5]);\nsym([1, 2, 3], [5, 2, 1, 4, 5]) should contain only three elements js\nassert equal(sym([1, 2, 3], [5, 2, 1, 4, 5]) length, 3);\nsym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should return [1, 4, 5] js\nassert sameMembers(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]), [1, 4, 5]);\nsym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should contain only three elements js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "0d964752620edbad9107dde5d6c33b21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2, 1, 4, 5]), [3, 4, 5]); sym([1, 2, 3], [5, 2, 1, 4, 5]) should contain only three elements js assert equal(sym([1, 2, 3], [5, 2, 1, 4, 5]) length, 3); sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should return [1, 4, 5] js assert sameMembers(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]), [1, 4, 5]); sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should contain only three elements js assertequal(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) length, 3);\nsym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should return [1, 4, 5] js\nassert sameMembers(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]), [1, 4, 5]);\nsym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should contain only three elements js\nassert equal(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) length, 3);\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should return [2, 3, 4, 6, 7] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "4a7d0840609217225b7709ba70c23c30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "5] js assert sameMembers(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]), [1, 4, 5]); sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should contain only three elements js assert equal(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) length, 3); sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should return [2, 3, 4, 6, 7] js assertsameMembers(\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]),\n[2, 3, 4, 6, 7]\n);\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should contain only five elements js\nassert equal(\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) length,\n5\n);\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should return [1, 2, 4, 5, 6, 7, 8, 9] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "8980d6173e4addfb8d912ee2a1ae3242",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should contain only five elements js assert equal( sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) length, 5 ); sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should return [1, 2, 4, 5, 6, 7, 8, 9] js assertsameMembers(\nsym(\n[3, 3, 3, 2, 5],\n[2, 1, 5, 7],\n[3, 4, 6, 6],\n[1, 2, 3],\n[5, 3, 9, 8],\n[1]\n),\n[1, 2, 4, 5, 6, 7, 8, 9]\n);\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should contain only eight elements js\nassert equal(\nsym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) length,\n8\n);\n--seed--\n--seed-contents--\n```js\nfunction sym(args) {\nreturn args;\n}\nsym([1, 2, 3], [5, 2, 1, 4]);\n```\n--solutions--\njs\nfunction sym() {\nvar arrays = [] slice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "fea4d10058c929524cd50eaeccc699e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should contain only eight elements js assert equal( sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) length, 8 ); --seed-- --seed-contents-- ```js function sym(args) { return args; } sym([1, 2, 3], [5, 2, 1, 4]); ``` --solutions-- js function sym() { var arrays = [] slicecall(arguments);\nreturn arrays reduce(function (symDiff, arr) {\nreturn symDiff concat(arr) filter(function (val, idx, theArr) {\nreturn theArr indexOf(val) === idx\n&& (symDiff indexOf(val) === -1 || arr indexOf(val) === -1);\n});\n});\n}\nsym([1, 2, 3], [5, 2, 1, 4]);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\find-the-symmetric-difference.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "72bd6ff38e58eb15428b719d2f2f7572",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-quick-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825a367417b2b2512c89\ntitle: Implement Quick Sort\nchallengeType: 1\nforumTopicId: 301615\ndashedName: implement-quick-sort\n--description--\nHere we will move on to an intermediate sorting algorithm: quick sort Quick sort is an efficient, recursive divide-and-conquer approach to sorting an array In this method, a pivot value is chosen in the original array The array is then partitioned into two subarrays of values less than and greater than the pivot value We then combine the result of recursively calling the quick sort algorithm on both sub-arrays This continues until the base case of an empty or single-item array is reached, which we return The unwinding of the recursive calls return us the sorted array Quick sort is a very efficient sorting method, providing O(nlog(n)) performance on average It is also relatively easy to implement These attributes make it a popular and useful sorting method Instructions: Write a function quickSort which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest While the choice of the pivot value is important, any pivot will do for our purposes here For simplicity, the first or last element could be used --hints--\nquickSort should be a function js\nassert(typeof quickSort == 'function');\nquickSort should return a sorted array (least to greatest) js\nfunction isSorted(a){\nfor(let i = 0; i < a length - 1; i++)\nif(a[i] > a[i + 1])\nreturn false;\nreturn true;\n}\nassert isTrue(\nisSorted(\nquickSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n])\n)\n);\nquickSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-quick-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1e56675705852e6935aed0c325d1b153",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-quick-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "function js assert(typeof quickSort == 'function'); quickSort should return a sorted array (least to greatest) js function isSorted(a){ for(let i = 0; i < a length - 1; i++) if(a[i] > a[i + 1]) return false; return true; } assert isTrue( isSorted( quickSort([ 1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92 ]) ) ); quickSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js assertsameMembers(\nquickSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n]),\n[1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]\n);\nquickSort should not use the built-in sort() method js\nfunction isBuiltInSortUsed(){\nlet sortUsed = false;\nconst temp = Array prototype sort;\nArray prototype sort = () => sortUsed = true;\ntry {\nquickSort([0, 1]);\n} finally {\nArray prototype sort = temp;\n}\nreturn sortUsed;\n}\nassert isFalse(isBuiltInSortUsed());\n--seed--\n--seed-contents--\njs\nfunction quickSort(array) {\n// Only change code below this line\nreturn array;\n// Only change code above this line\n}\n--solutions--\n```js\nfunction quickSort(array) {\nif (array length === 0) {\nreturn [];\n} else {\nconst pivotValue = array[0];\n// Sort elements into three piles\nlet lesser = [];\nlet equal = [];\nlet greater = [];\nfor (let e of array) {\nif (e < pivotValue) {\nlesser push(e);\n} else if (e > pivotValue) {\ngreater push(e);\n} else {\nequal push(e);\n}\n}\nreturn [ quickSort(lesser), equal,",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-quick-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "dbf003a7365d16decd5a20bd799f7fbc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-quick-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "code above this line } --solutions-- ```js function quickSort(array) { if (array length === 0) { return []; } else { const pivotValue = array[0]; // Sort elements into three piles let lesser = []; let equal = []; let greater = []; for (let e of array) { if (e < pivotValue) { lesser push(e); } else if (e > pivotValue) { greater push(e); } else { equal push(e); } } return [ quickSort(lesser), equal,quickSort(greater)];\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3187,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-quick-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1d9d626362ae5e164441d388edba2d08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 61abc7ebf3029b56226de5b6\ntitle: Implement Binary Search\nchallengeType: 1\nforumTopicId: 487618\ndashedName: implement-binary-search\n--description--\nBinary search is an O(log(n)) efficiency algorithm for searching a sorted array to find an element It operates using the following steps:\nFind the middle value of a sorted array If value == target return true (The value has been found and the search is complete) If middle value < target, search right half of array in next compare If middle value > target, search left half of array in next compare If after searching the whole array the value is not present, return false (The array has been searched and the value is not in the array) As you can see, you are successively halving an array, which gives you the log(n) efficiency For this challenge, we want you to show your work - how you got to the target value the path you took --instructions--\nWrite a function binarySearch that implements the binary search algorithm on an array, returning the path you took (each middle value comparison) to find the target in an array The function takes a sorted array of integers and a target value as input It returns an array containing (in-order) the middle value you found at each halving of the original array until you found the target value The target value should be the last element of the returned array If the value is not found, return the string Value Not Found For example, binarySearch([1,2,3,4,5,6,7], 5) would return [4,6,5] For this challenge, when halving, you MUST use Math floor() when doing division: Math floor(x/2) This will give a consistent, testable path Note: The following array will be used in tests:\njs\nconst testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\n--hints--\nbinarySearch should be a function js\nassert isFunction(binarySearch);\nbinarySearch(testArray, 0) should return [13, 5, 2, 0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "25ce841761d97491c132115e147ab99f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "challenge, when halving, you MUST use Math floor() when doing division: Math floor(x/2) This will give a consistent, testable path Note: The following array will be used in tests: js const testArray = [ 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; --hints-- binarySearch should be a function js assert isFunction(binarySearch); binarySearch(testArray, 0) should return [13, 5, 2, 0]js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert deepEqual(binarySearch(_testArray, 0), [13, 5, 2, 0]);\nbinarySearch(testArray, 1) should return [13, 5, 2, 0, 1] js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert deepEqual(binarySearch(_testArray, 1), [13, 5, 2, 0, 1]);\nbinarySearch(testArray, 2) should return [13, 5, 2] js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "23fdfdddbfd25b58677bd6f836764f2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js const _testArray = [ 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; assert deepEqual(binarySearch(_testArray, 1), [13, 5, 2, 0, 1]); binarySearch(testArray, 2) should return [13, 5, 2] js const _testArray = [ 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; assertdeepEqual(binarySearch(_testArray, 2), [13, 5, 2]);\nbinarySearch(testArray, 6) should return the string Value Not Found js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert strictEqual(binarySearch(_testArray, 6), 'Value Not Found');\nbinarySearch(testArray, 11) should return [13, 5, 10, 11] js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert deepEqual(binarySearch(_testArray, 11), [13, 5, 10, 11])\nbinarySearch(testArray, 13) should return [13]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "29c2b7c708aabf3c5f28855971c0fac2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; assert strictEqual(binarySearch(_testArray, 6), 'Value Not Found'); binarySearch(testArray, 11) should return [13, 5, 10, 11] js const _testArray = [ 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; assert deepEqual(binarySearch(_testArray, 11), [13, 5, 10, 11]) binarySearch(testArray, 13) should return [13]js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert deepEqual(binarySearch(_testArray, 13), [13]);\nbinarySearch(testArray, 70) should return [13, 19, 22, 49, 70] js\nconst _testArray = [\n0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n23, 49, 70\n];\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "657e0db0d97050c4cec12404b783e598",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return [13]js const _testArray = [ 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; assert deepEqual(binarySearch(_testArray, 13), [13]); binarySearch(testArray, 70) should return [13, 19, 22, 49, 70] js const _testArray = [ 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 70 ]; assertdeepEqual(binarySearch(_testArray, 70), [13, 19, 22, 49, 70]);\n--seed--\n--seed-contents--\njs\nfunction binarySearch(searchList, value) {\nlet arrayPath = [];\nreturn arrayPath;\n}\n--solutions--\n```js\nlet binarySearch = (searchList, value) => {\nlet arrayPath = [];\n// set initial L - M - R\nlet left = 0;\nlet right = searchList length - 1;\nlet middle = Math floor(right / 2);\n// if first comparison finds value\nif (searchList[middle] == value) {\narrayPath push(searchList[middle]);\nreturn arrayPath;\n}\nwhile (searchList[middle] == value) {\n// add to output array\narrayPath push(searchList[middle]);\n// not found\nif (right < left) {\nreturn 'Value Not Found';\n}\n// value is in left or right portion of array\n// update L - M - R\nif (searchList[middle] > value) {\nright = middle - 1;\nmiddle = left + Math floor((right - left) / 2);\n} else {\nleft = middle + 1;\nmiddle = left + Math floor((right - left) / 2);\n}\n// if found update output array and exit\nif (searchList[middle] == value) {\narrayPath",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "a2b19611cb840d096c40a619a8f8c5ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return 'Value Not Found'; } // value is in left or right portion of array // update L - M - R if (searchList[middle] > value) { right = middle - 1; middle = left + Math floor((right - left) / 2); } else { left = middle + 1; middle = left + Math floor((right - left) / 2); } // if found update output array and exit if (searchList[middle] == value) { arrayPathpush(searchList[middle]);\nbreak;\n}\n}\nreturn arrayPath;\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-binary-search.md",
      "source_type": "git_repo"
    },
    "token_count": 121,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "14ada28e4b3eed06c38206a2dbb61833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-selection-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8259367417b2b2512c85\ntitle: Implement Selection Sort\nchallengeType: 1\nforumTopicId: 301616\ndashedName: implement-selection-sort\n--description--\nHere we will implement selection sort Selection sort works by selecting the minimum value in a list and swapping it with the first value in the list It then starts at the second position, selects the smallest value in the remaining list, and swaps it with the second element It continues iterating through the list and swapping elements until it reaches the end of the list Now the list is sorted Selection sort has quadratic time complexity in all cases Instructions: Write a function selectionSort which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest --hints--\nselectionSort should be a function js\nassert isFunction(selectionSort);\nselectionSort should return a sorted array (least to greatest) ```js\nfunction isSorted(a){\nfor(let i = 0; i < a length - 1; i++)\nif(a[i] > a[i + 1])\nreturn false;\nreturn true;\n}\nassert isTrue(\nisSorted(\nselectionSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n])\n)\n);\n```\nselectionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92]) should return an array that is unchanged except for order js\nassert sameMembers(\nselectionSort([\n1,\n4,\n2,\n8,\n345,\n123,\n43,\n32,\n5643,\n63,\n123,\n43,\n2,\n55,\n1,\n234,\n92\n]),\n[1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]\n);\nselectionSort should not use the built-in sort() method js\nfunction isBuiltInSortUsed(){\nlet sortUsed = false;\nconst temp = Array prototype sort;\nArray prototype sort = () => sortUsed = true;\ntry {\nselectionSort([0, 1]);\n} finally {\nArray prototype sort = temp;\n}\nreturn sortUsed;\n}\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-selection-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a77c4455504b4cd506e0669ca2e3653c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-selection-sort.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "32, 5643, 63, 123, 43, 2, 55, 1, 234, 92 ]), [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92] ); selectionSort should not use the built-in sort() method js function isBuiltInSortUsed(){ let sortUsed = false; const temp = Array prototype sort; Array prototype sort = () => sortUsed = true; try { selectionSort([0, 1]); } finally { Array prototype sort = temp; } return sortUsed; } assertisFalse(isBuiltInSortUsed());\n--seed--\n--seed-contents--\njs\nfunction selectionSort(array) {\n// Only change code below this line\nreturn array;\n// Only change code above this line\n}\n--solutions--\njs\nfunction selectionSort(array) {\nfor (let i = 0; i < array length-1; i++) {\nlet minimumIndex = i;\nfor (let j = i+1; j < array length; j++){\nif (array[j] < array[minimumIndex]) {\nminimumIndex = j;\n}\n}\nlet value = array[minimumIndex];\narray[minimumIndex] = array[i];\narray[i] = value;\n}\nreturn array;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\implement-selection-sort.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6e344ab1a831fd0b19a7ba54926da05f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\no-repeats-please.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: a7bf700cd123b9a54eef01d5\ntitle: No Repeats Please\nchallengeType: 1\nforumTopicId: 16037\ndashedName: no-repeats-please\n--description--\nReturn the number of total permutations of the provided string that don't have repeated consecutive letters Assume that all characters in the provided string are each unique For example, aab should return 2 because it has 6 total permutations (aab, aab, aba, aba, baa, baa), but only 2 of them (aba and aba) don't have the same letter (in this case a) repeating --hints--\npermAlone(\"aab\") should return a number js\nassert isNumber(permAlone('aab'));\npermAlone(\"aab\") should return 2 js\nassert strictEqual(permAlone('aab'), 2);\npermAlone(\"aaa\") should return 0 js\nassert strictEqual(permAlone('aaa'), 0);\npermAlone(\"aabb\") should return 8 js\nassert strictEqual(permAlone('aabb'), 8);\npermAlone(\"abcdefa\") should return 3600 js\nassert strictEqual(permAlone('abcdefa'), 3600);\npermAlone(\"abfdefa\") should return 2640 js\nassert strictEqual(permAlone('abfdefa'), 2640);\npermAlone(\"zzzzzzzz\") should return 0 js\nassert strictEqual(permAlone('zzzzzzzz'), 0);\npermAlone(\"a\") should return 1 js\nassert strictEqual(permAlone('a'), 1);\npermAlone(\"aaab\") should return 0 js\nassert strictEqual(permAlone('aaab'), 0);\npermAlone(\"aaabb\") should return 12 js\nassert strictEqual(permAlone('aaabb'), 12);\n--seed--\n--seed-contents--\n```js\nfunction permAlone(str) {\nreturn str;\n}\npermAlone('aab');\n```\n--solutions--\n```js\nfunction permAlone(str) {\nreturn permuter(str) filter(function(perm) {\nreturn perm match(/( )\\1/g);\n}) length;\n}\nfunction permuter(str) {\n// http://staff roguecc",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\no-repeats-please.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "03ec74b6e23fba58c584929589f4859a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\no-repeats-please.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert strictEqual(permAlone('abcdefa'), 3600); permAlone(\"abfdefa\") should return 2640 js assert strictEqual(permAlone('abfdefa'), 2640); permAlone(\"zzzzzzzz\") should return 0 js assert strictEqual(permAlone('zzzzzzzz'), 0); permAlone(\"a\") should return 1 js assert strictEqual(permAlone('a'), 1); permAlone(\"aaab\") should return 0 js assert strictEqual(permAlone('aaab'), 0); permAlone(\"aaabb\") should return 12 js assert strictEqual(permAlone('aaabb'), 12); --seed-- --seed-contents-- ```js function permAlone(str) { return str; } permAlone('aab'); ``` --solutions-- ```js function permAlone(str) { return permuter(str) filter(function(perm) { return perm match(/( )\\1/g); }) length; } function permuter(str) { // http://staff rogueccedu/JMiller/JavaScript/permute html\n//permArr: Global array which holds the list of permutations\n//usedChars: Global utility array which holds a list of \"currently-in-use\" characters\nvar permArr = [], usedChars = [];\nfunction permute(input) {\n//convert input into a char array (one element for each character)\nvar i, ch, chars = input split(\"\");\nfor (i = 0; i < chars length; i++) {\n//get and remove character at index \"i\" from char array\nch = chars splice(i, 1);\n//add removed character to the end of used characters\nusedChars push(ch);\n//when there are no more characters left in char array to add, add used chars to list of permutations\nif (chars length === 0) permArr[permArr length] = usedChars join(\"\");\n//send characters (minus the removed one from above) from char array to be permuted\npermute(chars join(\"\"));\n//add removed character back into char array in original position\nchars splice(i, 0, ch);\n//remove the last character used off the end of used characters array\nusedChars pop();\n}\n}\npermute(str);\nreturn permArr;\n}\npermAlone('aab');\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\no-repeats-please.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "78bc052a4b2146c738a8400145d8108f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\pairwise.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: a3f503de51cfab748ff001aa\ntitle: Pairwise\nchallengeType: 1\nforumTopicId: 301617\ndashedName: pairwise\n--description--\nGiven an array arr, find element pairs whose sum equal the second argument arg and return the sum of their indices You may use multiple pairs that have the same numeric elements but different indices Each pair should use the lowest possible available indices Once an element has been used it cannot be reused to pair with another element For instance, pairwise([1, 1, 2], 3) creates a pair [2, 1] using the 1 at index 0 rather than the 1 at index 1, because 0+2 < 1+2 For example pairwise([7, 9, 11, 13, 15], 20) returns 6 The pairs that sum to 20 are [7, 13] and [9, 11] We can then write out the array with their indices and values | Index | 0 | 1 | 2  | 3  | 4  |\n| ----- | - | - | -- | -- | -- |\n| Value | 7 | 9 | 11 | 13 | 15 |\nBelow we'll take their corresponding indices and add them 7 + 13 = 20 → Indices 0 + 3 = 3\n9 + 11 = 20 → Indices 1 + 2 = 3\n3 + 3 = 6 → Return `6`\n--hints--\npairwise([1, 4, 2, 3, 0, 5], 7) should return 11 js\nassert deepEqual(pairwise([1, 4, 2, 3, 0, 5], 7), 11);\npairwise([1, 3, 2, 4], 4) should return 1 js\nassert deepEqual(pairwise([1, 3, 2, 4], 4), 1);\npairwise([1, 1, 1], 2) should return 1 js\nassert deepEqual(pairwise([1, 1, 1], 2), 1);\npairwise([0, 0, 0, 0, 1, 1], 1) should return 10 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\pairwise.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1c125135b56cd68d3f752dc9486eefad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\pairwise.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 + 2 = 3 3 + 3 = 6 → Return `6` --hints-- pairwise([1, 4, 2, 3, 0, 5], 7) should return 11 js assert deepEqual(pairwise([1, 4, 2, 3, 0, 5], 7), 11); pairwise([1, 3, 2, 4], 4) should return 1 js assert deepEqual(pairwise([1, 3, 2, 4], 4), 1); pairwise([1, 1, 1], 2) should return 1 js assert deepEqual(pairwise([1, 1, 1], 2), 1); pairwise([0, 0, 0, 0, 1, 1], 1) should return 10 js assertdeepEqual(pairwise([0, 0, 0, 0, 1, 1], 1), 10);\npairwise([], 100) should return 0 js\nassert deepEqual(pairwise([], 100), 0);\n--seed--\n--seed-contents--\n```js\nfunction pairwise(arr, arg) {\nreturn arg;\n}\npairwise([1,4,2,3,0,5], 7);\n```\n--solutions--\n```js\nfunction pairwise(arr, arg) {\nvar sum = 0;\narr forEach(function(e, i, a) {\nif (e = null) {\nvar diff = arg-e;\na[i] = null;\nvar dix = a indexOf(diff);\nif (dix == -1) {\nsum += dix;\nsum += i;\na[dix] = null;\n}\n}\n});\nreturn sum;\n}\npairwise([1,4,2,3,0,5], 7);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\pairwise.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cf74cf53c6b902181b315c29d495f84a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: a56138aff60341a09ed6c480\ntitle: Inventory Update\nchallengeType: 1\nforumTopicId: 16019\ndashedName: inventory-update\n--description--\nCompare and update the inventory stored in a 2D array against a second 2D array of a fresh delivery Update the current existing inventory item quantities (in arr1) If an item cannot be found, add the new item and quantity into the inventory array The returned inventory array should be in alphabetical order by item --hints--\nThe function updateInventory should return an array js\nassert isArray(\nupdateInventory(\n[\n[21, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[5, 'Microphone']\n],\n[\n[2, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[67, 'Bowling Ball'],\n[7, 'Toothpaste']\n]\n)\n);\nupdateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]) should return an array with a length of 6 js\nassert equal(\nupdateInventory(\n[\n[21, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[5, 'Microphone']\n],\n[\n[2, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[67, 'Bowling Ball'],\n[7, 'Toothpaste']\n]\n) length,\n6\n);\nupdateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]) should return [[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "36fef752f2ccf26b0d5826783f4da921",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js assert equal( updateInventory( [ [21, 'Bowling Ball'], [2, 'Dirty Sock'], [1, 'Hair Pin'], [5, 'Microphone'] ], [ [2, 'Hair Pin'], [3, 'Half-Eaten Apple'], [67, 'Bowling Ball'], [7, 'Toothpaste'] ] ) length, 6 ); updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]) should return [[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]] js assertdeepEqual(\nupdateInventory(\n[\n[21, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[5, 'Microphone']\n],\n[\n[2, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[67, 'Bowling Ball'],\n[7, 'Toothpaste']\n]\n),\n[\n[88, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[3, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[5, 'Microphone'],\n[7, 'Toothpaste']\n]\n);\nupdateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], []) should return [[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "5002a03dfd5dc1799fd7f5dc28c3b36f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js assertdeepEqual( updateInventory( [ [21, 'Bowling Ball'], [2, 'Dirty Sock'], [1, 'Hair Pin'], [5, 'Microphone'] ], [ [2, 'Hair Pin'], [3, 'Half-Eaten Apple'], [67, 'Bowling Ball'], [7, 'Toothpaste'] ] ), [ [88, 'Bowling Ball'], [2, 'Dirty Sock'], [3, 'Hair Pin'], [3, 'Half-Eaten Apple'], [5, 'Microphone'], [7, 'Toothpaste'] ] ); updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], []) should return [[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]] js assertdeepEqual(\nupdateInventory(\n[\n[21, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[5, 'Microphone']\n],\n[]\n),\n[\n[21, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[5, 'Microphone']\n]\n);\nupdateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]) should return [[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "41d02e0d03bac42e44c4cf160dcedee1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Pin\"], [5, \"Microphone\"]], []) should return [[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]] js assertdeepEqual( updateInventory( [ [21, 'Bowling Ball'], [2, 'Dirty Sock'], [1, 'Hair Pin'], [5, 'Microphone'] ], [] ), [ [21, 'Bowling Ball'], [2, 'Dirty Sock'], [1, 'Hair Pin'], [5, 'Microphone'] ] ); updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]]) should return [[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]] js assertdeepEqual(\nupdateInventory(\n[],\n[\n[2, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[67, 'Bowling Ball'],\n[7, 'Toothpaste']\n]\n),\n[\n[67, 'Bowling Ball'],\n[2, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[7, 'Toothpaste']\n]\n);\nupdateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]]) should return [[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]] js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "91a1f376ba114baa7e11a8ace4775ae9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[7, \"Toothpaste\"]] js assertdeepEqual( updateInventory( [], [ [2, 'Hair Pin'], [3, 'Half-Eaten Apple'], [67, 'Bowling Ball'], [7, 'Toothpaste'] ] ), [ [67, 'Bowling Ball'], [2, 'Hair Pin'], [3, 'Half-Eaten Apple'], [7, 'Toothpaste'] ] ); updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]]) should return [[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]] js assertdeepEqual(\nupdateInventory(\n[\n[0, 'Bowling Ball'],\n[0, 'Dirty Sock'],\n[0, 'Hair Pin'],\n[0, 'Microphone']\n],\n[\n[1, 'Hair Pin'],\n[1, 'Half-Eaten Apple'],\n[1, 'Bowling Ball'],\n[1, 'Toothpaste']\n]\n),\n[\n[1, 'Bowling Ball'],\n[0, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[1, 'Half-Eaten Apple'],\n[0, 'Microphone'],\n[1, 'Toothpaste']\n]\n);\n--seed--\n--seed-contents--\n```js\nfunction updateInventory(arr1, arr2) {\nreturn arr1;\n}\n// Example inventory lists\nvar curInv = [\n[21, \"Bowling Ball\"],\n[2, \"Dirty Sock\"],\n[1, \"Hair Pin\"],\n[5, \"Microphone\"]\n];\nvar newInv = [\n[2, \"Hair Pin\"],\n[3, \"Half-Eaten Apple\"],\n[67, \"Bowling Ball\"],\n[7, \"Toothpaste\"]\n];\nupdateInventory(curInv, newInv);\n```\n--solutions--\n```js\nfunction updateInventory(arr1, arr2) {\narr2 forEach(function(item) {\ncreateOrUpdate(arr1, item);\n});\n// All inventory must be accounted for or you're fired",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "05cb4783e957ae7508830b7b476b6573",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'Microphone'], [1, 'Toothpaste'] ] ); --seed-- --seed-contents-- ```js function updateInventory(arr1, arr2) { return arr1; } // Example inventory lists var curInv = [ [21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"] ]; var newInv = [ [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"] ]; updateInventory(curInv, newInv); ``` --solutions-- ```js function updateInventory(arr1, arr2) { arr2 forEach(function(item) { createOrUpdate(arr1, item); }); // All inventory must be accounted for or you're firedreturn arr1;\n}\nfunction createOrUpdate(arr1, item) {\nvar index = -1;\nwhile (++index < arr1 length) {\nif (arr1[index][1] === item[1]) {\narr1[index][0] += item[0];\nreturn;\n}\nif (arr1[index][1] > item[1]) {\nbreak;\n}\n}\narr1 splice(index, 0, item);\n}\n// Example inventory lists\nvar curInv = [\n[21, 'Bowling Ball'],\n[2, 'Dirty Sock'],\n[1, 'Hair Pin'],\n[5, 'Microphone']\n];\nvar newInv = [\n[2, 'Hair Pin'],\n[3, 'Half-Eaten Apple'],\n[67, 'Bowling Ball'],\n[7, 'Toothpaste']\n];\nupdateInventory(curInv, newInv);\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4995,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\algorithms\\inventory-update.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "b049e728a970a7e0af156ea2b7d61e0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-elements-at-a-specific-index-in-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8252367417b2b2512c67\ntitle: Add Elements at a Specific Index in a Linked List\nchallengeType: 1\nforumTopicId: 301619\ndashedName: add-elements-at-a-specific-index-in-a-linked-list\n--description--\nLet's create a addAt(index,element) method that adds an element at a given index Just like how we remove elements at a given index, we need to keep track of the currentIndex as we traverse the linked list When the currentIndex matches the given index, we would need to reassign the previous node's next property to reference the new added node And the new node should reference the next node in the currentIndex Returning to the conga line example, a new person wants to join the line, but he wants to join in the middle You are in the middle of the line, so you take your hands off of the person ahead of you The new person walks over and puts his hands on the person you once had hands on, and you now have your hands on the new person --instructions--\nCreate an addAt(index,element) method that adds an element at a given index Return false if an element could not be added Note: Remember to check if the given index is a negative or is longer than the length of the linked list --hints--\nYour addAt method should reassign head to the new node when the given index is 0 js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest addAt(0, 'fish');\nreturn test head() element === 'fish' && test head() next element === 'cat';\n})()\n);\nYour addAt method should increase the length of the linked list by one for each new node added to the linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest addAt(0, 'cat');\nreturn test size() === 3;\n})()\n);\nYour addAt method should return false if a node was unable to be added js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\nreturn test addAt(4, 'cat') === false;\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element) {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-elements-at-a-specific-index-in-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8b4478bdd471ea6082e486b147a2357a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-elements-at-a-specific-index-in-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ var test = new LinkedList(); test add('cat'); test add('dog'); test addAt(0, 'cat'); return test size() === 3; })() ); Your addAt method should return false if a node was unable to be added js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); return test addAt(4, 'cat') === false; })() ); --seed-- --seed-contents-- ```js function LinkedList() { var length = 0; var head = null; var Node = function(element) { thiselement = element;\nthis next = null;\n};\nthis size = function() {\nreturn length;\n};\nthis head = function() {\nreturn head;\n};\nthis add = function(element) {\nvar node = new Node(element);\nif (head === null) {\nhead = node;\n} else {\nvar currentNode = head;\nwhile (currentNode next) {\ncurrentNode = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis size = function(){\nreturn length;\n};\nthis head = function(){\nreturn head;\n};\nthis add = function(element){\nvar node = new Node(element);\nif (head === null){\nhead = node;\n} else {\nvar currentNode = head;\nwhile (currentNode next) {\ncurrentNode = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\nthis addAt = function (index, element) {\nif (index > length || index < 0) {\nreturn false;\n}\nvar newNode = new Node(element);\nvar currentNode = head;\nif (index === 0) {\nhead = newNode;\n} else {\nvar previousNode = null;\nvar i = 0;\nwhile (currentNode && i < index) {\npreviousNode = currentNode;\ncurrentNode = currentNode next;\ni++;\n}\npreviousNode next = newNode;\n}\nnewNode next = currentNode;\nlength++;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-elements-at-a-specific-index-in-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8b7bd91e457768c55b62ef252979c26c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8257367417b2b2512c7b\ntitle: Add a New Element to a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301618\ndashedName: add-a-new-element-to-a-binary-search-tree\n--description--\nThis series of challenges will introduce the tree data structure Trees are an important and versatile data structure in computer science Of course, their name comes from the fact that when visualized they look much like the trees we are familiar with in the natural world A tree data structure begins with one node, typically referred to as the root, and from here branches out to additional nodes, each of which may have more child nodes, and so on and so forth The data structure is usually visualized with the root node at the top; you can think of it as a natural tree flipped upside down First, let's describe some common terminology we will encounter with trees The root node is the top of the tree Data points in the tree are called nodes Nodes with branches leading to other nodes are referred to as the parent of the node the branch leads to (the child) Other more complicated familial terms apply as you might expect A subtree refers to all the descendants of a particular node, branches may be referred to as edges, and leaf nodes are nodes at the end of the tree that have no children Finally, note that trees are inherently recursive data structures That is, any children of a node are parents of their own subtree, and so on The recursive nature of trees is important to understand when designing algorithms for common tree operations To begin, we will discuss a particular type of tree, the binary tree In fact, we will actually discuss a particular binary tree, a binary search tree Let's describe what this means While the tree data structure can have any number of branches at a single node, a binary tree can only have two branches for every node Furthermore, a binary search tree is ordered with respect to the child subtrees, such that the value of each node in the left subtree is less than or equal to the value of the parent node, and the value of each node in the right subtree is greater than or equal to the value of the parent node It's very helpful to visualize this relationship in order to understand it better:\nNow this ordered relationship is very easy to see",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "85d26b820b18d6f99646a1435d57f708",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "tree is ordered with respect to the child subtrees, such that the value of each node in the left subtree is less than or equal to the value of the parent node, and the value of each node in the right subtree is greater than or equal to the value of the parent node It's very helpful to visualize this relationship in order to understand it better: Now this ordered relationship is very easy to seeNote that every value to the left of 8, the root node, is less than 8, and every value to the right is greater than 8 Also notice that this relationship applies to each of the subtrees as well For example, the first left child is a subtree 3 is the parent node, and it has exactly two child nodes — by the rules governing binary search trees, we know without even looking that the left child of this node (and any of its children) will be less than 3, and the right child (and any of its children) will be greater than 3 (but also less than the structure's root value), and so on Binary search trees are very common and useful data structures because they provide logarithmic time in the average case for several common operations such as lookup, insertion, and deletion --instructions--\nWe'll start simple We've defined the skeleton of a binary search tree structure here in addition to a function to create nodes for our tree Observe that each node may have a left and right value These will be assigned child subtrees if they exist In our binary search tree, you will create a method to add new values to the tree The method should be called add and it should accept an integer value to add to the tree Take care to maintain the invariant of a binary search tree: the value in each left child should be less than or equal to the parent value, and the value in each right child should be greater than or equal to the parent value Here, let's make it so our tree cannot hold duplicate values If we try to add a value that already exists, the method should return null Otherwise, if the addition is successful, undefined should be returned Hint: trees are naturally recursive data structures --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called add",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d0bce3f64802e01c04a72e4cebb07b04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "If we try to add a value that already exists, the method should return null Otherwise, if the addition is successful, undefined should be returned Hint: trees are naturally recursive data structures --hints-- The BinarySearchTree data structure should exist js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } return typeof test == 'object'; })() ); The binary search tree should have a method called addjs\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test add == 'function';\n})()\n);\nThe add method should add elements according to the binary search tree rules js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test add == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\nconst expectedResult = [1, 4, 7, 8, 34, 45, 73, 87];\nconst result = test inOrder();\nreturn expectedResult toString() === result toString();\n})()\n);\nAdding an element that already exists should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test add == 'function') {\nreturn false;\n}\ntest add(4);\nreturn test add(4) == null;\n})()\n);\n--seed--\n--after-user-code--\njs\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\ninOrder() {\nif ( this root) {\nreturn null;\n}\nvar result = new Array();\nfunction traverseInOrder(node) {\nnode left && traverseInOrder(node left);\nresult push(node value);\nnode right && traverseInOrder(node right);\n}\ntraverseInOrder(this root);\nreturn result;\n}\n}\n);\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c439c817536fa5428dd21c37e50c1656",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "})() ); --seed-- --after-user-code-- js BinarySearchTree prototype = Object assign( BinarySearchTree prototype, { inOrder() { if ( this root) { return null; } var result = new Array(); function traverseInOrder(node) { node left && traverseInOrder(node left); result push(node value); node right && traverseInOrder(node right); } traverseInOrder(this root); return result; } } ); --seed-contents-- ```js var displayTree = tree => console log(JSON stringify(tree, null, 2)); function Node(value) { this value = value; this left = null; thisright = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\nthis add = function(element) {\nlet current = this root;\nif ( current) {\nthis root = new Node(element);\nreturn;\n} else {\nconst searchTree = function(current) {\nif (current value > element) {\nif (current left) {\nreturn searchTree(current left);\n} else {\ncurrent left = new Node(element);\nreturn;\n}\n} else if (current value < element) {\nif (current right) {\nreturn searchTree(current right);\n} else {\ncurrent right = new Node(element);\nreturn;\n}\n} else {\nreturn null;\n}\n};\nreturn searchTree(current);\n}\n};\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7636,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\add-a-new-element-to-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "ed581cfd03cdc0e360bd807745637cfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8256367417b2b2512c77\ntitle: Adjacency List\nchallengeType: 1\nforumTopicId: 301620\ndashedName: adjacency-list\n--description--\nGraphs can be represented in different ways Here we describe one way, which is called an adjacency list An adjacency list is essentially a bulleted list where the left side is the node and the right side lists all the other nodes it's connected to Below is a representation of an adjacency list Node1: Node2, Node3Node2: Node1Node3: Node1\nAbove is an undirected graph because Node1 is connected to Node2 and Node3, and that information is consistent with the connections Node2 and Node3 show An adjacency list for a directed graph would mean each row of the list shows direction If the above was directed, then Node2: Node1 would mean there the directed edge is pointing from Node2 towards Node1 We can represent the undirected graph above as an adjacency list by putting it within a JavaScript object js\nvar undirectedG = {\nNode1: [\"Node2\", \"Node3\"],\nNode2: [\"Node1\"],\nNode3: [\"Node1\"]\n};\nThis can also be more simply represented as an array where the nodes just have numbers rather than string labels js\nvar undirectedGArr = [\n[1, 2], // Node1\n[0],    // Node2\n[0]     // Node3\n];\n--instructions--\nCreate a social network as an undirected graph with 4 nodes/people named James, Jill, Jenny, and Jeff There are edges/relationships between James and Jeff, Jill and Jenny, and Jeff and Jenny --hints--\nundirectedAdjList should only contain four nodes js\nassert(Object keys(undirectedAdjList) length === 4);\nThere should be an edge between Jeff and James js\nassert(\nundirectedAdjList James indexOf('Jeff') == -1 &&\nundirectedAdjList Jeff indexOf('James') == -1\n);\nThere should be an edge between Jill and Jenny js\nassert(\nundirectedAdjList Jill indexOf('Jenny') == -1 &&\nundirectedAdjList Jenny indexOf('Jill') == -1\n);\nThere should be an edge between Jeff and Jenny js\nassert(\nundirectedAdjList Jeff indexOf('Jenny') == -1 &&\nundirectedAdjList Jenny indexOf('Jeff')",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-list.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7f80e4e449217407b56135a4e02724b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "only contain four nodes js assert(Object keys(undirectedAdjList) length === 4); There should be an edge between Jeff and James js assert( undirectedAdjList James indexOf('Jeff') == -1 && undirectedAdjList Jeff indexOf('James') == -1 ); There should be an edge between Jill and Jenny js assert( undirectedAdjList Jill indexOf('Jenny') == -1 && undirectedAdjList Jenny indexOf('Jill') == -1 ); There should be an edge between Jeff and Jenny js assert( undirectedAdjList Jeff indexOf('Jenny') == -1 && undirectedAdjList Jenny indexOf('Jeff')== -1\n);\n--seed--\n--seed-contents--\njs\nvar undirectedAdjList = {};\n--solutions--\njs\nvar undirectedAdjList = {\nJames: ['Jeff'],\nJill: ['Jenny'],\nJenny: ['Jill', 'Jeff'],\nJeff: ['James', 'Jenny']\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2435,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-list.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d2cbf778d982bf6ea0ba55de3dd4c175",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-matrix.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8256367417b2b2512c78\ntitle: Adjacency Matrix\nchallengeType: 1\nforumTopicId: 301621\ndashedName: adjacency-matrix\n--description--\nAnother way to represent a graph is to put it in an adjacency matrix An adjacency matrix is a two-dimensional (2D) array where each nested array has the same number of elements as the outer array In other words, it is a matrix or grid of numbers, where the numbers represent the edges Note: The numbers to the top and left of the matrix are just labels for the nodes Inside the matrix, ones mean there exists an edge between the vertices (nodes) representing the row and column Finally, zeros mean there is no edge or relationship 1 2 3\n\\------\n1 | 0 1 1\n2 | 1 0 0\n3 | 1 0 0\nAbove is a very simple, undirected graph where you have three nodes, where the first node is connected to the second and third node Below is a JavaScript implementation of the same thing js\nvar adjMat = [\n[0, 1, 1],\n[1, 0, 0],\n[1, 0, 0]\n];\nUnlike an adjacency list, each \"row\" of the matrix has to have the same number of elements as nodes in the graph Here we have a three by three matrix, which means we have three nodes in our graph A directed graph would look similar Below is a graph where the first node has an edge pointing toward the second node, and then the second node has an edge pointing to the third node js\nvar adjMatDirected = [\n[0, 1, 0],\n[0, 0, 1],\n[0, 0, 0]\n];\nGraphs can also have weights on their edges So far, we have unweighted edges where just the presence and lack of edge is binary (0 or 1) You can have different weights depending on your application --instructions--\nCreate an adjacency matrix of an undirected graph with five nodes This matrix should be in a multi-dimensional array These five nodes have relationships between the first and fourth node, the first and third node, the third and fifth node, and the fourth and fifth node All edge weights are one --hints--\nundirectedAdjList should only contain five nodes js\nassert(\nadjMatUndirected",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3098,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-matrix.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b98c24dd74b9e82059f19f6576ceb378",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-matrix.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is binary (0 or 1) You can have different weights depending on your application --instructions-- Create an adjacency matrix of an undirected graph with five nodes This matrix should be in a multi-dimensional array These five nodes have relationships between the first and fourth node, the first and third node, the third and fifth node, and the fourth and fifth node All edge weights are one --hints-- undirectedAdjList should only contain five nodes js assert( adjMatUndirectedlength === 5 &&\nadjMatUndirected map(function (x) {\nreturn x length === 5;\n}) reduce(function (a, b) {\nreturn a && b;\n})\n);\nThere should be an edge between the first and fourth node js\nassert(adjMatUndirected[0][3] === 1 && adjMatUndirected[3][0] === 1);\nThere should be an edge between the first and third node js\nassert(adjMatUndirected[0][2] === 1 && adjMatUndirected[2][0] === 1);\nThere should be an edge between the third and fifth node js\nassert(adjMatUndirected[2][4] === 1 && adjMatUndirected[4][2] === 1);\nThere should be an edge between the fourth and fifth node js\nassert(adjMatUndirected[3][4] === 1 && adjMatUndirected[4][3] === 1);\n--seed--\n--seed-contents--\njs\nvar adjMatUndirected = [];\n--solutions--\njs\nvar adjMatUndirected = [\n[0, 0, 1, 1, 0],\n[0, 0, 0, 0, 0],\n[1, 0, 0, 0, 1],\n[1, 0, 0, 0, 1],\n[0, 0, 1, 1, 0]\n];",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3098,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\adjacency-matrix.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8bcad48c1b6885e6033deffe0cc087d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-an-element-is-present-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8257367417b2b2512c7c\ntitle: Check if an Element is Present in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301623\ndashedName: check-if-an-element-is-present-in-a-binary-search-tree\n--description--\nNow that we have a general sense of what a binary search tree is let's talk about it in a little more detail Binary search trees provide logarithmic time for the common operations of lookup, insertion, and deletion in the average case, and linear time in the worst case Why is this Each of those basic operations requires us to find an item in the tree (or in the case of insertion to find where it should go) and because of the tree structure at each parent node we are branching left or right and effectively excluding half the size of the remaining tree This makes the search proportional to the logarithm of the number of nodes in the tree, which creates logarithmic time for these operations in the average case Ok, but what about the worst case Well, consider constructing a tree from the following values, adding them left to right: 10, 12, 17, 25 Following our rules for a binary search tree, we will add 12 to the right of 10, 17 to the right of this, and 25 to the right of this Now our tree resembles a linked list and traversing it to find 25 would require us to traverse all the items in linear fashion Hence, linear time in the worst case The problem here is that the tree is unbalanced We'll look a little more into what this means in the following challenges --instructions--\nIn this challenge, we will create a utility for our tree Write a method isPresent which takes an integer value as input and returns a boolean value for the presence or absence of that value in the binary search tree --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called isPresent js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-an-element-is-present-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b151bd0ff92fc626322cd22499aec554",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-an-element-is-present-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the binary search tree --hints-- The BinarySearchTree data structure should exist js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } return typeof test == 'object'; })() ); The binary search tree should have a method called isPresent js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } return typeof testisPresent == 'function';\n})()\n);\nThe isPresent method should correctly check for the presence or absence of elements added to the tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test isPresent == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(7);\ntest add(411);\ntest add(452);\nreturn (\ntest isPresent(452) &&\ntest isPresent(411) &&\ntest isPresent(7) && test isPresent(100)\n);\n})()\n);\nisPresent should handle cases where the tree is empty js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test isPresent == 'function') {\nreturn false;\n}\nreturn test isPresent(5) == false;\n})()\n);\n--seed--\n--after-user-code--\njs\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nreturn searchTree(node);\n}\n}\n}\n);\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-an-element-is-present-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "fa12ff2937cb33f6f3bb9e42aedf4ea0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-an-element-is-present-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "new Node(value); return; } else if (node left = null) { return searchTree(node left); } } else if (value > node value) { if (node right == null) { node right = new Node(value); return; } else if (node right = null) { return searchTree(node right); } } else { return null; } } return searchTree(node); } } } ); --seed-contents-- ```js var displayTree = tree => console log(JSON stringify(tree, null, 2)); function Node(value) { thisvalue = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nvar displayTree = (tree) => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\nthis isPresent = function (value) {\nvar current = this root\nwhile (current) {\nif (value === current value) {\nreturn true;\n}\ncurrent = value < current value current left : current right;\n}\nreturn false;\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5022,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-an-element-is-present-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cbe3282d65d8360eb0cb4e20ede7d68e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825c367417b2b2512c90\ntitle: Breadth-First Search\nchallengeType: 1\nforumTopicId: 301622\ndashedName: breadth-first-search\n--description--\nSo far, we've learned different ways of creating representations of graphs What now One natural question to have is what are the distances between any two nodes in the graph Enter graph traversal algorithms Traversal algorithms are algorithms to traverse or visit nodes in a graph One type of traversal algorithm is the breadth-first search algorithm This algorithm starts at one node and visits all its neighbors that are one edge away It then goes on to visit each of their neighbors and so on until all nodes have been reached An important data structure that will help implement the breadth-first search algorithm is the queue This is an array where you can add elements to one end and remove elements from the other end This is also known as a FIFO or First-In-First-Out data structure Visually, this is what the algorithm is doing:\nThe grey shading represents a node getting added into the queue and the black shading represents a node getting removed from the queue See how every time a node gets removed from the queue (node turns black), all their neighbors get added into the queue (node turns grey) To implement this algorithm, you'll need to input a graph structure and a node you want to start at First, you'll want to be aware of the distances from, or number of edges away from, the start node You'll want to start all your distances with some large number, like Infinity This prevents counting issues for when a node may not be reachable from your start node Next, you'll want to go from the start node to its neighbors These neighbors are one edge away and at this point you should add one unit of distance to the distances you're keeping track of --instructions--\nWrite a function bfs() that takes an adjacency matrix graph (a two-dimensional array) and a node label root as parameters The node label will just be the integer value of the node between 0 and n - 1, where n is the total number of nodes in the graph Your function will output a JavaScript object key-value pairs with the node and its distance from the root If the node could not be reached, it should have a distance of Infinity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "25e469a7c984b3582b9c8ce5b1c12293",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "takes an adjacency matrix graph (a two-dimensional array) and a node label root as parameters The node label will just be the integer value of the node between 0 and n - 1, where n is the total number of nodes in the graph Your function will output a JavaScript object key-value pairs with the node and its distance from the root If the node could not be reached, it should have a distance of Infinity--hints--\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 1 should return {0: 1, 1: 0, 2: 1, 3: 2}\njs\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nvar results = bfs(graph, 1);\nassert deepEqual(results, { 0: 1, 1: 0, 2: 1, 3: 2 });\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]] with a start node of 1 should return {0: 1, 1: 0, 2: 1, 3: Infinity}\njs\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 0],\n[0, 0, 0, 0]\n];\nvar results = bfs(graph, 1);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d14f11f045e59fc9316145d961c6a41e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1); assert deepEqual(results, { 0: 1, 1: 0, 2: 1, 3: 2 }); The input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]] with a start node of 1 should return {0: 1, 1: 0, 2: 1, 3: Infinity} js var graph = [ [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0] ]; var results = bfs(graph, 1); assertdeepEqual(results, { 0: 1, 1: 0, 2: 1, 3: Infinity });\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 0 should return {0: 0, 1: 1, 2: 2, 3: 3}\njs\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nvar results = bfs(graph, 0);\nassert deepEqual(results, { 0: 0, 1: 1, 2: 2, 3: 3 });\nThe input graph [[0, 1], [1, 0]] with a start node of 0 should return {0: 0, 1: 1}\njs\nvar graph = [\n[0, 1],\n[1, 0]\n];\nvar results = bfs(graph, 0);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "19108fdf6f3d8012b7443d942e8d35da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3: 3} js var graph = [ [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0] ]; var results = bfs(graph, 0); assert deepEqual(results, { 0: 0, 1: 1, 2: 2, 3: 3 }); The input graph [[0, 1], [1, 0]] with a start node of 0 should return {0: 0, 1: 1} js var graph = [ [0, 1], [1, 0] ]; var results = bfs(graph, 0); assertdeepEqual(results, { 0: 0, 1: 1 });\n--seed--\n--seed-contents--\n```js\nfunction bfs(graph, root) {\nvar nodesLen = {};\nreturn nodesLen;\n};\nvar exBFSGraph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nconsole log(bfs(exBFSGraph, 3));\n```\n--solutions--\njs\nfunction bfs(graph, root) {\nvar nodesLen = {};\n// Set all distances to infinity\nfor (var i = 0; i < graph length; i++) {\nnodesLen[i] = Infinity;\n}\nnodesLen[root] = 0; // except root node\nvar queue = [root]; // Keep track of nodes to visit\nvar current; // Current node traversing\n// Keep on going until no more nodes to traverse\nwhile (queue length == 0) {\ncurrent = queue shift();\n// Get adjacent nodes from current node\nvar curConnected = graph[current]; // Get layer of edges from current\nvar neighborIdx = []; // List of nodes with edges\nvar idx = curConnected indexOf(1); // Get first edge connection\nwhile (idx == -1) {\nneighborIdx push(idx); // Add to list of neighbors\nidx = curConnected indexOf(1, idx + 1); // Keep on searching\n}\n// Loop through neighbors and get lengths\nfor (var j = 0; j < neighborIdx",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "45d2490beaa41654e039a1c38d97716e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "adjacent nodes from current node var curConnected = graph[current]; // Get layer of edges from current var neighborIdx = []; // List of nodes with edges var idx = curConnected indexOf(1); // Get first edge connection while (idx == -1) { neighborIdx push(idx); // Add to list of neighbors idx = curConnected indexOf(1, idx + 1); // Keep on searching } // Loop through neighbors and get lengths for (var j = 0; j < neighborIdxlength; j++) {\n// Increment distance for nodes traversed\nif (nodesLen[neighborIdx[j]] === Infinity) {\nnodesLen[neighborIdx[j]] = nodesLen[current] + 1;\nqueue push(neighborIdx[j]); // Add new neighbors to queue\n}\n}\n}\nreturn nodesLen;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\breadth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 165,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "32ec2dc3296a62280981cfb131d6e271",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5cc0c1b32479e176caf3b422\ntitle: Check if Tree is Binary Search Tree\nchallengeType: 1\nforumTopicId: 301624\ndashedName: check-if-tree-is-binary-search-tree\n--description--\nSince you already know what a binary search tree is, this challenge will establish how it is you can tell that a tree is a binary search tree or not The main distinction of a binary search tree is that the nodes are ordered in an organized fashion Nodes have at most 2 child nodes (placed to the right and/or left) based on if the child node's value is greater than or equal to (right) or less than (left) the parent node --instructions--\nIn this challenge, you will create a utility for your tree Write a JavaScript method isBinarySearchTree which takes a tree as an input and returns a boolean value for whether the tree is a binary search tree or not Use recursion whenever possible --hints--\nYour Binary Search Tree should return true when checked with isBinarySearchTree() js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\ntest push(1);\ntest push(5);\ntest push(3);\ntest push(2);\ntest push(4);\nreturn isBinarySearchTree(test) == true;\n})()\n);\nisBinarySearchTree() should return false when checked with a tree that is not a binary search tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\ntest push(1);\ntest root left = new Node(1);\nreturn isBinarySearchTree(test) == false;\n})()\n);\n--seed--\n--after-user-code--\n```js\nBinarySearchTree prototype push = function(val) {\nvar root = this root;\nif ( root) {\nthis root = new Node(val);\nreturn;\n}\nvar currentNode = root;\nvar newNode = new Node(val);\nwhile (currentNode) {\nif (val < currentNode value) {\nif ( currentNode left) {\ncurrentNode left = newNode;\nbreak;\n} else {\ncurrentNode = currentNode left;\n}\n} else {\nif ( currentNode right) {\ncurrentNode right = newNode;\nbreak;\n} else {\ncurrentNode = currentNode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e0a0247140b12cd21911f5d44bb09732",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "prototype push = function(val) { var root = this root; if ( root) { this root = new Node(val); return; } var currentNode = root; var newNode = new Node(val); while (currentNode) { if (val < currentNode value) { if ( currentNode left) { currentNode left = newNode; break; } else { currentNode = currentNode left; } } else { if ( currentNode right) { currentNode right = newNode; break; } else { currentNode = currentNoderight;\n}\n}\n}\n};\n```\n--seed-contents--\n```js\nvar displayTree = (tree) => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n}\nfunction isBinarySearchTree(tree) {\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nvar displayTree = (tree) => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n}\nfunction isBinarySearchTree(tree) {\nif (tree root == null) {\nreturn null;\n} else {\nlet isBST = true;\nfunction checkTree(node) {\nif (node left = null) {\nconst left = node left;\nif (left value >= node value) {\nisBST = false;\n} else {\ncheckTree(left);\n}\n}\nif (node right = null) {\nconst right = node right;\nif (right value < node value) {\nisBST = false;\n} else {\ncheckTree(right);\n}\n}\n}\ncheckTree(tree root);\nreturn isBST;\n}\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\check-if-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "39de852341d8ca47ae6877f485ccdb77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8255367417b2b2512c75\ntitle: Create a Circular Queue\nchallengeType: 1\nforumTopicId: 301625\ndashedName: create-a-circular-queue\n--description--\nIn this challenge you will be creating a Circular Queue A circular queue is a queue that writes to the end of a collection then begins overwriting itself at the beginning of the collection This type of data structure is useful in certain situations For example, a circular queue can be used for streaming media Once the queue is full, new media data will overwrite old data A good way to illustrate this concept is with an array of length 5:\njs\n[null, null, null, null, null]\n^Read @ 0\n^Write @ 0\nHere the read and write are both at position 0 Now the queue gets 3 new records a, b, and c Our queue now looks like:\njs\n[a, b, c, null, null]\n^Read @ 0\n^Write @ 3\nAs the read head reads, it can remove values or keep them:\njs\n[null, null, null, null, null]\n^Read @ 3\n^Write @ 3\nNow we write the values d, e, and f to the queue Once the write reaches the end of the array it loops back to the beginning:\njs\n[f, null, null, d, e]\n^Read @ 3\n^Write @ 1\nThis approach requires a constant amount of memory but allows files of a much larger size to be processed --instructions--\nIn this challenge we will implement a circular queue The circular queue should provide enqueue and dequeue methods which allow you to read from and write to the queue The class itself should also accept an integer argument which you can use to specify the size of the queue when created We've written the starting version of this class for you in the code editor When you enqueue items to the queue, the write pointer should advance forward and loop back to the beginning once it reaches the end of the queue The enqueue method should return the item you enqueued if it is successful; otherwise it will return null Likewise, the read pointer should advance forward as you dequeue items When you dequeue an item, that item should be returned If you cannot dequeue an item, you should return null",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5761,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f4b910c2e681e5b927a9f4e1c16995e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "When you enqueue items to the queue, the write pointer should advance forward and loop back to the beginning once it reaches the end of the queue The enqueue method should return the item you enqueued if it is successful; otherwise it will return null Likewise, the read pointer should advance forward as you dequeue items When you dequeue an item, that item should be returned If you cannot dequeue an item, you should return nullThe write pointer should not be allowed to move past the read pointer (our class won't let you overwrite data you haven't read yet) and the read pointer should not be able to advance past data you have written --hints--\nThe enqueue method should add items to the circular queue js\nassert(\n(function () {\nvar test = new CircularQueue(3);\ntest enqueue(17);\ntest enqueue(32);\ntest enqueue(591);\nvar print = test print();\nreturn print[0] === 17 && print[1] === 32 && print[2] === 591;\n})()\n);\nYou should not enqueue items past the read pointer js\nassert(\n(function () {\nvar test = new CircularQueue(3);\ntest enqueue(17);\ntest enqueue(32);\ntest enqueue(591);\ntest enqueue(13);\ntest enqueue(25);\ntest enqueue(59);\nvar print = test print();\nreturn print[0] === 17 && print[1] === 32 && print[2] === 591;\n})()\n);\nThe dequeue method should dequeue items from the queue js\nassert(\n(function () {\nvar test = new CircularQueue(3);\ntest enqueue(17);\ntest enqueue(32);\ntest enqueue(591);\nreturn (\ntest dequeue() === 17 && test dequeue() === 32 && test dequeue() === 591\n);\n})()\n);\nAfter an item is dequeued, its position in the queue should be reset to null js\nassert(\n(function () {\nvar test = new CircularQueue(3);\ntest enqueue(17);\ntest enqueue(32);\ntest enqueue(672);\ntest dequeue();\ntest dequeue();\nvar print = test print();\nreturn print[0] === null && print[1] === null && print[2] === 672;\n})()\n);\nTrying to dequeue past the write pointer should return null and does not advance the write pointer js\nassert(\n(function () {\nvar test = new CircularQueue(3);\ntest enqueue(17);\ntest enqueue(32);\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5761,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2fb4aff68a4c021b89e30c107fa52580",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should be reset to null js assert( (function () { var test = new CircularQueue(3); test enqueue(17); test enqueue(32); test enqueue(672); test dequeue(); test dequeue(); var print = test print(); return print[0] === null && print[1] === null && print[2] === 672; })() ); Trying to dequeue past the write pointer should return null and does not advance the write pointer js assert( (function () { var test = new CircularQueue(3); test enqueue(17); test enqueue(32); testenqueue(591);\nreturn (\ntest dequeue() === 17 &&\ntest dequeue() === 32 &&\ntest dequeue() === 591 &&\ntest dequeue() === null &&\ntest dequeue() === null &&\ntest dequeue() === null &&\ntest dequeue() === null &&\ntest enqueue(100) === 100 &&\ntest dequeue() === 100\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nclass CircularQueue {\nconstructor(size) {\nthis queue = [];\nthis read = 0;\nthis write = 0;\nthis max = size - 1;\nwhile (size > 0) {\nthis queue push(null);\nsize--;\n}\n}\nprint() {\nreturn this queue;\n}\nenqueue(item) {\n// Only change code below this line\n// Only change code above this line\n}\ndequeue() {\n// Only change code below this line\n// Only change code above this line\n}\n}\n```\n--solutions--\n```js\nclass CircularQueue {\nconstructor(size) {\nthis queue = [];\nthis read = 0;\nthis write = 0;\nthis max = size - 1;\nwhile (size > 0) {\nthis queue push(null);\nsize--;\n}\n}\nprint() {\nreturn this queue;\n}\nenqueue(item) {\n// Only change code below this line\nconsole log(this write, this max);\nif (this queue[this write] === null) {\nthis queue[this write++] = item;\nif (this write > this max) {\nthis write = 0;\n}\nreturn item;\n}\nreturn null;\n// Only change code above this line\n}\ndequeue() {\n// Only change code below this line\nif (this queue[this read] == null) {\nlet item = this queue[this read];\nthis queue[this read++] = null;\nif (this read > this max) {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5761,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b1031550f60049208905b831569972b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "log(this write, this max); if (this queue[this write] === null) { this queue[this write++] = item; if (this write > this max) { this write = 0; } return item; } return null; // Only change code above this line } dequeue() { // Only change code below this line if (this queue[this read] == null) { let item = this queue[this read]; this queue[this read++] = null; if (this read > this max) { thisread = 0;\n}\nreturn item;\n}\nreturn null;\n// Only change code above this line\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5761,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-circular-queue.md",
      "source_type": "git_repo"
    },
    "token_count": 128,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "02cd9177a1e30beed6c51f6657652f9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-linked-list-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8251367417b2b2512c62\ntitle: Create a Linked List Class\nchallengeType: 1\nforumTopicId: 301628\ndashedName: create-a-linked-list-class\n--description--\nLet's create a linked list class Every linked list should start out with a few basic properties: a head (the first item in your list) and a length (number of items in your list) Sometimes you'll see implementations of linked lists that incorporate a tail for the last element of the list, but for now we'll just stick with these two Whenever we add an element to the linked list, our length property should be incremented by one We'll want to have a way to add items to our linked list, so the first method we'll want to create is the add method If our list is empty, adding an element to our linked list is straightforward enough: we just wrap that element in a Node class, and we assign that node to the head of our linked list But what if our list already has one or more members How do we add an element to the list Recall that each node in a linked list has a next property To add a node to the list, find the last node in the list, and point that last node's next property at our new node (Hint: you know you've reached the end of a linked list when a node's next property is null )\n--instructions--\nWrite an add method that assigns the first node you push to the linked list to the head; after that, whenever adding a node, every node should be referenced by the previous node's next property Note\nYour list's length should increase by one every time an element is added to the linked list --hints--\nYour LinkedList class should have a add method js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn typeof test add === 'function';\n})()\n);\nYour LinkedList class should assign head to the first node added js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\nreturn test head() element === 'cat';\n})()\n);\nThe previous node in your LinkedList class should have reference to the newest node created js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('fish');\nreturn test head() next element === 'dog' && test head() next next",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3740,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-linked-list-class.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9a9afaf6f16ecab9f7992da6097aa752",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-linked-list-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "})() ); Your LinkedList class should assign head to the first node added js assert( (function () { var test = new LinkedList(); test add('cat'); return test head() element === 'cat'; })() ); The previous node in your LinkedList class should have reference to the newest node created js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test add('fish'); return test head() next element === 'dog' && test head() next nextelement === 'fish';\n})()\n);\nThe  size of your LinkedList class should equal the amount of nodes in the linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\nreturn test size() === 2;\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis head = function(){\nreturn head;\n};\nthis size = function(){\nreturn length;\n};\nthis add = function(element){\n// Only change code below this line\n// Only change code above this line\n};\n}\n```\n--solutions--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis head = function(){\nreturn head;\n};\nthis size = function(){\nreturn length;\n};\nthis add = function(element){\n// Only change code below this line\nif (head == null) {\nhead = new Node(element);\n}\nelse {\nlet currentNode = head;\nwhile (currentNode next = null) {\n// currentNode next will be last node of linked list after loop\ncurrentNode = currentNode next;\n}\ncurrentNode next = new Node(element);\n}\nlength++;\n// Only change code above this line\n};\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3740,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-linked-list-class.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1ba817717752089967aa2c3efc2d9e24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-doubly-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825a367417b2b2512c87\ntitle: Create a Doubly Linked List\nchallengeType: 1\nforumTopicId: 301626\ndashedName: create-a-doubly-linked-list\n--description--\nAll of the linked lists we've created so far are singly linked lists Here, we'll create a doubly linked list As the name implies, nodes in a doubly linked list have references to the next and previous node in the list This allows us to traverse the list in both directions but it also requires more memory to be used because every node must contain an additional reference to the previous node in the list --instructions--\nWe've provided a Node object and started our DoublyLinkedList Let's add two methods to our doubly linked list called add and remove The add method should add the given element to the list while the remove method should remove all occurrences of a given element in the list Be careful to handle any possible edge cases when writing these methods, such as deletions for the first or last element Also, removing any item on an empty list should return null --hints--\nThe DoublyLinkedList data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nreturn typeof test == 'object';\n})()\n);\nThe DoublyLinkedList should have a method called add js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nif (test add == undefined) {\nreturn false;\n}\nreturn typeof test add == 'function';\n})()\n);\nThe DoublyLinkedList should have a method called remove js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nif (test remove == undefined) {\nreturn false;\n}\nreturn typeof test remove == 'function';\n})()\n);\nRemoving an item from an empty list should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nreturn test remove(100) == null;\n})()\n);\nThe add method should add items to the list js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-doubly-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "58ec049a3fc25f5515426d4abb746210",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-doubly-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} return typeof test remove == 'function'; })() ); Removing an item from an empty list should return null js assert( (function () { var test = false; if (typeof DoublyLinkedList == 'undefined') { test = new DoublyLinkedList(); } return test remove(100) == null; })() ); The add method should add items to the list js assert( (function () { var test = false; if (typeof DoublyLinkedList == 'undefined') { test = new DoublyLinkedList(); } testadd(5);\ntest add(6);\ntest add(723);\nreturn test print() join('') == '56723';\n})()\n);\nEach node should keep track of the previous node js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\ntest add(50);\ntest add(68);\ntest add(73);\nreturn test printReverse() join('') == '736850';\n})()\n);\nThe first item should be removable from the list js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\ntest add(25);\ntest add(35);\ntest add(60);\ntest remove(25);\nreturn test print() join('') == '3560';\n})()\n);\nThe last item should be removable from the list js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\ntest add(25);\ntest add(35);\ntest add(60);\ntest remove(60);\nreturn test print() join('') == '2535';\n})()\n);\n--seed--\n--after-user-code--\n```js\nDoublyLinkedList prototype = Object assign(\nDoublyLinkedList prototype,\n{\nprint() {\nif (this head == null) {\nreturn null;\n} else {\nvar result = new Array();\nvar node = this head;\nwhile (node next = null) {\nresult push(node data);\nnode = node next;\n};\nresult push(node data);\nreturn result;\n};\n},\nprintReverse() {\nif (this tail == null) {\nreturn null;\n} else {\nvar result = new Array();\nvar node = this tail;\nwhile (node prev = null) {\nresult push(node data);\nnode = node prev;\n};\nresult push(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-doubly-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3950e30925d4b4ff36622975dfd71590",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-doubly-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return null; } else { var result = new Array(); var node = this head; while (node next = null) { result push(node data); node = node next; }; result push(node data); return result; }; }, printReverse() { if (this tail == null) { return null; } else { var result = new Array(); var node = this tail; while (node prev = null) { result push(node data); node = node prev; }; result push(nodedata);\nreturn result;\n};\n}\n});\n```\n--seed-contents--\n```js\nvar Node = function(data, prev) {\nthis data = data;\nthis prev = prev;\nthis next = null;\n};\nvar DoublyLinkedList = function() {\nthis head = null;\nthis tail = null;\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-doubly-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f4db84c19ccc9b957e14c82b60e7a10f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825b367417b2b2512c8e\ntitle: Create a Hash Table\nchallengeType: 1\nforumTopicId: 301627\ndashedName: create-a-hash-table\n--description--\nIn this challenge we will learn about hash tables A Hash table is used to implement associative arrays, or mappings of key-value pairs, like the objects and Maps we have just been studying A JavaScript object could be implemented as a hash table, for instance (its actual implementation will depend on the environment it's running in) The way a hash table works is that it takes a key input and hashes this key in a deterministic way to some numerical value This numerical value is then used as the actual key the associated value is stored by Then, if you try to access the same key again, the hashing function will process the key, return the same numerical result, which will then be used to look up the associated value This provides very efficient O(1) lookup time on average Hash tables can be implemented as arrays with hash functions producing array indices within a specified range In this method, the choice of the array size is important, as is the hashing function For instance, what if the hashing function produces the same value for two different keys This is called a collision One way to handle collisions is to just store both key-value pairs at that index Then, upon lookup of either, you would have to iterate through the bucket of items to find the key you are looking for A good hashing function will minimize collisions to maintain efficient search time Here, we won't be concerned with the details of hashing or hash table implementation, we will just try to get a general sense of how they work --instructions--\nLet's create the basic functionality of a hash table We've created a naive hashing function for you to use You can pass a string value to the function hash and it will return a hashed value you can use as a key for storage Store items based on this hashed value in the this collection object Create these three methods: add, remove, and lookup The first should accept a key value pair to add to the hash table The second should remove a key-value pair when passed a key The third should accept a key and return the associated value or null if the key is not present Be sure to write your code to account for collisions Note: The remove method tests won't pass until the add and lookup methods are correctly implemented --hints--\nThe hash function should be valid",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1ab58adec144514f568cd8bcde4cbc13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "first should accept a key value pair to add to the hash table The second should remove a key-value pair when passed a key The third should accept a key and return the associated value or null if the key is not present Be sure to write your code to account for collisions Note: The remove method tests won't pass until the add and lookup methods are correctly implemented --hints-- The hash function should be valid```js\nlet calls = 0;\nconst ourHash = string => {\ncalls++;\nlet hashCode = 0;\nfor (let i = 0; i < string length; i++) {\nhashCode += string charCodeAt(i);\n}\nreturn hashCode;\n};\nassert strictEqual(hash('yek'),ourHash('yek'));\nassert strictEqual(hash('key'),ourHash('key'));\nassert strictEqual(hash('key1'),ourHash('key1'));\nassert strictEqual(hash('key2'),ourHash('key2'));\nassert strictEqual(hash('key3'),ourHash('key3'));\nassert strictEqual(hash('1key'),ourHash('1key'));\nassert strictEqual(hash('ke1y'),ourHash('ke1y'));\nassert strictEqual(hash('altKey'),ourHash('altKey'));\nassert strictEqual(called,calls);\n```\nThe HashTable data structure should exist js\nassert isDefined(HashTable);\nlet newHashTable = new HashTable();\nassert isObject(newHashTable);\nThe HashTable should have an add method js\nlet newHashTable = new HashTable();\nassert isFunction(newHashTable add);\nThe HashTable should have a lookup method js\nlet newHashTable = new HashTable();\nassert isFunction(newHashTable lookup);\nThe HashTable should have a remove method js\nlet newHashTable = new HashTable();\nassert isFunction(newHashTable remove);\nThe add method should add key value pairs and the lookup method should return the values associated with a given key js\nlet newHashTable = new HashTable();\nnewHashTable add('key','value');\nassert strictEqual(newHashTable lookup('key'),'value');\nThe remove method should accept a key as input and should remove the associated key value pair js\nlet hashValue = hash('key');\nlet newHashTable = new HashTable();\nnewHashTable add('key','value');\nnewHashTable remove('key');\nassert notProperty(newHashTable collection,hashValue);\nThe remove method should only remove the correct key value pair ```js\nlet newHashTable = new HashTable();\nlet hashValue = hash('key');\nnewHashTable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "00624c1616e059671204f9ed739125b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should return the values associated with a given key js let newHashTable = new HashTable(); newHashTable add('key','value'); assert strictEqual(newHashTable lookup('key'),'value'); The remove method should accept a key as input and should remove the associated key value pair js let hashValue = hash('key'); let newHashTable = new HashTable(); newHashTable add('key','value'); newHashTable remove('key'); assert notProperty(newHashTable collection,hashValue); The remove method should only remove the correct key value pair ```js let newHashTable = new HashTable(); let hashValue = hash('key'); newHashTableadd('key','value');\nnewHashTable add('yek','value');\nnewHashTable add('altKey','value');\nnewHashTable remove('yek');\nassert notExists(newHashTable lookup('yek'));\nassert exists(newHashTable lookup('altKey'));\nassert exists(newHashTable lookup('key'));\nnewHashTable remove('key');\nassert notProperty(newHashTable collection,hashValue);\nassert exists(newHashTable lookup('altKey'));\n```\nItems should be added using the hash function js\nlet newHashTable = new HashTable();\ncalled = 0;\nnewHashTable add('key1', 'value1')\nnewHashTable add('key2', 'value2');\nnewHashTable add('key3', 'value3');\nassert strictEqual(called,3);\nThe hash table should handle collisions js\nlet newHashTable = new HashTable();\ncalled = 0;\nnewHashTable add('key1','value1');\nnewHashTable add('1key', 'value2');\nnewHashTable add('ke1y', 'value3');\nassert strictEqual(newHashTable lookup('key1'),'value1');\nassert strictEqual(newHashTable lookup('1key'),'value2');\nassert strictEqual(newHashTable lookup('ke1y'),'value3');\n--seed--\n--seed-contents--\n```js\nvar called = 0;\nvar hash = string => {\ncalled++;\nvar hashed = 0;\nfor (var i = 0; i < string length; i++) {\nhashed += string charCodeAt(i);\n}\nreturn hashed;\n};\nvar HashTable = function() {\nthis collection = {};\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\n```js\nvar called = 0;\nvar hash = (string) => {\ncalled++;\nvar hash = 0;\nfor (var i = 0; i < string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "45412cb1eb2050d8edb416f4ef8526af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=> { called++; var hashed = 0; for (var i = 0; i < string length; i++) { hashed += string charCodeAt(i); } return hashed; }; var HashTable = function() { this collection = {}; // Only change code below this line // Only change code above this line }; ``` --solutions-- ```js var called = 0; var hash = (string) => { called++; var hash = 0; for (var i = 0; i < stringlength; i++) { hash += string charCodeAt(i); }\nreturn hash;\n};\nvar HashTable = function() {\nthis collection = {};\n// Only change code below this line\nthis add = function(key, val) {\nvar theHash = hash(key);\nif ( this collection hasOwnProperty(theHash)) {\nthis collection[theHash] = {};\n}\nthis collection[theHash][key] = val;\n}\nthis remove = function(key) {\nvar theHash = hash(key);\nvar hashedObj = this collection[theHash];\nif (hashedObj hasOwnProperty(key)) {\ndelete hashedObj[key];\n}\nif ( Object keys(hashedObj) length) {\ndelete this collection[theHash];\n}\n}\nthis lookup = function(key) {\nvar theHash = hash(key);\nif (this collection hasOwnProperty(theHash)) {\nreturn this collection[theHash][key];\n}\nreturn null\n}\n// Only change code above this line\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-hash-table.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2af3ce0c290cea6f69ab735d50786bf5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-map-data-structure.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 8d5823c8c441eddfaeb5bdef\ntitle: Create a Map Data Structure\nchallengeType: 1\nforumTopicId: 301629\ndashedName: create-a-map-data-structure\n--description--\nThe next few challenges will cover maps and hash tables Maps are data structures that store key-value pairs In JavaScript, these are available to us as objects Maps provide rapid lookup of stored items based on key values and are very common and useful data structures --instructions--\nLet's get some practice creating our own map Because JavaScript objects provide a much more efficient map structure than anything we could write here, this is intended primarily as a learning exercise However, JavaScript objects only provide us with certain operations What if we wanted to define custom operations Use the Map object provided here as a wrapper around a JavaScript object Create the following methods and operations on the Map object:\nadd accepts a key, value pair to add to the map remove accepts a key and removes the associated key, value pair\nget accepts a key and returns the stored value\nhas accepts a key and returns true if the key exists or false if it doesn't values returns an array of all the values in the map\nsize returns the number of items in the map\nclear empties the map\n--hints--\nThe Map data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\nreturn typeof test == 'object';\n})()\n);\nThe Map object should have the following methods: add, remove, get, has, values, clear, and size js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\nreturn (\ntypeof test add == 'function' &&\ntypeof test remove == 'function' &&\ntypeof test get == 'function' &&\ntypeof test has == 'function' &&\ntypeof test values == 'function' &&\ntypeof test clear == 'function' &&\ntypeof test size == 'function'\n);\n})()\n);\nThe add method should add items to the map js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\ntest add(5, 6);\ntest add(2, 3);\ntest add(2, 5);\nreturn test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-map-data-structure.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "64a55b7fa778f7600101a40917bb68a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-map-data-structure.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "remove == 'function' && typeof test get == 'function' && typeof test has == 'function' && typeof test values == 'function' && typeof test clear == 'function' && typeof test size == 'function' ); })() ); The add method should add items to the map js assert( (function () { var test = false; if (typeof Map == 'undefined') { test = new Map(); } test add(5, 6); test add(2, 3); test add(2, 5); return testsize() == 2;\n})()\n);\nThe has method should return true for added items and false for absent items js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\ntest add('test', 'value');\nreturn test has('test') && test has('false');\n})()\n);\nThe get method should accept keys as input and should return the associated values js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\ntest add('abc', 'def');\nreturn test get('abc') == 'def';\n})()\n);\nThe values method should return all the values stored in the map as strings in an array js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\ntest add('a', 'b');\ntest add('c', 'd');\ntest add('e', 'f');\nvar vals = test values();\nreturn (\nvals indexOf('b') = -1 &&\nvals indexOf('d') = -1 &&\nvals indexOf('f') = -1\n);\n})()\n);\nThe clear method should empty the map and the size method should return the number of items present in the map js\nassert(\n(function () {\nvar test = false;\nif (typeof Map == 'undefined') {\ntest = new Map();\n}\ntest add('b', 'b');\ntest add('c', 'd');\ntest remove('asdfas');\nvar init = test size();\ntest clear();\nreturn init == 2 && test size() == 0;\n})()\n);\n--seed--\n--seed-contents--\n```js\nvar Map = function() {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-map-data-structure.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a4d7f947fe5aba569eca68aa3f9588b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-map-data-structure.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "The clear method should empty the map and the size method should return the number of items present in the map js assert( (function () { var test = false; if (typeof Map == 'undefined') { test = new Map(); } test add('b', 'b'); test add('c', 'd'); test remove('asdfas'); var init = test size(); test clear(); return init == 2 && test size() == 0; })() ); --seed-- --seed-contents-- ```js var Map = function() { thiscollection = {};\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\n```js\nvar Map = function() {\nthis collection = {};\n// Only change code below this line\nthis add = function(key,value) {\nthis collection[key] = value;\n}\nthis remove = function(key) {\ndelete this collection[key];\n}\nthis get = function(key) {\nreturn this collection[key];\n}\nthis has = function(key) {\nreturn this collection hasOwnProperty(key)\n}\nthis values = function() {\nreturn Object values(this collection);\n}\nthis size = function() {\nreturn Object keys(this collection) length;\n}\nthis clear = function() {\nfor(let item of Object keys(this collection)) {\ndelete this collection[item];\n}\n}\n// Only change code above this line\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-map-data-structure.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "51657c92c13c17f633db11ad5305102f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-queue-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8250367417b2b2512c60\ntitle: Create a Queue Class\nchallengeType: 1\nforumTopicId: 301631\ndashedName: create-a-queue-class\n--description--\nLike stacks, queues are a collection of elements But unlike stacks, queues follow the FIFO (First-In First-Out) principle Elements added to a queue are pushed to the tail, or the end, of the queue, and only the element at the front of the queue is allowed to be removed We could use an array to represent a queue, but just like stacks, we want to limit the amount of control we have over our queues The two main methods of a queue class is the enqueue and the dequeue method The enqueue method pushes an element to the tail of the queue, and the dequeue method removes and returns the element at the front of the queue Other useful methods are the front, size, and isEmpty methods --instructions--\nWrite an enqueue method that pushes an element to the tail of the queue, a dequeue method that removes and returns the front element, a front method that lets us see the front element, a size method that shows the length, and an isEmpty method to check if the queue is empty --hints--\nYour Queue class should have a enqueue method js\nassert(\n(function () {\nvar test = new Queue();\nreturn typeof test enqueue === 'function';\n})()\n);\nYour Queue class should have a dequeue method js\nassert(\n(function () {\nvar test = new Queue();\nreturn typeof test dequeue === 'function';\n})()\n);\nYour Queue class should have a front method js\nassert(\n(function () {\nvar test = new Queue();\nreturn typeof test front === 'function';\n})()\n);\nYour Queue class should have a size method js\nassert(\n(function () {\nvar test = new Queue();\nreturn typeof test size === 'function';\n})()\n);\nYour Queue class should have an isEmpty method js\nassert(\n(function () {\nvar test = new Queue();\nreturn typeof test isEmpty === 'function';\n})()\n);\nThe dequeue method should remove and return the front element of the queue\njs\nassert(\n(function () {\nvar test = new Queue();\ntest enqueue('Smith');\ntest enqueue('John');\nreturn test dequeue() === 'Smith';\n})()\n);\nThe front method should return value of the front element of the queue\njs\nassert(\n(function () {\nvar test = new Queue();\ntest enqueue('Smith');\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-queue-class.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "92deb85c85bc23b6e8e0a09372b2c2dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-queue-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(function () { var test = new Queue(); return typeof test isEmpty === 'function'; })() ); The dequeue method should remove and return the front element of the queue js assert( (function () { var test = new Queue(); test enqueue('Smith'); test enqueue('John'); return test dequeue() === 'Smith'; })() ); The front method should return value of the front element of the queue js assert( (function () { var test = new Queue(); test enqueue('Smith'); testenqueue('John');\nreturn test front() === 'Smith';\n})()\n);\nThe size method should return the length of the queue\njs\nassert(\n(function () {\nvar test = new Queue();\ntest enqueue('Smith');\nreturn test size() === 1;\n})()\n);\nThe isEmpty method should return false if there are elements in the queue\njs\nassert(\n(function () {\nvar test = new Queue();\ntest enqueue('Smith');\nreturn test isEmpty();\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction Queue() {\nvar collection = [];\nthis print = function() {\nconsole log(collection);\n};\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nfunction Queue () {\nvar collection = [];\nthis print = function() {\nconsole log(collection);\n};\n// Only change code below this line\nthis enqueue = function(item) {\ncollection push(item);\n}\nthis dequeue = function() {\nreturn collection shift();\n}\nthis front = function() {\nreturn collection[0];\n}\nthis size = function(){\nreturn collection length;\n}\nthis isEmpty = function() {\nreturn collection length === 0 true : false;\n}\n// Only change code above this line\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-queue-class.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "55e108fc498a39073eef42c28e0803c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-set-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 8d1323c8c441eddfaeb5bdef\ntitle: Create a Set Class\nchallengeType: 1\nforumTopicId: 301632\ndashedName: create-a-set-class\n--description--\nIn this exercise we are going to create a class named Set to emulate an abstract data structure called \"set\" A set is like an array, but it cannot contain duplicate values The typical use for a set is to simply check for the presence of an item We can see how the ES6 Set object works in the example below:\njs\nconst set1 = new Set([1, 2, 3, 5, 5, 2, 0]);\nconsole log(set1);\n// output: {1, 2, 3, 5, 0}\nconsole log(set1 has(1));\n// output: true\nconsole log(set1 has(6));\n// output: false\nFirst, we will create an add method that adds a value to our set collection as long as the value does not already exist in the set Then we will create a remove method that removes a value from the set collection if it already exists And finally, we will create a size method that returns the number of elements inside the set collection --instructions--\nCreate an add method that adds a unique value to the set collection and returns true if the value was successfully added and false otherwise Create a remove method that accepts a value and checks if it exists in the set If it does, then this method should remove it from the set collection, and return true Otherwise, it should return false Create a size method that returns the size of the set collection --hints--\nYour Set class should have an add method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test add === 'function';\n})()\n);\nYour add method should not add duplicate values js\nassert(\n(function () {\nvar test = new Set();\ntest add('a');\ntest add('b');\ntest add('a');\nvar vals = test values();\nreturn vals[0] === 'a' && vals[1] === 'b' && vals length === 2;\n})()\n);\nYour add method should return true when a value has been successfully added js\nassert(\n(function () {\nvar test = new Set();\nvar result = test add('a');\nreturn result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-set-class.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d649dc9094815f1256fca39efae655b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-set-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "})() ); Your add method should not add duplicate values js assert( (function () { var test = new Set(); test add('a'); test add('b'); test add('a'); var vals = test values(); return vals[0] === 'a' && vals[1] === 'b' && vals length === 2; })() ); Your add method should return true when a value has been successfully added js assert( (function () { var test = new Set(); var result = test add('a'); return result= undefined && result === true;\n})()\n);\nYour add method should return false when a duplicate value is added js\nassert(\n(function () {\nvar test = new Set();\ntest add('a');\nvar result = test add('a');\nreturn result = undefined && result === false;\n})()\n);\nYour Set class should have a remove method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test remove === 'function';\n})()\n);\nYour remove method should only remove items that are present in the set js\nassert deepEqual(\n(function () {\nvar test = new Set();\ntest add('a');\ntest add('b');\ntest remove('c');\nreturn test values();\n})(),\n['a', 'b']\n);\nYour remove method should remove the given item from the set js\nassert(\n(function () {\nvar test = new Set();\ntest add('a');\ntest add('b');\ntest remove('a');\nvar vals = test values();\nreturn vals[0] === 'b' && vals length === 1;\n})()\n);\nYour Set class should have a size method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test size === 'function';\n})()\n);\nThe size method should return the number of elements in the collection js\nassert(\n(function () {\nvar test = new Set();\ntest add('a');\ntest add('b');\ntest remove('a');\nreturn test size() === 1;\n})()\n);\n--seed--\n--seed-contents--\n```js\nclass Set {\nconstructor() {\n// Dictionary will hold the items of our set\nthis dictionary = {};\nthis length = 0;\n}\n// This method will check for the presence of an element and return true or false\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\n// This method will return all the values in the set\nvalues() {\nreturn Object values(this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-set-class.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1aee5c0f551eb32147b2d2e1d2688d27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-set-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "add('b'); test remove('a'); return test size() === 1; })() ); --seed-- --seed-contents-- ```js class Set { constructor() { // Dictionary will hold the items of our set this dictionary = {}; this length = 0; } // This method will check for the presence of an element and return true or false has(element) { return this dictionary[element] == undefined; } // This method will return all the values in the set values() { return Object values(thisdictionary);\n}\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nclass Set {\nconstructor() {\nthis dictionary = {};\nthis length = 0;\n}\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\nvalues() {\nreturn Object values(this dictionary);\n}\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = element;\nthis length++;\nreturn true;\n}\nreturn false;\n}\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\nsize() {\nreturn this length;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-set-class.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "52627ba191d234d92a357d40693735bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-stack-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8250367417b2b2512c5f\ntitle: Create a Stack Class\nchallengeType: 1\nforumTopicId: 301633\ndashedName: create-a-stack-class\n--description--\nIn the last section, we talked about what a stack is and how we can use an array to represent a stack In this section, we will be creating our own stack class Although you can use arrays to create stacks, sometimes it is best to limit the amount of control we have with our stacks Apart from the push and pop method, stacks have other useful methods Let's add a peek, isEmpty, and clear method to our stack class --instructions--\nWrite a push method that pushes an element to the top of the stack, a pop method that removes and returns the element on the top of the stack, a peek method that looks at the top element in the stack, an isEmpty method that checks if the stack is empty, and a clear method that removes all elements from the stack Normally stacks don't have this, but we've added a print helper method that console logs the collection --hints--\nYour Stack class should have a push method js\nassert(\n(function () {\nvar test = new Stack();\nreturn typeof test push === 'function';\n})()\n);\nYour Stack class should have a pop method js\nassert(\n(function () {\nvar test = new Stack();\nreturn typeof test pop === 'function';\n})()\n);\nYour Stack class should have a peek method js\nassert(\n(function () {\nvar test = new Stack();\nreturn typeof test peek === 'function';\n})()\n);\nYour Stack class should have a isEmpty method js\nassert(\n(function () {\nvar test = new Stack();\nreturn typeof test isEmpty === 'function';\n})()\n);\nYour Stack class should have a clear method js\nassert(\n(function () {\nvar test = new Stack();\nreturn typeof test clear === 'function';\n})()\n);\nThe peek method should return the top element of the stack\njs\nassert(\n(function () {\nvar test = new Stack();\ntest push('CS61');\ntest push('CS50');\nreturn test peek() === 'CS50' && test peek() === 'CS50';\n})()\n);\nThe pop method should remove and return the top element of the stack\njs\nassert(\n(function () {\nvar test = new Stack();\ntest push('CS61');\ntest push('CS50');\nreturn test pop() === 'CS50' && test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-stack-class.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "87e5b339b19c806426371953b8fa0f11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-stack-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "clear === 'function'; })() ); The peek method should return the top element of the stack js assert( (function () { var test = new Stack(); test push('CS61'); test push('CS50'); return test peek() === 'CS50' && test peek() === 'CS50'; })() ); The pop method should remove and return the top element of the stack js assert( (function () { var test = new Stack(); test push('CS61'); test push('CS50'); return test pop() === 'CS50' && testpop() === 'CS61';\n})()\n);\nThe isEmpty method should return true if a stack does not contain any elements\njs\nassert(\n(function () {\nvar test = new Stack();\nreturn test isEmpty();\n})()\n);\nThe clear method should remove all element from the stack\njs\nassert(\n(function () {\nvar test = new Stack();\ntest push('CS61');\ntest push('CS50');\ntest clear();\nreturn test isEmpty();\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction Stack() {\nvar collection = [];\nthis print = function() {\nconsole log(collection);\n};\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nclass Stack {\nconstructor() {\nthis collection = [];\n}\nprint() {\nconsole log(this collection);\n}\npush(val) {\nthis collection push(val);\n}\npop() {\nreturn this collection pop();\n}\npeek() {\nreturn this collection[this collection length - 1];\n}\nisEmpty() {\nreturn this collection length === 0;\n}\nclear() {\nreturn (this collection length = 0);\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-stack-class.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c9b51429c4c28266a9350175394b632f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-an-es6-javascript-map.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825b367417b2b2512c8d\ntitle: Create an ES6 JavaScript Map\nchallengeType: 1\nforumTopicId: 301635\ndashedName: create-an-es6-javascript-map\n--description--\nThe new version of JavaScript provides us with a built-in Map object which provides much of the functionality we wrote by hand in the last challenge. This Map object, although similar to regular JavaScript objects, provides some useful functionality that normal objects lack. For example, an ES6 Map tracks the insertion order of items that are added to it. Here is a more complete overview of its methods:\n.has(key) returns true or false based on the presence of a key\n.get(key) returns the value associated with a key\n.set(key, value) sets a new key, value pair\n.delete(key) removes a key, value pair\n.clear() removes all key, value pairs\n.keys() returns a new map iterator object that contains all the keys in insertion order\n.values() returns a new map iterator object that contains all the values in insertion order\n.entries() returns a new map iterator object that contains all the key, value pairs in insertion order\n--instructions--\nDefine a JavaScript Map object and assign to it a variable called myMap. Add the key, value pair freeCodeCamp, Awesome! to it.\n--hints--\nThe myMap object should exist.\njs\nassert(typeof myMap === 'object');\nmyMap should contain the key value pair freeCodeCamp, Awesome!.\njs\nassert(myMap.get('freeCodeCamp') === 'Awesome!');\n--seed--\n--seed-contents--\n```js\n```\n--solutions--\n```js\nconst myMap = new Map();\nmyMap.set(\"freeCodeCamp\", \"Awesome!\");\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1653,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-an-es6-javascript-map.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f8b75d88dd9485b359d2e66e1e389055",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-priority-queue-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8255367417b2b2512c74\ntitle: Create a Priority Queue Class\nchallengeType: 1\nforumTopicId: 301630\ndashedName: create-a-priority-queue-class\n--description--\nIn this challenge you will be creating a Priority Queue A Priority Queue is a special type of Queue in which items may have additional information which specifies their priority This could be simply represented with an integer Item priority will override placement order in determining the sequence items are dequeued If an item with a higher priority is enqueued after items with lower priority, the higher priority item will be dequeued before all the others For instance, let’s imagine we have a priority queue with three items:\njs\n[['kitten', 2], ['dog', 2], ['rabbit', 2]]\nHere the second value (an integer) represents item priority If we enqueue ['human', 1] with a priority of 1 (assuming lower priorities are given precedence) it would then be the first item to be dequeued The collection would look like this:\njs\n[['human', 1], ['kitten', 2], ['dog', 2], ['rabbit', 2]]\nWe’ve started writing a PriorityQueue in the code editor You will need to add an enqueue method for adding items with a priority, a dequeue method for removing and returning items, a size method to return the number of items in the queue, a front method to return the element at the front of the queue, and finally an isEmpty method that will return true if the queue is empty or false if it is not The enqueue should accept items with the format shown above (['human', 1]) where 1 represents the priority dequeue and front should return only the item's name, not its priority --hints--\nYour PriorityQueue class should have a enqueue method js\nassert(\n(function () {\nvar test = new PriorityQueue();\nreturn typeof test enqueue === 'function';\n})()\n);\nYour PriorityQueue class should have a dequeue method js\nassert(\n(function () {\nvar test = new PriorityQueue();\nreturn typeof test dequeue === 'function';\n})()\n);\nYour PriorityQueue class should have a size method js\nassert(\n(function () {\nvar test = new PriorityQueue();\nreturn typeof test size === 'function';\n})()\n);\nYour PriorityQueue class should have a front method js\nassert(\n(function () {\nvar test = new PriorityQueue();\nreturn typeof test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-priority-queue-class.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ce0b6b7805c652f4da7f7ba24d69f3ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-priority-queue-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'function'; })() ); Your PriorityQueue class should have a dequeue method js assert( (function () { var test = new PriorityQueue(); return typeof test dequeue === 'function'; })() ); Your PriorityQueue class should have a size method js assert( (function () { var test = new PriorityQueue(); return typeof test size === 'function'; })() ); Your PriorityQueue class should have a front method js assert( (function () { var test = new PriorityQueue(); return typeof testfront === 'function';\n})()\n);\nYour PriorityQueue class should have an isEmpty method js\nassert(\n(function () {\nvar test = new PriorityQueue();\nreturn typeof test isEmpty === 'function';\n})()\n);\nYour PriorityQueue class should correctly keep track of the current number of items using the size method as items are enqueued and dequeued js\nassert(\n(function () {\nvar test = new PriorityQueue();\ntest enqueue(['David Brown', 2]);\ntest enqueue(['Jon Snow', 1]);\nvar size1 = test size();\ntest dequeue();\nvar size2 = test size();\ntest enqueue(['A', 3]);\ntest enqueue(['B', 3]);\ntest enqueue(['C', 3]);\nreturn size1 === 2 && size2 === 1 && test size() === 4;\n})()\n);\nThe front method should return the correct item at the front of the queue as items are enqueued and dequeued js\nassert(\n(function () {\nvar test = new PriorityQueue();\ntest enqueue(['David Brown', 2]);\nvar front1 = test front();\ntest enqueue(['Jon Snow', 1]);\nvar front2 = test front();\ntest dequeue();\ntest enqueue(['A', 3]);\nvar front3 = test front();\ntest enqueue(['B', 3]);\ntest enqueue(['C', 3]);\ntest dequeue();\nvar front4 = test front();\nreturn (\nfront1 === 'David Brown' &&\nfront2 === 'Jon Snow' &&\nfront3 === 'David Brown' &&\nfront4 === 'A'\n);\n})()\n);\nThe isEmpty method should return true when the queue is empty js\nassert(\n(function () {\nvar test = new PriorityQueue();\ntest enqueue(['A', 1]);\ntest enqueue(['B', 1]);\ntest dequeue();\nvar first = test isEmpty();\ntest dequeue();\nreturn first && test isEmpty();\n})()\n);\nThe priority queue should return items with a higher priority before items with a lower priority and return items in first-in-first-out order otherwise",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-priority-queue-class.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "9ece65ae4acc9306238f94a23c304739",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-priority-queue-class.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=== 'David Brown' && front4 === 'A' ); })() ); The isEmpty method should return true when the queue is empty js assert( (function () { var test = new PriorityQueue(); test enqueue(['A', 1]); test enqueue(['B', 1]); test dequeue(); var first = test isEmpty(); test dequeue(); return first && test isEmpty(); })() ); The priority queue should return items with a higher priority before items with a lower priority and return items in first-in-first-out order otherwisejs\nassert(\n(function () {\nvar test = new PriorityQueue();\ntest enqueue(['A', 5]);\ntest enqueue(['B', 5]);\ntest enqueue(['C', 5]);\ntest enqueue(['D', 3]);\ntest enqueue(['E', 1]);\ntest enqueue(['F', 7]);\nvar result = [];\nresult push(test dequeue());\nresult push(test dequeue());\nresult push(test dequeue());\nresult push(test dequeue());\nresult push(test dequeue());\nresult push(test dequeue());\nreturn result join('') === 'EDABCF';\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction PriorityQueue () {\nthis collection = [];\nthis printCollection = function() {\nconsole log(this collection);\n};\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nfunction PriorityQueue() {\nthis collection = [];\nthis printCollection = function () {\nconsole log(this collection);\n};\n// Only change code below this line\nthis enqueue = function (newitem) {\nif (this isEmpty()) {\nreturn this collection push(newitem);\n}\nthis collection = this collection reverse();\nvar found_index = this collection findIndex(function (item) {\nreturn newitem[1] >= item[1];\n});\nif (found_index === -1) {\nthis collection push(newitem);\n} else {\nthis collection splice(found_index, 0, newitem);\n}\nthis collection = this collection reverse();\n};\nthis dequeue = function () {\nif ( this isEmpty()) {\nreturn this collection shift()[0];\n} else {\nreturn \"The queue is empty \";\n}\n};\nthis size = function () {\nreturn this collection length;\n};\nthis front = function () {\nreturn this collection[0][0];\n};\nthis isEmpty = function () {\nreturn this size() > 0 false : true;\n};\n// Only change code above this line\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-priority-queue-class.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fddadf5e741a8ac513db8372d7fdb8fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-and-add-to-sets-in-es6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8254367417b2b2512c70\ntitle: Create and Add to Sets in ES6\nchallengeType: 1\nforumTopicId: 301636\ndashedName: create-and-add-to-sets-in-es6\n--description--\nNow that you have worked through ES5, you are going to perform something similar in ES6 This will be considerably easier ES6 contains a built-in data structure Set so many of the operations you wrote by hand are now included for you Let's take a look:\nTo create a new empty set:\njs\nvar set = new Set();\nYou can create a set with a value:\njs\nvar set = new Set(1);\nYou can create a set with an array:\njs\nvar set = new Set([1, 2, 3]);\nOnce you have created a set, you can add the values you wish using the add method:\njs\nvar set = new Set([1, 2, 3]);\nset add([4, 5, 6]);\nAs a reminder, a set is a data structure that cannot contain duplicate values:\njs\nvar set = new Set([1, 2, 3, 1, 2, 3]);\n// set contains [1, 2, 3] only\n--instructions--\nFor this exercise, return a set with the following values: 1, 2, 3, 'Taco', 'Cat', 'Awesome'\n--hints--\nYour Set should only contain the values 1, 2, 3, Taco, Cat, Awesome js\nassert(\n(function () {\nvar test = checkSet();\nreturn (\ntest size == 6 &&\ntest has(1) &&\ntest has(2) &&\ntest has(3) &&\ntest has('Taco') &&\ntest has('Cat') &&\ntest has('Awesome')\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction checkSet() {\nvar set = new Set([1, 2, 3, 3, 2, 1, 2, 3, 1]);\n// Only change code below this line\n// Only change code above this line\nconsole log(Array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1773,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-and-add-to-sets-in-es6.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "52be6b56b1808b3e521efbade3a81027",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-and-add-to-sets-in-es6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2, 3, Taco, Cat, Awesome js assert( (function () { var test = checkSet(); return ( test size == 6 && test has(1) && test has(2) && test has(3) && test has('Taco') && test has('Cat') && test has('Awesome') ); })() ); --seed-- --seed-contents-- ```js function checkSet() { var set = new Set([1, 2, 3, 3, 2, 1, 2, 3, 1]); // Only change code below this line // Only change code above this line console log(Arrayfrom(set));\nreturn set;\n}\ncheckSet();\n```\n--solutions--\njs\nfunction checkSet(){var set = new Set([1,2,3,'Taco','Cat','Awesome']);\nreturn set;}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1773,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-and-add-to-sets-in-es6.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f676ab672b8b8f7d3f64933f07ab0cef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-leaf-node-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8258367417b2b2512c80\ntitle: Delete a Leaf Node in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301637\ndashedName: delete-a-leaf-node-in-a-binary-search-tree\n--description--\nThis is the first of three challenges where we will implement a more difficult operation in binary search trees: deletion Deletion is difficult because removing nodes breaks links in the tree These links must be carefully reestablished to ensure the binary tree structure is maintained For some deletions, this means the tree must be rearranged In general, you will encounter one of three cases when trying to delete a node: Leaf Node: The target to delete has zero children One Child: The target to delete only has one child Two Children: The target to delete has two child nodes Removing a leaf node is easy, we simply remove it Deleting a node with one child is also relatively easy, we simply remove it and link its parent to child of the node we deleted Removing a node with two children is more difficult, however, because this creates two child nodes that need to be reconnected to the parent tree We'll see how to deal with this case in the third challenge Additionally, you need to be mindful of some edge cases when handling deletion What if the tree is empty What if the node to delete is the root node What if there are only two elements in the tree For now, let's handle the first case where we delete a leaf node --instructions--\nCreate a method on our binary tree called remove We'll build the logic for our deletion operation in here First, you'll want to create a function within remove that finds the node we are trying to delete in the current tree If the node is not present in the tree, remove should return null Now, if the target node is a leaf node with no children, then the parent reference to it should be set to null This effectively deletes the node from the tree To do this, you will have to keep track of the parent of the node we are trying to delete as well It will also be useful to create a way to track the number of children the target node has, as this will determine which case our deletion falls under We will handle the second and third cases in the next challenges Good luck --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-leaf-node-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a6959db79d765ad6c83086a2be1f9cb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-leaf-node-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "track of the parent of the node we are trying to delete as well It will also be useful to create a way to track the number of children the target node has, as this will determine which case our deletion falls under We will handle the second and third cases in the next challenges Good luck --hints-- The BinarySearchTree data structure should exist js assert( (function () { var test = false; if (typeof BinarySearchTree== 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called remove js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test remove == 'function';\n})()\n);\nTrying to remove an element from an empty tree should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\nreturn test remove(100) == null;\n})()\n);\nTrying to remove an element that does not exist should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(15);\ntest add(30);\nreturn test remove(100) == null;\n})()\n);\nIf the root node has no children, deleting it should set the root to null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(500);\ntest remove(500);\nreturn test inorder() == null;\n})()\n);\nThe remove method should remove leaf nodes from the tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(5);\ntest add(3);\ntest add(7);\ntest add(6);\ntest add(10);\ntest add(12);\ntest remove(3);\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-leaf-node-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "434033a7b20b4f1b95d575cdebf5f935",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-leaf-node-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'function') { return false; } test add(500); test remove(500); return test inorder() == null; })() ); The remove method should remove leaf nodes from the tree js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test remove == 'function') { return false; } test add(5); test add(3); test add(7); test add(6); test add(10); test add(12); test remove(3); testremove(12);\ntest remove(10);\nreturn test inorder() join('') == '567';\n})()\n);\n--seed--\n--after-user-code--\njs\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nreturn searchTree(node);\n}\n},\ninorder: function() {\nif (this root == null) {\nreturn null;\n} else {\nvar result = new Array();\nfunction traverseInOrder(node) {\nif (node left = null) {\ntraverseInOrder(node left);\n}\nresult push(node value);\nif (node right = null) {\ntraverseInOrder(node right);\n}\n}\ntraverseInOrder(this root);\nreturn result;\n}\n}\n}\n);\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n}\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-leaf-node-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4e3e16994952d643deefbf98f5dbd2e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-trie-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8259367417b2b2512c84\ntitle: Create a Trie Search Tree\nchallengeType: 1\nforumTopicId: 301634\ndashedName: create-a-trie-search-tree\n--description--\nHere we will move on from binary search trees and take a look at another type of tree structure called a trie A trie is an ordered search tree commonly used to hold strings, or more generically associative arrays or dynamic datasets in which the keys are strings They are very good at storing sets of data when many keys will have overlapping prefixes, for example, all the words in a dictionary Unlike a binary tree, nodes are not associated with actual values Instead, the path to a node represents a specific key For instance, if we wanted to store the string code in a trie, we would have four nodes, one for each letter: c — o — d — e Following that path through all these nodes will then create code as a string — that path is the key we stored Then, if we wanted to add the string coding, it would share the first three nodes of code before branching away after the d In this way, large datasets can be stored very compactly In addition, search can be very quick because it is effectively limited to the length of the string you are storing Furthermore, unlike binary trees a node can store any number of child nodes As you might have guessed from the above example, some metadata is commonly stored at nodes that hold the end of a key so that on later traversals that key can still be retrieved For instance, if we added codes in our example above we would need some way to know that the e in code represents the end of a key that was previously entered Otherwise, this information would effectively be lost when we add codes --instructions--\nLet's create a trie to store words It will accept words through an add method and store these in a trie data structure It will also allow us to query if a given string is a word with an isWord method, and retrieve all the words entered into the trie with a print method isWord should return a boolean value and print should return an array of all these words as string values In order for us to verify that this data structure is implemented correctly, we've provided a Node structure for each node in the tree Each node will be an object with a keys property which is a JavaScript Map object This will hold the individual letters that are valid keys of each node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-trie-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ec2a87e40fd7264b46871cf63c984554",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-trie-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with a print method isWord should return a boolean value and print should return an array of all these words as string values In order for us to verify that this data structure is implemented correctly, we've provided a Node structure for each node in the tree Each node will be an object with a keys property which is a JavaScript Map object This will hold the individual letters that are valid keys of each nodeWe've also created an end property on the nodes that can be set to true if the node represents the termination of a word --hints--\nThe Trie should have an add method js\nassert(\n(function testTrie() {\nvar test = false;\nif (typeof Trie == 'undefined') {\ntest = new Trie();\n} else {\nreturn false;\n}\nreturn typeof test add == 'function';\n})()\n);\nThe Trie should have a print method js\nassert(\n(function testTrie() {\nvar test = false;\nif (typeof Trie == 'undefined') {\ntest = new Trie();\n} else {\nreturn false;\n}\nreturn typeof test print == 'function';\n})()\n);\nThe Trie should have an isWord method js\nassert(\n(function testTrie() {\nvar test = false;\nif (typeof Trie == 'undefined') {\ntest = new Trie();\n} else {\nreturn false;\n}\nreturn typeof test isWord == 'function';\n})()\n);\nThe print method should return all items added to the trie as strings in an array js\nassert(\n(function testTrie() {\nvar test = false;\nif (typeof Trie == 'undefined') {\ntest = new Trie();\n} else {\nreturn false;\n}\ntest add('jump');\ntest add('jumps');\ntest add('jumped');\ntest add('house');\ntest add('mouse');\nvar added = test print();\nreturn (\nadded indexOf('jump') = -1 &&\nadded indexOf('jumps') = -1 &&\nadded indexOf('jumped') = -1 &&\nadded indexOf('house') = -1 &&\nadded indexOf('mouse') = -1 &&\nadded length == 5\n);\n})()\n);\nThe isWord method should return true only for words added to the trie and false for all other words js\nassert(\n(function testTrie() {\nvar test = false;\nif (typeof Trie == 'undefined') {\ntest = new Trie();\n} else {\nreturn false;\n}\ntest add('hop');\ntest add('hops');\ntest add('hopped');\ntest add('hoppy');\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-trie-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ba68048d6ab57a76ea1dde8df886d11a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-trie-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "&& added indexOf('jumped') = -1 && added indexOf('house') = -1 && added indexOf('mouse') = -1 && added length == 5 ); })() ); The isWord method should return true only for words added to the trie and false for all other words js assert( (function testTrie() { var test = false; if (typeof Trie == 'undefined') { test = new Trie(); } else { return false; } test add('hop'); test add('hops'); test add('hopped'); test add('hoppy'); testadd('hope');\nreturn (\ntest isWord('hop') && test isWord('ho') &&\ntest isWord('hopped') && test isWord('hopp') &&\ntest isWord('hoppy') && test isWord('hoping')\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nvar Node = function() {\nthis keys = new Map();\nthis end = false;\nthis setEnd = function() {\nthis end = true;\n};\nthis isEnd = function() {\nreturn this end;\n};\n};\nvar Trie = function() {\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\create-a-trie-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "97848fdb551383eab240d85de53afc70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825d367417b2b2512c96\ntitle: Depth-First Search\nchallengeType: 1\nforumTopicId: 301640\ndashedName: depth-first-search\n--description--\nSimilar to breadth-first search, here we will learn about another graph traversal algorithm called depth-first search Whereas the breadth-first search searches incremental edge lengths away from the source node, depth-first search first goes down a path of edges as far as it can Once it reaches one end of a path, the search will backtrack to the last node with an un-visited edge path and continue searching The animation below shows how the algorithm works The algorithm starts with the top node and visits the nodes in the numbered order Notice how, unlike breadth-first search, every time a node is visited, it doesn't visit all of its neighbors Instead, it first visits one of its neighbors and continues down that path until there are no more nodes to be visited on that path To implement this algorithm, you'll want to use a stack A stack is an array where the last element added is the first to be removed This is also known as a Last-In-First-Out data structure A stack is helpful in depth-first search algorithms because, as we add neighbors to the stack, we want to visit the most recently added neighbors first and remove them from the stack A simple output of this algorithm is a list of nodes which are reachable from a given node Therefore, you'll also want to keep track of the nodes you visit --instructions--\nWrite a function dfs() that takes an undirected, adjacency matrix graph and a node label root as parameters The node label will just be the numeric value of the node between 0 and n - 1, where n is the total number of nodes in the graph Your function should output an array of all nodes reachable from root --hints--\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 1 should return an array with 0, 1, 2, and 3 js\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "97256f5c413f685de7575edbf52d15b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "will just be the numeric value of the node between 0 and n - 1, where n is the total number of nodes in the graph Your function should output an array of all nodes reachable from root --hints-- The input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 1 should return an array with 0, 1, 2, and 3 js assertsameMembers(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 1);\n})(),\n[0, 1, 2, 3]\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 3 should return an array with 3, 2, 1, and 0 js\nassert sameMembers(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 3);\n})(),\n[3, 2, 1, 0]\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 1 should return an array with four elements js\nassert(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 1);\n})()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "aa4c70d9378fcf277f8daa9bdaa0ed7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[0, 0, 1, 0] ]; return dfs(graph, 3); })(), [3, 2, 1, 0] ); The input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0]] with a start node of 1 should return an array with four elements js assert( (function () { var graph = [ [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0] ]; return dfs(graph, 1); })()length === 4\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]] with a start node of 3 should return an array with 3 js\nassert sameMembers(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 0],\n[0, 0, 0, 0]\n];\nreturn dfs(graph, 3);\n})(),\n[3]\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]] with a start node of 3 should return an array with one element js\nassert(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 0],\n[0, 0, 0, 0]\n];\nreturn dfs(graph, 3);\n})()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "4da26342187ae3f3a42f80c87be81c4c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1, 0, 0], [0, 0, 0, 0] ]; return dfs(graph, 3); })(), [3] ); The input graph [[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0]] with a start node of 3 should return an array with one element js assert( (function () { var graph = [ [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0] ]; return dfs(graph, 3); })()length === 1\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]] with a start node of 3 should return an array with 2 and 3 js\nassert sameMembers(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 0, 0],\n[0, 0, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 3);\n})(),\n[2, 3]\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]] with a start node of 3 should return an array with two elements js\nassert(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 0, 0],\n[0, 0, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 3);\n})()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "aa04f363792ac020c0a56461f57c4e40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0, 1], [0, 0, 1, 0] ]; return dfs(graph, 3); })(), [2, 3] ); The input graph [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]] with a start node of 3 should return an array with two elements js assert( (function () { var graph = [ [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0] ]; return dfs(graph, 3); })()length === 2\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]] with a start node of 0 should return an array with 0 and 1 js\nassert sameMembers(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 0, 0],\n[0, 0, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 0);\n})(),\n[0, 1]\n);\nThe input graph [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]] with a start node of 0 should return an array with two elements js\nassert(\n(function () {\nvar graph = [\n[0, 1, 0, 0],\n[1, 0, 0, 0],\n[0, 0, 0, 1],\n[0, 0, 1, 0]\n];\nreturn dfs(graph, 0);\n})()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "7ad653e20c679c73d9b24e2f7d04a017",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0, 1], [0, 0, 1, 0] ]; return dfs(graph, 0); })(), [0, 1] ); The input graph [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]] with a start node of 0 should return an array with two elements js assert( (function () { var graph = [ [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0] ]; return dfs(graph, 0); })()length === 2\n);\n--seed--\n--seed-contents--\n```js\nfunction dfs(graph, root) {\n}\nvar exDFSGraph = [\n[0, 1, 0, 0],\n[1, 0, 1, 0],\n[0, 1, 0, 1],\n[0, 0, 1, 0]\n];\nconsole log(dfs(exDFSGraph, 3));\n```\n--solutions--\njs\nfunction dfs(graph, root) {\nvar stack = [];\nvar tempV;\nvar visited = [];\nvar tempVNeighbors = [];\nstack push(root);\nwhile (stack length > 0) {\ntempV = stack pop();\nif (visited indexOf(tempV) == -1) {\nvisited push(tempV);\ntempVNeighbors = graph[tempV];\nfor (var i = 0; i < tempVNeighbors length; i++) {\nif (tempVNeighbors[i] == 1) {\nstack push(i);\n}\n}\n}\n}\nreturn visited;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\depth-first-search.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "b0b13b95bb880790ff64ab4a49ee5408",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8258367417b2b2512c81\ntitle: Delete a Node with One Child in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301638\ndashedName: delete-a-node-with-one-child-in-a-binary-search-tree\n--description--\nNow that we can delete leaf nodes let's move on to the second case: deleting a node with one child For this case, say we have a tree with the following nodes 1 — 2 — 3 where 1 is the root To delete 2, we simply need to make the right reference in 1 point to 3 More generally to delete a node with only one child, we make that node's parent reference the next node in the tree --instructions--\nWe've provided some code in our remove method that accomplishes the tasks from the last challenge We find the target to delete and its parent and define the number of children the target node has Let's add the next case here for target nodes with only one child Here, we'll have to determine if the single child is a left or right branch in the tree and then set the correct reference in the parent to point to this node In addition, let's account for the case where the target is the root node (this means the parent node will be null) Feel free to replace all the starter code with your own as long as it passes the tests --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called remove js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test remove == 'function';\n})()\n);\nTrying to remove an element that does not exist should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\nreturn test remove(100) == null;\n})()\n);\nIf the root node has no children, deleting it should set the root to null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a728a20b6a77505059d65403c670131d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that does not exist should return null js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test remove == 'function') { return false; } return test remove(100) == null; })() ); If the root node has no children, deleting it should set the root to null js assert( (function () { var test = false; if (typeof BinarySearchTree== 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(500);\ntest remove(500);\nreturn test inorder() == null;\n})()\n);\nThe remove method should remove leaf nodes from the tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(5);\ntest add(3);\ntest add(7);\ntest add(6);\ntest add(10);\ntest add(12);\ntest remove(3);\ntest remove(12);\ntest remove(10);\nreturn test inorder() join('') == '567';\n})()\n);\nThe remove method should remove nodes with one child js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(1);\ntest add(4);\ntest add(3);\ntest add(2);\ntest add(6);\ntest add(8);\ntest remove(6);\ntest remove(3);\nreturn test inorder() join('') == '1248';\n})()\n);\nRemoving the root in a tree with two nodes should set the second to be the root js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(15);\ntest add(27);\ntest remove(15);\nreturn test inorder() join('') == '27';\n})()\n);\n--seed--\n--after-user-code--\njs\nBinarySearchTree prototype = Object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d43a9c69667e2263444c4b5169c07fa2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'1248'; })() ); Removing the root in a tree with two nodes should set the second to be the root js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test remove == 'function') { return false; } test add(15); test add(27); test remove(15); return test inorder() join('') == '27'; })() ); --seed-- --after-user-code-- js BinarySearchTree prototype = Objectassign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nreturn searchTree(node);\n}\n},\ninorder: function() {\nif (this root == null) {\nreturn null;\n} else {\nvar result = new Array();\nfunction traverseInOrder(node) {\nif (node left = null) {\ntraverseInOrder(node left);\n}\nresult push(node value);\nif (node right = null) {\ntraverseInOrder(node right);\n}\n}\ntraverseInOrder(this root);\nreturn result;\n}\n}\n}\n);\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\nthis remove = function(value) {\nif (this root === null) {\nreturn null;\n}\nvar target;\nvar parent = null;\n// Find the target value and its parent\n(function findValue(node = this root) {\nif (value == node value) {\ntarget = node;\n} else if (value < node value && node left == null) {\nparent = node;\nreturn findValue(node left);\n} else if (value < node value && node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cfa2e5127480a35f68457af7091fcd3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ this root = null; this remove = function(value) { if (this root === null) { return null; } var target; var parent = null; // Find the target value and its parent (function findValue(node = this root) { if (value == node value) { target = node; } else if (value < node value && node left == null) { parent = node; return findValue(node left); } else if (value < node value && nodeleft === null) {\nreturn null;\n} else if (value > node value && node right == null) {\nparent = node;\nreturn findValue(node right);\n} else {\nreturn null;\n}\n} bind(this)());\nif (target === null) {\nreturn null;\n}\n// Count the children of the target to delete\nvar children =\n(target left == null 1 : 0) + (target right == null 1 : 0);\n// Case 1: Target has no children\nif (children === 0) {\nif (target == this root) {\nthis root = null;\n} else {\nif (parent left == target) {\nparent left = null;\n} else {\nparent right = null;\n}\n}\n}\n// Case 2: Target has one child\n// Only change code below this line\n};\n}\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7008,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-one-child-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "e8b41765557c0b3d7aa3559c501b0fbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8258367417b2b2512c82\ntitle: Delete a Node with Two Children in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301639\ndashedName: delete-a-node-with-two-children-in-a-binary-search-tree\n--description--\nRemoving nodes that have two children is the hardest case to implement Removing a node like this produces two subtrees that are no longer connected to the original tree structure How can we reconnect them One method is to find the smallest value in the right subtree of the target node and replace the target node with this value Selecting the replacement in this way ensures that it is greater than every node in the left subtree it becomes the new parent of but also less than every node in the right subtree it becomes the new parent of Once this replacement is made the replacement node must be removed from the right subtree Even this operation is tricky because the replacement may be a leaf or it may itself be the parent of a right subtree If it is a leaf we must remove its parent's reference to it Otherwise, it must be the right child of the target In this case, we must replace the target value with the replacement value and make the target reference the replacement's right child --instructions--\nLet's finish our remove method by handling the third case We've provided some code again for the first two cases Add some code now to handle target nodes with two children Any edge cases to be aware of What if the tree has only three nodes Once you are finished this will complete our deletion operation for binary search trees Nice job, this is a pretty hard problem --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called remove js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test remove == 'function';\n})()\n);\nTrying to remove an element that does not exist should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test remove == 'function' test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9a1ca576f72b642b10f97992a50c84e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } return typeof test remove == 'function'; })() ); Trying to remove an element that does not exist should return null js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } return typeof test remove == 'function' testremove(100) == null : false;\n})()\n);\nIf the root node has no children, deleting it should set the root to null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\ntest add(500);\ntest remove(500);\nreturn typeof test remove == 'function' test inorder() == null : false;\n})()\n);\nThe remove method should remove leaf nodes from the tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\ntest add(5);\ntest add(3);\ntest add(7);\ntest add(6);\ntest add(10);\ntest add(12);\ntest remove(3);\ntest remove(12);\ntest remove(10);\nreturn typeof test remove == 'function' test inorder() join('') == '567'\n: false;\n})()\n);\nThe remove method should remove nodes with one child js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(-1);\ntest add(3);\ntest add(7);\ntest add(16);\ntest remove(16);\ntest remove(7);\ntest remove(3);\nreturn test inorder() join('') == '-1';\n})()\n);\nRemoving the root in a tree with two nodes should set the second to be the root js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(15);\ntest add(27);\ntest remove(15);\nreturn test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "24a29cbe16e3436c21f234fee38eda95",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test add(16); test remove(16); test remove(7); test remove(3); return test inorder() join('') == '-1'; })() ); Removing the root in a tree with two nodes should set the second to be the root js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test remove == 'function') { return false; } test add(15); test add(27); test remove(15); return testinorder() join('') == '27';\n})()\n);\nThe remove method should remove nodes with two children while maintaining the binary search tree structure js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(1);\ntest add(4);\ntest add(3);\ntest add(7);\ntest add(9);\ntest add(11);\ntest add(14);\ntest add(15);\ntest add(19);\ntest add(50);\ntest remove(9);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\ntest remove(11);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\ntest remove(14);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\ntest remove(19);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\ntest remove(3);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\ntest remove(50);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\ntest remove(15);\nif ( test isBinarySearchTree()) {\nreturn false;\n}\nreturn test inorder() join('') == '147';\n})()\n);\nThe root should be removable on a tree of three nodes js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test remove == 'function') {\nreturn false;\n}\ntest add(100);\ntest add(50);\ntest add(300);\ntest remove(100);\nreturn test inorder() join('') == 50300;\n})()\n);\n--seed--\n--after-user-code--\njs\nBinarySearchTree prototype = Object assign(\nBinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "7038f29bb14b47f0037c534d0d877a52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "join('') == '147'; })() ); The root should be removable on a tree of three nodes js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test remove == 'function') { return false; } test add(100); test add(50); test add(300); test remove(100); return test inorder() join('') == 50300; })() ); --seed-- --after-user-code-- js BinarySearchTree prototype = Object assign( BinarySearchTreeprototype,\n{\nadd: function(value) {\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nreturn searchTree(node);\n}\n},\ninorder: function() {\nif (this root == null) {\nreturn null;\n} else {\nvar result = new Array();\nfunction traverseInOrder(node) {\nif (node left = null) {\ntraverseInOrder(node left);\n}\nresult push(node value);\nif (node right = null) {\ntraverseInOrder(node right);\n}\n}\ntraverseInOrder(this root);\nreturn result;\n}\n},\nisBinarySearchTree() {\nif (this root == null) {\nreturn null;\n} else {\nvar check = true;\nfunction checkTree(node) {\nif (node left = null) {\nvar left = node left;\nif (left value > node value) {\ncheck = false;\n} else {\ncheckTree(left);\n}\n}\nif (node right = null) {\nvar right = node right;\nif (right value < node value) {\ncheck = false;\n} else {\ncheckTree(right);\n}\n}\n}\ncheckTree(this root);\nreturn check;\n}\n}\n}\n);\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "c5b553a0c10451160752b4c805ed6c5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= null) { var left = node left; if (left value > node value) { check = false; } else { checkTree(left); } } if (node right = null) { var right = node right; if (right value < node value) { check = false; } else { checkTree(right); } } } checkTree(this root); return check; } } } ); --seed-contents-- ```js var displayTree = tree => console log(JSON stringify(tree, null, 2)); function Node(value) { thisvalue = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\nthis remove = function(value) {\nif (this root === null) {\nreturn null;\n}\nvar target;\nvar parent = null;\n// Find the target value and its parent\n(function findValue(node = this root) {\nif (value == node value) {\ntarget = node;\n} else if (value < node value && node left == null) {\nparent = node;\nreturn findValue(node left);\n} else if (value < node value && node left === null) {\nreturn null;\n} else if (value > node value && node right == null) {\nparent = node;\nreturn findValue(node right);\n} else {\nreturn null;\n}\n} bind(this)());\nif (target === null) {\nreturn null;\n}\n// Count the children of the target to delete\nvar children =\n(target left == null 1 : 0) + (target right == null 1 : 0);\n// Case 1: Target has no children\nif (children === 0) {\nif (target == this root) {\nthis root = null;\n} else {\nif (parent left == target) {\nparent left = null;\n} else {\nparent right = null;\n}\n}\n}\n// Case 2: Target has one child\nelse if (children == 1) {\nvar newChild = target left == null target left : target right;\nif (parent === null) {\ntarget value = newChild value;\ntarget left = null;\ntarget right = null;\n} else if (newChild value < parent value) {\nparent left = newChild;\n} else {\nparent right = newChild;\n}\ntarget = null;\n}\n// Case 3: Target has two children\n// Only change code below this line\n};\n}\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\delete-a-node-with-two-children-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "099cde51c7d3a5ca8d42240971525f0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\implement-heap-sort-with-a-min-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825b367417b2b2512c8c\ntitle: Implement Heap Sort with a Min Heap\nchallengeType: 1\nforumTopicId: 301643\ndashedName: implement-heap-sort-with-a-min-heap\n--description--\nNow that we can add and remove elements let's see some of the applications heaps can be used for Heaps are commonly used to implement priority queues because they always store an item of greatest or least value in first position In addition, they are used to implement a sorting algorithm called heap sort We'll see how to do this here Heap sort uses a min heap, the reverse of a max heap A min heap always stores the element of least value in the root position Heap sort works by taking an unsorted array, adding each item in the array into a min heap, and then extracting every item out of the min heap into a new array The min heap structure ensures that the new array will contain the original items in least to greatest order This is one of the most efficient sorting algorithms with average and worst case performance of O(nlog(n)) --instructions--\nLet's implement heap sort with a min heap Feel free to adapt your max heap code here Create an object MinHeap with insert, remove, and sort methods The sort method should return an array of all the elements in the min heap sorted from smallest to largest --hints--\nThe MinHeap data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof MinHeap == 'undefined') {\ntest = new MinHeap();\n}\nreturn typeof test == 'object';\n})()\n);\nMinHeap should have a method called insert js\nassert(\n(function () {\nvar test = false;\nif (typeof MinHeap == 'undefined') {\ntest = new MinHeap();\n} else {\nreturn false;\n}\nreturn typeof test insert == 'function';\n})()\n);\nMinHeap should have a method called remove js\nassert(\n(function () {\nvar test = false;\nif (typeof MinHeap == 'undefined') {\ntest = new MinHeap();\n} else {\nreturn false;\n}\nreturn typeof test remove == 'function';\n})()\n);\nMinHeap should have a method called sort js\nassert(\n(function () {\nvar test = false;\nif (typeof MinHeap == 'undefined') {\ntest = new MinHeap();\n} else {\nreturn false;\n}\nreturn typeof test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3459,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\implement-heap-sort-with-a-min-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0dfebefc5bc76648c68e308db2cb1307",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\implement-heap-sort-with-a-min-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "); MinHeap should have a method called remove js assert( (function () { var test = false; if (typeof MinHeap == 'undefined') { test = new MinHeap(); } else { return false; } return typeof test remove == 'function'; })() ); MinHeap should have a method called sort js assert( (function () { var test = false; if (typeof MinHeap == 'undefined') { test = new MinHeap(); } else { return false; } return typeof testsort == 'function';\n})()\n);\nThe sort method should return an array containing all items added to the min heap in sorted order ```js\nassert(\n(() => {\nif (typeof MinHeap === 'undefined') {\nreturn false;\n}\nconst heap = new MinHeap();\nconst arr = createRandomArray(25);\nfor (let i of arr) {\nheap insert(i);\n}\nconst result = heap sort();\narr sort((a, b) => a - b);\nfor (let i = 0; i < arr length; i++) {\nif (arr[i] == result[i]) {\nreturn false;\n}\n}\nreturn true;\n})()\n);\n```\n--seed--\n--seed-contents--\n```js\nfunction isSorted(a){\nfor(let i = 0; i < a length - 1; i++)\nif(a[i] > a[i + 1])\nreturn false;\nreturn true;\n}\n// Generate a randomly filled array\nfunction createRandomArray(size = 5){\nlet a = new Array(size);\nfor(let i = 0; i < size; i++)\na[i] = Math floor(Math random() * 100);\nreturn a;\n}\nconst array = createRandomArray(25);\nvar MinHeap = function() {\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3459,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\implement-heap-sort-with-a-min-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 383,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c3d9f33130e587c085c4c8fa21cf2a1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8257367417b2b2512c7d\ntitle: Find the Minimum and Maximum Height of a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301641\ndashedName: find-the-minimum-and-maximum-height-of-a-binary-search-tree\n--description--\nIn the last challenge we described a scenario in which a tree could become unbalanced To understand the concept of balance, let's take a look at another tree property: height Height in a tree represents the distance from the root node to any given leaf node Different paths in a highly branched tree structure may have different heights, but for a given tree there will be a minimum and maximum height If the tree is balanced, these values will differ at most by one This means that in a balanced tree, all the leaf nodes exist within the same level, or if they are not within the same level they are at most one level apart The property of balance is important for trees because it is what determines the efficiency of tree operations As we explained in the last challenge, we face worst case time complexity for heavily unbalanced trees Self-balancing trees are commonly used to account for this issue in trees with dynamic data sets Common examples of these include AVL trees, red-black trees, and B-trees These trees all contain additional internal logic which re-balance the tree when insertions or deletions create a state of imbalance Note: A similar property to height is depth, which refers to how far a given node is from the root node --instructions--\nWrite two methods for our binary tree: findMinHeight and findMaxHeight These methods should return an integer value for the minimum and maximum height within a given binary tree, respectively If the node is empty let's assign it a height of -1 (that's the base case) Finally, add a third method isBalanced which returns true or false depending on whether the tree is balanced or not You can use the first two methods you just wrote to determine this --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called findMinHeight js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d93f8ec8c6e8266320a37d2dd0af8c4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "whether the tree is balanced or not You can use the first two methods you just wrote to determine this --hints-- The BinarySearchTree data structure should exist js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } return typeof test == 'object'; })() ); The binary search tree should have a method called findMinHeight js assert( (function () { var test = false; if (typeof BinarySearchTree== 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test findMinHeight == 'function';\n})()\n);\nThe binary search tree should have a method called findMaxHeight js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test findMaxHeight == 'function';\n})()\n);\nThe binary search tree should have a method called isBalanced js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test isBalanced == 'function';\n})()\n);\nThe findMinHeight method should return the minimum height of the tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test findMinHeight == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\nreturn test findMinHeight() == 1;\n})()\n);\nThe findMaxHeight method should return the maximum height of the tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test findMaxHeight == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\nreturn test findMaxHeight() == 5;\n})()\n);\nAn empty tree should return a height of -1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "747f0ecd0d6ff19516f6340f973761f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "method should return the maximum height of the tree js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test findMaxHeight == 'function') { return false; } test add(4); test add(1); test add(7); test add(87); test add(34); test add(45); test add(73); test add(8); return test findMaxHeight() == 5; })() ); An empty tree should return a height of -1js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test findMaxHeight == 'function') {\nreturn false;\n}\nreturn test findMaxHeight() == -1;\n})()\n);\nThe isBalanced method should return false if the tree is an unbalanced binary search tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test isBalanced == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\nreturn test isBalanced() === false;\n})()\n);\nThe isBalanced method should return true if the tree is a balanced binary search tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test isBalanced == 'function') {\nreturn false;\n}\ntest add(10);\ntest add(3);\ntest add(22);\ntest add(1);\ntest add(4);\ntest add(17);\ntest add(32);\nreturn test isBalanced() === true;\n})()\n);\n--seed--\n--after-user-code--\n```js\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ba6c1dbdc261408b962b843b9e010a9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if (typeof test isBalanced == 'function') { return false; } test add(10); test add(3); test add(22); test add(1); test add(4); test add(17); test add(32); return test isBalanced() === true; })() ); --seed-- --after-user-code-- ```js BinarySearchTree prototype = Object assign( BinarySearchTree prototype, { add: function(value) { function searchTree(node) { if (value < node value) { if (node left == null) { node left = new Node(value); return; } else if (node left = null) { return searchTree(nodeleft);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nreturn searchTree(node);\n}\n}\n}\n);\n```\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\nthis findMinHeight = function(root = this root) {\n// empty tree if (root === null) {\nreturn -1;\n}\n// leaf node if (root left === null && root right === null) {\nreturn 0;\n}\nif (root left === null) {\nreturn this findMinHeight(root right) + 1;\n}\nif (root right === null) {\nreturn this findMinHeight(root left) + 1;\n}\nconst lHeight = this findMinHeight(root left);\nconst rHeight = this findMinHeight(root right);\nreturn Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "3cb8063aa69430742c7c2f8d3753d2be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this findMinHeight = function(root = this root) { // empty tree if (root === null) { return -1; } // leaf node if (root left === null && root right === null) { return 0; } if (root left === null) { return this findMinHeight(root right) + 1; } if (root right === null) { return this findMinHeight(root left) + 1; } const lHeight = this findMinHeight(root left); const rHeight = this findMinHeight(root right); return Mathmin(lHeight, rHeight) + 1;\n};\nthis findMaxHeight = function(root = this root) {\n// empty tree if (root === null) {\nreturn -1;\n}\n// leaf node if (root left === null && root right === null) {\nreturn 0;\n}\nif (root left === null) {\nreturn this findMaxHeight(root right) + 1;\n}\nif (root right === null) {\nreturn this findMaxHeight(root left) + 1;\n}\nconst lHeight = this findMaxHeight(root left);\nconst rHeight = this findMaxHeight(root right);\nreturn Math max(lHeight, rHeight) + 1;\n};\nthis isBalanced = function(root = this root) {\nif (root === null) {\nreturn true;\n}\nif (root left === null && root right === null) {\nreturn true;\n}\nif (root left === null) {\nreturn this findMaxHeight(root right) <= 0;\n}\nif (root right === null) {\nreturn this findMaxHeight(root left) <= 0;\n}\nconst lHeight = this findMaxHeight(root left);\nconst rHeight = this findMaxHeight(root right);\nif (Math abs(lHeight - rHeight) > 1) {\nreturn false;\n}\nreturn this isBalanced(root left) && this isBalanced(root right);\n};\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8860,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-height-of-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "fb94cd4621b62dbb8f166a5ce8ae4cf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8256367417b2b2512c7a\ntitle: Find the Minimum and Maximum Value in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301642\ndashedName: find-the-minimum-and-maximum-value-in-a-binary-search-tree\n--description--\nIn this challenge you will define two methods, findMin and findMax These methods should return the minimum and maximum value held in the binary search tree (don't worry about adding values to the tree for now, we have added some in the background) If you get stuck, reflect on the invariant that must be true for binary search trees: each left subtree is less than or equal to its parent and each right subtree is greater than or equal to its parent Let's also say that our tree can only store integer values If the tree is empty, either method should return null --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called findMin js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test findMin == 'function';\n})()\n);\nThe binary search tree should have a method called findMax js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test findMax == 'function';\n})()\n);\nThe findMin method should return the minimum value in the binary search tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test findMin == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\nreturn test findMin() == 1;\n})()\n);\nThe findMax method should return the maximum value in the binary search tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9a069f8c608a624740007840167c4073",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test findMin == 'function') { return false; } test add(4); test add(1); test add(7); test add(87); test add(34); test add(45); test add(73); test add(8); return test findMin() == 1; })() ); The findMax method should return the maximum value in the binary search tree js assert( (function () { var test = false; if (typeof BinarySearchTree== 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test findMax == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\nreturn test findMax() == 87;\n})()\n);\nThe findMin and findMax methods should return null for an empty tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test findMin == 'function') {\nreturn false;\n}\nif (typeof test findMax == 'function') {\nreturn false;\n}\nreturn test findMin() == null && test findMax() == null;\n})()\n);\n--seed--\n--after-user-code--\n```js\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nreturn searchTree(node);\n}\n}\n}\n);\n```\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "9c9f3e6bd0682047e34b851991a9e45c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "left); } } else if (value > node value) { if (node right == null) { node right = new Node(value); return; } else if (node right = null) { return searchTree(node right); } } else { return null; } } var node = this root; if (node == null) { this root = new Node(value); return; } else { return searchTree(node); } } } ); ``` --seed-contents-- ```js var displayTree = tree => console log(JSONstringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\nthis findMin = function() {\n// Empty tree if ( this root) {\nreturn null;\n}\nlet currentNode = this root;\nwhile (currentNode left) {\ncurrentNode = currentNode left;\n}\nreturn currentNode value;\n};\nthis findMax = function() {\n// Empty tree if ( this root) {\nreturn null;\n}\nlet currentNode = this root;\nwhile (currentNode right) {\ncurrentNode = currentNode right;\n}\nreturn currentNode value;\n};\nthis add = function(value) {\n// Empty tree if ( this root) {\nthis root = new Node(value);\nreturn undefined;\n}\nreturn this addNode(this root, value);\n};\nthis addNode = function(node, value) {\n// Check if value already exists if (node value === value) return null;\nif (value < node value) {\nif (node left) {\nreturn this addNode(node left, value);\n} else {\nnode left = new Node(value);\nreturn undefined;\n}\n} else {\nif (node right) {\nreturn this addNode(node right, value);\n} else {\nnode right = new Node(value);\nreturn undefined;\n}\n}\n};\nthis isPresent = function(value) {\nif ( this root) {\nreturn null;\n}\nreturn this isNodePresent(this root, value);\n};\nthis isNodePresent = function(node, value) {\nif (node value === value) return true;\nif (value < node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "61850092d62fdb247f313e28bdf6eb61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this addNode(node left, value); } else { node left = new Node(value); return undefined; } } else { if (node right) { return this addNode(node right, value); } else { node right = new Node(value); return undefined; } } }; this isPresent = function(value) { if ( this root) { return null; } return this isNodePresent(this root, value); }; this isNodePresent = function(node, value) { if (node value === value) return true; if (value < nodevalue) {\nreturn node left this isNodePresent(node left, value) : false;\n} else {\nreturn node right this isNodePresent(node right, value) : false;\n}\nreturn false;\n};\nthis findMinHeight = function() {\nif ( this root) {\nreturn -1;\n}\nlet heights = {};\nlet height = 0;\nthis traverseTree(this root, height, heights);\nreturn Math min( Object keys(heights));\n};\nthis findMaxHeight = function() {\nif ( this root) {\nreturn -1;\n}\nlet heights = {};\nlet height = 0;\nthis traverseTree(this root, height, heights);\nreturn Math max( Object keys(heights));\n};\nthis traverseTree = function(node, height, heights) {\nif (node left === null && node right === null) {\nreturn (heights[height] = true);\n}\nif (node left) {\nthis traverseTree(node left, height + 1, heights);\n}\nif (node right) {\nthis traverseTree(node right, height + 1, heights);\n}\n};\nthis isBalanced = function() {\nreturn this findMaxHeight() > this findMinHeight() + 1;\n};\n// DFS tree traversal this inorder = function() {\nif ( this root) return null;\nlet result = [];\nfunction traverseInOrder(node) {\nif (node left) traverseInOrder(node left);\nresult push(node value);\nif (node right) traverseInOrder(node right);\n}\ntraverseInOrder(this root);\nreturn result;\n};\nthis preorder = function() {\nif ( this root) return null;\nlet result = [];\nfunction traverseInOrder(node) {\nresult push(node value);\nif (node left) traverseInOrder(node left);\nif (node right) traverseInOrder(node right);\n}\ntraverseInOrder(this root);\nreturn result;\n};\nthis postorder = function() {\nif (",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "655bcda746217165c9221d9e952c9ab8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if ( this root) return null; let result = []; function traverseInOrder(node) { if (node left) traverseInOrder(node left); result push(node value); if (node right) traverseInOrder(node right); } traverseInOrder(this root); return result; }; this preorder = function() { if ( this root) return null; let result = []; function traverseInOrder(node) { result push(node value); if (node left) traverseInOrder(node left); if (node right) traverseInOrder(node right); } traverseInOrder(this root); return result; }; this postorder = function() { if (this root) return null;\nlet result = [];\nfunction traverseInOrder(node) {\nif (node left) traverseInOrder(node left);\nif (node right) traverseInOrder(node right);\nresult push(node value);\n}\ntraverseInOrder(this root);\nreturn result;\n};\n// BFS tree traversal this levelOrder = function() {\nif ( this root) return null;\nlet queue = [this root];\nlet result = [];\nwhile (queue length) {\nlet node = queue shift();\nresult push(node value);\nif (node left) queue push(node left);\nif (node right) queue push(node right);\n}\nreturn result;\n};\nthis reverseLevelOrder = function() {\nif ( this root) return null;\nlet queue = [this root];\nlet result = [];\nwhile (queue length) {\nlet node = queue shift();\nresult push(node value);\nif (node right) queue push(node right);\nif (node left) queue push(node left);\n}\nreturn result;\n};\n// Delete a leaf node }\nlet bst = new BinarySearchTree();\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\find-the-minimum-and-maximum-value-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "1045207721d383242856de0941b114c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\incidence-matrix.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8256367417b2b2512c79\ntitle: Incidence Matrix\nchallengeType: 1\nforumTopicId: 301644\ndashedName: incidence-matrix\n--description--\nYet another way to represent a graph is to put it in an incidence matrix An incidence matrix is a two-dimensional (2D) array Generally speaking, an incidence matrix relates two different classes of objects between its two dimensions This kind of matrix is similar to an adjacency matrix However, the rows and columns mean something else here In graphs, we have edges and nodes These will be our \"two different classes of objects\" This matrix will have the rows be the nodes and columns be the edges This means that we can have an uneven number of rows and columns Each column will represent a unique edge Also, each edge connects two nodes To show that there is an edge between two nodes, you will put a 1 in the two rows of a particular column Below is a 3 node graph with one edge between node 1 and node 3 1   ---1 | 12 | 03 | 1\nHere is an example of an incidence matrix with 4 edges and 4 nodes Remember, the columns are the edges and rows are the nodes themselves 1 2 3 4   --------1 | 0 1 1 12 | 1 1 0 03 | 1 0 0 14 | 0 0 1 0\nBelow is a JavaScript implementation of the same thing js\nvar incMat = [\n[0, 1, 1, 1],\n[1, 1, 0, 0],\n[1, 0, 0, 1],\n[0, 0, 1, 0]\n];\nTo make a directed graph, use -1 for an edge leaving a particular node and 1 for an edge entering a node js\nvar incMatDirected = [\n[ 0, -1,  1, -1],\n[-1,  1,  0,  0],\n[ 1,  0,  0,  1],\n[ 0,  0, -1,  0]\n];\nGraphs can also have weights on their edges So far, we have unweighted edges where just the presence and lack of edge is binary (0 or 1)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\incidence-matrix.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "54223bc82d6f273511d8e57cd66727b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\incidence-matrix.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0] ]; To make a directed graph, use -1 for an edge leaving a particular node and 1 for an edge entering a node js var incMatDirected = [ [ 0, -1, 1, -1], [-1, 1, 0, 0], [ 1, 0, 0, 1], [ 0, 0, -1, 0] ]; Graphs can also have weights on their edges So far, we have unweighted edges where just the presence and lack of edge is binary (0 or 1)You can have different weights depending on your application A different weight is represented as numbers greater than 1 --instructions--\nCreate an incidence matrix of an undirected graph with five nodes and four edges This matrix should be in a multi-dimensional array These five nodes have the following relationships The first edge is between the first and second node The second edge is between the second and third node The third edge is between the third and fifth node The fourth edge is between the fourth and second node All edge weights are one and the edge order matters --hints--\nincMatUndirected should only contain five nodes js\nassert(\nincMatUndirected length === 5 &&\nincMatUndirected map(function (x) {\nreturn x length === 4;\n}) reduce(function (a, b) {\nreturn a && b;\n})\n);\nThere should be a first edge between the first and second node js\nassert(incMatUndirected[0][0] === 1 && incMatUndirected[1][0] === 1);\nThere should be a second edge between the second and third node js\nassert(incMatUndirected[1][1] === 1 && incMatUndirected[2][1] === 1);\nThere should be a third edge between the third and fifth node js\nassert(incMatUndirected[2][2] === 1 && incMatUndirected[4][2] === 1);\nThere should be a fourth edge between the second and fourth node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\incidence-matrix.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "131e6b3cc7fac90c5203211e4e79725a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\incidence-matrix.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "&& b; }) ); There should be a first edge between the first and second node js assert(incMatUndirected[0][0] === 1 && incMatUndirected[1][0] === 1); There should be a second edge between the second and third node js assert(incMatUndirected[1][1] === 1 && incMatUndirected[2][1] === 1); There should be a third edge between the third and fifth node js assert(incMatUndirected[2][2] === 1 && incMatUndirected[4][2] === 1); There should be a fourth edge between the second and fourth nodejs\nassert(incMatUndirected[1][3] === 1 && incMatUndirected[3][3] === 1);\n--seed--\n--seed-contents--\n```js\nvar incMatUndirected = [\n];\n```\n--solutions--\njs\nvar incMatUndirected = [[1, 0, 0, 0],[1, 1, 0, 1],[0, 1, 1, 0],[0, 0, 0, 1],[0, 0, 1, 0]];",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3508,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\incidence-matrix.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8568748c295efbd762124b91263c3342",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\learn-how-a-stack-works.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8250367417b2b2512c5e\ntitle: Learn how a Stack Works\nchallengeType: 1\nforumTopicId: 301705\ndashedName: learn-how-a-stack-works\n--description--\nYou are probably familiar with stack of books on your table You have likely used the undo feature of a text editor You are also probably used to hitting the back button on your phone to go back to the previous view in your app You know what they all have in common They all store the data in a way so that you can traverse backwards The topmost book in the stack was the one that was put there last If you remove that book from your stack's top, you would expose the book that was put there before the last book and so on If you think about it, in all the above examples, you are getting Last-In-First-Out type of service We will try to mimic this with our code This data storage scheme is called a Stack In particular, we would have to implement the push() method that pushes JavaScript objects at the top of the stack; and pop() method, that removes the JavaScript object that's at the top of the stack at the current moment --instructions--\nHere we have a stack of homework assignments represented as an array: \"BIO12\" is at the base, and \"PSY44\" is at the top of the stack Modify the given array and treat it like a stack using the JavaScript methods mentioned above Remove the top element \"PSY44\" from the stack Then add \"CS50\" to be the new top element of the stack --hints--\nhomeworkStack should only contain 4 elements js\nassert(homeworkStack length === 4);\nThe last element in homeworkStack should be \"CS50\" js\nassert(homeworkStack[3] === 'CS50');\nhomeworkStack should not contain \"PSY44\" js\nassert(homeworkStack indexOf('PSY44') === -1);\nThe initial declaration of the homeworkStack should not be changed js\nassert(\n__helpers removeJSComments(code) match(/=/g) length === 1 &&\n/homeworkStack\\s*=\\s*\\[\"BIO12\"\\s*,\\s*\"HIS80\"\\s*,\\s*\"MAT122\"\\s*,\\s*\"PSY44\"\\]/ test(\n__helpers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\learn-how-a-stack-works.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4a34f7352fc60d536e461ee8755e0d54",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\learn-how-a-stack-works.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Remove the top element \"PSY44\" from the stack Then add \"CS50\" to be the new top element of the stack --hints-- homeworkStack should only contain 4 elements js assert(homeworkStack length === 4); The last element in homeworkStack should be \"CS50\" js assert(homeworkStack[3] === 'CS50'); homeworkStack should not contain \"PSY44\" js assert(homeworkStack indexOf('PSY44') === -1); The initial declaration of the homeworkStack should not be changed js assert( __helpers removeJSComments(code) match(/=/g) length === 1 && /homeworkStack\\s*=\\s*\\[\"BIO12\"\\s*,\\s*\"HIS80\"\\s*,\\s*\"MAT122\"\\s*,\\s*\"PSY44\"\\]/ test( __helpersremoveJSComments(code)\n)\n);\n--seed--\n--seed-contents--\njs\nvar homeworkStack = [\"BIO12\",\"HIS80\",\"MAT122\",\"PSY44\"];\n// Only change code below this line\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\learn-how-a-stack-works.md",
      "source_type": "git_repo"
    },
    "token_count": 231,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f7694a2d3539835675a093509b938481",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\invert-a-binary-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8259367417b2b2512c83\ntitle: Invert a Binary Tree\nchallengeType: 1\nforumTopicId: 301704\ndashedName: invert-a-binary-tree\n--description--\nHere will we create a function to invert a binary tree Given a binary tree, we want to produce a new tree that is equivalently the mirror image of this tree Running an inorder traversal on an inverted tree will explore the nodes in reverse order when compared to the inorder traversal of the original tree Write a method to do this called invert on our binary tree Calling this method should invert the current tree structure Ideally, we would like to do this in-place in linear time That is, we only visit each node once and we modify the existing tree structure as we go, without using any additional memory Good luck --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called invert js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test invert == 'function';\n})()\n);\nThe invert method should correctly invert the tree structure js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test invert == 'function') {\nreturn false;\n}\ntest add(4);\ntest add(1);\ntest add(7);\ntest add(87);\ntest add(34);\ntest add(45);\ntest add(73);\ntest add(8);\ntest invert();\nreturn test inorder() join('') == '877345348741';\n})()\n);\nInverting an empty tree should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test invert == 'function') {\nreturn false;\n}\nreturn test invert() == null;\n})()\n);\n--seed--\n--after-user-code--\n```js\nBinarySearchTree prototype = Object assign(\nBinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\invert-a-binary-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "50b5b2457a38d17b8d39cb9b0f79565f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\invert-a-binary-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test add(34); test add(45); test add(73); test add(8); test invert(); return test inorder() join('') == '877345348741'; })() ); Inverting an empty tree should return null js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test invert == 'function') { return false; } return test invert() == null; })() ); --seed-- --after-user-code-- ```js BinarySearchTree prototype = Object assign( BinarySearchTreeprototype,\n{\nadd: function(value) {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left)\n};\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n};\n} else {\nreturn null;\n};\n}\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nreturn searchTree(node);\n};\n},\ninorder: function() {\nif (this root == null) {\nreturn null;\n} else {\nvar result = new Array();\nfunction traverseInOrder(node) {\nif (node left = null) {\ntraverseInOrder(node left);\n};\nresult push(node value);\nif (node right = null) {\ntraverseInOrder(node right);\n};\n}\ntraverseInOrder(this root);\nreturn result;\n};\n}\n}\n);\n```\n--seed-contents--\n```js\nvar displayTree = (tree) => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nvar displayTree = (tree) => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\invert-a-binary-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "83cc0a3b6955c478092e23e1e91dd387",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\invert-a-binary-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "console log(JSON stringify(tree, null, 2)); function Node(value) { this value = value; this left = null; this right = null; } function BinarySearchTree() { this root = null; // Only change code below this line // Only change code above this line } ``` --solutions-- js var displayTree = (tree) => console log(JSON stringify(tree, null, 2)); function Node(value) { this value = value; this left = null; this right = null; } function BinarySearchTree() { thisroot = null;\n// Only change code below this line\nthis invert = function(node = this root) {\nif (node) {\nconst temp = node left;\nnode left = node right;\nnode right = temp;\nthis invert(node left);\nthis invert(node right);\n}\nreturn node;\n}\n// Only change code above this line\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\invert-a-binary-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0e327c9dc314e31a3189e276ae004c6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\insert-an-element-into-a-max-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825a367417b2b2512c8a\ntitle: Insert an Element into a Max Heap\nchallengeType: 1\nforumTopicId: 301703\ndashedName: insert-an-element-into-a-max-heap\n--description--\nNow we will move on to another tree data structure, the binary heap A binary heap is a partially ordered binary tree which satisfies the heap property The heap property specifies a relationship between parent and child nodes You may have a max heap, in which all parent nodes are greater than or equal to their child nodes, or a min heap, in which the reverse is true Binary heaps are also complete binary trees This means that all levels of the tree are fully filled and if the last level is partially filled it is filled from left to right While binary heaps may be implemented as tree structures with nodes that contain left and right references, the partial ordering according to the heap property allows us to represent the heap with an array The parent-children relationship is what we're interested in and with simple arithmetic we can compute the children of any parent and the parent of any child node For instance, consider this array representation of a binary min heap:\njs\n[ 6, 22, 30, 37, 63, 48, 42, 76 ]\nThe root node is the first element, 6 Its children are 22 and 30 If we look at the relationship between the array indices of these values, for index i the children are 2 * i + 1 and 2 * i + 2 Similarly, the element at index 0 is the parent of these two children at indices 1 and 2 More generally, we can find the parent of a node at any index with the following: Math floor((i - 1) / 2) These patterns will hold true as the binary tree grows to any size Finally, we can make a slight adjustment to make this arithmetic even easier by skipping the first element in the array Doing this creates the following relationship for any element at a given index i:\nExample array representation:\njs\n[ null, 6, 22, 30, 37, 63, 48, 42, 76 ]\nAn element's left child: i * 2\nAn element's right child: i * 2 + 1\nAn element's parent: Math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\insert-an-element-into-a-max-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2d708a1994a1fd5158708d74fd13867b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\insert-an-element-into-a-max-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "binary tree grows to any size Finally, we can make a slight adjustment to make this arithmetic even easier by skipping the first element in the array Doing this creates the following relationship for any element at a given index i: Example array representation: js [ null, 6, 22, 30, 37, 63, 48, 42, 76 ] An element's left child: i * 2 An element's right child: i * 2 + 1 An element's parent: Mathfloor(i / 2)\nOnce you wrap your head around the math, using an array representation is very useful because node locations can be quickly determined with this arithmetic and memory usage is diminished because you don't need to maintain references to child nodes --instructions--\nInstructions: Here we will create a max heap Start by just creating an insert method which adds elements to our heap During insertion, it is important to always maintain the heap property For a max heap this means the root element should always have the greatest value in the tree and all parent nodes should be greater than their children For an array implementation of a heap, this is typically accomplished in three steps:\nAdd the new element to the end of the array If the element is larger than its parent, switch them Continue switching until the new element is either smaller than its parent or you reach the root of the tree Finally, add a print method which returns an array of all the items that have been added to the heap --hints--\nThe MaxHeap data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n}\nreturn typeof test == 'object';\n})()\n);\nMaxHeap should have a method called insert js\nassert(\n(function () {\nvar test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\nreturn typeof test insert == 'function';\n})()\n);\nMaxHeap should have a method called print js\nassert(\n(function () {\nvar test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\nreturn typeof test print == 'function';\n})()\n);\nThe insert method should add elements according to the max heap property ```js\nassert(\n(function () {\nvar test = false;\nif (typeof MaxHeap",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\insert-an-element-into-a-max-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "12f8f52e61be298bb1fba2e1c7df9619",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\insert-an-element-into-a-max-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return false; } return typeof test insert == 'function'; })() ); MaxHeap should have a method called print js assert( (function () { var test = false; if (typeof MaxHeap == 'undefined') { test = new MaxHeap(); } else { return false; } return typeof test print == 'function'; })() ); The insert method should add elements according to the max heap property ```js assert( (function () { var test = false; if (typeof MaxHeap== 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\ntest insert(50);\ntest insert(100);\ntest insert(700);\ntest insert(32);\ntest insert(51);\ntest insert(800);\nconst result = test print();\nconst solution = JSON stringify([null,800,51,700,32,50,100]);\nconst solutionWithoutNull = JSON stringify([800,51,700,32,50,100]);\nreturn (result length == 6) (JSON stringify(result) == solutionWithoutNull) : (JSON stringify(result) == solution);\n})()\n);\n```\n--seed--\n--seed-contents--\n```js\nvar MaxHeap = function() {\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\njs\nvar MaxHeap = function() {\n// Only change code below this line\nthis heap = [];\nthis parent = index => {\nreturn Math floor((index - 1) / 2);\n}\nthis insert = element => {\nthis heap push(element);\nthis heapifyUp(this heap length - 1);\n}\nthis heapifyUp = index => {\nlet currentIndex = index,\nparentIndex = this parent(currentIndex);\nwhile (currentIndex > 0 && this heap[currentIndex] > this heap[parentIndex]) {\nthis swap(currentIndex, parentIndex);\ncurrentIndex = parentIndex;\nparentIndex = this parent(parentIndex);\n}\n}\nthis swap = (index1, index2) => {\n[this heap[index1], this heap[index2]] = [this heap[index2], this heap[index1]];\n}\nthis print = () => {\nreturn this heap;\n}\n// Only change code above this line\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\insert-an-element-into-a-max-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7a30d20564fc10459d9e1c587fb4343d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-difference-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8254367417b2b2512c6e\ntitle: Perform a Difference on Two Sets of Data\nchallengeType: 1\nforumTopicId: 301706\ndashedName: perform-a-difference-on-two-sets-of-data\n--description--\nIn this exercise we are going to perform a difference on 2 sets of data We will create a method on our Set data structure called difference A difference of sets should compare two sets and return the items present in the first set that are absent in the second This method should take another Set as an argument and return the difference of the two sets For example, if setA = ['a','b','c'] and setB = ['a','b','d','e'], then the difference of setA and setB is: setA difference(setB) = ['c'] --hints--\nYour Set class should have a difference method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test difference === 'function';\n})()\n);\nYour difference method should return the proper collection ```js\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetA add('b');\nsetA add('c');\nsetB add('c');\nsetB add('d');\nvar differenceSetAB = setA difference(setB);\nassert equal(differenceSetAB size(), 2)\nassert deepEqual(differenceSetAB values(), ['a', 'b'])\n```\n--seed--\n--seed-contents--\n```js\nclass Set {\nconstructor() {\n// This will hold the set\nthis dictionary = {};\nthis length = 0;\n}\n// This method will check for the presence of an element and return true or false\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\n// This method will return all the values in the set\nvalues() {\nreturn Object keys(this dictionary);\n}\n// This method will add an element to the set\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = true;\nthis length++;\nreturn true;\n}\nreturn false;\n}\n// This method will remove an element from a set\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\n// This method will return the size of the set\nsize() {\nreturn this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-difference-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ce0a51cc6844f959d3db70df01956aa3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-difference-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return Object keys(this dictionary); } // This method will add an element to the set add(element) { if ( this has(element)) { this dictionary[element] = true; this length++; return true; } return false; } // This method will remove an element from a set remove(element) { if (this has(element)) { delete this dictionary[element]; this length--; return true; } return false; } // This method will return the size of the set size() { return thislength;\n}\n// This is our union method\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\n// This is our intersection method\nintersection(set) {\nconst newSet = new Set();\nlet largeSet;\nlet smallSet;\nif (this dictionary length > set length) {\nlargeSet = this;\nsmallSet = set;\n} else {\nlargeSet = set;\nsmallSet = this;\n}\nsmallSet values() forEach(value => {\nif (largeSet dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nclass Set {\nconstructor() {\nthis dictionary = {};\nthis length = 0;\n}\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\nvalues() {\nreturn Object keys(this dictionary);\n}\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = true;\nthis length++;\nreturn true;\n}\nreturn false;\n}\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\nsize() {\nreturn this length;\n}\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\nintersection(set) {\nconst newSet = new Set();\nlet largeSet;\nlet smallSet;\nif (this dictionary length > set length) {\nlargeSet = this;\nsmallSet = set;\n} else {\nlargeSet = set;\nsmallSet = this;\n}\nsmallSet values() forEach(value => {\nif (largeSet dictionary[value]) {\nnewSet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-difference-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "18062b6209c088d729166513c17a6e09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-difference-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return this length; } union(set) { const newSet = new Set(); this values() forEach(value => { newSet add(value); }) set values() forEach(value => { newSet add(value); }) return newSet; } intersection(set) { const newSet = new Set(); let largeSet; let smallSet; if (this dictionary length > set length) { largeSet = this; smallSet = set; } else { largeSet = set; smallSet = this; } smallSet values() forEach(value => { if (largeSet dictionary[value]) { newSetadd(value);\n}\n})\nreturn newSet;\n}\ndifference(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nif ( set dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-difference-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "639a9b60695c6a0bfc4d522932c326ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-union-on-two-sets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8253367417b2b2512c6c\ntitle: Perform a Union on Two Sets\nchallengeType: 1\nforumTopicId: 301708\ndashedName: perform-a-union-on-two-sets\n--description--\nIn this exercise we are going to perform a union on two sets of data We will create a method on our Set data structure called union This method should take another Set as an argument and return the union of the two sets, excluding any duplicate values For example, if setA = ['a','b','c'] and setB = ['a','b','d','e'], then the union of setA and setB is: setA union(setB) = ['a', 'b', 'c', 'd', 'e'] --hints--\nYour Set class should have a union method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test union === 'function';\n})()\n);\nThe union of a Set containing values [\"a\", \"b\", \"c\"] and a Set containing values [\"c\", \"d\"] should return a new Set containing values [\"a\", \"b\", \"c\", \"d\"] js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetA add('b');\nsetA add('c');\nsetB add('c');\nsetB add('d');\nvar unionSetAB = setA union(setB);\nvar final = unionSetAB values();\nreturn (\nfinal indexOf('a') == -1 &&\nfinal indexOf('b') == -1 &&\nfinal indexOf('c') == -1 &&\nfinal indexOf('d') == -1 &&\nfinal length === 4\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nclass Set {\nconstructor() {\n// This will hold the set\nthis dictionary = {};\nthis length = 0;\n}\n// This method will check for the presence of an element and return true or false\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\n// This method will return all the values in the set\nvalues() {\nreturn Object values(this dictionary);\n}\n// This method will add an element to the set\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = element;\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3207,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-union-on-two-sets.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ac58061c4f46e3bbb1225c00eaed742e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-union-on-two-sets.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "hold the set this dictionary = {}; this length = 0; } // This method will check for the presence of an element and return true or false has(element) { return this dictionary[element] == undefined; } // This method will return all the values in the set values() { return Object values(this dictionary); } // This method will add an element to the set add(element) { if ( this has(element)) { this dictionary[element] = element; thislength++;\nreturn true;\n}\nreturn false;\n}\n// This method will remove an element from a set\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\n// This method will return the size of the set\nsize() {\nreturn this length;\n}\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nclass Set {\nconstructor() {\nthis dictionary = {};\nthis length = 0;\n}\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\nvalues() {\nreturn Object values(this dictionary);\n}\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = element;\nthis length++;\nreturn true;\n}\nreturn false;\n}\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\nsize() {\nreturn this length;\n}\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3207,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-union-on-two-sets.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4d6d7677d04dfc9ed5437286be979991",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8254367417b2b2512c6f\ntitle: Perform a Subset Check on Two Sets of Data\nchallengeType: 1\nforumTopicId: 301707\ndashedName: perform-a-subset-check-on-two-sets-of-data\n--description--\nIn this exercise, we are going to perform a subset test on 2 sets of data We will create a method on our Set data structure called isSubsetOf This will compare the first set against the second, and if the first set is fully contained within the second, it will return true For example, if setA = ['a','b'] and setB = ['a','b','c','d'], then setA is a subset of setB, so setA isSubsetOf(setB) should return true --hints--\nYour Set class should have a isSubsetOf method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test isSubsetOf === 'function';\n})()\n);\nThe first Set should be contained in the second Set js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetB add('b');\nsetB add('c');\nsetB add('a');\nsetB add('d');\nvar aIsSubsetOfB = setA isSubsetOf(setB);\nreturn aIsSubsetOfB === true;\n})()\n);\n['a', 'b'] isSubsetOf(['a', 'b', 'c', 'd']) should return true js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetA add('b');\nsetB add('a');\nsetB add('b');\nsetB add('c');\nsetB add('d');\nvar aIsSubsetOfB = setA isSubsetOf(setB);\nreturn aIsSubsetOfB === true;\n})()\n);\n['a', 'b', 'c'] isSubsetOf(['a', 'b']) should return false js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetA add('b');\nsetA add('c');\nsetB add('a');\nsetB add('b');\nvar aIsSubsetOfB = setA",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "4cba3896f7e9e83f875571c58195b8b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "true js assert( (function () { var setA = new Set(); var setB = new Set(); setA add('a'); setA add('b'); setB add('a'); setB add('b'); setB add('c'); setB add('d'); var aIsSubsetOfB = setA isSubsetOf(setB); return aIsSubsetOfB === true; })() ); ['a', 'b', 'c'] isSubsetOf(['a', 'b']) should return false js assert( (function () { var setA = new Set(); var setB = new Set(); setA add('a'); setA add('b'); setA add('c'); setB add('a'); setB add('b'); var aIsSubsetOfB = setAisSubsetOf(setB);\nreturn aIsSubsetOfB === false;\n})()\n);\n[] isSubsetOf([]) should return true js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nvar aIsSubsetOfB = setA isSubsetOf(setB);\nreturn aIsSubsetOfB === true;\n})()\n);\n['a', 'b'] isSubsetOf(['c', 'd']) should return false js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetA add('b');\nsetB add('c');\nsetB add('d');\nvar aIsSubsetOfB = setA isSubsetOf(setB);\nreturn aIsSubsetOfB === false;\n})()\n);\n--seed--\n--seed-contents--\n```js\nclass Set {\nconstructor() {\n// This will hold the set\nthis dictionary = {};\nthis length = 0;\n}\n// This method will check for the presence of an element and return true or false\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\n// This method will return all the values in the set\nvalues() {\nreturn Object keys(this dictionary);\n}\n// This method will add an element to the set\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = true;\nthis length++;\nreturn true;\n}\nreturn false;\n}\n// This method will remove an element from a set\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "49667660e9f6cf549d73843e9b890568",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "false has(element) { return this dictionary[element] == undefined; } // This method will return all the values in the set values() { return Object keys(this dictionary); } // This method will add an element to the set add(element) { if ( this has(element)) { this dictionary[element] = true; this length++; return true; } return false; } // This method will remove an element from a set remove(element) { if (this has(element)) { delete this dictionary[element]; thislength--;\nreturn true;\n}\nreturn false;\n}\n// This method will return the size of the set\nsize() {\nreturn this length;\n}\n// This is our union method\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\n// This is our intersection method\nintersection(set) {\nconst newSet = new Set();\nlet largeSet;\nlet smallSet;\nif (this dictionary length > set length) {\nlargeSet = this;\nsmallSet = set;\n} else {\nlargeSet = set;\nsmallSet = this;\n}\nsmallSet values() forEach(value => {\nif (largeSet dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\ndifference(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nif ( set dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nclass Set {\nconstructor() {\nthis dictionary = {};\nthis length = 0;\n}\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\nvalues() {\nreturn Object keys(this dictionary);\n}\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = true;\nthis length++;\nreturn true;\n}\nreturn false;\n}\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\nsize() {\nreturn this length;\n}\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\nintersection(set) {\nconst newSet = new Set();\nlet largeSet;\nlet smallSet;\nif (this dictionary",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a132b42f27069f6b1eecef5b49f8d752",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ this dictionary[element] = true; this length++; return true; } return false; } remove(element) { if (this has(element)) { delete this dictionary[element]; this length--; return true; } return false; } size() { return this length; } union(set) { const newSet = new Set(); this values() forEach(value => { newSet add(value); }) set values() forEach(value => { newSet add(value); }) return newSet; } intersection(set) { const newSet = new Set(); let largeSet; let smallSet; if (this dictionarylength > set length) {\nlargeSet = this;\nsmallSet = set;\n} else {\nlargeSet = set;\nsmallSet = this;\n}\nsmallSet values() forEach(value => {\nif (largeSet dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\ndifference(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nif ( set dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\nisSubsetOf(set) {\nfor(const value of this values()){\nif( set dictionary[value]) return false;\n}\nreturn true\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-a-subset-check-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "9c64e2928d2f38b4e16f3463b2c51f94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-an-intersection-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8253367417b2b2512c6d\ntitle: Perform an Intersection on Two Sets of Data\nchallengeType: 1\nforumTopicId: 301709\ndashedName: perform-an-intersection-on-two-sets-of-data\n--description--\nIn this exercise we are going to perform an intersection on 2 sets of data We will create a method on our Set data structure called intersection An intersection of sets represents all values that are common to two or more sets This method should take another Set as an argument and return the intersection of the two sets For example, if setA = ['a','b','c'] and setB = ['a','b','d','e'], then the intersection of setA and setB is: setA intersection(setB) = ['a', 'b'] --hints--\nYour Set class should have a intersection method js\nassert(\n(function () {\nvar test = new Set();\nreturn typeof test intersection === 'function';\n})()\n);\nThe proper collection should be returned js\nassert(\n(function () {\nvar setA = new Set();\nvar setB = new Set();\nsetA add('a');\nsetA add('b');\nsetA add('c');\nsetB add('c');\nsetB add('d');\nvar intersectionSetAB = setA intersection(setB);\nreturn (\nintersectionSetAB size() === 1 && intersectionSetAB values()[0] === 'c'\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nclass Set {\nconstructor() {\n// This will hold the set\nthis dictionary = {};\nthis length = 0;\n}\n// This method will check for the presence of an element and return true or false\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\n// This method will return all the values in the set\nvalues() {\nreturn Object keys(this dictionary);\n}\n// This method will add an element to the set\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = true;\nthis length++;\nreturn true;\n}\nreturn false;\n}\n// This method will remove an element from a set\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\n// This method will return the size of the set\nsize() {\nreturn this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-an-intersection-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "35cd4bb4087053ac5a9e4adddcbc3e27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-an-intersection-on-two-sets-of-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return Object keys(this dictionary); } // This method will add an element to the set add(element) { if ( this has(element)) { this dictionary[element] = true; this length++; return true; } return false; } // This method will remove an element from a set remove(element) { if (this has(element)) { delete this dictionary[element]; this length--; return true; } return false; } // This method will return the size of the set size() { return thislength;\n}\n// This is our union method\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nclass Set {\nconstructor() {\nthis dictionary = {};\nthis length = 0;\n}\nhas(element) {\nreturn this dictionary[element] == undefined;\n}\nvalues() {\nreturn Object keys(this dictionary);\n}\nadd(element) {\nif ( this has(element)) {\nthis dictionary[element] = true;\nthis length++;\nreturn true;\n}\nreturn false;\n}\nremove(element) {\nif (this has(element)) {\ndelete this dictionary[element];\nthis length--;\nreturn true;\n}\nreturn false;\n}\nsize() {\nreturn this length;\n}\nunion(set) {\nconst newSet = new Set();\nthis values() forEach(value => {\nnewSet add(value);\n})\nset values() forEach(value => {\nnewSet add(value);\n})\nreturn newSet;\n}\nintersection(set) {\nconst newSet = new Set();\nlet largeSet;\nlet smallSet;\nif (this dictionary length > set length) {\nlargeSet = this;\nsmallSet = set;\n} else {\nlargeSet = set;\nsmallSet = this;\n}\nsmallSet values() forEach(value => {\nif (largeSet dictionary[value]) {\nnewSet add(value);\n}\n})\nreturn newSet;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\perform-an-intersection-on-two-sets-of-data.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "edbe1bd683676fb1ad95173b0ffb5023",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-items-from-a-set-in-es6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8254367417b2b2512c71\ntitle: Remove items from a set in ES6\nchallengeType: 1\nforumTopicId: 301713\ndashedName: remove-items-from-a-set-in-es6\n--description--\nLet's practice removing items from an ES6 Set using the delete method.\nFirst, create an ES6 Set:\njs\nvar set = new Set([1,2,3]);\nNow remove an item from your Set with the delete method.\njs\nset.delete(1);\nconsole.log([...set]) // should return [ 2, 3 ]\n--instructions--\nNow, create a set with the integers 1, 2, 3, 4, & 5.\nRemove the values 2 and 5, and then return the set.\n--hints--\nYour Set should contain the values 1, 3, & 4\njs\nassert(\n(function () {\nvar test = checkSet();\nreturn test.has(1) && test.has(3) && test.has(4) && test.size === 3;\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction checkSet(){\n// Only change code below this line\nvar set = null;\n// Only change code above this line\nreturn set;\n}\n```\n--solutions--\njs\nfunction checkSet(){\nvar set = new Set([1,2,3,4,5]);\nset.delete(2);\nset.delete(5);\nreturn set;}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1085,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-items-from-a-set-in-es6.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eefc2fda1df264281dda5ef8ec7fc4db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-an-element-from-a-max-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825b367417b2b2512c8b\ntitle: Remove an Element from a Max Heap\nchallengeType: 1\nforumTopicId: 301710\ndashedName: remove-an-element-from-a-max-heap\n--description--\nNow that we can add elements to our heap let's see how we can remove elements Removing and inserting elements both require similar logic In a max heap you will usually want to remove the greatest value, so this involves simply extracting it from the root of our tree This will break the heap property of our tree, so we must reestablish it in some way Typically, for a max heap this is done in the following way:\nMove the last element in the heap into the root position If either child of the root is greater than it, swap the root with the child of greater value Continue swapping until the parent is greater than both children or you reach the last level in the tree --instructions--\nInstructions: Add a method to our max heap called remove This method should return the greatest value that has been added to our max heap and remove it from the heap It should also reorder the heap so the heap property is maintained After removing an element, the next greatest element remaining in the heap should become the root --hints--\nThe MaxHeap data structure should exist js\nassert(\n(function () {\nlet test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n}\nreturn typeof test == 'object';\n})()\n);\nMaxHeap should have a method called print js\nassert(\n(function () {\nlet test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\nreturn typeof test print == 'function';\n})()\n);\nMaxHeap should have a method called insert js\nassert(\n(function () {\nlet test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\nreturn typeof test insert == 'function';\n})()\n);\nMaxHeap should have a method called remove js\nassert(\n(function () {\nlet test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\nreturn typeof test remove == 'function';\n})()\n);\nThe remove method should remove the greatest element from the max heap while maintaining the max heap property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-an-element-from-a-max-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "19c3ff710eb538542deed91229f76a23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-an-element-from-a-max-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test = new MaxHeap(); } else { return false; } return typeof test insert == 'function'; })() ); MaxHeap should have a method called remove js assert( (function () { let test = false; if (typeof MaxHeap == 'undefined') { test = new MaxHeap(); } else { return false; } return typeof test remove == 'function'; })() ); The remove method should remove the greatest element from the max heap while maintaining the max heap property```js\nfunction isHeap(arr, i, n) {\nif( arr[i] < arr[2 * i + 1] || arr[i] < arr[2 * i + 2] ){\nreturn false;\n}\nif (i > (n - 1) / 2) {\nreturn true;\n}\nif (isHeap(arr, 2 * i + 1, n) && isHeap(arr, 2 * i + 2, n)) {\nreturn true;\n}\nreturn false;\n}\nassert(\n(function () {\nlet test = false;\nif (typeof MaxHeap == 'undefined') {\ntest = new MaxHeap();\n} else {\nreturn false;\n}\nlet max = Infinity;\nconst [result, vals] = [[], [9, 3, 5, 2, 15, 3, 7, 12, 7, 10, 90]];\nvals forEach((val) => test insert(val));\nfor (let i = 0; i < vals length; i++) {\nconst curHeap = test print();\nconst arr = curHeap[0] === null curHeap slice(1) : curHeap;\nif ( isHeap(arr, 0, arr length - 1)) {\nreturn false;\n}\nconst removed = test remove();\nif ( vals includes(removed)) return false;\nif (removed > max) return false\nmax = removed;\nresult push(removed);\n}\nfor (let i = 0; i < vals length; i++) {\nif ( result includes(vals[i])) {\nreturn false;\n}\n}\nreturn true;\n})()\n);\n```\n--seed--\n--seed-contents--\n```js\nconst MaxHeap = function () {\nthis heap = [];\nthis parent = index => {\nreturn Math floor((index - 1) / 2);\n}\nthis insert = element => {\nthis heap push(element);\nthis heapifyUp(this heap length - 1);\n}\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-an-element-from-a-max-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "12f2ba9cdd18718e1701c79a4bba9e13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-an-element-from-a-max-heap.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "false max = removed; result push(removed); } for (let i = 0; i < vals length; i++) { if ( result includes(vals[i])) { return false; } } return true; })() ); ``` --seed-- --seed-contents-- ```js const MaxHeap = function () { this heap = []; this parent = index => { return Math floor((index - 1) / 2); } this insert = element => { this heap push(element); this heapifyUp(this heap length - 1); } thisheapifyUp = index => {\nlet currentIndex = index,\nparentIndex = this parent(currentIndex);\nwhile (currentIndex > 0 && this heap[currentIndex] > this heap[parentIndex]) {\nthis swap(currentIndex, parentIndex);\ncurrentIndex = parentIndex;\nparentIndex = this parent(parentIndex);\n}\n}\nthis swap = (index1, index2) => {\n[this heap[index1], this heap[index2]] = [this heap[index2], this heap[index1]];\n}\nthis print = () => {\nreturn this heap;\n}\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-an-element-from-a-max-heap.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f44604f6155db7c2b6af7d2dedcd02b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8251367417b2b2512c65\ntitle: Remove Elements from a Linked List by Index\nchallengeType: 1\nforumTopicId: 301711\ndashedName: remove-elements-from-a-linked-list-by-index\n--description--\nBefore we move on to another data structure, let's get a couple of last bits of practice with linked lists Let's write a removeAt method that removes the element at a given index The method should be called removeAt(index) To remove an element at a certain index, we'll need to keep a running count of each node as we move along the linked list A common technique used to iterate through the elements of a linked list involves a 'runner', or sentinel, that 'points' at the nodes that your code is comparing In our case, starting at the head of our list, we start with a currentIndex variable that starts at 0 The currentIndex should increment by one for each node we pass Just like our remove(element) method, which we covered in a previous lesson, we need to be careful not to orphan the rest of our list when we remove the node in our removeAt(index) method We keep our nodes contiguous by making sure that the node that has reference to the removed node has a reference to the next node --instructions--\nWrite a removeAt(index) method that removes and returns a node at a given index The method should return null if the given index is either negative, or greater than or equal to the length of the linked list Note: Remember to keep count of the currentIndex --hints--\nYour LinkedList class should have a removeAt method js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn typeof test removeAt === 'function';\n})()\n);\nYour removeAt method should reduce the length of the linked list by one js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\ntest removeAt(1);\nreturn test size() === 2;\n})()\n);\nYour removeAt method should remove the element at the specified index from the linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\ntest add('bird');\ntest removeAt(1);\nreturn (\nJSON stringify(test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "998874deb15eaa39dc699cc342430068",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "removeAt method should reduce the length of the linked list by one js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test add('kitten'); test removeAt(1); return test size() === 2; })() ); Your removeAt method should remove the element at the specified index from the linked list js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test add('kitten'); test add('bird'); test removeAt(1); return ( JSON stringify(testhead()) ===\n'{\"element\":\"cat\",\"next\":{\"element\":\"kitten\",\"next\":{\"element\":\"bird\",\"next\":null}}}'\n);\n})()\n);\nWhen only one element is present in the linked list, your removeAt method should remove and return the element at specified index, and reduce the length of the linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\nvar removedItem = test removeAt(0);\nreturn test head() === null && test size() === 0 && removedItem === 'cat';\n})()\n);\nYour removeAt method should return the element of the removed node js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nreturn test removeAt(1) === 'dog';\n})()\n);\nYour removeAt method should return null and the linked list should not change if the given index is less than 0 js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nvar removedItem = test removeAt(-1);\nreturn (\nremovedItem === null &&\nJSON stringify(test head()) ===\n'{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n);\n})()\n);\nYour removeAt method should return null and the linked list should not change if the given index is greater than or equal to the length of the list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nvar removedItem = test removeAt(3);\nreturn (\nremovedItem === null &&\nJSON stringify(test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ec919010c87bfbab862b13d80b3cab6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "var removedItem = test removeAt(-1); return ( removedItem === null && JSON stringify(test head()) === '{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}' ); })() ); Your removeAt method should return null and the linked list should not change if the given index is greater than or equal to the length of the list js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test add('kitten'); var removedItem = test removeAt(3); return ( removedItem === null && JSON stringify(testhead()) ===\n'{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis size = function(){\nreturn length;\n};\nthis head = function(){\nreturn head;\n};\nthis add = function(element){\nvar node = new Node(element);\nif(head === null){\nhead = node;\n} else {\nvar currentNode = head;\nwhile(currentNode next){\ncurrentNode  = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function (element) {\nthis element = element;\nthis next = null;\n};\nthis size = function () {\nreturn length;\n};\nthis head = function () {\nreturn head;\n};\nthis add = function (element) {\nvar node = new Node(element);\nif (head === null) {\nhead = node;\n} else {\nvar currentNode = head;\nwhile (currentNode next) {\ncurrentNode = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\nthis removeAt = function (index) {\nvar currentNode = head;\nvar previous = head;\nvar count = 0;\nif (index >= length || index < 0) {\nreturn null;\n}\nif (index === 0) {\nvar removed = head element;\nhead = currentNode next;\n} else {\nwhile (count < index) {\nprevious = currentNode;\ncurrentNode = currentNode next;\ncount++;\n}\nvar removed = previous next",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e9d9a4aadc1e583572422354b773107a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "currentNode next; } currentNode next = node; } length++; }; this removeAt = function (index) { var currentNode = head; var previous = head; var count = 0; if (index >= length || index < 0) { return null; } if (index === 0) { var removed = head element; head = currentNode next; } else { while (count < index) { previous = currentNode; currentNode = currentNode next; count++; } var removed = previous nextelement;\nprevious next = currentNode next;\n}\nlength--;\nreturn removed;\n};\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6024,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list-by-index.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "3dd8c5c40f3a6cab682e09278b3162c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8251367417b2b2512c63\ntitle: Remove Elements from a Linked List\nchallengeType: 1\nforumTopicId: 301712\ndashedName: remove-elements-from-a-linked-list\n--description--\nThe next important method that any implementation of a linked list will need is a remove method This method should take the element we want to remove as an argument, and then search the list to find and remove the node that contains that element Whenever we remove a node from a linked list, it's important that we don't accidentally orphan the rest of the list in doing so Recall that every node's next property points to the node that follows it in the list If we're removing the middle element, say, we'll want to make sure that we have a connection from that element's previous node's next property to the middle element's next property (which is the next node in the list )\nThis might sound really confusing, so let's return to the conga line example so we have a good conceptual model Picture yourself in a conga line, and the person directly in front of you leaves the line The person who just left the line no longer has her hands on anyone in line--and you no longer have your hands on the person that left You step forward and put your hands on next person you see If the element we wish to remove is the head element, we reassign the head to the second node of the linked list --instructions--\nWrite a remove method that takes an element and removes it from the linked list Note: The length of the list should decrease by one every time an element is removed from the linked list --hints--\nYour LinkedList class should have a remove method js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn typeof test remove === 'function';\n})()\n);\nYour remove method should reassign head to the second node when the first node is removed js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest remove('cat');\nreturn test head() element === 'dog';\n})()\n);\nYour remove method should decrease the length of the linked list by one for every node removed js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('hamster');\ntest remove('cat');\ntest remove('fish');\nreturn test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a928f93c29d59423e45d938eb5f75342",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should reassign head to the second node when the first node is removed js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test remove('cat'); return test head() element === 'dog'; })() ); Your remove method should decrease the length of the linked list by one for every node removed js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test add('hamster'); test remove('cat'); test remove('fish'); return testsize() === 2;\n})()\n);\nYour remove method should reassign the reference of the previous node of the removed node to the removed node's next reference js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('snake');\ntest add('kitten');\ntest remove('snake');\nreturn test head() next next element === 'kitten';\n})()\n);\nYour remove method should not change the linked list if the element does not exist in the linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\ntest remove('elephant');\nreturn (\nJSON stringify(test head()) ===\n'{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n);\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis size = function(){\nreturn length;\n};\nthis head = function(){\nreturn head;\n};\nthis add = function(element){\nvar node = new Node(element);\nif(head === null){\nhead = node;\n} else {\nvar currentNode = head;\nwhile(currentNode next){\ncurrentNode  = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\nthis remove = function(element){\n// Only change code below this line\n// Only change code above this line\n};\n}\n```\n--solutions--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis size = function(){\nreturn length;\n};\nthis head = function(){\nreturn head;\n};\nthis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a0ca68663702e05074940e7cecd3d787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "while(currentNode next){ currentNode = currentNode next; } currentNode next = node; } length++; }; this remove = function(element){ // Only change code below this line // Only change code above this line }; } ``` --solutions-- ```js function LinkedList() { var length = 0; var head = null; var Node = function(element){ this element = element; this next = null; }; this size = function(){ return length; }; this head = function(){ return head; }; thisadd = function(element){\nvar node = new Node(element);\nif(head === null){\nhead = node;\n} else {\nvar currentNode = head;\nwhile(currentNode next){\ncurrentNode  = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\nthis remove = function(element){\nif (head === null) {\nreturn;\n}\nvar previous;\nvar currentNode = head;\nwhile (currentNode next == null && currentNode element == element) {\nprevious = currentNode;\ncurrentNode = currentNode next;\n}\nif (currentNode next === null && currentNode element == element) {\nreturn;\n}\nelse if (previous) {\nprevious next = currentNode next;\n} else {\nhead = currentNode next;\n}\nlength--;\n};\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\remove-elements-from-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 244,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "73082b729b642ddfe7022426010325e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-.has-and-.size-on-an-es6-set.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8255367417b2b2512c72\ntitle: Use .has and .size on an ES6 Set\nchallengeType: 1\nforumTopicId: 301717\ndashedName: use--has-and--size-on-an-es6-set\n--description--\nLet's look at the .has and .size methods available on the ES6 Set object.\nFirst, create an ES6 Set\njs\nvar set = new Set([1,2,3]);\nThe .has method will check if the value is contained within the set.\njs\nvar hasTwo = set.has(2);\nThe .size method will return an integer representing the size of the Set\njs\nvar howBig = set.size;\n--instructions--\nIn this exercise we will pass an array and a value to the checkSet() function. Your function should create an ES6 set from the array argument. Find if the set contains the value argument. Find the size of the set. And return those two values in an array.\n--hints--\ncheckSet([4, 5, 6], 3) should return [ false, 3 ]\njs\nvar test = checkSet([4, 5, 6], 3);\nassert.deepEqual(test, [false, 3]);\n--seed--\n--seed-contents--\n```js\nfunction checkSet(arrToBeSet, checkValue){\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nfunction checkSet(arrToBeSet, checkValue){\nvar set = new Set(arrToBeSet);\nvar result = [\nset.has(checkValue),\nset.size\n];\nreturn result;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1295,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-.has-and-.size-on-an-es6-set.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "af7b29bc7766ca547b8eea374588adef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\reverse-a-doubly-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d825a367417b2b2512c88\ntitle: Reverse a Doubly Linked List\nchallengeType: 1\nforumTopicId: 301714\ndashedName: reverse-a-doubly-linked-list\n--description--\nLet's create one more method for our doubly linked list called reverse which reverses the list in place Once the method is executed the head should point to the previous tail and the tail should point to the previous head Now, if we traverse the list from head to tail we should meet the nodes in a reverse order compared to the original list Trying to reverse an empty list should return null --hints--\nThe DoublyLinkedList data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nreturn typeof test == 'object';\n})()\n);\nThe DoublyLinkedList should have a method called reverse js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nif (test reverse == undefined) {\nreturn false;\n}\nreturn typeof test reverse == 'function';\n})()\n);\nReversing an empty list should return null js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\nreturn test reverse() == null;\n})()\n);\nThe reverse method should reverse the list js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\ntest add(58);\ntest add(61);\ntest add(32);\ntest add(95);\ntest add(41);\ntest reverse();\nreturn test print() join('') == '4195326158';\n})()\n);\nThe next and previous references should be correctly maintained when a list is reversed js\nassert(\n(function () {\nvar test = false;\nif (typeof DoublyLinkedList == 'undefined') {\ntest = new DoublyLinkedList();\n}\ntest add(11);\ntest add(22);\ntest add(33);\ntest add(44);\ntest add(55);\ntest reverse();\nreturn test printReverse() join('') == '1122334455';\n})()\n);\n--seed--\n--after-user-code--\njs\nDoublyLinkedList prototype = Object assign(\nDoublyLinkedList",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\reverse-a-doubly-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "47c7a0a860467c2a7ef92d5df8c809a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\reverse-a-doubly-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "add(95); test add(41); test reverse(); return test print() join('') == '4195326158'; })() ); The next and previous references should be correctly maintained when a list is reversed js assert( (function () { var test = false; if (typeof DoublyLinkedList == 'undefined') { test = new DoublyLinkedList(); } test add(11); test add(22); test add(33); test add(44); test add(55); test reverse(); return test printReverse() join('') == '1122334455'; })() ); --seed-- --after-user-code-- js DoublyLinkedList prototype = Object assign( DoublyLinkedListprototype,\n{\nadd(data) {\nif (this head == null) {\nthis head = new Node(data, null);\nthis tail = this head;\n} else {\nvar node = this head;\nvar prev = null;\nwhile (node next = null) {\nprev = node;\nnode = node next;\n};\nvar newNode = new Node(data, node);\nnode next = newNode;\nthis tail = newNode;\n};\n},\nprint() {\nif (this head == null) {\nreturn null;\n} else {\nvar result = new Array();\nvar node = this head;\nwhile (node next = null) {\nresult push(node data);\nnode = node next;\n};\nresult push(node data);\nreturn result;\n};\n},\nprintReverse() {\nif (this tail == null) {\nreturn null;\n} else {\nvar result = new Array();\nvar node = this tail;\nwhile (node prev = null) {\nresult push(node data);\nnode = node prev;\n};\nresult push(node data);\nreturn result;\n};\n}\n}\n);\n--seed-contents--\n```js\nvar Node = function(data, prev) {\nthis data = data;\nthis prev = prev;\nthis next = null;\n};\nvar DoublyLinkedList = function() {\nthis head = null;\nthis tail = null;\n// Only change code below this line\n// Only change code above this line\n};\n```\n--solutions--\n```js\nvar Node = function(data, prev) {\nthis data = data;\nthis prev = prev;\nthis next = null;\n};\nvar DoublyLinkedList = function() {\nthis head = null;\nthis tail = null;\nthis reverse = function() {\nif ( this head || this head next) {\nreturn this head\n}\nlet tail;\nlet temp;\nlet current = this head;\nwhile(current",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\reverse-a-doubly-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "92ce714fa868bdd83d35f5593440ccc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\reverse-a-doubly-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "change code below this line // Only change code above this line }; ``` --solutions-- ```js var Node = function(data, prev) { this data = data; this prev = prev; this next = null; }; var DoublyLinkedList = function() { this head = null; this tail = null; this reverse = function() { if ( this head || this head next) { return this head } let tail; let temp; let current = this head; while(current== null) {\nif( tail) tail = current;\ntemp = current prev;\ncurrent prev = current next;\ncurrent next = temp;\ncurrent = current prev;\n}\nthis head = temp prev;\nthis tail = tail\n}\n};\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\reverse-a-doubly-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6b357f7283d6c4c7a3e4515ab79fa24b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\typed-arrays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8253367417b2b2512c6a\ntitle: Typed Arrays\nchallengeType: 1\nforumTopicId: 301716\ndashedName: typed-arrays\n--description--\nArrays are JavaScript objects that can hold a lot of different elements js\nvar complexArr = [1, 5, \"2\", \"Word\", {\"name\": \"James\"}];\nBasically what happens in the background is that your browser will automatically give the right amount of memory space for that array It will also change as needed if you add or remove data However, in the world of high performance and different element types, sometimes you need to be more specific on how much memory is given to an array Typed arrays are the answer to this problem You are now able to say how much memory you want to give an array Below is a basic overview of the different types of arrays available and the size in bytes for each element in that array TypeEach element size in bytesInt8Array1Uint8Array1Uint8ClampedArray1Int16Array2Uint16Array2Int32Array4Uint32Array4Float32Array4Float64Array8\nThere are two ways in creating these kind of arrays One way is to create it directly Below is how to create a 3 length Int16Array js\nvar i8 = new Int16Array(3);\nconsole log(i8);\n// Returns [0, 0, 0]\nYou can also create a buffer to assign how much data (in bytes) you want the array to take up Note\nTo create typed arrays using buffers, you need to assign the number of bytes to be a multiple of the bytes listed above js\n// Create same Int16Array array differently\nvar byteSize = 6; // Needs to be multiple of 2\nvar buffer = new ArrayBuffer(byteSize);\nvar i8View = new Int16Array(buffer);\nbuffer byteLength; // Returns 6\ni8View byteLength; // Returns 6\nconsole log(i8View); // Returns [0, 0, 0]\nBuffers are general purpose objects that just carry data You cannot access them normally To access them, you need to first create a view js\ni8View[0] = 42;\nconsole log(i8View); // Returns [42, 0, 0]\nNote\nTyped arrays do not have some of the methods traditional arrays have such as",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3319,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\typed-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "eb9c734bfb564b7fc7ada6c107abcfec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\typed-arrays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "buffer = new ArrayBuffer(byteSize); var i8View = new Int16Array(buffer); buffer byteLength; // Returns 6 i8View byteLength; // Returns 6 console log(i8View); // Returns [0, 0, 0] Buffers are general purpose objects that just carry data You cannot access them normally To access them, you need to first create a view js i8View[0] = 42; console log(i8View); // Returns [42, 0, 0] Note Typed arrays do not have some of the methods traditional arrays have such aspop() or push() Typed arrays also fail Array isArray() that checks if something is an array Although simpler, this can be an advantage for less-sophisticated JavaScript engines to implement them --instructions--\nFirst create a buffer that is 64-bytes Then create a Int32Array typed array with a view of it called i32View --hints--\nYour buffer should be 64 bytes large js\nassert(buffer byteLength === 64);\nYour i32View view of your buffer should be 64 bytes large js\nassert(i32View byteLength === 64);\nYour i32View view of your buffer should be 16 elements long js\nassert(i32View length === 16);\n--seed--\n--seed-contents--\njs\nvar buffer;\nvar i32View;\n--solutions--\njs\nvar buffer = new ArrayBuffer(64);\nvar i32View = new Int32Array(buffer);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3319,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\typed-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9b64d72d43bab47e8113cb23519565c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-spread-and-notes-for-es5-set-integration.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8255367417b2b2512c73\ntitle: Use Spread and Notes for ES5 Set() Integration\nchallengeType: 1\nforumTopicId: 301720\ndashedName: use-spread-and-notes-for-es5-set-integration\n--description--\nDo you remember the ES6 spread operator ...?\n... can take iterable objects in ES6 and turn them into arrays.\nLet's create a Set, and check out the spread function.\njs\nvar set = new Set([1,2,3]);\nvar setToArr = [...set]\nconsole.log(setToArr) // returns [ 1, 2, 3 ]\n--instructions--\nIn this exercise we will pass a set object to the checkSet function. It should return an array containing the values of the Set.\nNow you've successfully learned how to use the ES6 Set() object, good job!\n--hints--\ncheckSet(new Set([1,2,3,4,5,6,7]) should return [1, 2, 3, 4, 5, 6, 7].\njs\nvar test = checkSet(new Set([1, 2, 3, 4, 5, 6, 7]));\nassert.deepEqual(test, [1, 2, 3, 4, 5, 6, 7]);\n--seed--\n--seed-contents--\n```js\nfunction checkSet(set){\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\njs\nfunction checkSet(set){\nreturn [...set];}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1134,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-spread-and-notes-for-es5-set-integration.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e59b94461f741897d66705a87d267e2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\search-within-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8251367417b2b2512c64\ntitle: Search within a Linked List\nchallengeType: 1\nforumTopicId: 301715\ndashedName: search-within-a-linked-list\n--description--\nLet's add a few more useful methods to our linked list class Wouldn't it be useful if we could tell if our list was empty or not, as with our Stack and Queue classes We should also be able to find specific elements in our linked list Traversing through data structures is something you'll want to get a lot of practice with Let's create an indexOf method that takes an element as an argument, and returns that element's index in the linked list If the element is not found in the linked list, return -1 Let's also implement a method that does the opposite: an elementAt method that takes an index as an argument and returns the element at the given index If no element is found, return undefined --instructions--\nWrite an isEmpty method that checks if the linked list is empty, an indexOf method that returns the index of a given element, and an elementAt that returns an element at a given index --hints--\nYour LinkedList class should have an isEmpty method js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn typeof test isEmpty === 'function';\n})()\n);\nYour isEmpty method should return false when there is at least one element in linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nreturn test isEmpty() === false;\n})()\n);\nYour isEmpty method should return true when there are no elements in linked list js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn test isEmpty() === true;\n})()\n);\nYour LinkedList class should have an indexOf method js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn typeof test indexOf === 'function';\n})()\n);\nYour indexOf method should return the index of a given element found in linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nreturn test indexOf('cat') === 0;\n})()\n);\nYour indexOf method should return -1 if the given element is not found in linked list\njs\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\search-within-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4912fa5f88d077f6eb81bafbf354a8df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\search-within-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "typeof test indexOf === 'function'; })() ); Your indexOf method should return the index of a given element found in linked list js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); test add('kitten'); return test indexOf('cat') === 0; })() ); Your indexOf method should return -1 if the given element is not found in linked list js assert( (function () { var test = new LinkedList(); test add('cat'); test add('dog'); testadd('kitten');\nreturn test indexOf('pony') === -1;\n})()\n);\nYour LinkedList class should have an elementAt method js\nassert(\n(function () {\nvar test = new LinkedList();\nreturn typeof test elementAt === 'function';\n})()\n);\nYour elementAt method should return the element found at a given index in linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nreturn test elementAt(1) === 'dog';\n})()\n);\nYour elementAt method should return undefined if the given element is not found at a given index in linked list js\nassert(\n(function () {\nvar test = new LinkedList();\ntest add('cat');\ntest add('dog');\ntest add('kitten');\nreturn test elementAt(5) === undefined;\n})()\n);\n--seed--\n--seed-contents--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis size = function() {\nreturn length;\n};\nthis head = function(){\nreturn head;\n};\nthis add = function(element){\nvar node = new Node(element);\nif(head === null){\nhead = node;\n} else {\nvar currentNode = head;\nwhile(currentNode next){\ncurrentNode = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\nthis remove = function(element){\nvar currentNode = head;\nvar previousNode;\nif(currentNode element === element){\nhead = currentNode next;\n} else {\nwhile(currentNode element == element) {\npreviousNode = currentNode;\ncurrentNode = currentNode next;\n}\npreviousNode next = currentNode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\search-within-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8fba2fbb3589227c804d89fa1edf7377",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\search-within-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "head; }; this add = function(element){ var node = new Node(element); if(head === null){ head = node; } else { var currentNode = head; while(currentNode next){ currentNode = currentNode next; } currentNode next = node; } length++; }; this remove = function(element){ var currentNode = head; var previousNode; if(currentNode element === element){ head = currentNode next; } else { while(currentNode element == element) { previousNode = currentNode; currentNode = currentNode next; } previousNode next = currentNodenext;\n}\nlength --;\n};\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nfunction LinkedList() {\nvar length = 0;\nvar head = null;\nvar Node = function(element){\nthis element = element;\nthis next = null;\n};\nthis size = function() {\nreturn length;\n};\nthis head = function(){\nreturn head;\n};\nthis add = function(element){\nvar node = new Node(element);\nif(head === null){\nhead = node;\n} else {\nvar currentNode = head;\nwhile(currentNode next){\ncurrentNode  = currentNode next;\n}\ncurrentNode next = node;\n}\nlength++;\n};\nthis remove = function(element){\nvar currentNode = head;\nvar previousNode;\nif(currentNode element === element){\nhead = currentNode next;\n} else {\nwhile(currentNode element == element) {\npreviousNode = currentNode;\ncurrentNode = currentNode next;\n}\npreviousNode next = currentNode next;\n}\nlength --;\n};\nthis indexOf = function(element) {\nif (head === null) return -1\nlet current = head;\nlet index = 0;\nwhile (current element == element && current next == null) {\ncurrent = current next;\nindex++\n}\nif (current element == element && current next === null) {\nreturn -1\n}\nreturn index;\n}\nthis elementAt = function(index) {\nif (head === null) return undefined;\nlet current = head;\nlet currentIndex = 0;\nwhile (currentIndex == index && current next == null) {\ncurrent = current next;\ncurrentIndex++\n}\nif (currentIndex == index && current next === null) {\nreturn undefined;\n}\nreturn current element;\n}\nthis isEmpty = function() {\nreturn length === 0;\n}\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\search-within-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f4fc8baefa877501e9bd4ed35faed2d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\work-with-nodes-in-a-linked-list.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8251367417b2b2512c61\ntitle: Work with Nodes in a Linked List\nchallengeType: 1\nforumTopicId: 301721\ndashedName: work-with-nodes-in-a-linked-list\n--description--\nAnother common data structure you'll run into in computer science is the linked list. A linked list is a linear collection of data elements, called 'nodes', each of which points to the next. Each node in a linked list contains two key pieces of information: the element itself, and a reference to the next node.\nImagine that you are in a conga line. You have your hands on the next person in the line, and the person behind you has their hands on you. You can see the person straight ahead of you, but they are blocking the view of the other people ahead in line. A node is just like a person in a conga line: they know who they are and they can only see the next person in line, but they are not aware of the other people ahead or behind them.\n--instructions--\nIn our code editor, we've created two nodes, Kitten and Puppy, and we've manually connected the Kitten node to the Puppy node.\nCreate a Cat and Dog node and manually add them to the line.\n--hints--\nYour Puppy node should have a reference to a Cat node.\njs\nassert(Puppy.next.element === 'Cat');\nYour Cat node should have a reference to a Dog node.\njs\nassert(Cat.next.element === 'Dog');\n--seed--\n--seed-contents--\n```js\nvar Node = function(element) {\nthis.element = element;\nthis.next = null;\n};\nvar Kitten = new Node('Kitten');\nvar Puppy = new Node('Puppy');\nKitten.next = Puppy;\n// Only change code below this line\n```\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1697,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\work-with-nodes-in-a-linked-list.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f70cbd460ee3c8016603290d02e2c7dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-camper-leaderboard.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7156d8c242eddfaeb5bd13\ntitle: Build a freeCodeCamp Forum Homepage\nchallengeType: 3\nforumTopicId: 302349\ndashedName: build-a-freecodecamp-forum-homepage\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/JqdoMV.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can see a list of the most recent posts on the freeCodeCamp forum.\nUser Story: For each topic, I can see the title and a list of links to users who have recently posted in it.\nUser Story: I can see the number of replies and views that each topic has had, and a timestamp of when the topic was last active.\nHint: To get the 30 most recent forum posts: https://forum-proxy.freecodecamp.rocks/latest.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-camper-leaderboard.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "258ee32acde5573e22ebbde55c27a305",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-light-bright-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a5d02bd919fcf9ca8cf46cb\ntitle: Build a Light-Bright App\nchallengeType: 3\nforumTopicId: 302350\ndashedName: build-a-light-bright-app\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/eyLYXE.\nRule #1: Don't look at the example project's code. Figure it out for yourself.\nRule #2: Fulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can click or drag the mouse cursor to color the circles.\nUser Story: I can double-click on a colored circle to remove the color.\nUser Story: I can click on a colored circle to change its color.\nUser Story: I should get a circle of different color on each click.\nUser Story: I can click on the 'Reset' button to remove the recent color.\nUser Story: I can click on the 'Reset All' button to remove all the colors from the circles.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-light-bright-app.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "07f6ba80923a3be73b2a5f0edcd86c47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-pinterest-clone.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443eddfaeb5bdee\ntitle: Build a Pinterest Clone\nchallengeType: 4\nforumTopicId: 302352\ndashedName: build-a-pinterest-clone\n--description--\nObjective: Build an app that is functionally similar to this: https://build-a-pinterest-clone.freecodecamp.rocks/.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: As an unauthenticated user, I can login with GitHub.\nUser Story: As an authenticated user, I can link to images.\nUser Story: As an authenticated user, I can delete images that I've linked to.\nUser Story: As an authenticated user, I can see a Pinterest-style wall of all the images I've linked to.\nUser Story: As an unauthenticated user, I can browse other users' walls of images.\nUser Story: As an authenticated user, if I upload an image that is broken, it will be replaced by a placeholder image. (can use jQuery broken image detection)\nHint: Masonry.js is a library that allows for Pinterest-style image grids.\nOnce you've finished implementing these user stories, enter the URL to your live app and, optionally, your GitHub repository. Then click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-pinterest-clone.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e6e7971710a48c7b5265abf23f81e54d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-nightlife-coordination-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443eddfaeb5bdff\ntitle: Build a Nightlife Coordination App\nchallengeType: 4\nforumTopicId: 302351\ndashedName: build-a-nightlife-coordination-app\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://yoyo44.herokuapp.com/. Use a site builder of your choice to complete the project.\nHere are the specific user stories you should implement for this project:\nUser Story: As an unauthenticated user, you can view all bars in your area.\nUser Story: As an authenticated user, you can add yourself to a bar to indicate you are going there tonight.\nUser Story: As an authenticated user, you can remove yourself from a bar if you no longer want to go there.\nUser Story: As an unauthenticated user, when you login you should not have to search again.\nHint: Try using the Yelp API to find venues in the cities your users search for. If you use Yelp's API, be sure to mention so in your app.\nWhen you are done, make sure a working demo of your project is hosted somewhere public. Then submit the URL to it in the Solution Link field. Optionally, also submit a link to your project's source code in the GitHub Link field.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1344,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-nightlife-coordination-app.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3cb6f94a5d4e1dbe5548fa10bd595d4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-pong-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5a4b7fcdb66f799f199e11db\ntitle: Build a Pong Game\nchallengeType: 3\nforumTopicId: 302353\ndashedName: build-a-pong-game\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/satyamdev/full/pdMmBp.\nRule #1: Don't look at the example project's code. Figure it out for yourself.\nRule #2: Fulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can control a paddle.\nUser Story: The computer can control the other paddle.\nUser Story: The computer's paddle is unbeatable. It should never miss the ball.\nUser Story: The game keeps track of the player and computer's score.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-pong-game.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fe81d62f365546ea72d61141bfc9df11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-recipe-box.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7155d8c242eddfaeb5bd13\ntitle: Build a Recipe Box\nchallengeType: 3\nforumTopicId: 302354\ndashedName: build-a-recipe-box\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/dNVazZ/.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can create recipes that have names and ingredients.\nUser Story: I can see an index view where the names of all the recipes are visible.\nUser Story: I can click into any of those recipes to view it.\nUser Story: I can edit these recipes.\nUser Story: I can delete these recipes.\nUser Story: All new recipes I add are saved in my browser's local storage. If I refresh the page, these recipes will still be there.\nHint: You should prefix your local storage keys on CodePen, i.e. _username_recipes\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-recipe-box.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c815427b1f8c6633dadd9f98ff8484fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8258367417b2b2512c7f\ntitle: Use Breadth First Search in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301718\ndashedName: use-breadth-first-search-in-a-binary-search-tree\n--description--\nHere we will introduce another tree traversal method: breadth-first search In contrast to the depth-first search methods from the last challenge, breadth-first search explores all the nodes in a given level within a tree before continuing on to the next level Typically, queues are utilized as helper data structures in the design of breadth-first search algorithms In this method, we start by adding the root node to a queue Then we begin a loop where we dequeue the first item in the queue, add it to a new array, and then inspect both its child subtrees If its children are not null, they are each enqueued This process continues until the queue is empty --instructions--\nLet's create a breadth-first search method in our tree called levelOrder This method should return an array containing the values of all the tree nodes, explored in a breadth-first manner Be sure to return the values in the array, not the nodes themselves A level should be traversed from left to right Next, let's write a similar method called reverseLevelOrder which performs the same search but in the reverse direction (right to left) at each level --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called levelOrder js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test levelOrder == 'function';\n})()\n);\nThe binary search tree should have a method called reverseLevelOrder js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test reverseLevelOrder == 'function';\n})()\n);\nThe levelOrder method should return an array of the tree node values explored in level order js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "faec1e02a79b7943f41c67f7f90bb1ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "levelOrder == 'function'; })() ); The binary search tree should have a method called reverseLevelOrder js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } return typeof test reverseLevelOrder == 'function'; })() ); The levelOrder method should return an array of the tree node values explored in level order js assert( (function () { var test = false; if (typeof BinarySearchTree== 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test levelOrder == 'function') {\nreturn false;\n}\ntest add(7);\ntest add(1);\ntest add(9);\ntest add(0);\ntest add(3);\ntest add(8);\ntest add(10);\ntest add(2);\ntest add(5);\ntest add(4);\ntest add(6);\nreturn test levelOrder() join('') == '719038102546';\n})()\n);\nThe reverseLevelOrder method should return an array of the tree node values explored in reverse level order js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test reverseLevelOrder == 'function') {\nreturn false;\n}\ntest add(7);\ntest add(1);\ntest add(9);\ntest add(0);\ntest add(3);\ntest add(8);\ntest add(10);\ntest add(2);\ntest add(5);\ntest add(4);\ntest add(6);\nreturn test reverseLevelOrder() join('') == '791108305264';\n})()\n);\nThe levelOrder method should return null for an empty tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test levelOrder == 'function') {\nreturn false;\n}\nreturn test levelOrder() == null;\n})()\n);\nThe reverseLevelOrder method should return null for an empty tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test reverseLevelOrder == 'function') {\nreturn false;\n}\nreturn test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2b4967ed9445c2d4a744aad5e21ee22a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test levelOrder == 'function') { return false; } return test levelOrder() == null; })() ); The reverseLevelOrder method should return null for an empty tree js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test reverseLevelOrder == 'function') { return false; } return testreverseLevelOrder() == null;\n})()\n);\n--seed--\n--after-user-code--\njs\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nreturn searchTree(node);\n}\n}\n}\n);\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\nthis levelOrder = (root = this root) => {\nif( root) return null;\nlet queue = [root];\nlet results = [];\nwhile(queue length > 0) {\nlet node = queue shift();\nresults push(node value);\nif(node left) queue push(node left);\nif(node right) queue push(node right);\n}\nreturn results;\n}\nthis reverseLevelOrder = (root = this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a4b6c30fa2c58df171365bb20a36534c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "left = null; this right = null; } function BinarySearchTree() { this root = null; // Only change code below this line this levelOrder = (root = this root) => { if( root) return null; let queue = [root]; let results = []; while(queue length > 0) { let node = queue shift(); results push(node value); if(node left) queue push(node left); if(node right) queue push(node right); } return results; } this reverseLevelOrder = (root = thisroot) => {\nif( root) return null;\nlet queue = [root];\nlet results = [] ;\nwhile ( queue length > 0) {\nlet node = queue shift();\nresults push(node value);\nif(node right) queue push(node right);\nif(node left ) queue push(node left);\n}\nreturn results;\n}\n// Only change code above this line\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-breadth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "63464c9a810ce26128004e782b812c7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-roguelike-dungeon-crawler-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7153d8c242eddfaeb5bd13\ntitle: Build a Roguelike Dungeon Crawler Game\nchallengeType: 3\nforumTopicId: 302355\ndashedName: build-a-roguelike-dungeon-crawler-game\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\nUser Story: All the items and enemies on the map are arranged at random.\nUser Story: I can move throughout a map, discovering items.\nUser Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\nUser Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\nUser Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\nUser Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\nUser Story: When I find and beat the boss, I win.\nUser Story: The game should be challenging, but theoretically winnable.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1917,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-roguelike-dungeon-crawler-game.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12752c2ce50aa9f842983106b56dd349",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-tic-tac-toe-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eedfaeb5bd1c\ntitle: Build a Tic Tac Toe Game\nchallengeType: 3\nforumTopicId: 302358\ndashedName: build-a-tic-tac-toe-game\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/KzXQgy/.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can play a game of Tic Tac Toe with the computer.\nUser Story: My game will reset as soon as it's over so I can play again.\nUser Story: I can choose whether I want to play as X or O.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1105,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-tic-tac-toe-game.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b553207b51b1c5a7cfa847e838e036b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-voting-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443eddfaeb5bdef\ntitle: Build a Voting App\nchallengeType: 4\nforumTopicId: 302359\ndashedName: build-a-voting-app\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://voting-app.freecodecamp.rocks/. Use a site builder of your choice to complete the project.\nHere are the specific user stories you should implement for this project:\nUser Story: As an authenticated user, you can keep my polls and come back later to access them.\nUser Story: As an authenticated user, you can share my polls with my friends.\nUser Story: As an authenticated user, you can see the aggregate results of my polls.\nUser Story: As an authenticated user, you can delete polls that I decide I don't want anymore.\nUser Story: As an authenticated user, you can create a poll with any number of possible items.\nUser Story: As an unauthenticated or authenticated user, you can see and vote on everyone's polls.\nUser Story: As an unauthenticated or authenticated user, you can see the results of polls in chart form. (This could be implemented using Chart.js or Google Charts.)\nUser Story: As an authenticated user, if you don't like the options on a poll, you can create a new option.\nWhen you are done, make sure a working demo of your project is hosted somewhere public. Then submit the URL to it in the Solution Link field. Optionally, also submit a link to your project's source code in the GitHub Link field.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-voting-app.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "793bf57d6a853a46c62a6f64ca2a3bf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-wikipedia-viewer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd19\ntitle: Build a Wikipedia Viewer\nchallengeType: 3\nforumTopicId: 302360\ndashedName: build-a-wikipedia-viewer\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/wGqEga/.\nThe MediaWiki software powers Wikipedia, and it helps you collect and organize knowledge and make it available to people.\nUsing the MediaWiki API, replicate the search function and random article function, similar to the example app above. You can use Wikipedia as your data source.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can search Wikipedia entries in a search box and see the resulting Wikipedia entries.\nUser Story: I can click a button to see a random Wikipedia entry.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-wikipedia-viewer.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "64715258b74a99aeac5c8674b2fdd44e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-an-image-search-abstraction-layer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443edefaeb5bdee\ntitle: Build an Image Search Abstraction Layer\nchallengeType: 4\nforumTopicId: 302361\ndashedName: build-an-image-search-abstraction-layer\n--description--\nBuild a full stack JavaScript app that allows you to search for images like this: https://image-search-abstraction-layer.freecodecamp.rocks/query/lolcats%20funny?page=10 and browse recent search queries like this: https://image-search-abstraction-layer.freecodecamp.rocks/recent/. Use a site builder of your choice to complete the project.\nHere are the specific user stories you should implement for this project:\nUser Story: You can get the image URLs, description and page URLs for a set of images relating to a given search string.\nUser Story: You can paginate through the responses by adding a ?page=2 parameter to the URL.\nUser Story: You can get a list of the most recently submitted search strings.\nWhen you are done, make sure a working demo of your project is hosted somewhere public. Then submit the URL to it in the Solution Link field. Optionally, also submit a link to your project's source code in the GitHub Link field.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1481,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-an-image-search-abstraction-layer.md",
      "source_type": "git_repo"
    },
    "token_count": 264,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c541fdce9630566bea732af227fb4f01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-the-game-of-life.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7154d8c242eddfaeb5bd13\ntitle: Build the Game of Life\nchallengeType: 3\nforumTopicId: 302362\ndashedName: build-the-game-of-life\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/BpwMZv/.\nThe Game of Life is a cellular automaton devised by the British mathematician John Horton Conway. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves.\nThe universe of the Game of Life is an infinite, two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, populated and unpopulated. Every cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent.\nAt each step in time, the following transitions occur:\nAny live cell with fewer than two live neighbors dies, as if by underpopulation.\nAny live cell with two or three live neighbors lives on to the next generation.\nAny live cell with more than three live neighbors dies, as if by overpopulation.\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: When I first arrive at the game, it will randomly generate a board and start playing.\nUser Story: I can start and stop the board.\nUser Story: I can set up the board.\nUser Story: I can clear the board.\nUser Story: When I press start, the game will play out.\nUser Story: Each time the board changes, I can see how many generations have gone by.\nWhen you are finished, include a link to your project and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-the-game-of-life.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51e3696322e4f33974b32133d9f15854",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-simon-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd1c\ntitle: Build a Memory Light Game\nchallengeType: 3\nforumTopicId: 302357\ndashedName: build-a-memory-light-game\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen io/freeCodeCamp/full/obYBjE Fulfill the below user stories and get all of the tests to pass Use whichever libraries or APIs you need Give it your own personal style User Story: I am presented with a random series of button presses User Story: Each time I input a series of button presses correctly, I see the same series of button presses but with an additional step User Story: I hear a sound that corresponds to each button both when the series of button presses plays, and when I personally press a button User Story: If I press the wrong button, I am notified that I have done so, and that series of button presses starts again to remind me of the pattern so I can try again User Story: I can see how many steps are in the current series of button presses User Story: If I want to restart, I can hit a button to do so, and the game will return to a single step User Story: I can play in strict mode where if I get a button press wrong, it notifies me that I have done so, and the game restarts at a new random series of button presses User Story: I can win the game by getting a series of 20 steps correct I am notified of my victory, then the game starts over Hint: Here are mp3s you can use for each button:\nhttps://cdn freecodecamp org/curriculum/take-home-projects/memory-light-game/sound-1 mp3\nhttps://cdn freecodecamp org/curriculum/take-home-projects/memory-light-game/sound-2 mp3\nhttps://cdn freecodecamp org/curriculum/take-home-projects/memory-light-game/sound-3 mp3\nhttps://cdn freecodecamp org/curriculum/take-home-projects/memory-light-game/sound-4 mp3\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button You can get feedback on your project by sharing it on the freeCodeCamp forum --solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2370,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\build-a-simon-game.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f2f3aec3d2f6320a7241bc669778c38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\chart-the-stock-market.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443eddfaeb5bd0e\ntitle: Chart the Stock Market\nchallengeType: 4\nforumTopicId: 302363\ndashedName: chart-the-stock-market\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://chart-the-stock-market.freecodecamp.rocks/. Use a site builder of your choice to complete the project.\nHere are the specific user stories you should implement for this project:\nUser Story: You can view a graph displaying the recent trend lines for each added stock.\nUser Story: You can add new stocks by their symbol name.\nUser Story: You can remove stocks.\nUser Story: You can see changes in real-time when any other user adds or removes a stock. For this you will need to use Web Sockets.\nWhen you are done, make sure a working demo of your project is hosted somewhere public. Then submit the URL to it in the Solution Link field. Optionally, also submit a link to your project's source code in the GitHub Link field.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1147,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\chart-the-stock-market.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a55a848e64791c117bec14e295d2d560",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\map-data-across-the-globe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7108d8c242eddfaeb5bd13\ntitle: Map Data Across the Globe\nchallengeType: 3\nforumTopicId: 302365\ndashedName: map-data-across-the-globe\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/mVEJag.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can see where all Meteorites landed on a world map.\nUser Story: I can tell the relative size of the meteorite, just by looking at the way it's represented on the map.\nUser Story: I can mouse over the meteorite's data point for additional data.\nHint: Here's a dataset you can use to build this: https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/meteorite-strike-data.json\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1219,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\map-data-across-the-globe.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c6f6243bb98d1828d8868aab18a25a46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\manage-a-book-trading-club.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c443eddfaeb5bd0f\ntitle: Manage a Book Trading Club\nchallengeType: 4\nforumTopicId: 302364\ndashedName: manage-a-book-trading-club\n--description--\nObjective: Build an app that is functionally similar to this: https://manage-a-book-trading-club.freecodecamp.rocks/.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can view all books posted by every user.\nUser Story: I can add a new book.\nUser Story: I can update my settings to store my full name, city, and state.\nUser Story: I can propose a trade and wait for the other user to accept the trade.\nOnce you've finished implementing these user stories, enter the URL to your live app and, optionally, your GitHub repository. Then click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\manage-a-book-trading-club.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4fb36a10d2bf02a66ffc5845296c67e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\p2p-video-chat-application.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7150d8c442eddfafb5bd1c\ntitle: P2P Video Chat Application\nchallengeType: 4\nforumTopicId: 302366\ndashedName: p2p-video-chat-application\n--description--\nObjective: Build an app that is functionally similar to this: https://p2p-video-chat-application.freecodecamp.rocks/.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: Upon arriving, the browser will prompt me to access my camera and microphone.\nUser Story: After I give it permission, I am prompted to type in a room name.\nUser Story: Once I type in the room name, a room will be created if no room of that name existed before.\nUser Story: A friend of mine can subsequently go to the same website, type in the same room I entered, and join the same room, then enter into a video chat with me.\nUser Story: If I type in a room name, and there are already two people in that room, I get a notification that the room is full.\nUser Story: Anyone can create or join any room. And there can be any number of rooms, but all of them must have unique names.\nUser Story: I can choose to not permit the site to access my microphone and webcam. If I choose not to do this, or if some other driver problem occurs, I see an error message saying these are required.\nUser Story: When I choose to cancel the room name input step, or if I type in no name, or just spaces, it should again ask me again to type in a valid room name.\nUser Story: If one of the two people in the room get disconnected, they can reconnect to the same room and continue chatting.\nOnce you've finished implementing these user stories, enter the URL to your live app and, optionally, your GitHub repository. Then click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2208,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\p2p-video-chat-application.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb19723b6e717cb612d0b759661ee147",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\show-national-contiguity-with-a-force-directed-graph.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7198d8c242eddfaeb5bd13\ntitle: Show National Contiguity with a Force Directed Graph\nchallengeType: 3\nforumTopicId: 302367\ndashedName: show-national-contiguity-with-a-force-directed-graph\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/XWEONRz.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can see a Force-directed Graph that shows which countries share borders.\nUser Story: I can see each country's flag on its node.\nHint: Here's a dataset you can use to build this: https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json\nHint: You can create a spritesheet of national flags at https://www.flag-sprites.com.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1223,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\show-national-contiguity-with-a-force-directed-graph.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "08f1809b1311335f1bf1e99752a5cb16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\show-the-local-weather.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd10\ntitle: Show the Local Weather\nchallengeType: 3\nforumTopicId: 302368\ndashedName: show-the-local-weather\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/bELRjV.\nRule #1: Don't look at the example project's code. Figure it out for yourself.\nRule #2: Fulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can see the weather in my current location.\nUser Story: I can see a different icon or background image (e.g. snowy mountain, hot desert) depending on the weather.\nUser Story: I can push a button to toggle between Fahrenheit and Celsius.\nNote: Many internet browsers now require an HTTP Secure (https://) connection to obtain a user's locale via HTML5 Geolocation. For this reason, we recommend using HTML5 Geolocation to get user location and then use the freeCodeCamp Weather API https://weather-proxy.freecodecamp.rocks/ which uses an HTTP Secure connection for the weather. Also, be sure to connect to CodePen.io via https://.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1844,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\show-the-local-weather.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c3921db6d6c7f1c22212c119a3cacc8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\use-the-twitch-json-api.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: bd7158d8c442eddfaeb5bd1f\ntitle: Use the Twitch JSON API\nchallengeType: 3\nforumTopicId: 19541\ndashedName: use-the-twitch-json-api\n--description--\nObjective: Build an app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/Myvqmo/.\nThe Twitch API is a RESTful API that lets developers build creative integrations for the broader Twitch community.\nFulfill the below user stories and get all of the tests to pass. Use whichever libraries or APIs you need. Give it your own personal style.\nUser Story: I can see whether freeCodeCamp is currently streaming on Twitch.tv.\nUser Story: I can click the status output and be sent directly to the freeCodeCamp's Twitch.tv channel.\nUser Story: If a Twitch user is currently streaming, I can see additional details about what they are streaming.\nHint: Here's an array of the Twitch.tv usernames of people who regularly stream: [\"ESL_SC2\", \"OgamingSC2\", \"cretetion\", \"freecodecamp\", \"storbeck\", \"habathcx\", \"RobotCaleb\", \"noobs2ninjas\"]\nUPDATE: Due to a change in conditions on API usage, Twitch.tv requires an API key, but we've built a workaround. Use https://twitch-proxy.freecodecamp.rocks/ instead of Twitch's API base URL and you'll still be able to get account information, without needing to sign up for an API key.\nWhen you are finished, include a link to your project on CodePen and click the \"I've completed this challenge\" button.\nYou can get feedback on your project by sharing it on the freeCodeCamp forum.\n--solutions--\njs\n// solution required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1914,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\take-home-projects\\use-the-twitch-json-api.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de74b8b2b524f55defc1cdfcd020ad30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8257367417b2b2512c7e\ntitle: Use Depth First Search in a Binary Search Tree\nchallengeType: 1\nforumTopicId: 301719\ndashedName: use-depth-first-search-in-a-binary-search-tree\n--description--\nWe know how to search a binary search tree for a specific value But what if we just want to explore the entire tree Or what if we don't have an ordered tree and we need to just search for a value Here we will introduce some tree traversal methods which can be used to explore tree data structures First up is depth-first search In depth-first search, a given subtree is explored as deeply as possible before the search continues on to another subtree There are three ways this can be done: In-order: Begin the search at the left-most node and end at the right-most node Pre-order: Explore all the roots before the leaves Post-order: Explore all the leaves before the roots As you may guess, you may choose different search methods depending on what type of data your tree is storing and what you are looking for For a binary search tree, an inorder traversal returns the nodes in sorted order --instructions--\nHere we will create these three search methods on our binary search tree Depth-first search is an inherently recursive operation which continues to explore further subtrees so long as child nodes are present Once you understand this basic concept, you can simply rearrange the order in which you explore the nodes and subtrees to produce any of the three searches above For example, in post-order search we would want to recurse all the way to a leaf node before we begin to return any of the nodes themselves, whereas in pre-order search we would want to return the nodes first, and then continue recursing down the tree Define inorder, preorder, and postorder methods on our tree Each of these methods should return an array of items which represent the tree traversal Be sure to return the integer values at each node in the array, not the nodes themselves Finally, return null if the tree is empty --hints--\nThe BinarySearchTree data structure should exist js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n}\nreturn typeof test == 'object';\n})()\n);\nThe binary search tree should have a method called inorder js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "0145b093afaac95f0a7aba0fa45cc7f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "integer values at each node in the array, not the nodes themselves Finally, return null if the tree is empty --hints-- The BinarySearchTree data structure should exist js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } return typeof test == 'object'; })() ); The binary search tree should have a method called inorder js assert( (function () { var test = false; if (typeof BinarySearchTree== 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test inorder == 'function';\n})()\n);\nThe binary search tree should have a method called preorder js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test preorder == 'function';\n})()\n);\nThe binary search tree should have a method called postorder js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nreturn typeof test postorder == 'function';\n})()\n);\nThe inorder method should return an array of the node values that result from an inorder traversal js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test inorder == 'function') {\nreturn false;\n}\ntest add(7);\ntest add(1);\ntest add(9);\ntest add(0);\ntest add(3);\ntest add(8);\ntest add(10);\ntest add(2);\ntest add(5);\ntest add(4);\ntest add(6);\nreturn test inorder() join('') == '012345678910';\n})()\n);\nThe preorder method should return an array of the node values that result from a preorder traversal js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test preorder == 'function') {\nreturn false;\n}\ntest add(7);\ntest add(1);\ntest add(9);\ntest add(0);\ntest add(3);\ntest add(8);\ntest add(10);\ntest add(2);\ntest add(5);\ntest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0651590bc3386a774a43a208c9e9592f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "join('') == '012345678910'; })() ); The preorder method should return an array of the node values that result from a preorder traversal js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test preorder == 'function') { return false; } test add(7); test add(1); test add(9); test add(0); test add(3); test add(8); test add(10); test add(2); test add(5); testadd(4);\ntest add(6);\nreturn test preorder() join('') == '710325469810';\n})()\n);\nThe postorder method should return an array of the node values that result from a postorder traversal js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test postorder == 'function') {\nreturn false;\n}\ntest add(7);\ntest add(1);\ntest add(9);\ntest add(0);\ntest add(3);\ntest add(8);\ntest add(10);\ntest add(2);\ntest add(5);\ntest add(4);\ntest add(6);\nreturn test postorder() join('') == '024653181097';\n})()\n);\nThe inorder method should return null for an empty tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test inorder == 'function') {\nreturn false;\n}\nreturn test inorder() == null;\n})()\n);\nThe preorder method should return null for an empty tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test preorder == 'function') {\nreturn false;\n}\nreturn test preorder() == null;\n})()\n);\nThe postorder method should return null for an empty tree js\nassert(\n(function () {\nvar test = false;\nif (typeof BinarySearchTree == 'undefined') {\ntest = new BinarySearchTree();\n} else {\nreturn false;\n}\nif (typeof test postorder == 'function') {\nreturn false;\n}\nreturn test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "8b89cce145b13ed370bd48ea0dc24380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test preorder == 'function') { return false; } return test preorder() == null; })() ); The postorder method should return null for an empty tree js assert( (function () { var test = false; if (typeof BinarySearchTree == 'undefined') { test = new BinarySearchTree(); } else { return false; } if (typeof test postorder == 'function') { return false; } return testpostorder() == null;\n})()\n);\n--seed--\n--after-user-code--\n```js\nBinarySearchTree prototype = Object assign(\nBinarySearchTree prototype,\n{\nadd: function(value) {\nfunction searchTree(node) {\nif (value < node value) {\nif (node left == null) {\nnode left = new Node(value);\nreturn;\n} else if (node left = null) {\nreturn searchTree(node left);\n}\n} else if (value > node value) {\nif (node right == null) {\nnode right = new Node(value);\nreturn;\n} else if (node right = null) {\nreturn searchTree(node right);\n}\n} else {\nreturn null;\n}\n}\nvar node = this root;\nif (node == null) {\nthis root = new Node(value);\nreturn;\n} else {\nreturn searchTree(node);\n}\n}\n}\n);\n```\n--seed-contents--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\n// Only change code below this line\n// Only change code above this line\n}\n```\n--solutions--\n```js\nvar displayTree = tree => console log(JSON stringify(tree, null, 2));\nfunction Node(value) {\nthis value = value;\nthis left = null;\nthis right = null;\n}\nfunction BinarySearchTree() {\nthis root = null;\nthis result = [];\nthis inorder = function(node) {\nif ( node) node = this root;\nif ( node) return null;\nif (node left) this inorder(node left);\nthis result push(node value);\nif (node right) this inorder(node right);\nreturn this result;\n};\nthis preorder = function(node) {\nif ( node) node = this root;\nif ( node) return null;\nthis result push(node",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "a47921a6ba8aeeb416ca089e1ee2b5ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "left = null; this right = null; } function BinarySearchTree() { this root = null; this result = []; this inorder = function(node) { if ( node) node = this root; if ( node) return null; if (node left) this inorder(node left); this result push(node value); if (node right) this inorder(node right); return this result; }; this preorder = function(node) { if ( node) node = this root; if ( node) return null; this result push(nodevalue);\nif (node left) this preorder(node left);\nif (node right) this preorder(node right);\nreturn this result;\n};\nthis postorder = function(node) {\nif ( node) node = this root;\nif ( node) return null;\nif (node left) this postorder(node left);\nif (node right) this postorder(node right);\nthis result push(node value);\nreturn this result;\n};\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8402,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\10-coding-interview-prep\\data-structures\\use-depth-first-search-in-a-binary-search-tree.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "97d387aaa464bae490778aa8cd5206de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\port-scanner.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f979ac417301a38fb932\ntitle: Port Scanner\nchallengeType: 10\nforumTopicId: 462372\nhelpCategory: Python\ndashedName: port-scanner\n--description--\nYou will be working on this project with our Gitpod starter code Learn how to share your Gitpod workspace to get help We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nLearn Python Basics in Depth (4 hours)\nIntermediate Python Course (6 hours)\n--instructions--\nCreate a port scanner using Python In the port_scanner py file, create a function called get_open_ports that takes a target argument and a port_range argument target can be a URL or IP address port_range is a list of two numbers indicating the first and last numbers of the range of ports to check Here are examples of how the function may be called:\npy\nget_open_ports(\"209 216 230 240\", [440, 445])\nget_open_ports(\"www stackoverflow com\", [79, 82])\nThe function should return a list of open ports in the given range The get_open_ports function should also take an optional third argument of True to indicate \"Verbose\" mode If this is set to true, the function should return a descriptive string instead of a list of ports Here is the format of the string that should be returned in verbose mode (text inside {} indicates the information that should appear):\nbash\nOpen ports for {URL} ({IP address})\nPORT     SERVICE\n{port}   {service name}\n{port}   {service name}\nYou can use the dictionary in common_ports py to get the correct service name for each port For example, if the function is called like this:\npy\nport_scanner get_open_ports(\"scanme nmap org\", [20, 80], True)\nIt should return the following:\nbash\nOpen ports for scanme nmap org (45 33 32 156)\nPORT     SERVICE\n22       ssh\n80       http\nMake sure to include proper spacing and new line characters If the URL passed into the get_open_ports function is invalid, the function should return the string: \"Error: Invalid hostname\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\port-scanner.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "17fd77fce13e19ec6953e06cb0053918",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\port-scanner.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "get the correct service name for each port For example, if the function is called like this: py port_scanner get_open_ports(\"scanme nmap org\", [20, 80], True) It should return the following: bash Open ports for scanme nmap org (45 33 32 156) PORT SERVICE 22 ssh 80 http Make sure to include proper spacing and new line characters If the URL passed into the get_open_ports function is invalid, the function should return the string: \"Error: Invalid hostname\"If the IP address passed into the get_open_ports function is invalid, the function should return the string: \"Error:  Invalid IP address\" Development\nWrite your code in port_scanner py For development, you can use main py to test your code Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3694,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\port-scanner.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1cdfb57ce7197e57fec6292a41acd7fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\sha-1-password-cracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f983ac417301a38fb933\ntitle: SHA-1 Password Cracker\nchallengeType: 10\nforumTopicId: 462374\nhelpCategory: Python\ndashedName: sha-1-password-cracker\n--description--\nYou will be working on this project with our Gitpod starter code Learn how to share your Gitpod workspace to get help We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nLearn Python Basics in Depth (4 hours)\nIntermediate Python Course (6 hours)\n--instructions--\nPasswords should never be stored in plain text They should be stored as hashes, just in case the password list is discovered However, not all hashes are created equal For this project you will learn about the importance of good security by creating a password cracker to figure out passwords that were hashed using SHA-1 Create a function that takes in a SHA-1 hash of a password and returns the password if it is one of the top 10,000 passwords used If the SHA-1 hash is NOT of a password in the database, return \"PASSWORD NOT IN DATABASE\" The function should hash each password from top-10000-passwords txt and compare it to the hash passed into the function The function should take an optional second argument named use_salts If set to true, each salt string from the file known-salts txt should be appended AND prepended to each password from top-10000-passwords txt before hashing and before comparing it to the hash passed into the function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\sha-1-password-cracker.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "676c694e3942db68272b8134637b4802",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\sha-1-password-cracker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of a password in the database, return \"PASSWORD NOT IN DATABASE\" The function should hash each password from top-10000-passwords txt and compare it to the hash passed into the function The function should take an optional second argument named use_salts If set to true, each salt string from the file known-salts txt should be appended AND prepended to each password from top-10000-passwords txt before hashing and before comparing it to the hash passed into the functionHere are some hashed passwords to test the function with:\nb305921a3723cd5d70a375cd21a61e60aabb84ec should return \"sammy123\"\nc7ab388a5ebefbf4d550652f1eb4d833e5316e3e should return \"abacab\"\n5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8 should return \"password\"\nHere are some hashed passwords to test the function with when use_salts is set to True:\n53d8b3dc9d39f0184144674e310185e41a87ffd5 should return \"superman\"\nda5a4e8cf89539e66097acd2f8af128acae2f8ae should return \"q1w2e3r4t5\"\nea3f62d498e3b98557f9f9cd0d905028b3b019e1 should return \"bubbles1\"\nThe hashlib library has been imported for you You should consider using it in your code Learn more about \"hashlib\" here Development\nWrite your code in password_cracker py For development, you can use main py to test your code Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\sha-1-password-cracker.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9248f66f88f0df07d8ccfbe6d971a9fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824a367417b2b2512c44\ntitle: Stock Price Checker\nchallengeType: 4\nforumTopicId: 301572\ndashedName: stock-price-checker\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://stock-price-checker freecodecamp rocks/ Since all reliable stock price APIs require an API key, we've built a workaround Use https://stock-price-checker-proxy freecodecamp rocks/ to get up-to-date stock price information without needing to sign up for your own key Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nSet the NODE_ENV environment variable to test, without quotes\nComplete the project in routes/api js or by creating a handler/controller\nYou will add any security features to server js\nYou will create all of the functional tests in tests/2_functional-tests js\nNote Privacy Considerations: Due to the requirement that only 1 like per IP should be accepted, you will have to save IP addresses It is important to remain compliant with data privacy laws such as the General Data Protection Regulation One option is to get permission to save the user's data, but it is much simpler to anonymize it For this challenge, remember to anonymize IP addresses before saving them to the database If you need ideas on how to do this, you may choose to hash the data, truncate it, or set part of the IP address to 0 Write the following tests in tests/2_functional-tests js:\nViewing one stock: GET request to /api/stock-prices/\nViewing one stock and liking it: GET request to /api/stock-prices/\nViewing the same stock and liking it again: GET request to /api/stock-prices/\nViewing two stocks: GET request to /api/stock-prices/\nViewing two stocks and liking them: GET request to /api/stock-prices/\n--hints--\nYou can provide your own project, not the example URL js\nassert( / *\\/stock-price-checker\\ freecodecamp\\ rocks/ test(code)\n);\nYou should set the content security policies to only allow loading of scripts and CSS from your server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9d1e0cdcb3df84bc47089c25a0dd4b47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Viewing one stock and liking it: GET request to /api/stock-prices/ Viewing the same stock and liking it again: GET request to /api/stock-prices/ Viewing two stocks: GET request to /api/stock-prices/ Viewing two stocks and liking them: GET request to /api/stock-prices/ --hints-- You can provide your own project, not the example URL js assert( / *\\/stock-price-checker\\ freecodecamp\\ rocks/ test(code) ); You should set the content security policies to only allow loading of scripts and CSS from your serverjs\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert isTrue(\nparsed headers['content-security-policy'] includes(\"script-src 'self'\")\n);\nassert isTrue(\nparsed headers['content-security-policy'] includes(\"style-src 'self'\")\n);\n};\nYou can send a GET request to /api/stock-prices, passing a NASDAQ stock symbol to a stock query parameter The returned object will contain a property named stockData js\nasync () => {\nconst data = await fetch(\ncode + '/api/stock-prices stock=GOOG'\n);\nconst parsed = await data json();\nassert property(parsed, 'stockData');\n};\nThe stockData property includes the stock symbol as a string, the price as a number, and likes as a number js\nasync () => {\nconst data = await fetch(\ncode + '/api/stock-prices stock=GOOG'\n);\nconst parsed = await data json();\nconst ticker = parsed stockData;\nassert typeOf(ticker price, 'number');\nassert typeOf(ticker likes, 'number');\nassert typeOf(ticker stock, 'string');\n};\nYou can also pass along a like field as true (boolean) to have your like added to the stock(s) Only 1 like per IP should be accepted ```js\n```\nIf you pass along 2 stocks, the returned value will be an array with information about both stocks Instead of likes, it will display rel_likes (the difference between the likes on both stocks) for both stockData objects js\nasync () => {\nconst data = await fetch(\ncode + '/api/stock-prices stock=GOOG&stock=MSFT'\n);\nconst parsed = await data json();\nconst ticker = parsed stockData;\nassert typeOf(ticker, 'array');\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f232395298c41d67162324f0acb33187",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 like per IP should be accepted ```js ``` If you pass along 2 stocks, the returned value will be an array with information about both stocks Instead of likes, it will display rel_likes (the difference between the likes on both stocks) for both stockData objects js async () => { const data = await fetch( code + '/api/stock-prices stock=GOOG&stock=MSFT' ); const parsed = await data json(); const ticker = parsed stockData; assert typeOf(ticker, 'array'); assertproperty(ticker[0], 'rel_likes');\nassert property(ticker[1], 'rel_likes');\n};\nAll 5 functional tests are complete and passing js\nasync () => {\nconst tests = await fetch(code + '/_api/get-tests');\nconst parsed = await tests json();\nassert isTrue(parsed length >= 5);\nparsed forEach((test) => {\nassert equal(test state, 'passed');\n});\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4733,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\stock-price-checker.md",
      "source_type": "git_repo"
    },
    "token_count": 191,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b666cd17d335af80c0ad00ca4fa7d358",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e601c775ac9d0ecd8b94aff\ntitle: Secure Real Time Multiplayer Game\nchallengeType: 4\nforumTopicId: 462375\ndashedName: secure-real-time-multiplayer-game\n--description--\nDevelop a 2D real time multiplayer game using the HTML Canvas API and Socket io that is functionally similar to this: https://secure-real-time-multiplayer-game freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nCreate a secure multiplayer game in which each player can move their avatar, there is at least one collectible item, and the rank of the players is calculated based on their score For details consult the tests below Make sure that your game is secure Include these security measures:\nThe client should not be able to guess/sniff the MIME type\nPrevent XSS attacks\nDo not cache anything from the website in the client\nThe headers say that the site is powered by PHP 7 4 3\nNote: helmet@^3 21 3 is needed for the user stories This means you will need to use the previous version of Helmet's docs, for information on how to achieve the user stories --hints--\nYou can provide your own project, not the example URL js\nassert( / *\\/secure-real-time-multiplayer-game\\ freecodecamp\\ rocks/ test(\ncode\n)\n);\nMultiple players can connect to a server and play ```js\n```\nEach player has an avatar ```js\n```\nEach player is represented by an object created by the Player class in Player mjs ```js\n```\nAt a minimum, each player object should contain a unique id, a score, and x and y coordinates representing the player's current position ```js\n```\nThe game has at least one type of collectible item Complete the Collectible class in Collectible mjs to implement this ```js\n```\nAt a minimum, each collectible item object created by the Collectible class should contain a unique id, a value, and x and y coordinates representing the item's current position ```js\n```\nPlayers can use the WASD and/or arrow keys to move their avatar Complete the movePlayer method in Player mjs to implement this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5058,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e18252dbb6c47ecc1c70b9e269aab2cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "``` The game has at least one type of collectible item Complete the Collectible class in Collectible mjs to implement this ```js ``` At a minimum, each collectible item object created by the Collectible class should contain a unique id, a value, and x and y coordinates representing the item's current position ```js ``` Players can use the WASD and/or arrow keys to move their avatar Complete the movePlayer method in Player mjs to implement this```js\n```\nThe movePlayer method should accept two arguments: a string of \"up\", \"down\", \"left\", or \"right\", and a number for the amount of pixels the player's position should change movePlayer should adjust the x and y coordinates of the player object it's called from ```js\n```\nThe player's score should be used to calculate their rank among the other players Complete the calculateRank method in the Player class to implement this ```js\n```\nThe calculateRank method should accept an array of objects representing all connected players and return the string Rank: currentRanking/totalPlayers For example, in a game with two players, if Player A has a score of 3 and Player B has a score of 5, calculateRank for Player A should return Rank: 2/2 ```js\n```\nPlayers can collide with a collectible item Complete the collision method in Player mjs to implement this ```js\n```\nThe collision method should accept a collectible item's object as an argument If the player's avatar intersects with the item, the collision method should return true ```js\n```\nAll players are kept in sync ```js\n```\nPlayers can disconnect from the game at any time ```js\n```\nPrevent the client from trying to guess / sniff the MIME type js\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert equal(parsed headers['x-content-type-options'], 'nosniff');\n};\nPrevent cross-site scripting (XSS) attacks js\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert equal(parsed headers['x-xss-protection'], '1; mode=block');\n};\nNothing from the website is cached in the client js\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert equal(parsed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5058,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "eef3c20e5facd64ddd7482e2aef53fd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const data = await fetch(code + '/_api/app-info'); const parsed = await data json(); assert equal(parsed headers['x-content-type-options'], 'nosniff'); }; Prevent cross-site scripting (XSS) attacks js async () => { const data = await fetch(code + '/_api/app-info'); const parsed = await data json(); assert equal(parsed headers['x-xss-protection'], '1; mode=block'); }; Nothing from the website is cached in the client js async () => { const data = await fetch(code + '/_api/app-info'); const parsed = await data json(); assert equal(parsedheaders['surrogate-control'], 'no-store');\nassert equal(\nparsed headers['cache-control'],\n'no-store, no-cache, must-revalidate, proxy-revalidate'\n);\nassert equal(parsed headers['pragma'], 'no-cache');\nassert equal(parsed headers['expires'], '0');\n};\nThe headers say that the site is powered by \"PHP 7 4 3\" even though it isn't (as a security measure) js\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert equal(parsed headers['x-powered-by'], 'PHP 7 4 3');\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5058,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\secure-real-time-multiplayer-game.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f4b747ad0320d78d8ca6ac37c50b27f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\ask-browsers-to-access-your-site-via-https-only-with-helmet.hsts.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8248367417b2b2512c3c\ntitle: Ask Browsers to Access Your Site via HTTPS Only with helmet.hsts()\nchallengeType: 2\nforumTopicId: 301573\ndashedName: ask-browsers-to-access-your-site-via-https-only-with-helmet-hsts\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nHTTP Strict Transport Security (HSTS) is a web security policy which helps to protect websites against protocol downgrade attacks and cookie hijacking. If your website can be accessed via HTTPS you can ask user’s browsers to avoid using insecure HTTP. By setting the header Strict-Transport-Security, you tell the browsers to use HTTPS for the future requests in a specified amount of time. This will work for the requests coming after the initial request.\n--instructions--\nConfigure helmet.hsts() to use HTTPS for the next 90 days. Pass the config object {maxAge: timeInSeconds, force: true}. You can create a variable ninetyDaysInSeconds = 90*24*60*60; to use for the timeInSeconds.\nNote: Configuring HTTPS on a custom website requires the acquisition of a domain, and an SSL/TLS Certificate.\n--hints--\nhelmet.hsts() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'hsts');\nassert.property(data.headers, 'strict-transport-security');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nmaxAge should be equal to 7776000 s (90 days)\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.match(\ndata.headers['strict-transport-security'],\n/^max-age=7776000;?/\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1888,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\ask-browsers-to-access-your-site-via-https-only-with-helmet.hsts.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d3ee1b0e39eda348d98c4e3b4bafd8da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\avoid-inferring-the-response-mime-type-with-helmet.nosniff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8248367417b2b2512c3a\ntitle: Avoid Inferring the Response MIME Type with helmet.noSniff()\nchallengeType: 2\nforumTopicId: 301574\ndashedName: avoid-inferring-the-response-mime-type-with-helmet-nosniff\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nBrowsers can use content or MIME sniffing to override the Content-Type header of a response to guess and process the data using an implicit content type. While this can be convenient in some scenarios, it can also lead to some dangerous attacks. This middleware sets the X-Content-Type-Options header to nosniff, instructing the browser to not bypass the provided Content-Type.\n--instructions--\nUse the helmet.noSniff() method on your server.\n--hints--\nhelmet.noSniff() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'nosniff');\nassert.equal(data.headers['x-content-type-options'], 'nosniff');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\avoid-inferring-the-response-mime-type-with-helmet.nosniff.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "97b123d8836dbc148c826c51746e368c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\configure-helmet-using-the-parent-helmet-middleware.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8249367417b2b2512c40\ntitle: Configure Helmet Using the ‘parent’ helmet() Middleware\nchallengeType: 2\nforumTopicId: 301575\ndashedName: configure-helmet-using-the-parent-helmet-middleware\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\napp.use(helmet()) will automatically include all the middleware introduced above, except noCache(), and contentSecurityPolicy(), but these can be enabled if necessary. You can also disable or configure any other middleware individually, using a configuration object.\nExample:\njs\napp.use(helmet({\nframeguard: {         // configure\naction: 'deny'\n},\ncontentSecurityPolicy: {    // enable and configure\ndirectives: {\ndefaultSrc: [\"'self'\"],\nstyleSrc: ['style.com'],\n}\n},\ndnsPrefetchControl: false     // disable\n}))\nWe introduced each middleware separately for teaching purposes and for ease of testing. Using the ‘parent’ helmet() middleware is easy to implement in a real project.\n--hints--\nno tests - it's a descriptive challenge\njs\nassert(true);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1264,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\configure-helmet-using-the-parent-helmet-middleware.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "151dcf73ce4d14c19dea746440d95285",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\disable-client-side-caching-with-helmet.nocache.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8249367417b2b2512c3e\ntitle: Disable Client-Side Caching with helmet.noCache()\nchallengeType: 2\nforumTopicId: 301576\ndashedName: disable-client-side-caching-with-helmet-nocache\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nIf you are releasing an update for your website, and you want the users to always download the newer version, you can (try to) disable caching on client’s browser. It can be useful in development too. Caching has performance benefits, which you will lose, so only use this option when there is a real need.\n--instructions--\nUse the helmet.noCache() method on your server.\n--hints--\nhelmet.noCache() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'nocache');\nassert.equal(\ndata.headers['cache-control'],\n'no-store, no-cache, must-revalidate, proxy-revalidate'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1200,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\disable-client-side-caching-with-helmet.nocache.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "41b945c1282e6c627fd569952b08bf7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\disable-dns-prefetching-with-helmet.dnsprefetchcontrol.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8248367417b2b2512c3d\ntitle: Disable DNS Prefetching with helmet.dnsPrefetchControl()\nchallengeType: 2\nforumTopicId: 301577\ndashedName: disable-dns-prefetching-with-helmet-dnsprefetchcontrol\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nTo improve performance, most browsers prefetch DNS records for the links in a page. In that way the destination ip is already known when the user clicks on a link. This may lead to over-use of the DNS service (if you own a big website, visited by millions people…), privacy issues (one eavesdropper could infer that you are on a certain page), or page statistics alteration (some links may appear visited even if they are not). If you have high security needs you can disable DNS prefetching, at the cost of a performance penalty.\n--instructions--\nUse the helmet.dnsPrefetchControl() method on your server.\n--hints--\nhelmet.dnsPrefetchControl() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'dnsPrefetchControl');\nassert.equal(data.headers['x-dns-prefetch-control'], 'off');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\disable-dns-prefetching-with-helmet.dnsprefetchcontrol.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "db2f5a75832d06f9b54b982c97047006",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hide-potentially-dangerous-information-using-helmet.hidepoweredby.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8247367417b2b2512c37\ntitle: Hide Potentially Dangerous Information Using helmet.hidePoweredBy()\nchallengeType: 2\nforumTopicId: 301580\ndashedName: hide-potentially-dangerous-information-using-helmet-hidepoweredby\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nHackers can exploit known vulnerabilities in Express/Node if they see that your site is powered by Express. X-Powered-By: Express is sent in every request coming from Express by default. Use the helmet.hidePoweredBy() middleware to remove the X-Powered-By header.\n--hints--\nhelmet.hidePoweredBy() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'hidePoweredBy');\nassert.notEqual(data.headers['x-powered-by'], 'Express');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hide-potentially-dangerous-information-using-helmet.hidepoweredby.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "12aead456723d886e98702ef73825a12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-synchronously.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 58a25bcff9fc0f352b528e7e\ntitle: Hash and Compare Passwords Synchronously\nchallengeType: 2\nforumTopicId: 301579\ndashedName: hash-and-compare-passwords-synchronously\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nHashing synchronously is just as easy to do but can cause lag if using it server side with a high cost or with hashing done very often. Hashing with this method is as easy as calling\njs\nvar hash = bcrypt.hashSync(myPlaintextPassword, saltRounds);\nAdd this method of hashing to your code and then log the result to the console. Again, the variables used are already defined in the server so you won't need to adjust them. You may notice even though you are hashing the same password as in the async function, the result in the console is different- this is due to the salt being randomly generated each time as seen by the first 22 characters in the third string of the hash. Now to compare a password input with the new sync hash, you would use the compareSync method:\njs\nvar result = bcrypt.compareSync(myPlaintextPassword, hash);\nwith the result being a boolean true or false.\n--instructions--\nAdd the function in and log the result to the console to see it working.\nSubmit your page when you think you've got it right.\n--hints--\nSync hash should be generated and correctly compared.\njs\n$.get(code + '/_api/server.js').then(\n(data) => {\nassert.match(\ndata,\n/START_SYNC[^]*hash.*=.*bcrypt.hashSync.*myPlaintextPassword( |),( |)saltRounds[^]*END_SYNC/gi,\n'You should call bcrypt.hashSync on myPlaintextPassword with saltRounds'\n);\nassert.match(\ndata,\n/START_SYNC[^]*result.*=.*bcrypt.compareSync.*myPlaintextPassword( |),( |)hash[^]*END_SYNC/gi,\n'You should call bcrypt.compareSync on myPlaintextPassword with the hash generated in the last line'\n);\n},\n(xhr) => {\nthrow new Error(xhr.statusText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2148,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-synchronously.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a7e0d183d8dcffc6f154886275579db4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-asynchronously.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 58a25bcff9fc0f352b528e7d\ntitle: Hash and Compare Passwords Asynchronously\nchallengeType: 2\nforumTopicId: 301578\ndashedName: hash-and-compare-passwords-asynchronously\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub As hashing is designed to be computationally intensive, it is recommended to do so asynchronously on your server as to avoid blocking incoming connections while you hash All you have to do to hash a password asynchronous is call\njs\nbcrypt hash(myPlaintextPassword, saltRounds, (err, hash) => {\n/*Store hash in your db*/\n});\n--instructions--\nAdd this hashing function to your server (we've already defined the variables used in the function for you to use) and log it to the console for you to see At this point you would normally save the hash to your database Now when you need to figure out if a new input is the same data as the hash you would just use the compare function js\nbcrypt compare(myPlaintextPassword, hash, (err, res) => {\n/*res == true or false*/\n});\nAdd this into your existing hash function (since you need to wait for the hash to complete before calling the compare function) after you log the completed hash and log 'res' to the console within the compare You should see in the console a hash, and then 'true' is printed If you change 'myPlaintextPassword' in the compare function to 'someOtherPlaintextPassword', then it should say false ```js\nbcrypt hash('passw0rd ', 13, (err, hash) => {\nconsole log(hash);\n//$2a$12$Y PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS\nbcrypt compare('passw0rd ', hash, (err, res) => {\nconsole log(res); //true\n});\n});\n```\nSubmit your page when you think you've got it right --hints--\nAsync hash should be generated and correctly compared js\n$ get(code + '/_api/server js') then(\n(data) => {\nassert match(\ndata,\n/START_ASYNC[^]*bcrypt hash",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2690,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-asynchronously.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ee9163192b0553b317bfe1979d117fa2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-asynchronously.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "If you change 'myPlaintextPassword' in the compare function to 'someOtherPlaintextPassword', then it should say false ```js bcrypt hash('passw0rd ', 13, (err, hash) => { console log(hash); //$2a$12$Y PHPE15wR25qrrtgGkiYe2sXo98cjuMCG1YwSI5rJW1DSJp0gEYS bcrypt compare('passw0rd ', hash, (err, res) => { console log(res); //true }); }); ``` Submit your page when you think you've got it right --hints-- Async hash should be generated and correctly compared js $ get(code + '/_api/server js') then( (data) => { assert match( data, /START_ASYNC[^]*bcrypt hash*myPlaintextPassword( |),( |)saltRounds( |),( |) *err( |),( |)hash[^]*END_ASYNC/gi,\n'You should call bcrypt hash on myPlaintextPassword and saltRounds and handle err and hash as a result in the callback'\n);\nassert match(\ndata,\n/START_ASYNC[^]*bcrypt hash[^]*bcrypt compare *myPlaintextPassword( |),( |)hash( |),( |) *err( |),( |)res[^]*}[^]*}[^]*END_ASYNC/gi,\n'Nested within the hash function should be the compare function comparing myPlaintextPassword to hash'\n);\n},\n(xhr) => {\nthrow new Error(xhr statusText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2690,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\hash-and-compare-passwords-asynchronously.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "063eece0955aac097dcf671c47126a43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\install-and-require-helmet.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8247367417b2b2512c36\ntitle: Install and Require Helmet\nchallengeType: 2\nforumTopicId: 301581\ndashedName: install-and-require-helmet\n--description--\nWorking on these challenges will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete these challenges locally.\nUse a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.\nHelmet helps you secure your Express apps by setting various HTTP headers.\n--instructions--\nAll your code for these lessons goes in the myApp.js file between the lines of code we have started you off with. Do not change or delete the code we have added for you.\nHelmet version 3.21.3 has already been installed, so require it as helmet in myApp.js.\n--hints--\nhelmet version 3.21.3 should be in package.json\njs\n$.get(code + '/_api/package.json').then(\n(data) => {\nconst packJson = JSON.parse(data);\nconst helmet = packJson.dependencies.helmet;\nassert(helmet === '3.21.3' || helmet === '^3.21.3');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\install-and-require-helmet.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2e185cc1142c5036da657de15e5f3539",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d824a367417b2b2512c45\ntitle: Anonymous Message Board\nchallengeType: 4\nforumTopicId: 301568\ndashedName: anonymous-message-board\n--description--\nBuild a full stack JavaScript app that is functionally similar to this: https://anonymous-message-board freecodecamp rocks/ Working on this project will involve you writing your code using one of the following methods:\nClone this GitHub repo and complete your project locally Use a site builder of your choice to complete the project Be sure to incorporate all the files from our GitHub repo --instructions--\nSet NODE_ENV to test without quotes when ready to write tests and DB to your databases connection string (in env)\nRecommended to create controllers/handlers and handle routing in routes/api js\nYou will add any security features to server js\nWrite the following tests in tests/2_functional-tests js:\nCreating a new thread: POST request to /api/threads/{board}\nViewing the 10 most recent threads with 3 replies each: GET request to /api/threads/{board}\nDeleting a thread with the incorrect password: DELETE request to /api/threads/{board} with an invalid delete_password\nDeleting a thread with the correct password: DELETE request to /api/threads/{board} with a valid delete_password\nReporting a thread: PUT request to /api/threads/{board}\nCreating a new reply: POST request to /api/replies/{board}\nViewing a single thread with all replies: GET request to /api/replies/{board}\nDeleting a reply with the incorrect password: DELETE request to /api/replies/{board} with an invalid delete_password\nDeleting a reply with the correct password: DELETE request to /api/replies/{board} with a valid delete_password\nReporting a reply: PUT request to /api/replies/{board}\n--hints--\nYou can provide your own project, not the example URL js\nassert( / *\\/anonymous-message-board\\ freecodecamp\\ rocks/ test(\ncode\n)\n);\nOnly allow your site to be loaded in an iFrame on your own pages js\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert isTrue(parsed headers['x-frame-options'] includes('SAMEORIGIN'));\n};\nDo not allow DNS prefetching",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 9
  },
  {
    "id": "7fc78f51af0b4b58b351c71b344b908c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to /api/replies/{board} with a valid delete_password Reporting a reply: PUT request to /api/replies/{board} --hints-- You can provide your own project, not the example URL js assert( / *\\/anonymous-message-board\\ freecodecamp\\ rocks/ test( code ) ); Only allow your site to be loaded in an iFrame on your own pages js async () => { const data = await fetch(code + '/_api/app-info'); const parsed = await data json(); assert isTrue(parsed headers['x-frame-options'] includes('SAMEORIGIN')); }; Do not allow DNS prefetchingjs\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert isTrue(parsed headers['x-dns-prefetch-control'] includes('off'));\n};\nOnly allow your site to send the referrer for your own pages js\nasync () => {\nconst data = await fetch(code + '/_api/app-info');\nconst parsed = await data json();\nassert isTrue(parsed headers['referrer-policy'] includes('same-origin'));\n};\nYou can send a POST request to /api/threads/{board} with form data including text and delete_password The saved database record will have at least the fields _id, text, created_on(date & time), bumped_on(date & time, starts same as created_on), reported (boolean), delete_password, & replies (array) js\nasync () => {\nconst date = new Date();\nconst text = `fcc_test_${date}`;\nconst deletePassword = 'delete_me';\nconst data = { text, delete_password: deletePassword };\nconst url = code;\nconst res = await fetch(url + '/api/threads/fcc_test', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(data)\n});\nif (res ok) {\nconst checkData = await fetch(url + '/api/threads/fcc_test');\nconst parsed = await checkData json();\ntry {\nassert equal(parsed[0] text, text);\nassert isNotNull(parsed[0] _id);\nassert equal(new Date(parsed[0] created_on) toDateString(), date toDateString());\nassert equal(parsed[0] bumped_on, parsed[0] created_on);\nassert isArray(parsed[0] replies);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(`${res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 9
  },
  {
    "id": "02046047bb5e8d3c976345e633688c8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= await fetch(url + '/api/threads/fcc_test', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify(data) }); if (res ok) { const checkData = await fetch(url + '/api/threads/fcc_test'); const parsed = await checkData json(); try { assert equal(parsed[0] text, text); assert isNotNull(parsed[0] _id); assert equal(new Date(parsed[0] created_on) toDateString(), date toDateString()); assert equal(parsed[0] bumped_on, parsed[0] created_on); assert isArray(parsed[0] replies); } catch (err) { throw new Error(err responseText || err message); } } else { throw new Error(`${resstatus} ${res statusText}`);\n}\n};\nYou can send a POST request to /api/replies/{board} with form data including text, delete_password, & thread_id This will update the bumped_on date to the comment's date In the thread's replies array, an object will be saved with at least the properties _id, text, created_on, delete_password, & reported ```js\nasync () => {\nconst url = code;\nconst body = await fetch(url + '/api/threads/fcc_test');\nconst thread = await body json();\nconst date = new Date();\nconst text = fcc_test_reply_${date};\nconst delete_password = 'delete_me';\nconst thread_id = thread[0] _id;\nconst replyCount = thread[0] replies length;\nconst data = { text, delete_password, thread_id };\nconst res = await fetch(url + '/api/replies/fcc_test', {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(data)\n});\nif (res ok) {\nconst checkData = await fetch(${url}/api/replies/fcc_test thread_id=${thread_id});\nconst parsed = await checkData json();\ntry {\nassert equal(parsed replies length, replyCount + 1);\nassert equal(parsed replies[0] text, text);\nassert equal(parsed _id, thread_id);\nassert equal(parsed bumped_on, parsed replies[0] created_on);\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 2,
    "total_chunks": 9
  },
  {
    "id": "73224162de6b798f6a9cc06b675f6b49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "await fetch(url + '/api/replies/fcc_test', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON stringify(data) }); if (res ok) { const checkData = await fetch(${url}/api/replies/fcc_test thread_id=${thread_id}); const parsed = await checkData json(); try { assert equal(parsed replies length, replyCount + 1); assert equal(parsed replies[0] text, text); assert equal(parsed _id, thread_id); assert equal(parsed bumped_on, parsed replies[0] created_on); } catch (err) { throw new Error(err responseText || err message); } } else { throw new Error(${res status} ${resstatusText});\n}\n};\n```\nYou can send a GET request to /api/threads/{board} Returned will be an array of the most recent 10 bumped threads on the board with only the most recent 3 replies for each The reported and delete_password fields will not be sent to the client ```js\nasync () => {\nconst url = code;\nconst res = await fetch(url + '/api/threads/fcc_test');\nif (res ok) {\nconst threads = await res json();\ntry {\nassert equal(res status, 200);\nassert isAtMost(threads length, 10);\nfor (let i = 0; i < threads length; i++) {\nassert containsAllKeys(threads[i], [\"_id\", \"text\", \"created_on\", \"bumped_on\", \"replies\"]);\nassert isAtMost(threads[i] replies length, 3);\nassert notExists(threads[i] delete_password);\nassert notExists(threads[i] reported);\nfor (let j = 0; j < threads[i] replies length; j++) {\nassert notExists(threads[i] replies[j] delete_password);\nassert notExists(threads[i] replies[j] reported);\n}\n}\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res statusText});\n}\n};\n```\nYou can send a GET request to /api/replies/{board} thread_id={thread_id} Returned will be the entire thread with all its replies, also excluding the same fields from the client as the previous test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 3,
    "total_chunks": 9
  },
  {
    "id": "17aeba7dd609104b36e68c1749ca5ecf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(let j = 0; j < threads[i] replies length; j++) { assert notExists(threads[i] replies[j] delete_password); assert notExists(threads[i] replies[j] reported); } } } catch (err) { throw new Error(err responseText || err message); } } else { throw new Error(${res status} ${res statusText}); } }; ``` You can send a GET request to /api/replies/{board} thread_id={thread_id} Returned will be the entire thread with all its replies, also excluding the same fields from the client as the previous test``js\nasync () => {\nconst url = code;\nlet res = await fetch(url + '/api/threads/fcc_test');\nconst threads = await res json();\nconst thread_id = threads[0] _id;\nres = await fetch(${url}/api/replies/fcc_test thread_id=${thread_id}`);\nif (res ok) {\nconst thread = await res json();\ntry {\nassert equal(res status, 200);\nassert isObject(thread);\nassert containsAllKeys(thread, [\"_id\", \"text\", \"created_on\", \"bumped_on\", \"replies\"]);\nassert isArray(thread replies);\nassert notExists(thread delete_password);\nassert notExists(thread reported);\nfor (let i = 0; i < thread replies length; i++) {\nassert notExists(thread replies[i] delete_password);\nassert notExists(thread replies[i] reported);\n}\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res statusText});\n}\n};\n```\nYou can send a DELETE request to /api/threads/{board} and pass along the thread_id & delete_password to delete the thread Returned will be the string incorrect password or success ```js\nasync () => {\nconst url = code;\nlet res = await fetch(url + '/api/threads/fcc_test');\nconst threads = await res json();\nconst thread_id = threads[0] _id;\nlet data = { thread_id, delete_password: \"wrong_password\" };\nconst res_invalid = await fetch(url + '/api/threads/fcc_test', {\nmethod: 'DELETE',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 4,
    "total_chunks": 9
  },
  {
    "id": "266c6aeac97f79f08702f2ce9897ba59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "DELETE request to /api/threads/{board} and pass along the thread_id & delete_password to delete the thread Returned will be the string incorrect password or success ```js async () => { const url = code; let res = await fetch(url + '/api/threads/fcc_test'); const threads = await res json(); const thread_id = threads[0] _id; let data = { thread_id, delete_password: \"wrong_password\" }; const res_invalid = await fetch(url + '/api/threads/fcc_test', { method: 'DELETE', headers: { 'Content-Type': 'application/json' }, body: JSONstringify(data)\n});\ndata = { thread_id, delete_password: \"delete_me\" };\nres = await fetch(url + '/api/threads/fcc_test', {\nmethod: 'DELETE',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(data)\n});\nif (res ok) {\nconst deleted = await res text();\nconst not_deleted = await res_invalid text();\ntry {\nassert equal(res status, 200);\nassert equal(deleted, \"success\");\nassert equal(not_deleted, \"incorrect password\");\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res statusText});\n}\n};\n```\nYou can send a DELETE request to /api/replies/{board} and pass along the thread_id, reply_id, & delete_password Returned will be the string incorrect password or success On success, the text of the reply_id will be changed to [deleted] ```js\nasync () => {\nconst url = code;\nconst thread_data = {\ntext: \"fcc_test_thread\",\ndelete_password: \"delete_me\",\n};\nawait fetch(${url}/api/threads/fcc_test, {\nmethod: \"POST\",\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(thread_data)\n});\nlet res = await fetch(${url}/api/threads/fcc_test);\nlet threads = await res json();\nconst thread_id = threads[0] _id;\nconst reply_data = { thread_id, text: \"fcc_test_reply\", delete_password: \"delete_me\" };\nawait fetch(${url}/api/replies/fcc_test, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 5,
    "total_chunks": 9
  },
  {
    "id": "90fe8c5d753f7bfe8218c78a8d3b1690",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reply_id will be changed to [deleted] ```js async () => { const url = code; const thread_data = { text: \"fcc_test_thread\", delete_password: \"delete_me\", }; await fetch(${url}/api/threads/fcc_test, { method: \"POST\", headers: { 'Content-Type': 'application/json' }, body: JSON stringify(thread_data) }); let res = await fetch(${url}/api/threads/fcc_test); let threads = await res json(); const thread_id = threads[0] _id; const reply_data = { thread_id, text: \"fcc_test_reply\", delete_password: \"delete_me\" }; await fetch(${url}/api/replies/fcc_test, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSONstringify(reply_data)\n});\nres = await fetch(${url}/api/threads/fcc_test);\nthreads = await res json();\nconst reply_id = threads[0] replies[0] _id;\nconst data = { thread_id, reply_id, delete_password: \"delete_me\" };\nres = await fetch(url + '/api/replies/fcc_test', {\nmethod: 'DELETE',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(data)\n});\nif (res ok) {\nconst deleted = await res text();\ntry {\nassert equal(res status, 200);\nassert equal(deleted, \"success\");\nres = await fetch(${url}/api/replies/fcc_test thread_id=${thread_id});\nconst thread = await res json();\nassert equal(thread _id, thread_id);\nassert equal(thread replies[0] _id, reply_id);\nassert equal(thread replies[0] text, \"[deleted]\");\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res statusText});\n}\n};\n```\nYou can send a PUT request to /api/threads/{board} and pass along the thread_id Returned will be the string reported The reported value of the thread_id will be changed to true ```js\nasync () => {\nconst url = code;\nlet res = await fetch(${url}/api/threads/fcc_test);\nconst threads = await res json();\nconst thread_id = threads[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 6,
    "total_chunks": 9
  },
  {
    "id": "c468a87591862c4669df4f1fa2dc6d1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(err) { throw new Error(err responseText || err message); } } else { throw new Error(${res status} ${res statusText}); } }; ``` You can send a PUT request to /api/threads/{board} and pass along the thread_id Returned will be the string reported The reported value of the thread_id will be changed to true ```js async () => { const url = code; let res = await fetch(${url}/api/threads/fcc_test); const threads = await res json(); const thread_id = threads[0]_id;\nconst data = { thread_id };\nres = await fetch(${url}/api/threads/fcc_test, {\nmethod: 'PUT',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(data)\n});\nif (res ok) {\nconst reported = await res text();\ntry {\nassert equal(res status, 200);\nassert equal(reported, \"reported\");\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res statusText});\n}\n};\n```\nYou can send a PUT request to /api/replies/{board} and pass along the thread_id & reply_id Returned will be the string reported The reported value of the reply_id will be changed to true ```js\nasync () => {\nconst url = code;\nlet res = await fetch(${url}/api/threads/fcc_test);\nconst threads = await res json();\nconst thread_id = threads[0] _id;\nconst reply_id = threads[0] replies[0] _id;\nconst data = { thread_id, reply_id };\nres = await fetch(${url}/api/replies/fcc_test, {\nmethod: 'PUT',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON stringify(data)\n});\nif (res ok) {\nconst reported = await res text();\ntry {\nassert equal(res status, 200);\nassert equal(reported, \"reported\");\n} catch (err) {\nthrow new Error(err responseText || err message);\n}\n} else {\nthrow new Error(${res status} ${res statusText});\n}\n};\n```\nAll 10 functional tests are complete and passing js\nasync () => {\nconst tests = await fetch(code + '/_api/get-tests');\nconst parsed = await tests json();\nassert isTrue(parsed length >= 10);\nparsed forEach((test) => {\nassert equal(test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 7,
    "total_chunks": 9
  },
  {
    "id": "0d4a92b8381e9888f711066ebd23e7b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const reported = await res text(); try { assert equal(res status, 200); assert equal(reported, \"reported\"); } catch (err) { throw new Error(err responseText || err message); } } else { throw new Error(${res status} ${res statusText}); } }; ``` All 10 functional tests are complete and passing js async () => { const tests = await fetch(code + '/_api/get-tests'); const parsed = await tests json(); assert isTrue(parsed length >= 10); parsed forEach((test) => { assert equal(teststate, 'passed');\nassert isAtLeast(test assertions length, 1);\n});\n};",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 13220,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-projects\\anonymous-message-board.md",
      "source_type": "git_repo"
    },
    "token_count": 131,
    "chunk_index": 8,
    "total_chunks": 9
  },
  {
    "id": "f1e9574cce6cabd3a23c3e575930ad7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\mitigate-the-risk-of-clickjacking-with-helmet.frameguard.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8247367417b2b2512c38\ntitle: Mitigate the Risk of Clickjacking with helmet.frameguard()\nchallengeType: 2\nforumTopicId: 301582\ndashedName: mitigate-the-risk-of-clickjacking-with-helmet-frameguard\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nYour page could be put in a <frame> or <iframe> without your consent. This can result in clickjacking attacks, among other things. Clickjacking is a technique of tricking a user into interacting with a page different from what the user thinks it is. This can be obtained by executing your page in a malicious context, by means of iframing. In that context, a hacker can put a hidden layer over your page. Hidden buttons can be used to run bad scripts. This middleware sets the X-Frame-Options header. It restricts who can put your site in a frame. It has three modes: DENY, SAMEORIGIN, and ALLOW-FROM.\nWe don’t need our app to be framed.\n--instructions--\nUse helmet.frameguard() passing with the configuration object {action: 'deny'}.\n--hints--\nhelmet.frameguard() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(\ndata.appStack,\n'frameguard',\n'helmet.frameguard() middleware is not mounted correctly'\n);\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);\nhelmet.frameguard() 'action' should be set to 'DENY'\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.property(data.headers, 'x-frame-options');\nassert.equal(data.headers['x-frame-options'], 'DENY');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\mitigate-the-risk-of-clickjacking-with-helmet.frameguard.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "de1b64f7e1d65d52407cd43b1d362923",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\prevent-ie-from-opening-untrusted-html-with-helmet.ienoopen.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8248367417b2b2512c3b\ntitle: Prevent IE from Opening Untrusted HTML with helmet.ieNoOpen()\nchallengeType: 2\nforumTopicId: 301584\ndashedName: prevent-ie-from-opening-untrusted-html-with-helmet-ienoopen\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nSome web applications will serve untrusted HTML for download. Some versions of Internet Explorer by default open those HTML files in the context of your site. This means that an untrusted HTML page could start doing bad things in the context of your pages. This middleware sets the X-Download-Options header to noopen. This will prevent IE users from executing downloads in the trusted site's context.\n--instructions--\nUse the helmet.ieNoOpen() method on your server.\n--hints--\nhelmet.ieNoOpen() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'ienoopen');\nassert.equal(data.headers['x-download-options'], 'noopen');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1254,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\prevent-ie-from-opening-untrusted-html-with-helmet.ienoopen.md",
      "source_type": "git_repo"
    },
    "token_count": 250,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4fa01c7b77177b276336215c66a95ac8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\creating-a-tcp-client.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94db0\ntitle: Creating a TCP Client\nchallengeType: 11\nvideoId: ugYfJNTawks\nbilibiliIds:\naid: 933058124\nbvid: BV16M4y1g7zL\ncid: 409034338\ndashedName: creating-a-tcp-client\n--questions--\n--text--\nWhich socket object method lets you set the maximum amount of data your client accepts at once?\n--answers--\n.recv(1024)\n.decode('ascii')\n.connect(host, port)\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\creating-a-tcp-client.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d782a957c31a8b87f96699295b4cee01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet.xssfilter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8247367417b2b2512c39\ntitle: >-\nMitigate the Risk of Cross Site Scripting (XSS) Attacks with\nhelmet.xssFilter()\nchallengeType: 2\nforumTopicId: 301583\ndashedName: mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet-xssfilter\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub.\nCross-site scripting (XSS) is a frequent type of attack where malicious scripts are injected into vulnerable pages, with the purpose of stealing sensitive data like session cookies, or passwords.\nThe basic rule to lower the risk of an XSS attack is simple: \"Never trust user's input\". As a developer you should always sanitize all the input coming from the outside. This includes data coming from forms, GET query urls, and even from POST bodies. Sanitizing means that you should find and encode the characters that may be dangerous e.g. <, >.\nModern browsers can help mitigating the risk by adopting better software strategies. Often these are configurable via http headers.\nThe X-XSS-Protection HTTP header is a basic protection. The browser detects a potential injected script using a heuristic filter. If the header is enabled, the browser changes the script code, neutralizing it. It still has limited support.\n--instructions--\nUse helmet.xssFilter() to sanitize input sent to your server.\n--hints--\nhelmet.xssFilter() middleware should be mounted correctly\njs\n$.get(code + '/_api/app-info').then(\n(data) => {\nassert.include(data.appStack, 'xXssProtection');\nassert.property(data.headers, 'x-xss-protection');\n},\n(xhr) => {\nthrow new Error(xhr.responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\mitigate-the-risk-of-cross-site-scripting-xss-attacks-with-helmet.xssfilter.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "51f8fd2f492f47d5048ea2bab325d07f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-a-banner-grabber.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94db3\ntitle: Developing a Banner Grabber\nchallengeType: 11\nvideoId: CeGW761BIsA\nbilibiliIds:\naid: 633014533\nbvid: BV1Sb4y127H9\ncid: 409036288\ndashedName: developing-a-banner-grabber\n--questions--\n--text--\nFill in the blanks to complete the banner function below:\npy\ndef banner(ip, port):\ns = socket.socket()\ns.__A__((ip, __B__))\nprint(s.recv(1024))\n--answers--\nA: connect\nB: port\nA: getsockname\nB: '1-1024'\nA: connect\nB: int(port)\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 557,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-a-banner-grabber.md",
      "source_type": "git_repo"
    },
    "token_count": 172,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "33c1ca62e1664f44f957a8aab5318484",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-a-port-scanner.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94db4\ntitle: Developing a Port Scanner\nchallengeType: 11\nvideoId: z_qkqZS7KZ4\nbilibiliIds:\naid: 208077317\nbvid: BV1Uh411p7HS\ncid: 409036706\ndashedName: developing-a-port-scanner\n--questions--\n--text--\nWhat is the main difference between the .connect() and .connect_ex() methods?\n--answers--\nThere is no difference between the two methods.\nIf there is an error or if no host is found, .connect() returns an error code while .connect_ex() raises an exception.\nIf there is an error or if no host is found, .connect() raises an exception while .connect_ex() returns an error code.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 678,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-a-port-scanner.md",
      "source_type": "git_repo"
    },
    "token_count": 183,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "97637d6b1a0e365e8d96c811c39a6b40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-an-nmap-scanner-part-1.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94db1\ntitle: Developing an Nmap Scanner part 1\nchallengeType: 11\nvideoId: jYk9XaGoAnk\nbilibiliIds:\naid: 805657338\nbvid: BV1o34y1S7zf\ncid: 414718986\ndashedName: developing-an-nmap-scanner-part-1\n--questions--\n--text--\nWhat is the correct command to install the Python 3 version of the python-nmap library?\n--answers--\nsudo apt install python-nmap\npip install python-nmap\npip3 install python-nmap\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 492,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-an-nmap-scanner-part-1.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f26ffb98fb2e86f44ba256db3277f34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-an-nmap-scanner-part-2.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94db2\ntitle: Developing an Nmap Scanner part 2\nchallengeType: 11\nvideoId: a98PscnUsTg\nbilibiliIds:\naid: 505526943\nbvid: BV1Hg411c7oE\ncid: 409034761\ndashedName: developing-an-nmap-scanner-part-2\n--questions--\n--text--\nWhich of the following allows you to scan for UDP ports between 21 to 443?\n--answers--\n.scan(ip_addr, '21-443', '-v -sU')\n.scan(ip_addr, '1-1024', '-v -sS')\n.scan(ip_addr, '21-443', '-v -sS')\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 504,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\developing-an-nmap-scanner-part-2.md",
      "source_type": "git_repo"
    },
    "token_count": 173,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "982a4328dea7ecca57aee1dbae89bae2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\introduction-and-setup.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94dae\ntitle: Introduction and Setup\nchallengeType: 11\nvideoId: XeQ7ZKtb998\nbilibiliIds:\naid: 718017704\nbvid: BV13Q4y1k7hX\ncid: 409033630\ndashedName: introduction-and-setup\n--questions--\n--text--\nWhat code editor and extension does the instructor recommend for developing penetration testing tools in Python?\n--answers--\nAtom and the atom-python-run extension.\nVSCode and Microsoft's Python extension.\nSublime Text and the Anaconda package.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 529,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\introduction-and-setup.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1f4580ffe8ebe2a1abcfe604ad82bf4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\understanding-sockets-and-creating-a-tcp-server.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5ea9997bbec2e9bc47e94daf\ntitle: Understanding Sockets and Creating a TCP Server\nchallengeType: 11\nvideoId: F1QI9tNuDQg\nbilibiliIds:\naid: 848005038\nbvid: BV1bL4y1a7kJ\ncid: 409034113\ndashedName: understanding-sockets-and-creating-a-tcp-server\n--questions--\n--text--\nWhich of the following functions creates a socket object?\n--answers--\nsocket.bind((host, port))\nsocket.gethostbyname()\nsocket.socket(socket.AF_INET, socket.SOCK_STREAM)\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 509,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\python-for-penetration-testing\\understanding-sockets-and-creating-a-tcp-server.md",
      "source_type": "git_repo"
    },
    "token_count": 144,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6fa1abeb695676ca7b974f15a96c62c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\understand-bcrypt-hashes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 58a25bcef9fc0f352b528e7c\ntitle: Understand BCrypt Hashes\nchallengeType: 2\nforumTopicId: 301586\ndashedName: understand-bcrypt-hashes\n--description--\nFor the following challenges, you will be working with a new starter project that is different from the previous one You can find the new starter project to clone on GitHub BCrypt hashes are very secure A hash is basically a fingerprint of the original data- always unique This is accomplished by feeding the original data into an algorithm and returning a fixed length result To further complicate this process and make it more secure, you can also salt your hash Salting your hash involves adding random data to the original data before the hashing process which makes it even harder to crack the hash BCrypt hashes will always look like $2a$13$ZyprE5MRw2Q3WpNOGZWGbeG7ADUre1Q8QO uUUtcbqloU0yvzavOm which does have a structure The first small bit of data $2a is defining what kind of hash algorithm was used The next portion $13 defines the cost Cost is about how much power it takes to compute the hash It is on a logarithmic scale of 2^cost and determines how many times the data is put through the hashing algorithm For example, at a cost of 10 you are able to hash 10 passwords a second on an average computer, however at a cost of 15 it takes 3 seconds per hash and to take it further, at a cost of 31 it would take multiple days to complete a hash A cost of 12 is considered very secure at this time The last portion of your hash $ZyprE5MRw2Q3WpNOGZWGbeG7ADUre1Q8QO uUUtcbqloU0yvzavOm, looks like one large string of numbers, periods, and letters but it is actually two separate pieces of information The first 22 characters is the salt in plain text, and the rest is the hashed password --instructions--\nAdd all your code for these lessons in the server js file between the code we have started you off with Do not change or delete the code we have added for you BCrypt has already been added as a dependency, so require it as bcrypt in your server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\understand-bcrypt-hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "245ff299e2eabc77132d68a3cae2ca11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\understand-bcrypt-hashes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "but it is actually two separate pieces of information The first 22 characters is the salt in plain text, and the rest is the hashed password --instructions-- Add all your code for these lessons in the server js file between the code we have started you off with Do not change or delete the code we have added for you BCrypt has already been added as a dependency, so require it as bcrypt in your serverSubmit your page when you think you've got it right --hints--\nBCrypt should be a dependency js\n$ get(code + '/_api/package json') then(\n(data) => {\nvar packJson = JSON parse(data);\nassert property(\npackJson dependencies,\n'bcrypt',\n'Your project should list \"bcrypt\" as a dependency'\n);\n},\n(xhr) => {\nthrow new Error(xhr statusText);\n}\n);\nBCrypt should be properly required js\n$ get(code + '/_api/server js') then(\n(data) => {\nassert match(\ndata,\n/bcrypt *= *require *('|\")bcrypt('|\")/gi,\n'You should correctly require and instantiate socket io as io '\n);\n},\n(xhr) => {\nthrow new Error(xhr statusText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\understand-bcrypt-hashes.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7687243ee0fc04943bb642eb0de0a3e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\set-a-content-security-policy-with-helmet.contentsecuritypolicy.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 587d8249367417b2b2512c3f\ntitle: Set a Content Security Policy with helmet contentSecurityPolicy()\nchallengeType: 2\nforumTopicId: 301585\ndashedName: set-a-content-security-policy-with-helmet-contentsecuritypolicy\n--description--\nAs a reminder, this project is being built upon the following starter project cloned from GitHub This challenge highlights one promising new defense that can significantly reduce the risk and impact of many type of attacks in modern browsers By setting and configuring a Content Security Policy you can prevent the injection of anything unintended into your page This will protect your app from XSS vulnerabilities, undesired tracking, malicious frames, and much more CSP works by defining an allowed list of content sources which are trusted You can configure them for each kind of resource a web page may need (scripts, stylesheets, fonts, frames, media, and so on ) There are multiple directives available, so a website owner can have a granular control See HTML 5 Rocks, KeyCDN for more details Unfortunately CSP is unsupported by older browsers By default, directives are wide open, so it’s important to set the defaultSrc directive as a fallback Helmet supports both defaultSrc and default-src naming styles The fallback applies for most of the unspecified directives --instructions--\nIn this exercise, use helmet contentSecurityPolicy() Configure it by adding a directives object In the object, set the defaultSrc to [\"'self'\"] (the list of allowed sources must be in an array), in order to trust only your website address by default Also set the scriptSrc directive so that you only allow scripts to be downloaded from your website ('self'), and from the domain 'trusted-cdn com' Hint: in the 'self' keyword, the single quotes are part of the keyword itself, so it needs to be enclosed in double quotes to be working --hints--\nhelmet contentSecurityPolicy() middleware should be mounted correctly\njs\n$ get(code + '/_api/app-info') then(\n(data) => {\nassert include(data appStack, 'csp');\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);\nYour csp config is not correct defaultSrc should be [\"'self'\"] and scriptSrc should be [\"'self'\", 'trusted-cdn com']\njs\n$ get(code + '/_api/app-info') then(\n(data) => {\nvar cspHeader = Object keys(data headers)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\set-a-content-security-policy-with-helmet.contentsecuritypolicy.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "82579574728898f65896759bab126e94",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\set-a-content-security-policy-with-helmet.contentsecuritypolicy.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "itself, so it needs to be enclosed in double quotes to be working --hints-- helmet contentSecurityPolicy() middleware should be mounted correctly js $ get(code + '/_api/app-info') then( (data) => { assert include(data appStack, 'csp'); }, (xhr) => { throw new Error(xhr responseText); } ); Your csp config is not correct defaultSrc should be [\"'self'\"] and scriptSrc should be [\"'self'\", 'trusted-cdn com'] js $ get(code + '/_api/app-info') then( (data) => { var cspHeader = Object keys(data headers)filter(function (k) {\nreturn (\nk === 'content-security-policy' ||\nk === 'x-webkit-csp' ||\nk === 'x-content-security-policy'\n);\n})[0];\nassert equal(\ndata headers[cspHeader],\n\"default-src 'self'; script-src 'self' trusted-cdn com\"\n);\n},\n(xhr) => {\nthrow new Error(xhr responseText);\n}\n);",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2918,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\09-information-security\\information-security-with-helmetjs\\set-a-content-security-policy-with-helmet.contentsecuritypolicy.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f73cdff556782a42bf35684c9632de7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-analysis-example-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c14d\ntitle: Data Analysis Example A\nchallengeType: 11\nvideoId: nVAaxZ34khk\nbilibiliIds:\naid: 590571151\nbvid: BV1sq4y1f7gr\ncid: 409002372\ndashedName: data-analysis-example-a\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat does the shape of our dataframe tell us?\n--answers--\nThe size in gigabytes the dataframe we loaded into memory is.\nHow many rows and columns our dataframe has.\nHow many rows the source data had before loading.\nHow many columns the source data had before loading.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1090,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-analysis-example-a.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "59b1b6b160a47fca72744e6aa8b1f973",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-and-visualizations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c160\ntitle: Data Cleaning and Visualizations\nchallengeType: 11\nvideoId: mHjxzFS5_Z0\nbilibiliIds:\naid: 933107558\nbvid: BV1KM4y137Ny\ncid: 409019632\ndashedName: data-cleaning-and-visualizations\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhen using Matplotlib's global API, what does the order of numbers mean here?\npy\nplt.subplot(1, 2, 1)\n--answers--\nMy figure will have one column, two rows, and I am going to start drawing in the first (left) plot.\nI am going to start drawing in the first (left) plot, my figure will have two rows, and my figure will have one column.\nMy figure will have one row, two columns, and I am going to start drawing in the first (left) plot.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-and-visualizations.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2837e588ae13e32ef12d2de97c142d67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-analysis-example-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c14e\ntitle: Data Analysis Example B\nchallengeType: 11\nvideoId: 0kJz0q0pvgQ\nbilibiliIds:\naid: 505593432\nbvid: BV1kg411c7M6\ncid: 409003530\ndashedName: data-analysis-example-b\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat does the loc method allow you to do?\n--answers--\nRetrieve a subset of rows and columns by supplying integer-location arguments.\nAccess a group of rows and columns by supplying label(s) arguments.\nReturns the first n rows based on the integer argument supplied.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-analysis-example-b.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ceffef0fd9d0ac4909c5f46f9c83e317",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-introduction.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c15d\ntitle: Data Cleaning Introduction\nchallengeType: 11\nvideoId: ovYNhnltVxY\nbilibiliIds:\naid: 250574398\nbvid: BV1Pv411A7GN\ncid: 409018611\ndashedName: data-cleaning-introduction\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nimport pandas as pd\nimport numpy as np\ns = pd.Series(['a', 3, np.nan, 1, np.nan])\nprint(s.notnull().sum())\n```\n--answers--\n3\n0     True\n1     True\n2    False\n3     True\n4    False\ndtype: bool\n0    False\n1    False\n2     True\n3    False\n4     True\ndtype: bool\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1147,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53a21ffc961895a3ebf08c23532c0254",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-duplicates.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c15f\ntitle: Data Cleaning Duplicates\nchallengeType: 11\nvideoId: kj7QqjXhH6A\nbilibiliIds:\naid: 675611672\nbvid: BV1VU4y1A7tu\ncid: 409019368\ndashedName: data-cleaning-duplicates\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nThe Python method .duplicated() returns a boolean Series for your DataFrame. True is the return value for rows that:\n--answers--\ncontain a duplicate, where the value for the row contains the first occurrence of that value.\ncontain a duplicate, where the value for the row is at least the second occurrence of that value.\ncontain a duplicate, where the value for the row contains either the first or second occurrence.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-duplicates.md",
      "source_type": "git_repo"
    },
    "token_count": 229,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5a25eb8bdab713211160466d9baa0e5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-with-dataframes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c15e\ntitle: Data Cleaning with DataFrames\nchallengeType: 11\nvideoId: sTMN_pdI6S0\nbilibiliIds:\naid: 505597026\nbvid: BV1Yg411c7bx\ncid: 409018948\ndashedName: data-cleaning-with-dataframes\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nimport pandas as pd\nimport numpy as np\ns = pd.Series([np.nan, 1, 2, np.nan, 3])\ns = s.fillna(method='ffill')\nprint(s)\n```\n--answers--\n0    1.0\n1    1.0\n2    2.0\n3    3.0\n4    3.0\ndtype: float64\n0    NaN\n1    1.0\n2    2.0\n3    2.0\n4    3.0\ndtype: float64\n0    NaN\n1    1.0\n2    2.0\n3    NaN\n4    3.0\ndtype: float64\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1225,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\data-cleaning-with-dataframes.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6e9973966ed9353c4a0612c6ffbebe7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\how-to-use-jupyter-notebooks-intro.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c14f\ntitle: How to use Jupyter Notebooks Intro\nchallengeType: 11\nvideoId: h8caJq2Bb9w\nbilibiliIds:\naid: 293035919\nbvid: BV1Hf4y1n7qr\ncid: 409002965\ndashedName: how-to-use-jupyter-notebooks-intro\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat is not allowed in a Jupyter Notebook's cell?\n--answers--\nMarkdown\nPython code\nAn Excel sheet\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 945,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\how-to-use-jupyter-notebooks-intro.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aa567cf3ca2ac9ddaf05159f0bbd6d15",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\introduction-to-data-analysis.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c14c\ntitle: Introduction to Data Analysis\nchallengeType: 11\nvideoId: VJrP2FUzKP0\nbilibiliIds:\naid: 378034466\nbvid: BV19f4y1c7nu\ncid: 409001487\ndashedName: introduction-to-data-analysis\n--description--\nData analysis is the act of turning raw, messy data into useful insights by cleaning the data up, transforming it, manipulating it, and inspecting it.\nMore resources:\n- News article\n--questions--\n--text--\nWhich of the following is not part of Data Analysis?\n--answers--\nBuilding statistical models and data visualizations.\nPicking a desired conclusion for the analysis.\nFixing incorrect values and removing invalid data.\nTransforming data into an appropriate data structure.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 887,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\introduction-to-data-analysis.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "302088fe16a83763dac45f81c0ef00ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\jupyter-notebooks-cells.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c150\ntitle: Jupyter Notebooks Cells\nchallengeType: 11\nvideoId: 5PPegAs9aLA\nbilibiliIds:\naid: 420510493\nbvid: BV19341117Hq\ncid: 409003280\ndashedName: jupyter-notebooks-cells\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat are the three main types of Jupyter Notebook Cell?\n--answers--\nCode, Markdown, and Python\nCode, Markdown, and Raw\nMarkdown, Python, and Raw\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 965,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\jupyter-notebooks-cells.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4429c2012afb8ebe6f428c9acdae0f05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\jupyter-notebooks-importing-and-exporting-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c151\ntitle: Jupyter Notebooks Importing and Exporting Data\nchallengeType: 11\nvideoId: k1msxD3JIxE\nbilibiliIds:\naid: 975540688\nbvid: BV1n44y1b7Gi\ncid: 409006337\ndashedName: jupyter-notebooks-importing-and-exporting-data\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat kind of data can you import and work with in a Jupyter Notebook?\n--answers--\nExcel files.\nCSV files.\nXML files.\nData from an API.\nAll of the above.\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1028,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\jupyter-notebooks-importing-and-exporting-data.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b4b1175dd00707d4f31fedff3f925f81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-arrays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c154\ntitle: Numpy Arrays\nchallengeType: 11\nvideoId: VDYVFHBL1AM\nbilibiliIds:\naid: 890607366\nbvid: BV1zP4y1h7FR\ncid: 409011400\ndashedName: numpy-arrays\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nA = np.array([\n['a', 'b', 'c'],\n['d', 'e', 'f'],\n['g', 'h', 'i']\n])\nprint(A[:, :2])\n```\n--answers--\npy\n[['a' 'b']]\npy\n[['b' 'c']\n['e' 'f']\n['h' 'i']]\npy\n[['a' 'b']\n['d' 'e']\n['g' 'h']]\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1050,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d92936d4ba1f36b88ca2ca22e1d6a81c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-algebra-and-size.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c157\ntitle: Numpy Algebra and Size\nchallengeType: 11\nvideoId: XAT97YLOKD8\nbilibiliIds:\naid: 250621433\nbvid: BV1hv41137uM\ncid: 409013128\ndashedName: numpy-algebra-and-size\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat is the relationship between size of objects (such as lists and datatypes) in memory in Python's standard library and the NumPy library? Knowing this, what are the implications for performance?\n--answers--\nStandard Python objects take up much more memory to store than NumPy objects; operations on comparable standard Python and NumPy objects complete in roughly the same time.\nNumPy objects take up much more memory than standard Python objects; operations on NumPy objects complete very quickly compared to comparable objects in standard Python.\nNumPy objects take up much less memory than Standard Python objects; operations on Standard Python objects complete very quickly compared to comparable objects on NumPy Object.\nStandard Python objects take up more memory than NumPy objects; operations on NumPy objects complete very quickly compared to comparable objects in standard Python.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1704,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-algebra-and-size.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e42a2c83863145373f09b5a6e31eb5eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-boolean-arrays.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c156\ntitle: Numpy Boolean Arrays\nchallengeType: 11\nvideoId: N1ttsMmcVMM\nbilibiliIds:\naid: 208091324\nbvid: BV1Qh411p7V8\ncid: 409012711\ndashedName: numpy-boolean-arrays\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\na = np.arange(5)\nprint(a <= 3)\n```\n--answers--\npython\n[False, False, False, False, True]\npython\n[5]\npython\n[0, 1, 2, 3]\npython\n[True, True, True, True, False]\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1041,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-boolean-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 216,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9a267c9e1ecc81b7c0f2560b75649c6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-introduction-a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c152\ntitle: Numpy Introduction A\nchallengeType: 11\nvideoId: P-JjV6GBCmk\nbilibiliIds:\naid: 718079611\nbvid: BV18Q4y1k7om\ncid: 409007080\ndashedName: numpy-introduction-a\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhy is Numpy an important, but unpopular Python library?\n--answers--\nOften you won't work directly with Numpy.\nIt is extremely slow.\nWorking with Numpy is difficult.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-introduction-a.md",
      "source_type": "git_repo"
    },
    "token_count": 178,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b1956def0dd6a3ef6842a0e49ac21118",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-introduction-b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c153\ntitle: Numpy Introduction B\nchallengeType: 11\nvideoId: YIqgrNLAZkA\nbilibiliIds:\naid: 250503382\nbvid: BV1kv411w7vB\ncid: 409010193\ndashedName: numpy-introduction-b\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nAbout how much memory does the integer 5 consume in plain Python?\n--answers--\n32 bits\n20 bytes\n16 bytes\n8 bits\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 919,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-introduction-b.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3b8012cf2e74e06604d70d01aeac27c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-operations.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c155\ntitle: Numpy Operations\nchallengeType: 11\nvideoId: eqSVcJbaPdk\nbilibiliIds:\naid: 378057123\nbvid: BV13f4y1w7od\ncid: 409012507\ndashedName: numpy-operations\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat is the value of a after you run the following code?\npy\na = np.arange(5)\na + 20\n--answers--\npython\n[20, 21, 22, 24, 24]\npython\n[0, 1, 2, 3, 4]\npython\n[25, 26, 27, 28, 29]\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\numpy-operations.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e72d97d2027d55942b5e6d133bc3446d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-conditional-selection-and-modifying-dataframes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c15b\ntitle: Pandas Conditional Selection and Modifying DataFrames\nchallengeType: 11\nvideoId: BFlH0fN5xRQ\nbilibiliIds:\naid: 505598518\nbvid: BV1vg411c72y\ncid: 409113534\ndashedName: pandas-conditional-selection-and-modifying-dataframes\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nimport pandas as pd\ncertificates_earned = pd.DataFrame({\n'Certificates': [8, 2, 5, 6],\n'Time (in months)': [16, 5, 9, 12]\n})\nnames = ['Tom', 'Kris', 'Ahmad', 'Beau']\ncertificates_earned.index = names\nlongest_streak = pd.Series([13, 11, 9, 7], index=names)\ncertificates_earned['Longest streak'] = longest_streak\nprint(certificates_earned)\n```\n--answers--\nTom      13\nKris     11\nAhmad     9\nBeau      7\nName: Longest streak, dtype: int64\nCertificates  Time (in months)  Longest streak\nTom               8                16              13\nKris              2                 5              11\nAhmad             5                 9               9\nBeau              6                12               7\nCertificates   Longest streak\nTom               8               13\nKris              2               11\nAhmad             5                9\nBeau              6                7\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-conditional-selection-and-modifying-dataframes.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "514d66de950d6f96c01c37ccfecc3df7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-dataframes.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c15a\ntitle: Pandas DataFrames\nchallengeType: 11\nvideoId: 7SgFBYXaiH0\nbilibiliIds:\naid: 890503235\nbvid: BV1TP4y1h7qq\ncid: 409014039\ndashedName: pandas-dataframes\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nimport pandas as pd\ncertificates_earned = pd.DataFrame({\n'Certificates': [8, 2, 5, 6],\n'Time (in months)': [16, 5, 9, 12]\n})\ncertificates_earned.index = ['Tom', 'Kris', 'Ahmad', 'Beau']\nprint(certificates_earned.iloc[2])\n```\n--answers--\nTom      16\nKris      5\nAhmad     9\nBeau     12\nName: Time (in months), dtype: int64\nCertificates         6\nTime (in months)    12\nName: Beau, dtype: int64\nCertificates        5\nTime (in months)    9\nName: Ahmad, dtype: int64\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1355,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-dataframes.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a8caeca6f35f4ce521dc3b787171f436",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-creating-columns.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c15c\ntitle: Pandas Creating Columns\nchallengeType: 11\nvideoId: _sSo2XZoB3E\nbilibiliIds:\naid: 975568901\nbvid: BV1b44y1b7Cg\ncid: 409018052\ndashedName: pandas-creating-columns\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat code would add a \"Certificates per month\" column to the certificates_earned DataFrame like the one below?\nCertificates  Time (in months)  Certificates per month\nTom               8                16                    0.50\nKris              2                 5                    0.40\nAhmad             5                 9                    0.56\nBeau              6                12                    0.50\n--answers--\npy\ncertificates_earned['Certificates'] /\ncertificates_earned['Time (in months)']\npy\ncertificates_earned['Certificates per month'] = round(\ncertificates_earned['Certificates'] /\ncertificates_earned['Time (in months)']\n)\npy\ncertificates_earned['Certificates per month'] = round(\ncertificates_earned['Certificates'] /\ncertificates_earned['Time (in months)'], 2\n)\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-creating-columns.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "15e68c99986043286f1a2133e6081522",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-indexing-and-conditional-selection.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c159\ntitle: Pandas Indexing and Conditional Selection\nchallengeType: 11\nvideoId: '-ZOrgV_aA9A'\nbilibiliIds:\naid: 720604139\nbvid: BV1FQ4y1k7tC\ncid: 409013650\ndashedName: pandas-indexing-and-conditional-selection\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nimport pandas as pd\ncertificates_earned = pd.Series(\n[8, 2, 5, 6],\nindex=['Tom', 'Kris', 'Ahmad', 'Beau']\n)\nprint(certificates_earned[certificates_earned > 5])\n```\n--answers--\nTom      True\nKris     False\nAhmad    False\nBeau     True\ndtype: int64\nTom      8\nAhmad    5\nBeau     6\ndtype: int64\nTom      8\nBeau     6\ndtype: int64\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-indexing-and-conditional-selection.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d30babefc74699552c506d35cac0b45c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\parsing-html-and-saving-data.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c164\ntitle: Parsing HTML and Saving Data\nchallengeType: 11\nvideoId: bJaqnTWQmb0\nbilibiliIds:\naid: 335522976\nbvid: BV1RA411F7vi\ncid: 409023170\ndashedName: parsing-html-and-saving-data\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat Python library has the .read_html() method we can use for parsing HTML documents and extracting tables?\n--answers--\nBeautifierSoupy\nWebReader\nHTTP-master\nPandas\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 993,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\parsing-html-and-saving-data.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eb23a97119cfb3501f5a024f1dfa3f26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-introduction.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c158\ntitle: Pandas Introduction\nchallengeType: 11\nvideoId: 0xACW-8cZU0\nbilibiliIds:\naid: 975510116\nbvid: BV1u44y1b7fD\ncid: 409013433\ndashedName: pandas-introduction\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat will the following code print out?\n```py\nimport pandas as pd\ncertificates_earned = pd.Series(\n[8, 2, 5, 6],\nindex=['Tom', 'Kris', 'Ahmad', 'Beau']\n)\nprint(certificates_earned)\n```\n--answers--\nmarkup\nTom      8\nKris     2\nAhmad    5\nBeau     6\ndtype: int64\nmarkup\nKris     2\nAhmad    5\nBeau     6\nTom      8\ndtype: int64\nmarkup\nTom      8\nKris     2\nAhmad    5\nBeau     6\nName: certificates_earned dtype: int64\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1246,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\pandas-introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c00e87de6461dc9814d9a12aa697862f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\python-functions-and-collections.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c166\ntitle: Python Functions and Collections\nchallengeType: 11\nvideoId: NzpU17ZVlUw\nbilibiliIds:\naid: 675544435\nbvid: BV1pU4y1N7JC\ncid: 409023833\ndashedName: python-functions-and-collections\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat is the main difference between lists and tuples in Python?\n--answers--\nTuples are immutable.\nLists are ordered.\nTuples are unordered.\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 970,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\python-functions-and-collections.md",
      "source_type": "git_repo"
    },
    "token_count": 173,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7d9e40b502875b09f68bb9d75d0771ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\python-introduction.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c165\ntitle: Python Introduction\nchallengeType: 11\nvideoId: PrQV9JkLhb4\nbilibiliIds:\naid: 805597530\nbvid: BV1634y1S7gD\ncid: 409023550\ndashedName: python-introduction\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nHow do we define blocks of code in the body of functions in Python?\n--answers--\nWe use a set of curly braces, one on either side of each new block of our code.\nWe use indentation, usually right-aligned 4 spaces.\nWe do not denote blocks of code.\nWe could use curly braces or indentation to denote blocks of code.\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1123,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\python-introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "894907b69ee6a4dee0690f211f094f97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\python-iteration-and-modules.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c167\ntitle: Python Iteration and Modules\nchallengeType: 11\nvideoId: XzosGWLafrY\nbilibiliIds:\naid: 633068913\nbvid: BV1db4y127M4\ncid: 409024056\ndashedName: python-iteration-and-modules\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nHow would you iterate over and print the keys and values of a dictionary named user?\n--answers--\npython\nfor key in user.items():\nprint(key)\npython\nfor key, value in user.all():\nprint(key, value)\nprint(value)\npython\nfor key, value in user.items():\nprint(key, value)\npython\nfor key, value in user\nprint(key, value)\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1192,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\python-iteration-and-modules.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f29d0809496e98b7400ec2e9a91a7d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\reading-data-csv-and-txt.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c162\ntitle: Reading Data CSV and TXT\nchallengeType: 11\nvideoId: ViGEv0zOzUk\nbilibiliIds:\naid: 505575354\nbvid: BV1tg411c7GH\ncid: 409020451\ndashedName: reading-data-csv-and-txt\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nHow would you import the CSV file data.csv and store it in a DataFrame using the Pandas module?\n--answers--\npython\nimport pandas as pd\ndf = pd.csv(\"data.csv\")\npython\nimport pandas as pd\ndf = pd.read_csv(\"data.csv\")\npython\nimport pandas as pd\npd.read_csv(\"data.csv\")\npython\nimport pandas as pd\ndf = pd.csv_reader(\"data.csv\")\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1171,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\reading-data-csv-and-txt.md",
      "source_type": "git_repo"
    },
    "token_count": 228,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1c37ffbdc89de1c8269ff64984f6dd9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\reading-data-from-databases.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c163\ntitle: Reading Data from Databases\nchallengeType: 11\nvideoId: MtgXS1MofRw\nbilibiliIds:\naid: 890546354\nbvid: BV1JP4y1h7gk\ncid: 409020851\ndashedName: reading-data-from-databases\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nWhat method does a Cursor instance have and what does it allow?\n--answers--\nThe Cursor instance has a .run() method which allows you to run SQL queries.\nThe Cursor instance has a .select() method which allows you to select records.\nThe Cursor instance has an .execute() method which will receive SQL parameters to run against the database.\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1171,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\reading-data-from-databases.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "61bbcc7f1b4d84ec7d989f7141fb1b2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\reading-data-introduction.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e9a093a74c4063ca6f7c161\ntitle: Reading Data Introduction\nchallengeType: 11\nvideoId: cDnt02BcHng\nbilibiliIds:\naid: 548023524\nbvid: BV1Nq4y1K7iV\ncid: 409020187\ndashedName: reading-data-introduction\n--description--\nInstead of using notebooks.ai like it shows in the video, you can use Google Colab instead.\nMore resources:\nNotebooks on GitHub\nHow to open Notebooks from GitHub using Google Colab.\n--questions--\n--text--\nGiven a file named certificates.csv with these contents:\nName$Certificates$Time (in months)\nTom$8$16\nKris$2$5\nAhmad$5$9\nBeau$6$12\nFill in the blanks for the missing arguments below:\n```py\nimport csv\nwith open(A, 'r') as fp:\nreader = csv.reader(fp, delimiter=B)\nnext(reader)\nfor index, values in enumerate(reader):\nname, certs_num, months_num = values\nprint(f\"{name} earned {C} certificates in {months_num} months\")\n```\n--answers--\nA: 'certificates.csv'\nB: '-'\nC: values\nA: 'certificates.csv'\nB: '$'\nC: certs_num\nA: 'certificates'\nB: '$'\nC: certs_num\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-course\\reading-data-introduction.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87f4c47fb0ec8fe066800e9fa36c85e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\mean-variance-standard-deviation-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f7e5ac417301a38fb928\ntitle: Mean-Variance-Standard Deviation Calculator\nchallengeType: 10\nforumTopicId: 462366\ndashedName: mean-variance-standard-deviation-calculator\n--description--\nYou will be working on this project with our Gitpod starter code We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nHow to Analyze Data with Python Pandas (10 hours)\n--instructions--\nCreate a function named calculate() in mean_var_std py that uses Numpy to output the mean, variance, standard deviation, max, min, and sum of the rows, columns, and elements in a 3 x 3 matrix The input of the function should be a list containing 9 digits The function should convert the list into a 3 x 3 Numpy array, and then return a dictionary containing the mean, variance, standard deviation, max, min, and sum along both axes and for the flattened matrix The returned dictionary should follow this format:\npy\n{\n'mean': [axis1, axis2, flattened],\n'variance': [axis1, axis2, flattened],\n'standard deviation': [axis1, axis2, flattened],\n'max': [axis1, axis2, flattened],\n'min': [axis1, axis2, flattened],\n'sum': [axis1, axis2, flattened]\n}\nIf a list containing less than 9 elements is passed into the function, it should raise a ValueError exception with the message: \"List must contain nine numbers \" The values in the returned dictionary should be lists and not Numpy arrays For example, calculate([0,1,2,3,4,5,6,7,8]) should return:\npy\n{\n'mean': [[3 0, 4 0, 5 0], [1 0, 4 0, 7 0], 4 0],\n'variance': [[6 0, 6 0, 6 0], [0 6666666666666666, 0 6666666666666666, 0 6666666666666666], 6 666666666666667],\n'standard deviation': [[2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3364,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\mean-variance-standard-deviation-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6e9c95096d3a2d1ed47535cce87035ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\mean-variance-standard-deviation-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "than 9 elements is passed into the function, it should raise a ValueError exception with the message: \"List must contain nine numbers \" The values in the returned dictionary should be lists and not Numpy arrays For example, calculate([0,1,2,3,4,5,6,7,8]) should return: py { 'mean': [[3 0, 4 0, 5 0], [1 0, 4 0, 7 0], 4 0], 'variance': [[6 0, 6 0, 6 0], [0 6666666666666666, 0 6666666666666666, 0 6666666666666666], 6 666666666666667], 'standard deviation': [[2449489742783178, 2 449489742783178, 2 449489742783178], [0 816496580927726, 0 816496580927726, 0 816496580927726], 2 581988897471611],\n'max': [[6, 7, 8], [2, 5, 8], 8],\n'min': [[0, 1, 2], [0, 3, 6], 0],\n'sum': [[9, 12, 15], [3, 12, 21], 36]\n}\nDevelopment\nWrite your code in mean_var_std py For development, you can use main py to test your code In\norder to run your code, type python3 main py into the GitPod terminal and hit enter This will cause the included CPython interpreter to run the main py file Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3364,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\mean-variance-standard-deviation-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8d82c3ce3ada068d4606e5f73a5110bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\page-view-time-series-visualizer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f802ac417301a38fb92b\ntitle: Page View Time Series Visualizer\nchallengeType: 10\nforumTopicId: 462369\ndashedName: page-view-time-series-visualizer\n--description--\nYou will be working on this project with our Gitpod starter code We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nHow to Analyze Data with Python Pandas (10 hours)\n--instructions--\nFor this project you will visualize time series data using a line chart, bar chart, and box plots You will use Pandas, Matplotlib, and Seaborn to visualize a dataset containing the number of page views each day on the freeCodeCamp org forum from 2016-05-09 to 2019-12-03 The data visualizations will help you understand the patterns in visits and identify yearly and monthly growth Use the data to complete the following tasks:\nUse Pandas to import the data from \"fcc-forum-pageviews csv\" Set the index to the date column Clean the data by filtering out days when the page views were in the top 2 5% of the dataset or bottom 2 5% of the dataset Create a draw_line_plot function that uses Matplotlib to draw a line chart similar to \"examples/Figure_1 png\" The title should be Daily freeCodeCamp Forum Page Views 5/2016-12/2019 The label on the x axis should be Date and the label on the y axis should be Page Views Create a draw_bar_plot function that draws a bar chart similar to \"examples/Figure_2 png\" It should show average daily page views for each month grouped by year The legend should show month labels and have a title of Months On the chart, the label on the x axis should be Years and the label on the y axis should be Average Page Views Create a draw_box_plot function that uses Seaborn to draw two adjacent box plots similar to \"examples/Figure_3 png\" These box plots should show how the values are distributed within a given year or month and how it compares over time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3602,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\page-view-time-series-visualizer.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a05d4febb27a25b989a3fadfbc9c5b9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\page-view-time-series-visualizer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "year The legend should show month labels and have a title of Months On the chart, the label on the x axis should be Years and the label on the y axis should be Average Page Views Create a draw_box_plot function that uses Seaborn to draw two adjacent box plots similar to \"examples/Figure_3 png\" These box plots should show how the values are distributed within a given year or month and how it compares over timeThe title of the first chart should be Year-wise Box Plot (Trend) and the title of the second chart should be Month-wise Box Plot (Seasonality) Make sure the month labels on bottom start at Jan and the x and y axis are labeled correctly The boilerplate includes commands to prepare the data For each chart, make sure to use a copy of the data frame The boilerplate also includes commands to save and return the image Development\nWrite your code in time_series_visualizer py For development, you can use main py to test your code Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3602,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\page-view-time-series-visualizer.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4a0be41f745a6aa8527fcaff3b6d9869",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\demographic-data-analyzer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f7e5ac417301a38fb929\ntitle: Demographic Data Analyzer\nchallengeType: 10\nforumTopicId: 462367\ndashedName: demographic-data-analyzer\n--description--\nYou will be working on this project with our Gitpod starter code We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nHow to Analyze Data with Python Pandas (10 hours)\n--instructions--\nIn this challenge you must analyze demographic data using Pandas You are given a dataset of demographic data that was extracted from the 1994 Census database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\demographic-data-analyzer.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0b10c625a221b3a6edc4f9e5ffb548d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\demographic-data-analyzer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project: Python for Everybody Video Course (14 hours) How to Analyze Data with Python Pandas (10 hours) --instructions-- In this challenge you must analyze demographic data using Pandas You are given a dataset of demographic data that was extracted from the 1994 Census databaseHere is a sample of what the data looks like:\nmarkdown\n|    |   age | workclass        |   fnlwgt | education   |   education-num | marital-status     | occupation        | relationship   | race   | sex    |   capital-gain |   capital-loss |   hours-per-week | native-country   | salary   |\n|---:|------:|:-----------------|---------:|:------------|----------------:|:-------------------|:------------------|:---------------|:-------|:-------|---------------:|---------------:|-----------------:|:-----------------|:---------|\n|  0 |    39 | State-gov        |    77516 | Bachelors   |              13 | Never-married      | Adm-clerical      | Not-in-family  | White  | Male   |           2174 |              0 |               40 | United-States    | <=50K    |\n|  1 |    50 | Self-emp-not-inc |    83311 | Bachelors   |              13 | Married-civ-spouse | Exec-managerial   | Husband        | White  | Male   |              0 |              0 |               13 | United-States    | <=50K    |\n|  2 |    38 | Private          |   215646 | HS-grad     |               9 | Divorced           | Handlers-cleaners | Not-in-family  | White  | Male   |              0 |              0 |               40 | United-States    | <=50K    |\n|  3 |    53 | Private          |   234721 | 11th        |               7 | Married-civ-spouse | Handlers-cleaners | Husband        | Black  | Male   |              0 |              0 |               40 | United-States    | <=50K    |\n|  4 |    28 | Private          |   338409 | Bachelors   |              13 | Married-civ-spouse | Prof-specialty    | Wife           | Black  | Female |              0 |              0 |               40 | Cuba             | <=50K    |\nYou must use Pandas to answer the following questions:\nHow many people of each race are represented in this dataset",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\demographic-data-analyzer.md",
      "source_type": "git_repo"
    },
    "token_count": 584,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "91ba8b49060f02a53eb41e427c2da4be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\demographic-data-analyzer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "| 7 | Married-civ-spouse | Handlers-cleaners | Husband | Black | Male | 0 | 0 | 40 | United-States | <=50K | | 4 | 28 | Private | 338409 | Bachelors | 13 | Married-civ-spouse | Prof-specialty | Wife | Black | Female | 0 | 0 | 40 | Cuba | <=50K | You must use Pandas to answer the following questions: How many people of each race are represented in this datasetThis should be a Pandas series with race names as the index labels (race column)\nWhat is the average age of men What is the percentage of people who have a Bachelor's degree What percentage of people with advanced education (Bachelors, Masters, or Doctorate) make more than 50K What percentage of people without advanced education make more than 50K What is the minimum number of hours a person works per week What percentage of the people who work the minimum number of hours per week have a salary of more than 50K What country has the highest percentage of people that earn >50K and what is that percentage Identify the most popular occupation for those who earn >50K in India Use the starter code in the file demographic_data_analyzer py Update the code so all variables set to None are set to the appropriate calculation or code Round all decimals to the nearest tenth Development\nWrite your code in demographic_data_analyzer py For development, you can use main py to test your code Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp Dataset Source\nDua, D and Graff, C (2019) UCI Machine Learning Repository Irvine, CA: University of California, School of Information and Computer Science --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4796,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\demographic-data-analyzer.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "841026d1e70de134de7a10655442b288",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\medical-data-visualizer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e46f7f8ac417301a38fb92a\ntitle: Medical Data Visualizer\nchallengeType: 10\nforumTopicId: 462368\ndashedName: medical-data-visualizer\n--description--\nYou will be working on this project with our Gitpod starter code We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nHow to Analyze Data with Python Pandas (10 hours)\n--instructions--\nIn this project, you will visualize and make calculations from medical examination data using matplotlib, seaborn, and pandas The dataset values were collected during medical examinations Data description\nThe rows in the dataset represent patients and the columns represent information like body measurements, results from various blood tests, and lifestyle choices You will use the dataset to explore the relationship between cardiac disease, body measurements, blood markers, and lifestyle choices File name: medical_examination csv\n| Feature | Variable Type | Variable      | Value Type |\n|:-------:|:------------:|:-------------:|:----------:|\n| Age | Objective Feature | age | int (days) |\n| Height | Objective Feature | height | int (cm) |\n| Weight | Objective Feature | weight | float (kg) |\n| Gender | Objective Feature | gender | categorical code |\n| Systolic blood pressure | Examination Feature | ap_hi | int |\n| Diastolic blood pressure | Examination Feature | ap_lo | int |\n| Cholesterol | Examination Feature | cholesterol | 1: normal, 2: above normal, 3: well above normal |\n| Glucose | Examination Feature | gluc | 1: normal, 2: above normal, 3: well above normal |\n| Smoking | Subjective Feature | smoke | binary |\n| Alcohol intake | Subjective Feature | alco | binary |\n| Physical activity | Subjective Feature | active | binary |\n| Presence or absence of cardiovascular disease | Target Variable | cardio | binary |\nInstructions\nCreate a chart similar to examples/Figure_1 png, where we show the counts of good and bad outcomes for the cholesterol, gluc, alco, active, and smoke variables for patients with cardio=1 and cardio=0 in different panels By each number in the medical_data_visualizer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\medical-data-visualizer.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1aa625909c14e4c63ba5a842af34925f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\medical-data-visualizer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "| Subjective Feature | alco | binary | | Physical activity | Subjective Feature | active | binary | | Presence or absence of cardiovascular disease | Target Variable | cardio | binary | Instructions Create a chart similar to examples/Figure_1 png, where we show the counts of good and bad outcomes for the cholesterol, gluc, alco, active, and smoke variables for patients with cardio=1 and cardio=0 in different panels By each number in the medical_data_visualizerpy file, add the code from the associated instruction number below Import the data from medical_examination csv and assign it to the df variable Add an overweight column to the data To determine if a person is overweight, first calculate their BMI by dividing their weight in kilograms by the square of their height in meters If that value is > 25 then the person is overweight Use the value 0 for NOT overweight and the value 1 for overweight Normalize data by making 0 always good and 1 always bad If the value of cholesterol or gluc is 1, set the value to 0 If the value is more than 1, set the value to 1 Draw the Categorical Plot in the draw_cat_plot function Create a DataFrame for the cat plot using pd melt with values from cholesterol, gluc, smoke, alco, active, and overweight in the df_cat variable Group and reformat the data in df_cat to split it by cardio Show the counts of each feature You will have to rename one of the columns for the catplot to work correctly Convert the data into long format and create a chart that shows the value counts of the categorical features using the following method provided by the seaborn library import: sns catplot() Get the figure for the output and store it in the fig variable Do not modify the next two lines Draw the Heat Map in the draw_heat_map function Clean the data in the df_heat variable by filtering out the following patient segments that represent incorrect data:\ndiastolic pressure is higher than systolic (Keep the correct data with (df['ap_lo'] <= df['ap_hi']))\nheight is less than the 2 5th percentile (Keep the correct data with (df['height'] >= df['height'] quantile(0 025)))\nheight is more than the 97 5th percentile\nweight is less than the 2 5th percentile\nweight is more than the 97 5th percentile\nCalculate the correlation matrix and store it in the corr variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\medical-data-visualizer.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8767cbc21b8d65b247538e2f29957202",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\medical-data-visualizer.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "out the following patient segments that represent incorrect data: diastolic pressure is higher than systolic (Keep the correct data with (df['ap_lo'] <= df['ap_hi'])) height is less than the 2 5th percentile (Keep the correct data with (df['height'] >= df['height'] quantile(0 025))) height is more than the 97 5th percentile weight is less than the 2 5th percentile weight is more than the 97 5th percentile Calculate the correlation matrix and store it in the corr variableGenerate a mask for the upper triangle and store it in the mask variable Set up the matplotlib figure Plot the correlation matrix using the method provided by the seaborn library import: sns heatmap() Do not modify the next two lines Development\nWrite your code in medical_data_visualizer py For development, you can use main py to test your code Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp --hints--\nIt should pass all Python tests ```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\medical-data-visualizer.md",
      "source_type": "git_repo"
    },
    "token_count": 273,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "edc5e498341b91a884f34d42b3f88c5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\accessing-and-changing-elements,-rows,-columns.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed4\ntitle: 'Accessing and Changing Elements, Rows, Columns'\nchallengeType: 11\nvideoId: v-7Y7koJ_N0\nbilibiliIds:\naid: 590517748\nbvid: BV1Eq4y1f7Fa\ncid: 409025392\ndashedName: accessing-and-changing-elements-rows-columns\n--questions--\n--text--\nWhat code would change the values in the 3rd column of both of the following Numpy arrays to 20?\n```py\na = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nOutput:\n[[ 1  2  20  4  5]\n[ 6  7 20  9 10]]\n```\n--answers--\npython\na[:, 3] = 20\npython\na[2, :] = 20\npython\na[:, 2] = 20\npython\na[1, 2] = 20\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 668,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\accessing-and-changing-elements,-rows,-columns.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6a0f1f27b35dc55fdf34c70ce5d8fff4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\basics-of-numpy.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed3\ntitle: Basics of Numpy\nchallengeType: 11\nvideoId: f9QrZrKQMLI\nbilibiliIds:\naid: 763014202\nbvid: BV1K64y1a7bu\ncid: 409025169\ndashedName: basics-of-numpy\n--questions--\n--text--\nWhat will the following code print?\npython\nb = np.array([[1.0,2.0,3.0],[3.0,4.0,5.0]])\nprint(b)\n--answers--\npython\n[[1.0 2.0 3.0]\n[3.0 4.0 5.0]]\npython\n[[1. 2. 3.]\n[3. 4. 5.]]\npython\n[[1. 3.]\n[2. 4.]\n[3. 5.]\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\basics-of-numpy.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eb4b8b2930ef85690d44d8b6f9e4405c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\initialize-array-problem.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed6\ntitle: Initialize Array Problem\nchallengeType: 11\nvideoId: 0jGfH8BPfOk\nbilibiliIds:\naid: 763027834\nbvid: BV1w64y1a7eo\ncid: 409025878\ndashedName: initialize-array-problem\n--questions--\n--text--\nWhat is another way to produce the following array?\npy\n[[0. 0. 0. 0. 0. 0. 0.]\n[0. 1. 1. 1. 1. 1. 0.]\n[0. 1. 1. 1. 1. 1. 0.]\n[0. 1. 1. 5. 1. 1. 0.]\n[0. 1. 1. 1. 1. 1. 0.]\n[0. 1. 1. 1. 1. 1. 0.]\n[0. 0. 0. 0. 0. 0. 0.]]\n--answers--\n```py\noutput = np.ones((7, 7))\nz = np.zeros((5, 5))\nz[2, 2] = 5\noutput[1:1, -1:-1] = z\n```\n```py\noutput = np.zeros((7,7))\nz = np.ones((5, 5))\nz[2, 2] = 5\noutput[1:-1, 1:-1] = z\n```\n```py\noutput = np.ones((7, 7))\nz = np.zeros((5, 5))\nz[3, 3] = 5\noutput[1:-1, 1:-1] = z\n```\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\initialize-array-problem.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "17281cc5b18555e8bb5fdd826128b6c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\copying-arrays-warning.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed7\ntitle: Copying Arrays Warning\nchallengeType: 11\nvideoId: iIoQ0_L0GvA\nbilibiliIds:\naid: 633008569\nbvid: BV1Bb4y127fb\ncid: 409026161\ndashedName: copying-arrays-warning\n--questions--\n--text--\nWhat is the value of a after running the following code?\n```py\nimport numpy as np\na = np.array([1, 2, 3, 4, 5])\nb = a\nb[2] = 20\n```\n--answers--\npython\n[1 2 3 4 5]\npython\n[1 2 20 4 5]\npython\n[1 20 3 4 5]\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 512,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\copying-arrays-warning.md",
      "source_type": "git_repo"
    },
    "token_count": 195,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "82f073747b3526c950e4f1572e9ccd57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\initializing-different-arrays.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed5\ntitle: Initializing Different Arrays\nchallengeType: 11\nvideoId: CEykdsKT4U4\nbilibiliIds:\naid: 718044756\nbvid: BV1MQ4y1k7BB\ncid: 409025638\ndashedName: initializing-different-arrays\n--questions--\n--text--\nWhat will the following code print?\n```py\na = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\nprint(np.full_like(a, 100))\n```\n--answers--\npy\n[[100 100 100 100 100]]\npy\n[[100 100 100 100 100]\n[100 100 100 100 100]]\npy\n[[ 1  2  3  4  5]\n[ 6  7 20  9 10]]\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\initializing-different-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e9493cfd69a6ac71744d30be32066bb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\sea-level-predictor.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e4f5c4b570f7e3a4949899f\ntitle: Sea Level Predictor\nchallengeType: 10\nforumTopicId: 462370\ndashedName: sea-level-predictor\n--description--\nYou will be working on this project with our Gitpod starter code We are still developing the interactive instructional part of the Python curriculum For now, here are some videos on the freeCodeCamp org YouTube channel that will teach you everything you need to know to complete this project:\nPython for Everybody Video Course (14 hours)\nHow to Analyze Data with Python Pandas (10 hours)\n--instructions--\nYou will analyze a dataset of the global average sea level change since 1880 You will use the data to predict the sea level change through year 2050 Use the data to complete the following tasks:\nUse Pandas to import the data from epa-sea-level csv Use matplotlib to create a scatter plot using the Year column as the x-axis and the CSIRO Adjusted Sea Level column as the y-axis Use the linregress function from scipy stats to get the slope and y-intercept of the line of best fit Plot the line of best fit over the top of the scatter plot Make the line go through the year 2050 to predict the sea level rise in 2050 Plot a new line of best fit just using the data from year 2000 through the most recent year in the dataset Make the line also go through the year 2050 to predict the sea level rise in 2050 if the rate of rise continues as it has since the year 2000 The x label should be Year, the y label should be Sea Level (inches), and the title should be Rise in Sea Level The boilerplate also includes commands to save and return the image Development\nWrite your code in sea_level_predictor py For development, you can use main py to test your code Testing\nThe unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting\nCopy your project's URL and submit it to freeCodeCamp Data Source\nGlobal Average Absolute Sea Level Change, 1880-2014 from the US Environmental Protection Agency using data from CSIRO, 2015; NOAA, 2015 --hints--\nIt should pass all Python tests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\sea-level-predictor.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c25dcf1e8c89169a235dbc404a29e8d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\sea-level-predictor.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sea_level_predictor py For development, you can use main py to test your code Testing The unit tests for this project are in test_module py We imported the tests from test_module py to main py for your convenience Submitting Copy your project's URL and submit it to freeCodeCamp Data Source Global Average Absolute Sea Level Change, 1880-2014 from the US Environmental Protection Agency using data from CSIRO, 2015; NOAA, 2015 --hints-- It should pass all Python tests```js\n```\n--solutions--\npy\n# Python challenges don't need solutions,\n# because they would need to be tested against a full working project # Please check our contributing guidelines to learn more",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\data-analysis-with-python-projects\\sea-level-predictor.md",
      "source_type": "git_repo"
    },
    "token_count": 143,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "da696fcb12fdf2684dcb45edeecb3e75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\what-is-numpy.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed2\ntitle: What is NumPy\nchallengeType: 11\nvideoId: 5Nwfs5Ej85Q\nbilibiliIds:\naid: 293086867\nbvid: BV1Tf4y1E7QZ\ncid: 409024791\ndashedName: what-is-numpy\n--questions--\n--text--\nWhy are Numpy arrays faster than regular Python lists?\n--answers--\nNumpy does not perform type checking while iterating through objects.\nNumpy uses fixed types.\nNumpy uses contiguous memory.\nAll of the above.\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 481,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\what-is-numpy.md",
      "source_type": "git_repo"
    },
    "token_count": 147,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "023435dcbed76a9eb7d419501962f4a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\mathematics.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed8\ntitle: Mathematics\nchallengeType: 11\nvideoId: 7txegvyhtVk\nbilibiliIds:\naid: 890533226\nbvid: BV1KP4y1h733\ncid: 409026503\ndashedName: mathematics\n--questions--\n--text--\nWhat is the value of b after running the following code?\n```py\nimport numpy as np\na = np.array(([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))\nb = np.max(a, axis=1).sum()\n```\n--answers--\npy\n10\npy\n7\npy\n5\npy\n15\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 498,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\mathematics.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1718175dcded07d7a46b83df852944eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\loading-data-and-advanced-indexing.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600eda\ntitle: Loading Data and Advanced Indexing\nchallengeType: 11\nvideoId: tUdBZ7pF8Jg\nbilibiliIds:\naid: 720524642\nbvid: BV1xQ4y1r7mu\ncid: 409027117\ndashedName: loading-data-and-advanced-indexing\n--questions--\n--text--\nGiven a file named data.txt with these contents:\n29,97,32,100,45\n15,88,5,75,22\nWhat code would produce the following array?\npy\n[29. 32. 45. 15.  5. 22.]\n--answers--\n```py\nfiledata = np.genfromtxt('data.txt', delimiter=',')\noutput = np.any(filedata < 50)\nprint(output)\n```\n```py\nfiledata = np.genfromtxt('data.txt', delimiter=',')\noutput = np.all(filedata < 50, axis=1)\nprint(output)\n```\n```py\nfiledata = np.genfromtxt('data.txt', delimiter=',')\noutput = filedata[filedata < 50]\nprint(output)\n```\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 832,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\loading-data-and-advanced-indexing.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "11eedd6c8d132972e19a46ca24e98556",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\reorganizing-arrays.md",
    "source_type": "git_repo",
    "title": "--questions--",
    "content": "id: 5e9a0a8e09c5df3cc3600ed9\ntitle: Reorganizing Arrays\nchallengeType: 11\nvideoId: VNWAQbEM-C8\nbilibiliIds:\naid: 548035655\nbvid: BV1fq4y1N7aC\ncid: 409026755\ndashedName: reorganizing-arrays\n--questions--\n--text--\nWhat code would produce the following array?\npy\n[[1. 1.]\n[1. 1.]\n[1. 1.]\n[1. 1.]]\n--answers--\npy\na = np.ones((2, 4))\nb = a.reshape((4, 2))\nprint(b)\npy\na = np.ones((2, 4))\nb = a.reshape((2, 4))\nprint(b)\npy\na = np.ones((2, 4))\nb = a.reshape((8, 1))\nprint(b)\n--video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 563,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\08-data-analysis-with-python\\numpy\\reorganizing-arrays.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "583d00aac066ec05aa9e5b9ad4e70095",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e44414f903586ffb414c950\ntitle: Build a Probability Calculator Project\nchallengeType: 23\nforumTopicId: 462364\ndashedName: build-a-probability-calculator-project\n--description--\nSuppose there is a hat containing 5 blue balls, 4 red balls, and 2 green balls What is the probability that a random draw of 4 balls will contain at least 1 red ball and 2 green balls While it would be possible to calculate the probability using advanced mathematics, an easier way is to write a program to perform a large number of experiments to estimate an approximate probability For this project, you will write a program to determine the approximate probability of drawing certain balls randomly from a hat First, create a Hat class in main py The class should take a variable number of arguments that specify the number of balls of each color that are in the hat For example, a class object could be created in any of these ways:\npy\nhat1 = Hat(yellow=3, blue=2, green=6)\nhat2 = Hat(red=5, orange=4)\nhat3 = Hat(red=5, orange=4, black=1, blue=0, pink=2, striped=9)\nA hat will always be created with at least one ball The arguments passed into the hat object upon creation should be converted to a contents instance variable contents should be a list of strings containing one item for each ball in the hat Each item in the list should be a color name representing a single ball of that color For example, if your hat is {'red': 2, 'blue': 1}, contents should be ['red', 'red', 'blue'] The Hat class should have a draw method that accepts an argument indicating the number of balls to draw from the hat This method should remove balls at random from contents and return those balls as a list of strings The balls should not go back into the hat during the draw, similar to an urn experiment without replacement If the number of balls to draw exceeds the available quantity, return all the balls Next, create an experiment function in main py (not inside the Hat class) This function should accept the following arguments:\nhat: A hat object containing balls that should be copied inside the function expected_balls: An object indicating the exact group of balls to attempt to draw from the hat for the experiment",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "b8a7275e6f3ecf7b938663d049d82cd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the draw, similar to an urn experiment without replacement If the number of balls to draw exceeds the available quantity, return all the balls Next, create an experiment function in main py (not inside the Hat class) This function should accept the following arguments: hat: A hat object containing balls that should be copied inside the function expected_balls: An object indicating the exact group of balls to attempt to draw from the hat for the experimentFor example, to determine the probability of drawing 2 blue balls and 1 red ball from the hat, set expected_balls to {'blue':2, 'red':1} num_balls_drawn: The number of balls to draw out of the hat in each experiment num_experiments: The number of experiments to perform (The more experiments performed, the more accurate the approximate probability will be )\nThe experiment function should return a probability For example, if you want to determine the probability of getting at least two red balls and one green ball when you draw five balls from a hat containing six black, four red, and three green To do this, you will perform N experiments, count how many times M you get at least two red balls and one green ball, and estimate the probability as M/N Each experiment consists of starting with a hat containing the specified balls, drawing several balls, and checking if you got the balls you were attempting to draw Here is how you would call the experiment function based on the example above with 2000 experiments:\npy\nhat = Hat(black=6, red=4, green=3)\nprobability = experiment(hat=hat,\nexpected_balls={'red':2,'green':1},\nnum_balls_drawn=5,\nnum_experiments=2000)\nThe output would be something like this:\nbash\n0 356\nSince this is based on random draws, the probability will be slightly different each time the code is run Hint: Consider using the modules that are already imported at the top Do not initialize random seed within the file Note: open the browser console with F12 to see a more verbose output of the tests --hints--\nCreation of hat object should add correct contents ``js\n({\ntest: () => {\npyodide FS writeFile(\"/home/pyodide/probability_calculator py\", code);\npyodide FS writeFile(\n\"/home/pyodide/test_module py\",\nimport unittest\nimport probability_calculator\nfrom importlib import reload\nreload(probability_calculator)\nprobability_calculator random",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "2c5fc5da9a78a957fb596382d1d66c75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the code is run Hint: Consider using the modules that are already imported at the top Do not initialize random seed within the file Note: open the browser console with F12 to see a more verbose output of the tests --hints-- Creation of hat object should add correct contents ``js ({ test: () => { pyodide FS writeFile(\"/home/pyodide/probability_calculator py\", code); pyodide FS writeFile( \"/home/pyodide/test_module py\", import unittest import probability_calculator from importlib import reload reload(probability_calculator) probability_calculator randomseed(95)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_hat_class_contents(self):\nhat = probability_calculator Hat(red=3,blue=2)\nactual = hat contents\nexpected = [\"red\",\"red\",\"red\",\"blue\",\"blue\"]\nself assertEqual(actual, expected, 'Expected creation of hat object to add correct contents ')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n},\n});\n```\nThe draw method in hat class should reduce number of items in contents ``js\n({\ntest: () => {\npyodide FS writeFile(\"/home/pyodide/probability_calculator py\", code);\npyodide FS writeFile(\n\"/home/pyodide/test_module py\",\nimport unittest\nimport probability_calculator\nfrom importlib import reload\nreload(probability_calculator)\nprobability_calculator random seed(95)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_hat_draw(self):\nhat = probability_calculator Hat(red=5,blue=2)\nactual = hat draw(2)\nexpected = ['blue', 'red']\nself assertEqual(actual, expected, 'Expected hat draw to return two random items from hat contents ')\nactual = len(hat contents)\nexpected = 5\nself assertEqual(actual, expected, 'Expected hat draw to reduce number of items in contents ')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "48150e2e33b3798c0f92b877aefec461",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "UnitTests(unittest TestCase): maxDiff = None def test_hat_draw(self): hat = probability_calculator Hat(red=5,blue=2) actual = hat draw(2) expected = ['blue', 'red'] self assertEqual(actual, expected, 'Expected hat draw to return two random items from hat contents ') actual = len(hat contents) expected = 5 self assertEqual(actual, expected, 'Expected hat draw to reduce number of items in contents ') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n},\n});\n```\nThe draw method should behave correctly when the number of balls to extract is bigger than the number of balls in the hat ``js\n({\ntest: () => {\npyodide FS writeFile(\"/home/pyodide/probability_calculator py\", code);\npyodide FS writeFile(\n\"/home/pyodide/test_module py\",\nimport unittest\nimport probability_calculator\nfrom importlib import reload\nreload(probability_calculator)\nprobability_calculator random seed(95)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_hat_draw_2(self):\nhat = probability_calculator Hat(yellow=5,red=1,green=3,blue=9,test=1)\nactual = sorted(hat draw(20))\nexpected = sorted(['yellow', 'yellow', 'yellow', 'yellow', 'yellow', 'red', 'green', 'green', 'green', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'test'])\nself assertEqual(actual, expected, 'Expected hat draw to return all items from hat contents ')\nactual = len(hat contents)\nexpected = 0\nself assertEqual(actual, expected, 'Expected hat draw to leave no items in contents ')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n},\n});\n```\nThe experiment method should return a different probability ``js\n({\ntest: () => {\npyodide FS writeFile(\"/home/pyodide/probability_calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "76031aed77259f94f5df96322980c5f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to return all items from hat contents ') actual = len(hat contents) expected = 0 self assertEqual(actual, expected, 'Expected hat draw to leave no items in contents ') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); }, }); ``` The experiment method should return a different probability ``js ({ test: () => { pyodide FS writeFile(\"/home/pyodide/probability_calculatorpy\", code);\npyodide FS writeFile(\n\"/home/pyodide/test_module py\",\nimport unittest\nimport probability_calculator\nfrom importlib import reload\nreload(probability_calculator)\nprobability_calculator random seed(95)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_prob_experiment(self):\nhat = probability_calculator Hat(blue=3,red=2,green=6)\nprobability = probability_calculator experiment(hat=hat, expected_balls={\"blue\":2,\"green\":1}, num_balls_drawn=4, num_experiments=1000)\nactual = probability\nexpected = 0 272\nself assertAlmostEqual(actual, expected, delta = 0 01, msg = 'Expected experiment method to return a different probability ')\nhat = probability_calculator Hat(yellow=5,red=1,green=3,blue=9,test=1)\nprobability = probability_calculator experiment(hat=hat, expected_balls={\"yellow\":2,\"blue\":3,\"test\":1}, num_balls_drawn=20, num_experiments=100)\nactual = probability\nexpected = 1 0\nself assertAlmostEqual(actual, expected, delta = 0 01, msg = 'Expected experiment method to return a different probability ')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "9437e42d349b5efa0a6c49f645ddb733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "272 self assertAlmostEqual(actual, expected, delta = 0 01, msg = 'Expected experiment method to return a different probability ') hat = probability_calculator Hat(yellow=5,red=1,green=3,blue=9,test=1) probability = probability_calculator experiment(hat=hat, expected_balls={\"yellow\":2,\"blue\":3,\"test\":1}, num_balls_drawn=20, num_experiments=100) actual = probability expected = 1 0 self assertAlmostEqual(actual, expected, delta = 0 01, msg = 'Expected experiment method to return a different probability ') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n},\n});\n```\n--seed--\n--seed-contents--\n```py\nimport copy\nimport random\nclass Hat:\npass\ndef experiment(hat, expected_balls, num_balls_drawn, num_experiments):\npass\n```\n--solutions--\n```py\nimport copy\nimport random\nclass Hat:\ndef init(self, **hat):\nself hat = hat\ncontents = []\nfor i in hat:\nfor j in range(hat[i]):\ncontents append(i)\nself contents = contents\ndef draw(self, number):\ndrawn = []\nif number >= len(self contents):\ndrawn extend(self contents)\nself contents = []\nelse:\nfor i in range(number):\ndrawn append(\nself contents pop(random randrange(len(self contents)))\n)\nreturn drawn\ndef experiment(hat, expected_balls, num_balls_drawn, num_experiments):\nexpected_balls_list = []\ndrawn_list = []\nsuccess = 0\nfor i in expected_balls:\nfor j in range(expected_balls[i]):\nexpected_balls_list append(i)\nfor j in range(num_experiments):\nhat_copy = copy deepcopy(hat)\ndrawn_list append(hat_copy draw(num_balls_drawn))\nexp_ball_list_copy = expected_balls_list[:]\nfor k in range(len(drawn_list[j])):\ntry:\nind = exp_ball_list_copy index(drawn_list[j][k])\nexp_ball_list_copy pop(ind)\nexcept:\ncontinue\nif len(exp_ball_list_copy) == 0:\nsuccess += 1\nprobability = success/num_experiments\nreturn probability\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10629,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-probability-calculator-project\\probability-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "5640527732108135f530c48d3205d3f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e444136903586ffb414c94d\ntitle: Build a Time Calculator Project\nchallengeType: 23\nforumTopicId: 462360\ndashedName: build-a-time-calculator-project\n--description--\nWrite a function named add_time that takes in two required parameters and one optional parameter:\na start time in the 12-hour clock format (ending in AM or PM)\na duration time that indicates the number of hours and minutes\n(optional) a starting day of the week, case insensitive\nThe function should add the duration time to the start time and return the result If the result will be the next day, it should show (next day) after the time If the result will be more than one day later, it should show (n days later) after the time, where \"n\" is the number of days later If the function is given the optional starting day of the week parameter, then the output should display the day of the week of the result The day of the week in the output should appear after the time and before the number of days later Below are some examples of different cases the function should handle Pay close attention to the spacing and punctuation of the results ```py\nadd_time('3:00 PM', '3:10')\nReturns: 6:10 PM\nadd_time('11:30 AM', '2:32', 'Monday')\nReturns: 2:02 PM, Monday\nadd_time('11:43 AM', '00:20')\nReturns: 12:03 PM\nadd_time('10:10 PM', '3:30')\nReturns: 1:40 AM (next day)\nadd_time('11:43 PM', '24:20', 'tueSday')\nReturns: 12:03 AM, Thursday (2 days later)\nadd_time('6:30 PM', '205:12')\nReturns: 7:42 AM (9 days later)\n```\nDo not import any Python libraries Assume that the start times are valid times The minutes in the duration time will be a whole number less than 60, but the hour can be any whole number Note: open the browser console with F12 to see a more verbose output of the tests --hints--\nCalling add_time('3:30 PM', '2:12') should return '5:42 PM' ``js\n({\ntest: () => {\npyodide FS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 12
  },
  {
    "id": "20704cc0c14b25760a0b1c4aa05f6499",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Returns: 7:42 AM (9 days later) ``` Do not import any Python libraries Assume that the start times are valid times The minutes in the duration time will be a whole number less than 60, but the hour can be any whole number Note: open the browser console with F12 to see a more verbose output of the tests --hints-- Calling add_time('3:30 PM', '2:12') should return '5:42 PM' ``js ({ test: () => { pyodide FSwriteFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport time_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_same_period(self):\nactual = time_calculator add_time(\"3:30 PM\", \"2:12\")\nexpected = \"5:42 PM\"\nself assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"3:30 PM\", \"2:12\" to return \"5:42 PM\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('11:55 AM', '3:12')  should return '3:07 PM' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_different_period(self):\nactual = time_calculator add_time(\"11:55 AM\", \"3:12\")\nexpected = \"3:07 PM\"\nself assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:55 AM\", \"3:12\" to return \"3:07 PM\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 12
  },
  {
    "id": "3e06e32b6e9e6656674bfe1a21f35b04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "``js ({ test: () => { pyodide FS writeFile('/home/pyodide/time_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest time_calculator from importlib import reload reload(time_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_different_period(self): actual = time_calculator add_time(\"11:55 AM\", \"3:12\") expected = \"3:07 PM\" self assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:55 AM\", \"3:12\" to return \"3:07 PM\"') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nExpected time to end with '(next day)' when it is the next day ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_next_day(self):\nactual = time_calculator add_time(\"9:15 PM\", \"5:30\")\nexpected = \"2:45 AM (next day)\"\nself assertEqual(actual, expected, 'Expected time to end with \"(next day)\" when it is the next day ')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nExpected period to change from AM to PM at 12:00 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_period_change_at_twelve(self):\nactual = time_calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 2,
    "total_chunks": 12
  },
  {
    "id": "3f336ba7dbceece337c5c6e5c552f771",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Expected period to change from AM to PM at 12:00 ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/time_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest time_calculator from importlib import reload reload(time_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_period_change_at_twelve(self): actual = time_calculatoradd_time(\"11:40 AM\", \"0:25\")\nexpected = \"12:05 PM\"\nself assertEqual(actual, expected, 'Expected period to change from AM to PM at 12:00')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('2:59 AM', '24:00') should return '2:59 AM (next day)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_twenty_four(self):\nactual = time_calculator add_time(\"2:59 AM\", \"24:00\")\nexpected = \"2:59 AM (next day)\"\nself assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"2:59 AM\", \"24:00\" to return \"2:59 AM (next day)\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('11:59 PM', '24:05') should return '12:04 AM (2 days later)'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 12
  },
  {
    "id": "0d3046fe700bd63430607e07c01bc1bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "TestCase): maxDiff = None def test_twenty_four(self): actual = time_calculator add_time(\"2:59 AM\", \"24:00\") expected = \"2:59 AM (next day)\" self assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"2:59 AM\", \"24:00\" to return \"2:59 AM (next day)\"') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling add_time('11:59 PM', '24:05') should return '12:04 AM (2 days later)'``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_two_days_later(self):\nactual = time_calculator add_time(\"11:59 PM\", \"24:05\")\nexpected = \"12:04 AM (2 days later)\"\nself assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:59 PM\", \"24:05\" to return \"12:04 AM (2 days later)\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('8:16 PM', '466:02') should return '6:18 AM (20 days later)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_high_duration(self):\nactual = time_calculator add_time(\"8:16 PM\", \"466:02\")\nexpected = \"6:18 AM (20 days later)\"\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 12
  },
  {
    "id": "27b15f120f563b5c0f8205501c067413",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "importlib import reload reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling add_time('8:16 PM', '466:02') should return '6:18 AM (20 days later)' ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/time_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest time_calculator from importlib import reload reload(time_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_high_duration(self): actual = time_calculator add_time(\"8:16 PM\", \"466:02\") expected = \"6:18 AM (20 days later)\" selfassertEqual(actual, expected, 'Expected calling \"add_time()\" with \"8:16 PM\", \"466:02\" to return \"6:18 AM (20 days later)\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nExpected adding 0:00 to return the initial time ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_no_change(self):\nactual = time_calculator add_time(\"5:01 AM\", \"0:00\")\nexpected = \"5:01 AM\"\nself assertEqual(actual, expected, 'Expected adding 0:00 to return initial time ')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('3:30 PM', '2:12', 'Monday')should return '5:42 PM, Monday' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 12
  },
  {
    "id": "251b972a6bc28b31bb75de7a7ae2ad3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "TestCase): maxDiff = None def test_no_change(self): actual = time_calculator add_time(\"5:01 AM\", \"0:00\") expected = \"5:01 AM\" self assertEqual(actual, expected, 'Expected adding 0:00 to return initial time ') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling add_time('3:30 PM', '2:12', 'Monday')should return '5:42 PM, Monday' ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/time_calculatorpy', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_same_period_with_day(self):\nactual = time_calculator add_time(\"3:30 PM\", \"2:12\", \"Monday\")\nexpected = \"5:42 PM, Monday\"\nself assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"3:30 PM\", \"2:12\", \"Monday\" to return \"5:42 PM, Monday\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('2:59 AM', '24:00', 'saturDay') should return '2:59 AM, Sunday (next day)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_twenty_four_with_day(self):\nactual = time_calculator add_time(\"2:59 AM\", \"24:00\", \"saturDay\")\nexpected = \"2:59 AM, Sunday (next day)\"\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 6,
    "total_chunks": 12
  },
  {
    "id": "29d4feda81edc820ee3b389af9de619a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reload reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling add_time('2:59 AM', '24:00', 'saturDay') should return '2:59 AM, Sunday (next day)' ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/time_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest time_calculator from importlib import reload reload(time_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_twenty_four_with_day(self): actual = time_calculator add_time(\"2:59 AM\", \"24:00\", \"saturDay\") expected = \"2:59 AM, Sunday (next day)\" selfassertEqual(actual, expected, 'Expected calling \"add_time()\" with \"2:59 AM\", \"24:00\", \"saturDay\" to return \"2:59 AM, Sunday (next day)\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('11:59 PM', '24:05', 'Wednesday') should return '12:04 AM, Friday (2 days later)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_two_days_later_with_day(self):\nactual = time_calculator add_time(\"11:59 PM\", \"24:05\", \"Wednesday\")\nexpected = \"12:04 AM, Friday (2 days later)\"\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 7,
    "total_chunks": 12
  },
  {
    "id": "9b488bed0dc95cd8c5707d185ba47bea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling add_time('11:59 PM', '24:05', 'Wednesday') should return '12:04 AM, Friday (2 days later)' ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/time_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest time_calculator from importlib import reload reload(time_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_two_days_later_with_day(self): actual = time_calculator add_time(\"11:59 PM\", \"24:05\", \"Wednesday\") expected = \"12:04 AM, Friday (2 days later)\" selfassertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:59 PM\", \"24:05\", \"Wednesday\" to return \"12:04 AM, Friday (2 days later)\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling add_time('8:16 PM', '466:02', 'tuesday')should return '6:18 AM, Monday (20 days later)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/time_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\ntime_calculator\nfrom importlib import reload\nreload(time_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_high_duration_with_day(self):\nactual = time_calculator add_time(\"8:16 PM\", \"466:02\", \"tuesday\")\nexpected = \"6:18 AM, Monday (20 days later)\"\nself assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"8:16 PM\", \"466:02\", \"tuesday\" to return \"6:18 AM, Monday (20 days later)\"')\n);\nconst testCode =\nfrom unittest import main\nimport test_module\nfrom importlib import reload\nreload(test_module)\nt = main(module='test_module', exit=False)\nt",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 8,
    "total_chunks": 12
  },
  {
    "id": "70cd59590da3ad9d2e15f6c4c682d27c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest time_calculator from importlib import reload reload(time_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_high_duration_with_day(self): actual = time_calculator add_time(\"8:16 PM\", \"466:02\", \"tuesday\") expected = \"6:18 AM, Monday (20 days later)\" self assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"8:16 PM\", \"466:02\", \"tuesday\" to return \"6:18 AM, Monday (20 days later)\"') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) tresult wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef add_time(start, duration):\nreturn new_time\n```\n--solutions--\n```py\ndef add_time(start, duration, day=''):\nstart_arr = start[0:-3] split(':')\ndur_arr = duration",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 9,
    "total_chunks": 12
  },
  {
    "id": "5d98250c5a4dd2d153d52a67972245ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "AM, Monday (20 days later)\" self assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"8:16 PM\", \"466:02\", \"tuesday\" to return \"6:18 AM, Monday (20 days later)\"') ); const testCode = from unittest import main import test_module from importlib import reload reload(test_module) t = main(module='test_module', exit=False) tresult wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` --seed-- --seed-contents-- ```py def add_time(start, duration): return new_time ``` --solutions-- ```py def add_time(start, duration, day=''): start_arr = start[0:-3] split(':') dur_arr = durationsplit(':')\ntail = ''\n# converting to 24h format\nif 'AM' in start:\nif start_arr[0] == '12':\nstart_arr[0] = '00'\nelif 'PM' in start:\nif start_arr[0] == '12':\nstart_arr[0] = '12'\nelse:\nstart_arr[0] = f'{int(start_arr[0]) + 12}'\n# adding minutes\nsum_m = int(start_arr[1]) + int(dur_arr[1])\nif sum_m > 59:\nif (sum_m - 60 * (sum_m//60)) < 10:\nmins = f'0{(sum_m - 60 * (sum_m//60))}'\ndur_arr[0] = int(dur_arr[0]) + sum_m//60\nelse:\nmins = sum_m - 60 * (sum_m//60)\ndur_arr[0] = int(dur_arr[0]) + sum_m//60\nelse:\nif sum_m < 10:\nmins = f'0{sum_m}'\nelse:\nmins = sum_m\n#adding hours\nsum_h = int(start_arr[0]) + int(dur_arr[0])\nif sum_h < 24:\nhours= sum_h\n#time_24 = f'{hours}:{mins}'\nelse:\ndays_after = sum_h//24\nif days_after == 1:\nhours = sum_h - 24\ntail = ' (next day)'\nelse:\nhours = sum_h - 24 * days_after\ntail = f' ({days_after} days later)'\n#converting back to AM/PM\nif hours == 0:\nhours = 12\ntime = f'{hours}:{mins} AM'\nfinal_time = f'{time}{tail}'\nelif hours < 12:\ntime = f'{hours}:{mins} AM'\nfinal_time = f'{time}{tail}'\nelse:\nif hours > 12:\nhours = hours - 12\ntime = f'{hours}:{mins} PM'\nfinal_time = f'{time}{tail}'\n#days of the week\nweek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nif day:\nday = day",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 622,
    "chunk_index": 10,
    "total_chunks": 12
  },
  {
    "id": "9fe33c0f5a5e74a5cdcfbe552a1e8baa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= sum_h - 24 * days_after tail = f' ({days_after} days later)' #converting back to AM/PM if hours == 0: hours = 12 time = f'{hours}:{mins} AM' final_time = f'{time}{tail}' elif hours < 12: time = f'{hours}:{mins} AM' final_time = f'{time}{tail}' else: if hours > 12: hours = hours - 12 time = f'{hours}:{mins} PM' final_time = f'{time}{tail}' #days of the week week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] if day: day = daycapitalize()\nif not tail:\nfinal_time = f'{time}, {day}'\nelif tail == ' (next day)':\nindex = week index(day) + 1\nif index == 7:\nindex = 0\nweek_day = f', {week[index]}'\nfinal_time = f'{time}{week_day}{tail}'\nelif tail:\nindex = (week index(day) + days_after) % 7\nweek_day = f', {week[index]}'\nfinal_time = f'{time}{week_day}{tail}'\nprint('\\n')\nprint(final_time)\nprint('\\n')\nreturn final_time\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 15238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-time-calculator-project\\time-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 274,
    "chunk_index": 11,
    "total_chunks": 12
  },
  {
    "id": "e534e7df954e03dc332c17cf27140f90",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65576ff7888f9e96f52a4be1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65576ff7888f9e96f52a4be1\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nDictionaries store data in the form of key-value pairs. A key is separated from the correspondent value by a colon. And each key-value pair is separated from the following pair by a comma:\npy\nmy_dict = {\n'name': 'Michael',\n'occupation': 'Lumberjack'\n}\nAdd a new key-value pair to your dictionary. Use the string 'species' as the key, and the string 'guinea pig' as the value.\n--hints--\nYou should have a 'species' key with the value 'guinea pig' inside your copper dictionary.\njs\n({ test: () => assert(runPython(`\ncopper == {\"species\": \"guinea pig\"}\n`))\n})\nYour copper dictionary should have a single key-value pair.\njs\n({ test: () => assert(runPython(`\nlen(copper) == 1\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ncopper = {}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 957,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65576ff7888f9e96f52a4be1.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2beba1b6bac17063ae627dd80d2ad635",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e44412c903586ffb414c94c\ntitle: Build an Arithmetic Formatter Project\nchallengeType: 23\nforumTopicId: 462359\ndashedName: build-an-arithmetic-formatter-project\n--description--\nStudents in primary school often arrange arithmetic problems vertically to make them easier to solve For example, \"235 + 52\" becomes:\n```py\n235\n+  52\n```\nFinish the arithmetic_arranger function that receives a list of strings which are arithmetic problems, and returns the problems arranged vertically and side-by-side The function should optionally take a second argument When the second argument is set to True, the answers should be displayed Example\nFunction Call:\npy\narithmetic_arranger([\"32 + 698\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"])\nOutput:\npy\n32      3801      45      123\n+ 698    -    2    + 43    +  49\n-----    ------    ----    -----\nFunction Call:\npy\narithmetic_arranger([\"32 + 8\", \"1 - 3801\", \"9999 + 9999\", \"523 - 49\"], True)\nOutput:\npy\n32         1      9999      523\n+  8    - 3801    + 9999    -  49\n----    ------    ------    -----\n40     -3800     19998      474\nRules\nThe function will return the correct conversion if the supplied problems are properly formatted, otherwise, it will return a string that describes an error that is meaningful to the user Situations that will return an error:\nIf there are too many problems supplied to the function The limit is five, anything more will return:\n'Error: Too many problems '\nThe appropriate operators the function will accept are addition and subtraction Multiplication and division will return an error Other operators not mentioned in this bullet point will not need to be tested The error returned will be:\n\"Error: Operator must be '+' or '-' \"\nEach number (operand) should only contain digits Otherwise, the function will return:\n'Error: Numbers must only contain digits '\nEach operand (aka number on each side of the operator) has a max of four digits in width Otherwise, the error string returned will be:\n'Error: Numbers cannot be more than four digits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 8
  },
  {
    "id": "16bcbc4747d1d2eeefde72b9616e7bf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mentioned in this bullet point will not need to be tested The error returned will be: \"Error: Operator must be '+' or '-' \" Each number (operand) should only contain digits Otherwise, the function will return: 'Error: Numbers must only contain digits ' Each operand (aka number on each side of the operator) has a max of four digits in width Otherwise, the error string returned will be: 'Error: Numbers cannot be more than four digits'\nIf the user supplied the correct format of problems, the conversion you return will follow these rules:\nThere should be a single space between the operator and the longest of the two operands, the operator will be on the same line as the second operand, both operands will be in the same order as provided (the first will be the top one and the second will be the bottom) Numbers should be right-aligned There should be four spaces between each problem There should be dashes at the bottom of each problem The dashes should run along the entire length of each problem individually (The example above shows what this should look like )\nNote: open the browser console with F12 to see a more verbose output of the tests --hints--\narithmetic_arranger([\"3801 - 2\", \"123 + 49\"]) should return 3801      123\\n-    2    +  49\\n------    ----- ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase() assertEqual(arithmetic_arranger([\"3801 - 2\", \"123 + 49\"]), '  3801      123\\n-    2    +  49\\n------    -----')`);\n}\n})\n```\narithmetic_arranger([\"1 + 2\", \"1 - 9380\"]) should return 1         1\\n+ 2    - 9380\\n---    ------ ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 1,
    "total_chunks": 8
  },
  {
    "id": "d60a6efee72ef82266d5066b3fbe4767",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a more verbose output of the tests --hints-- arithmetic_arranger([\"3801 - 2\", \"123 + 49\"]) should return 3801 123\\n- 2 + 49\\n------ ----- ``js ({ test: () => { runPython( from unittest import TestCase TestCase() assertEqual(arithmetic_arranger([\"3801 - 2\", \"123 + 49\"]), ' 3801 123\\n- 2 + 49\\n------ -----')`); } }) ``` arithmetic_arranger([\"1 + 2\", \"1 - 9380\"]) should return 1 1\\n+ 2 - 9380\\n--- ------ ``js ({ test: () => { runPython( from unittest import TestCase TestCase()assertEqual(arithmetic_arranger([\"1 + 2\", \"1 - 9380\"]), '  1         1\\n+ 2    - 9380\\n---    ------')`);\n}\n})\n```\narithmetic_arranger([\"3 + 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]) should return 3      3801      45      123\\n+ 855    -    2    + 43    +  49\\n-----    ------    ----    ----- ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase() assertEqual(arithmetic_arranger([\"3 + 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), '    3      3801      45      123\\n+ 855    -    2    + 43    +  49\\n-----    ------    ----    -----')`);\n}\n})\n```\narithmetic_arranger([\"11 + 4\", \"3801 - 2999\", \"1 + 2\", \"123 + 49\", \"1 - 9380\"]) should return 11      3801      1      123         1\\n+  4    - 2999    + 2    +  49    - 9380\\n----    ------    ---    -----    ------ ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 8
  },
  {
    "id": "f5c4b548d98b942707733d34ad90d10f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), ' 3 3801 45 123\\n+ 855 - 2 + 43 + 49\\n----- ------ ---- -----')`); } }) ``` arithmetic_arranger([\"11 + 4\", \"3801 - 2999\", \"1 + 2\", \"123 + 49\", \"1 - 9380\"]) should return 11 3801 1 123 1\\n+ 4 - 2999 + 2 + 49 - 9380\\n---- ------ --- ----- ------ ``js ({ test: () => { runPython( from unittest import TestCase TestCase()assertEqual(arithmetic_arranger([\"11 + 4\", \"3801 - 2999\", \"1 + 2\", \"123 + 49\", \"1 - 9380\"]), '  11      3801      1      123         1\\n+  4    - 2999    + 2    +  49    - 9380\\n----    ------    ---    -----    ------')`);\n}\n})\n```\narithmetic_arranger([\"44 + 815\", \"909 - 2\", \"45 + 43\", \"123 + 49\", \"888 + 40\", \"653 + 87\"]) should return 'Error: Too many problems ' ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase() assertEqual(arithmetic_arranger([\"44 + 815\", \"909 - 2\", \"45 + 43\", \"123 + 49\", \"888 + 40\", \"653 + 87\"]), 'Error: Too many problems ')`);\n}\n})\n```\narithmetic_arranger([\"3 / 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]) should return \"Error: Operator must be '+' or '-' \" ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase() assertEqual(arithmetic_arranger([\"3 / 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), \"Error: Operator must be '+' or '-'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 3,
    "total_chunks": 8
  },
  {
    "id": "148238984bd6a29edf5218fe5bb2ba09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"909 - 2\", \"45 + 43\", \"123 + 49\", \"888 + 40\", \"653 + 87\"]), 'Error: Too many problems ')`); } }) ``` arithmetic_arranger([\"3 / 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]) should return \"Error: Operator must be '+' or '-' \" ``js ({ test: () => { runPython( from unittest import TestCase TestCase() assertEqual(arithmetic_arranger([\"3 / 855\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), \"Error: Operator must be '+' or '-'\")`);\n}\n})\n```\narithmetic_arranger([\"24 + 85215\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]) should return 'Error: Numbers cannot be more than four digits ' ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase() assertEqual(arithmetic_arranger([\"24 + 85215\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), \"Error: Numbers cannot be more than four digits \")`);\n}\n})\n```\narithmetic_arranger([\"98 + 3g5\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]) should return 'Error: Numbers must only contain digits ' ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase() assertEqual(arithmetic_arranger([\"98 + 3g5\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), \"Error: Numbers must only contain digits \")`);\n}\n})\n```\narithmetic_arranger([\"3 + 855\", \"988 + 40\"], True) should return 3      988\\n+ 855    +  40\\n-----    -----\\n  858     1028 ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 4,
    "total_chunks": 8
  },
  {
    "id": "b8d20d85ca06d308432650ae29e0905a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "43\", \"123 + 49\"]) should return 'Error: Numbers must only contain digits ' ``js ({ test: () => { runPython( from unittest import TestCase TestCase() assertEqual(arithmetic_arranger([\"98 + 3g5\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"]), \"Error: Numbers must only contain digits \")`); } }) ``` arithmetic_arranger([\"3 + 855\", \"988 + 40\"], True) should return 3 988\\n+ 855 + 40\\n----- -----\\n 858 1028 ``js ({ test: () => { runPython( from unittest import TestCase TestCase()assertEqual(arithmetic_arranger([\"3 + 855\", \"988 + 40\"], True), \"    3      988\\n+ 855    +  40\\n-----    -----\\n  858     1028\")`);\n}\n})\n```\narithmetic_arranger([\"32 - 698\", \"1 - 3801\", \"45 + 43\", \"123 + 49\", \"988 + 40\"], True) should return 32         1      45      123      988\\n- 698    - 3801    + 43    +  49    +  40\\n-----    ------    ----    -----    -----\\n -666     -3800      88      172     1028 ``js\n({\ntest: () => {\nrunPython(\nfrom unittest import TestCase\nTestCase()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 5,
    "total_chunks": 8
  },
  {
    "id": "2cf777151823db75224188bffbddda25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from unittest import TestCase TestCase()assertEqual(arithmetic_arranger([\"3 + 855\", \"988 + 40\"], True), \" 3 988\\n+ 855 + 40\\n----- -----\\n 858 1028\")`); } }) ``` arithmetic_arranger([\"32 - 698\", \"1 - 3801\", \"45 + 43\", \"123 + 49\", \"988 + 40\"], True) should return 32 1 45 123 988\\n- 698 - 3801 + 43 + 49 + 40\\n----- ------ ---- ----- -----\\n -666 -3800 88 172 1028 ``js ({ test: () => { runPython( from unittest import TestCase TestCase()assertEqual(arithmetic_arranger([\"32 - 698\", \"1 - 3801\", \"45 + 43\", \"123 + 49\", \"988 + 40\"], True), \"   32         1      45      123      988\\n- 698    - 3801    + 43    +  49    +  40\\n-----    ------    ----    -----    -----\\n -666     -3800      88      172     1028\")`);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef arithmetic_arranger(problems, show_answers=False):\nreturn problems\nprint(f'\\n{arithmetic_arranger([\"32 + 698\", \"3801 - 2\", \"45 + 43\", \"123 + 49\"])}')\n```\n--solutions--\n```py\ndef arithmetic_arranger(problems, result=False):\nlin1 = \"\"\nlin2 = \"\"\nlin3 = \"\"\nlin4 = \"\"\nif len(problems) > 5:\nreturn 'Error: Too many problems '\nfor problem in problems:\n[num1, sym, num2] = problem split()\nsign = ['+', '-']\nif sym not in sign:\nreturn (\"Error: Operator must be '+' or '-' \")\nif len(num1) > 4 or len(num2) > 4:\nreturn (\"Error: Numbers cannot be more than four digits \")\nif not num1 isnumeric() or not num2 isnumeric():\nreturn (\"Error: Numbers must only contain digits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 6,
    "total_chunks": 8
  },
  {
    "id": "21a5be0cc45a11148ad79cd595e7b2fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= \"\" lin4 = \"\" if len(problems) > 5: return 'Error: Too many problems ' for problem in problems: [num1, sym, num2] = problem split() sign = ['+', '-'] if sym not in sign: return (\"Error: Operator must be '+' or '-' \") if len(num1) > 4 or len(num2) > 4: return (\"Error: Numbers cannot be more than four digits \") if not num1 isnumeric() or not num2 isnumeric(): return (\"Error: Numbers must only contain digits\")\nlin1 += \"  \" + num1 + \"    \" if len(num1) >= len(\nnum2) else \" \" * (len(num2) + 2 - len(num1)) + num1 + \"    \"\nlin2 += sym + \" \" + num2 + \"    \" if len(num2) >= len(\nnum1) else sym + \" \" * (len(num1) - len(num2) + 1) + num2 + \"    \"\nnmax = (len(num1) + 2) if len(num1) >= len(num2) else (len(num2) + 2)\nlin3 += \"-\" * nmax + \"    \"\nop = int(num1) + int(num2) if sym == \"+\" else int(num1) - int(num2)\nlin4 += (\" \" * (nmax - len(str(op)))) + str(op) + \"    \"\narranged_problems = lin1 rstrip() + \"\\n\" + lin2 rstrip(\n) + \"\\n\" + lin3 rstrip()\nif result:\narranged_problems += \"\\n\" + lin4 rstrip()\nreturn arranged_problems\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8443,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-an-arithmetic-formatter-project\\arithmetic-formatter.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 7,
    "total_chunks": 8
  },
  {
    "id": "651abfdee3290a2029b2c1ad6dc068d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557709b0aee699a6a00528c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557709b0aee699a6a00528c\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nFor example, a graph can be used to represent two points in the space, A and B, connected by a path. A graph like this will be made of two nodes connected by an edge.\nReplace the existent 'species' key with the strings 'A'. Then, replace the correspondent value with the string 'B' to represent the connection between the 'A' and 'B' nodes.\n--hints--\nYour dictionary should have an 'A' key.\njs\n({ test: () => assert(runPython(`\n\"A\" in my_graph\n`))\n})\nYour 'A' key should have 'B' as the value.\njs\n({ test: () => assert(runPython(`\nmy_graph[\"A\"] == \"B\"\n`))\n})\nYour dictionary should have two keys.\njs\n({ test: () => assert(runPython(`\nlen(my_graph) == 2\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_graph = {\n'species': 'guinea pig',\n'age': 2\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557709b0aee699a6a00528c.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6578ee9c7375e960a245723b93ddb9f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557712d77ce2d9bd7e63afd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557712d77ce2d9bd7e63afd\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nAdd another node connected to B to your graph and call it C.\nModify your existing dictionary to represent this arrangement: add another key 'C' to my_graph and give it the value of the string 'B'.\nAlso, change the value of the existing 'B' key into the list ['A', 'C'] to represent the multiple connections of your 'B' node.\n--hints--\nYour dictionary should have 3 keys — 'A', 'B', and 'C'.\njs\n({ test: () => assert(runPython(`\nkey_list = [\"A\", \"B\", \"C\"]\nlen(my_graph) == 3 and all(key in my_graph for key in key_list)\n`))\n})\nThe value of my_graph['A'] should be the string 'B'.\njs\n({ test: () => assert(runPython(`\nmy_graph[\"A\"] == \"B\"\n`))\n})\nmy_graph['B'] should be a list.\njs\n({ test: () => assert(runPython(`\ntype(my_graph[\"B\"]) is list\n`))\n})\nThe value of my_graph['B'] should be a list containing 'A' and 'C'.\njs\n({ test: () => assert(runPython(`\nlen(my_graph[\"B\"]) == 2 and \"A\" in my_graph[\"B\"] and \"C\" in my_graph[\"B\"]\n`))\n})\nThe value of my_graph['C'] should be the string 'B'.\njs\n({ test: () => assert(runPython(`\nmy_graph[\"C\"] == \"B\"\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_graph = {\n'A': 'B',\n'B': 'A'\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1421,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557712d77ce2d9bd7e63afd.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ace01796236656868cd91462556a54c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655771d889132f9ccd341060.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655771d889132f9ccd341060\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nA graph is called a weighted graph when its edges are associated with weights, representing a distance, time or other quantitative value.\nIn your case, these weights will be the distances between each node, or point in space. To represent a weighted graph you can modify your dictionary, using a list of tuples for each value.\nThe first element in the tuple will be the connected node, and the second element will be an integer number indicating the distance.\nModify my_graph['A'] into a list of tuples, considering that the A-B distance is 3 and the A-D distance is 1.\n--hints--\nmy_graph[\"A\"] should be a list containing the tuples ('B', 3) and ('D', 1).\njs\n({ test: () => assert(runPython(`\ntuples = [(\"B\", 3), (\"D\", 1)]\nlen(my_graph[\"A\"]) == 2 and all(t in my_graph[\"A\"] for t in tuples)\n`))\n})\nmy_graph should have 4 keys named 'A', 'B', 'C', and 'D'.\njs\n({ test: () => assert(runPython(`\nkey_list = [\"A\", \"B\", \"C\", \"D\"]\nlen(my_graph) == 4 and all(key in my_graph for key in key_list)\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': ['B', 'D'],\n--fcc-editable-region--\n'B': ['A', 'C'],\n'C': ['B', 'D'],\n'D': ['A', 'C']\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1374,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655771d889132f9ccd341060.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b4e119012c247de0df98951ab32d6f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557716aadbd2d9c42c0e69a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557716aadbd2d9c42c0e69a\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nAdd one last node, 'D', which is connected with 'A' and 'C' Modify your dictionary to represent this structure Again, use a list to represent multiple connections --hints--\nYour dictionary should have 4 keys called 'A', 'B', 'C', and 'D' js\n({ test: () => assert(runPython(`\nkey_list = [\"A\", \"B\", \"C\", \"D\"]\nlen(my_graph) == 4 and all(key in my_graph for key in key_list)\n`))\n})\nmy_graph['A'] should be a list js\n({ test: () => assert(runPython(`\ntype(my_graph[\"A\"]) is list\n`))\n})\nmy_graph['A'] should be a list containing 'B' and 'D' js\n({ test: () => assert(runPython(`\nlen(my_graph[\"A\"]) == 2 and \"B\" in my_graph[\"A\"] and \"D\" in my_graph[\"A\"]\n`))\n})\nmy_graph['B'] should be a list js\n({ test: () => assert(runPython(`\ntype(my_graph[\"B\"]) is list\n`))\n})\nmy_graph['B'] should be a list containing 'A' and 'C' js\n({ test: () => assert(runPython(`\nlen(my_graph[\"B\"]) == 2 and \"A\" in my_graph[\"B\"] and \"C\" in my_graph[\"B\"]\n`))\n})\nmy_graph['C'] should be a list js\n({ test: () => assert(runPython(`\ntype(my_graph[\"C\"]) is list\n`))\n})\nmy_graph['C'] should be a list containing 'B' and 'D' js\n({ test: () => assert(runPython(`\nlen(my_graph[\"C\"]) == 2 and \"B\" in my_graph[\"C\"] and \"D\" in my_graph[\"C\"]\n`))\n})\nmy_graph['D'] should be a list js\n({ test: () => assert(runPython(`\ntype(my_graph[\"D\"]) is list\n`))\n})\nmy_graph['D'] should be a list containing 'A' and 'C'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1945,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557716aadbd2d9c42c0e69a.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a4dde81df4367811acff687752da519c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557716aadbd2d9c42c0e69a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "my_graph[\"B\"] and \"C\" in my_graph[\"B\"] `)) }) my_graph['C'] should be a list js ({ test: () => assert(runPython(` type(my_graph[\"C\"]) is list `)) }) my_graph['C'] should be a list containing 'B' and 'D' js ({ test: () => assert(runPython(` len(my_graph[\"C\"]) == 2 and \"B\" in my_graph[\"C\"] and \"D\" in my_graph[\"C\"] `)) }) my_graph['D'] should be a list js ({ test: () => assert(runPython(` type(my_graph[\"D\"]) is list `)) }) my_graph['D'] should be a list containing 'A' and 'C'js\n({ test: () => assert(runPython(`\nlen(my_graph[\"D\"]) == 2 and \"A\" in my_graph[\"D\"] and \"C\" in my_graph[\"D\"]\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_graph = {\n'A': 'B',\n'B': ['A', 'C'],\n'C': 'B'\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1945,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557716aadbd2d9c42c0e69a.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ef0bbf2da0ce043f2f4979f4c5cd53d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577236b056379d5dbc7000.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65577236b056379d5dbc7000\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nNow you are going to start developing the algorithm to calculate the shortest path between each node in your new graph.\nDeclare an empty function called shortest_path. Use the pass keyword to fill the function body.\n--hints--\nYou should define a function named shortest_path.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(shortest_path)\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 742,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577236b056379d5dbc7000.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "57d02c74a45a99b7cca3e6c787a8482d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655773f8b8b5db9fc6d0ae76.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655773f8b8b5db9fc6d0ae76\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nTo keep track of the visited nodes, you need a list of all the nodes in the graph. Once a node is visited, it will be removed from that list.\nNow, replace the pass keyword with a variable named unvisited and assign it an empty list.\n--hints--\nYou should have a variable called unvisited inside the shortest_path function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"shortest_path\").has_variable(\"unvisited\")`)) })\nYou should assign an empty list to your unvisited variable. Remember to delete pass.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"shortest_path\").find_body().is_equivalent(\"unvisited = []\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655773f8b8b5db9fc6d0ae76.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "708a2595d44dc51a8688f522e45fa859",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655773b0591c5f9f4045883e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655773b0591c5f9f4045883e\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nThe algorithm will start at a specified node. Then it will explore the graph to find the shortest path between the starting node, or source, and all the other nodes.\nFor that your function needs two parameters: graph, and start. Add them to your function declaration.\n--hints--\nYour function should take graph and start as the parameters, in this order.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(shortest_path))\nsig == '(graph, start)'\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path():\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 890,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655773b0591c5f9f4045883e.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "05f3aafdbc87af5f1e45aab2a9dc5201",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557743527cb92a06417ea97.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557743527cb92a06417ea97\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nCreate a for loop to iterate over your graph, and use the .append() method to add each node to the end of the unvisited list.\n--hints--\nYou should create a for loop to iterate over graph inside the shortest_path function.\njs\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {function_body} = __helpers.python.getDef(commentless_code, \"shortest_path\");\nassert(function_body.match(/^\\s*for\\s+\\w+\\s+in\\s+graph\\s*:/m));\n}\n})\nYou should append each node to unvisited inside your for loop.\njs\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst block_regex = /for\\s+(\\w+)\\s+in\\s+graph\\s*/;\nconst {block_body} = __helpers.python.getBlock(commentless_code, block_regex);\nconst loop_condition = commentless_code.match(block_regex);\nconst regex = new RegExp(`^\\\\s+unvisited\\\\.append\\\\s*\\\\(\\\\s*${loop_condition[1]}\\\\s*\\\\)`, \"m\");\nassert(block_body.match(regex));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1407,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557743527cb92a06417ea97.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a19b380c3bf2cc69af31db8a6218767c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557746aad2844a0cd864e12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557746aad2844a0cd864e12\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nWhile the algorithm explores the graph, it should keep track of the currently known shortest distance between the starting node and the other nodes.\nBefore your for loop, create a new variable named distances and assign it an empty dictionary.\n--hints--\nYou should have a variable named distances.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)distances\\s*=.*(?=^\\1for.*:)/ms));\n}\n})\nYour distances variable should be an empty dictionary.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)distances\\s*=\\s*\\{\\s*\\}.*(?=^\\1for.*:)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\nfor node in graph:\nunvisited.append(node)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1265,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557746aad2844a0cd864e12.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8530b39802a1e8246f54e0aadccfe69b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e444147903586ffb414c94f\ntitle: Build a Polygon Area Calculator Project\nchallengeType: 23\nforumTopicId: 462363\ndashedName: build-a-polygon-area-calculator-project\n--description--\nIn this project you will use object oriented programming to create a Rectangle class and a Square class The Square class should be a subclass of Rectangle, and inherit its methods and attributes Rectangle class\nWhen a Rectangle object is created, it should be initialized with width and height attributes The class should also contain the following methods:\nset_width\nset_height\nget_area: Returns area (width * height)\nget_perimeter: Returns perimeter (2 * width + 2 * height)\nget_diagonal: Returns diagonal ((width ** 2 + height ** 2) ** 5)\nget_picture: Returns a string that represents the shape using lines of '*' The number of lines should be equal to the height and the number of '*' in each line should be equal to the width There should be a new line (\\n) at the end of each line If the width or height is larger than 50, this should return the string: 'Too big for picture ' get_amount_inside: Takes another shape (square or rectangle) as an argument Returns the number of times the passed in shape could fit inside the shape (with no rotations) For instance, a rectangle with a width of 4 and a height of 8 could fit in two squares with sides of 4 Additionally, if an instance of a Rectangle is represented as a string, it should look like: 'Rectangle(width=5, height=10)' Square class\nThe Square class should be a subclass of Rectangle When a Square object is created, a single side length is passed in The __init__ method should store the side length in both the width and height attributes from the Rectangle class The Square class should be able to access the Rectangle class methods but should also contain a set_side method If an instance of a Square is represented as a string, it should look like: 'Square(side=9)' Additionally, the set_width and set_height methods on the Square class should set both the width and height Usage example\n```py\nrect = Rectangle(10, 5)\nprint(rect get_area())\nrect set_height(3)\nprint(rect get_perimeter())\nprint(rect)\nprint(rect get_picture())\nsq = Square(9)\nprint(sq get_area())\nsq",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 15
  },
  {
    "id": "1e10e8ca0a1f6e0f365807edbb06cdba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Rectangle class The Square class should be able to access the Rectangle class methods but should also contain a set_side method If an instance of a Square is represented as a string, it should look like: 'Square(side=9)' Additionally, the set_width and set_height methods on the Square class should set both the width and height Usage example ```py rect = Rectangle(10, 5) print(rect get_area()) rect set_height(3) print(rect get_perimeter()) print(rect) print(rect get_picture()) sq = Square(9) print(sq get_area()) sqset_side(4)\nprint(sq get_diagonal())\nprint(sq)\nprint(sq get_picture())\nrect set_height(8)\nrect set_width(16)\nprint(rect get_amount_inside(sq))\n```\nThat code should return:\n```bash\n50\n26\nRectangle(width=10, height=3)\n81\n5 656854249492381\nSquare(side=4)\n8\n```\nNote: open the browser console with F12 to see a more verbose output of the tests --hints--\nThe Square class should be a subclass of the Rectangle class ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_subclass(self):\nactual = issubclass(shape_calculator Square, shape_calculator Rectangle)\nexpected = True\nself assertEqual(actual, expected, 'Expected Square class to be a subclass of the Rectangle class ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe Square class should be a distinct class from the Rectangle class ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef test_distinct_classes(self):\nactual = shape_calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 15
  },
  {
    "id": "291eabe229ac493547df821c0c9478e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The Square class should be a distinct class from the Rectangle class ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def test_distinct_classes(self): actual = shape_calculatorSquare is not shape_calculator Rectangle\nexpected = True\nself assertEqual(actual, expected, 'Expected Square class to be a distinct class from the Rectangle class ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nA square object should be an instance of the Square class and the Rectangle class ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_square_is_square_and_rectangle(self):\nactual = isinstance(self sq, shape_calculator Square) and isinstance(self sq, shape_calculator Rectangle)\nexpected = True\nself assertEqual(actual, expected, 'Expected square object to be an instance of the Square class and the Rectangle class ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe string representation of Rectangle(3, 6) should be 'Rectangle(width=3, height=6)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 15
  },
  {
    "id": "c62f3c6a8c4e08279b0912f43f0d0731",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Rectangle) expected = True self assertEqual(actual, expected, 'Expected square object to be an instance of the Square class and the Rectangle class ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The string representation of Rectangle(3, 6) should be 'Rectangle(width=3, height=6)' ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodideFS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_rectangle_string(self):\nactual = str(self rect)\nexpected = \"Rectangle(width=3, height=6)\"\nself assertEqual(actual, expected, 'Expected string representation of rectangle to be \"Rectangle(width=3, height=6)\"')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe string representation of Square(5) should be 'Square(side=5)' ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_square_string(self):\nactual = str(self sq)\nexpected = \"Square(side=5)\"\nself assertEqual(actual, expected, 'Expected string representation of square to be \"Square(side=5)\"')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 3,
    "total_chunks": 15
  },
  {
    "id": "a78259d7d9fee987732b77493a853e92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self sq = shape_calculator Square(5) def test_square_string(self): actual = str(self sq) expected = \"Square(side=5)\" self assertEqual(actual, expected, 'Expected string representation of square to be \"Square(side=5)\"') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nRectangle(3, 6) get_area() should return 18 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_area(self):\nactual = self rect get_area()\nexpected = 18\nself assertEqual(actual, expected, 'Expected area of rectangle to be 18')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nSquare(5) get_area() should return 25 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_area(self):\nactual = self sq get_area()\nexpected = 25\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 4,
    "total_chunks": 15
  },
  {
    "id": "bb557fe87a48d5a1b9e19664a127be89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Square(5) get_area() should return 25 ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self sq = shape_calculator Square(5) def test_area(self): actual = self sq get_area() expected = 25 selfassertEqual(actual, expected, 'Expected area of square to be 25')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nRectangle(3, 6) get_perimeter() should return 18 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_perimeter(self):\nactual = self rect get_perimeter()\nexpected = 18\nself assertEqual(actual, expected, 'Expected perimeter of rectangle to be 18')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nSquare(5) get_perimeter() should return 20 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 5,
    "total_chunks": 15
  },
  {
    "id": "e05c0cf42c3f74a78268c635d27d5af6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "get_perimeter() expected = 18 self assertEqual(actual, expected, 'Expected perimeter of rectangle to be 18') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Square(5) get_perimeter() should return 20 ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittestTestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_perimeter(self):\nactual = self sq get_perimeter()\nexpected = 20\nself assertEqual(actual, expected, 'Expected perimeter of square to be 20')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nRectangle(3, 6) get_diagonal() should return 6 708203932499369 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_diagonal(self):\nactual = self rect get_diagonal()\nexpected = 6 708203932499369\nself assertEqual(actual, expected, 'Expected diagonal of rectangle to be 6 708203932499369')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nSquare(5) get_diagonal() should return 7 0710678118654755",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 6,
    "total_chunks": 15
  },
  {
    "id": "b50adecad7cbc01e565d8bbe5fa2c4da",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self rect = shape_calculator Rectangle(3, 6) def test_diagonal(self): actual = self rect get_diagonal() expected = 6 708203932499369 self assertEqual(actual, expected, 'Expected diagonal of rectangle to be 6 708203932499369') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Square(5) get_diagonal() should return 7 0710678118654755``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_diagonal(self):\nactual = self sq get_diagonal()\nexpected = 7 0710678118654755\nself assertEqual(actual, expected, 'Expected diagonal of square to be 7 0710678118654755')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nAn instance of the Rectangle class should have a different string representation after setting new values ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_set_attributes(self):\nself rect set_width(7)\nself rect set_height(8)\nactual = str(self rect)\nexpected = \"Rectangle(width=7, height=8)\"\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 7,
    "total_chunks": 15
  },
  {
    "id": "162d672db506843bf9b01ef3bf396a71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "runPython(testCode); assert(out); } }) ``` An instance of the Rectangle class should have a different string representation after setting new values ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self rect = shape_calculator Rectangle(3, 6) def test_set_attributes(self): self rect set_width(7) self rect set_height(8) actual = str(self rect) expected = \"Rectangle(width=7, height=8)\" selfassertEqual(actual, expected, 'Expected string representation of rectangle after setting new values to be \"Rectangle(width=7, height=8)\"')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nAn instance of the Square class should have a different string representation after setting new values by using set_side() ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_set_attributes(self):\nself sq set_side(2)\nactual = str(self sq)\nexpected = \"Square(side=2)\"\nself assertEqual(actual, expected, 'Expected string representation of square after setting new values to be \"Square(side=2)\"')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nAn instance of the Square class should have a different string representation after setting new values by using set_width() or set_height() ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 8,
    "total_chunks": 15
  },
  {
    "id": "d17224d2a56da1a952b3fd1784a6f1ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self assertEqual(actual, expected, 'Expected string representation of square after setting new values to be \"Square(side=2)\"') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` An instance of the Square class should have a different string representation after setting new values by using set_width() or set_height() ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculatorpy', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_set_attributes(self):\nself sq set_height(2)\nactual = str(self sq)\nexpected = \"Square(side=2)\"\nself assertEqual(actual, expected, 'Expected string representation of square after setting new values to be \"Square(side=2)\"')\nself sq set_width(4)\nactual = str(self sq)\nexpected = \"Square(side=4)\"\nself assertEqual(actual, expected, 'Expected string representation of square after setting width to be \"Square(side=4)\"')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe get_picture() method should return a different string representation of a Rectangle instance ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_rectangle_picture(self):\nself rect set_width(7)\nself rect set_height(3)\nactual = self rect get_picture()\nexpected = \"*******\\\\n*******\\\\n*******\\\\n\"\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 9,
    "total_chunks": 15
  },
  {
    "id": "660bb93fd163fd7ac775ba7791a6427a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const out = runPython(testCode); assert(out); } }) ``` The get_picture() method should return a different string representation of a Rectangle instance ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self rect = shape_calculator Rectangle(3, 6) def test_rectangle_picture(self): self rect set_width(7) self rect set_height(3) actual = self rect get_picture() expected = \"*******\\\\n*******\\\\n*******\\\\n\" selfassertEqual(actual, expected, 'Expected rectangle picture to be different ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe get_picture() method should return a different string representation of a Square instance ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself sq = shape_calculator Square(5)\ndef test_square_picture(self):\nself sq set_side(2)\nactual = self sq get_picture()\nexpected = \"**\\\\n**\\\\n\"\nself assertEqual(actual, expected, 'Expected square picture to be different ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe get_picture() method should return the string 'Too big for picture ' if the width or height attributes are larger than 50 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 10,
    "total_chunks": 15
  },
  {
    "id": "abec7eba949d9b1188248e1d580d79e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assertEqual(actual, expected, 'Expected square picture to be different ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The get_picture() method should return the string 'Too big for picture ' if the width or height attributes are larger than 50 ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_modulepy',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_big_picture(self):\nself rect set_width(51)\nself rect set_height(3)\nactual = self rect get_picture()\nexpected = \"Too big for picture \"\nself assertEqual(actual, expected, 'Expected message: \"Too big for picture \"')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nRectangle(15,10) get_amount_inside(Square(5)) should return 6 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\nself sq = shape_calculator Square(5)\ndef test_get_amount_inside(self):\nself rect set_height(10)\nself rect set_width(15)\nactual = self rect get_amount_inside(self sq)\nexpected = 6\nself assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 6 ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 11,
    "total_chunks": 15
  },
  {
    "id": "4b0d8fe137a3179f5dfa2fc04fbae458",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self rect = shape_calculator Rectangle(3, 6) self sq = shape_calculator Square(5) def test_get_amount_inside(self): self rect set_height(10) self rect set_width(15) actual = self rect get_amount_inside(self sq) expected = 6 self assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 6 ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nRectangle(4,8) get_amount_inside(Rectangle(3, 6)) should return 1 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator Rectangle(3, 6)\ndef test_get_amount_inside_two_rectangles(self):\nrect2 = shape_calculator Rectangle(4, 8)\nactual = rect2 get_amount_inside(self rect)\nexpected = 1\nself assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 1 ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nRectangle(2,3) get_amount_inside(Rectangle(3, 6)) should return 0 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/shape_calculator py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself rect = shape_calculator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 12,
    "total_chunks": 15
  },
  {
    "id": "85c6e6f93a3289e82b4c09e4002e059a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return 1 ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Rectangle(2,3) get_amount_inside(Rectangle(3, 6)) should return 0 ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/shape_calculator py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import shape_calculator from importlib import reload reload(shape_calculator) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self rect = shape_calculatorRectangle(3, 6)\ndef test_get_amount_inside_none(self):\nrect2 = shape_calculator Rectangle(2, 3)\nactual = rect2 get_amount_inside(self rect)\nexpected = 0\nself assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 0 ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nclass Rectangle:\npass\nclass Square:\npass\n```\n--solutions--\n```py\nclass Rectangle:\ndef init(self, width, height):\nself width = width\nself height = height\ndef __str__(self):\nreturn f'Rectangle(width={self width}, height={self height})'\ndef set_width(self, width):\nself width = width\ndef set_height(self, height):\nself height = height\ndef get_area(self):\narea = self width * self height\nreturn area\ndef get_perimeter(self):\nperimeter = self width * 2 + self height * 2\nreturn perimeter\ndef get_diagonal(self):\ndiagonal = (self width ** 2 + self height ** 2) ** 0 5\nreturn diagonal\ndef get_picture(self):\nif self width < 50 and self height < 50:\npicture = f'{\"*\"*self width}\\n'*self height\nreturn picture\nelse:\nreturn 'Too big for picture '\ndef get_amount_inside(self, polygon):\nh_number = self height // polygon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 13,
    "total_chunks": 15
  },
  {
    "id": "41d742d237116a3a12d9ed6bfbeec114",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self width * self height return area def get_perimeter(self): perimeter = self width * 2 + self height * 2 return perimeter def get_diagonal(self): diagonal = (self width ** 2 + self height ** 2) ** 0 5 return diagonal def get_picture(self): if self width < 50 and self height < 50: picture = f'{\"*\"*self width}\\n'*self height return picture else: return 'Too big for picture ' def get_amount_inside(self, polygon): h_number = self height // polygonheight\nw_number = self width // polygon width\nrepetition = h_number * w_number\nreturn repetition\nclass Square(Rectangle):\ndef init(self, side):\nself width = side\nself height = side\ndef __str__(self):\nreturn f'Square(side={self width})'\ndef set_width(self, side):\nself width = side\nself height = side\ndef set_height(self, side):\nself height = side\nself width = side\ndef set_side(self,side):\nself width = side\nself height = side\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 23874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-polygon-area-calculator-project\\polygon-area-calculator.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 14,
    "total_chunks": 15
  },
  {
    "id": "c86b515698c3904c80f441e3a0853780",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655774d01daeeaa1978b99d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655774d01daeeaa1978b99d5\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nAt the beginning, all the other nodes in the graph are considered to be at infinite distance from the source node, because the distance has not been determined yet.\nCreate an else clause and assign an infinite value to the node in the distances dictionary. For that, use the float() function with the string 'inf' as argument to generate a floating point number representing the positive infinity.\n--hints--\nYou should have an else clause.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)if.*:.*^\\1else\\s*:/ms));\n}\n})\nYou should assign float('inf') to distances[node] inside your new else clause.\njs\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, \"else\");\nassert(block_body.match(/^\\s+distances\\s*\\[\\s*node\\s*\\]\\s*=\\s*float\\s*\\(\\s*(\"|')inf\\1\\s*\\)\\s*$/));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\ndistances = {}\nfor node in graph:\nunvisited.append(node)\nif node == start:\ndistances[node] = 0\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1561,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655774d01daeeaa1978b99d5.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8841cb2df3ffe4a6e42034da305d0fe9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655774955b097ea14897db12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655774955b097ea14897db12\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nThe distance from the starting node is zero, because the algorithm begins its assessment right from there.\nAfter appending node to unvisited in your loop, create an if statement that triggers if the node is equal to the starting node. Then assign 0 to that node inside the distances dictionary.\n--hints--\nYou should create an if statement that executes when node is equal to start.\njs\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+node\\s+in\\s+graph\\s*/);\nassert(block_body.match(/unvisited\\.append\\s*\\(\\s*node\\s*\\)\\s*^\\s+if\\s+(node\\s*==\\s*start|start\\s*==\\s*node)\\s*:/m));\n}\n})\nInside your new if statement you should assign 0 to the node in the distances dictionary.\njs\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+(node\\s*==\\s*start|start\\s*==\\s*node)\\s*/m);\nassert(block_body.match(/^\\s+distances\\s*\\[\\s*node\\s*\\]\\s*=\\s*0/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\ndistances = {}\nfor node in graph:\nunvisited.append(node)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1599,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655774955b097ea14897db12.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1be3735c5cd28130f2be35d3d9c19ae3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655776db1eeae0a620e42a0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655776db1eeae0a620e42a0d\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nNow, call your function passing my_graph and 'A' as the arguments.\n--hints--\nYou should call shortest_path passing my_graph and 'A' as the arguments.\njs\n({ test: () => assert.match(code, /^shortest_path\\s*\\(\\s*my_graph\\s*,\\s*(\"|')A\\1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\ndistances = {}\nfor node in graph:\nunvisited.append(node)\nif node == start:\ndistances[node] = 0\nelse:\ndistances[node] = float('inf')\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 910,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655776db1eeae0a620e42a0d.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1ae78032753f992ac3a1396c5c7901db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655775221059f5a20493d5d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655775221059f5a20493d5d7\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nAfter your for loop, add a print() call and pass in the following string to see the values of the variables you have created: f'Unvisited: {unvisited}\\nDistances: {distances}'.\n--hints--\nYou should print f'Unvisited: {unvisited}\\nDistances: {distances}' after your for loop.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/(^\\s*)for.*:.*^\\1print\\s*\\(\\s*f(\"|')Unvisited:\\s*\\{\\s*unvisited\\s*\\}\\\\nDistances:\\s\\{\\s*distances\\s*\\}\\2\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\ndistances = {}\nfor node in graph:\nunvisited.append(node)\nif node == start:\ndistances[node] = 0\nelse:\ndistances[node] = float('inf')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1166,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655775221059f5a20493d5d7.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "eb0c7e8e48fca05bfa9e9f8a29265a89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655777060d8ddea6741be1b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655777060d8ddea6741be1b1\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nAll the distances in distances are set to infinite, except for the starting node. The unvisited list contains all the nodes in your graph. But actually, you don't need that for loop to achieve this result.\nRemove your for loop with its entire body.\n--hints--\nYou should remove your for loop and all the nested code.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/(^\\s*)distances\\s*=\\s*\\{\\s*\\}\\s*\\1print\\s*\\(\\s*f(\"|')Unvisited:\\s*\\{\\s*unvisited\\s*\\}\\\\nDistances:\\s\\{\\s*distances\\s*\\}\\2\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\ndistances = {}\nfor node in graph:\nunvisited.append(node)\nif node == start:\ndistances[node] = 0\nelse:\ndistances[node] = float('inf')\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1320,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655777060d8ddea6741be1b1.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b7a2237a86fdc653fe6581ea56fbe09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577739f57ecca6c39bb4e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65577739f57ecca6c39bb4e9\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nThe list() type constructor enables you to build a list from an iterable.\nModify the assignment of your unvisited variable to use list(), and pass graph as the iterable.\n--hints--\nYou should use list() to generate a list from the graph dictionary.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/list\\s*\\(\\s*graph\\s*\\)/));\n}\n})\nYou should assign list(graph) to unvisited.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/unvisited\\s*=\\s*list\\s*\\(\\s*graph\\s*\\)/));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = []\ndistances = {}\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1255,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577739f57ecca6c39bb4e9.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94d8618962c1ce9e124e7f6c4c0110b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577791ad8c26a7705e2919.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65577791ad8c26a7705e2919\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nWith a dictionary comprehension, you can create a dictionary starting from an existing dictionary:\npy\n{key: val for key in dict}\nIn the example above, val is the value that key will have in the new dictionary, and dict is the existing dictionary.\nYou want to keep track of the paths between the starting node and each other node.\nAfter the distances variable, create a paths variable and assign it a dictionary with all the keys from graph. Assign an empty list to each key and use a dictionary comprehension to build your dictionary.\n--hints--\nYou should have a variable named paths.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^\\s{4}paths\\s*\\=/m));\n}\n})\nYour paths variable should use the dictionary comprehension syntax to assign an empty list to each node in graph.\njs\n({ test: () =>  {\nconst {function_body} = __helpers.python.getDef(code, \"shortest_path\");\nassert(function_body.match(/^\\s{4}paths\\s*\\=\\s*\\{\\s*(\\w+)\\s*:\\s*\\[\\s*\\]\\s+for\\s+\\1\\s+in\\s+graph\\s*\\}/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {}\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1683,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577791ad8c26a7705e2919.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "33547e90221c2b3ef99195d7a0107d92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577a17564ce8a8e06c1460.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65577a17564ce8a8e06c1460\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nDictionary comprehensions support conditional if/else syntax too:\npy\n{key: val_1 if condition else val_2 for key in dict}\nIn the example above, dict is the existing dictionary. When condition evaluates to True, key will have the value val_1 , otherwise val_2.\nUse a dictionary comprehension to create a dictionary based on graph and assign it to the distances variable. Give the key a value of zero if the node is equal to the starting node, and infinite otherwise. Use float('inf') to achieve the latter.\n--hints--\nYou should use the dictionary comprehension syntax to give a value to your distances variable.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^\\s{4}distances\\s*=\\s*\\{\\s*(\\w+)\\s*:\\s*0\\s+if\\s+(?:\\1\\s*==\\s*start|start\\s*==\\s*\\1)\\s+else\\s+float\\s*\\(\\s*(\"|')inf\\2\\s*\\)\\s+for\\s+\\1\\s+in\\s+graph\\s*\\}/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {}\npaths = {node: [] for node in graph}\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1538,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65577a17564ce8a8e06c1460.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "39edb66c0625d479536805a556374a69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578c17d54dfab65cd54b95.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578c17d54dfab65cd54b95\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nSince the algorithm begins its assessment from the starting node, after creating the paths dictionary, you need to add the starting node to its own list in the paths dictionary.\nUse the .append() method to append start to the paths[start] list.\n--hints--\nYou should use the .append() method to append start to paths[start].\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^\\s{4}paths\\s*\\[\\s*start\\s*\\]\\s*\\.append\\s*\\(\\s*start\\s*\\)/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1207,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578c17d54dfab65cd54b95.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "be9026944058013066d0bf7c9a297681",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578c74607d40b6d8c4757f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578c74607d40b6d8c4757f\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nAdd \\nPaths: {paths} at the end of the f-string passed to the print call, so that it prints the paths variable, too.\n--hints--\nYou should modify your existing print call by adding \\nPaths: {paths} at the end of the f-string.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^\\s{4}print\\s*\\(\\s*f(\"|')Unvisited:\\s*\\{\\s*unvisited\\s*\\}\\\\nDistances:\\s\\{\\s*distances\\s*\\}\\\\nPaths:\\s\\{\\s*paths\\s*\\}\\1\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578c74607d40b6d8c4757f.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "299cdd1d698cfbb47f660124efd1696a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578cb031cd93b77a285db2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578cb031cd93b77a285db2\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nYour function is going to explore all the nodes connected to the starting node. It will calculate the shortest paths for all of them. Then, it will remove the starting node from the unvisited nodes.\nNext, the closest neighbor node will be visited and the process will be repeated until all the nodes are visited.\nFrom now on, you are going to work on the main loop that explores the nodes in the graph. To avoid issues with running an infinite loop during the algorithm development, turn your function call into a comment.\n--hints--\nYou should turn your function call into a comment.\njs\n({ test: () => assert.match(code, /#\\s*shortest_path\\s*\\(\\s*my_graph\\s*,\\s*(\"|')A\\1\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1365,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578cb031cd93b77a285db2.md",
      "source_type": "git_repo"
    },
    "token_count": 366,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cfbc403d34d1850ee01d2680119b9de9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578cee7f2cb8b80127cce2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578cee7f2cb8b80127cce2\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nBefore the print call, create a while loop that runs while unvisited is not empty. Use the pass keyword to fill the loop body.\n--hints--\nYou should have a while loop that executes while unvisited is not empty. Don't forget the pass keyword.\n```js\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {function_body} = __helpers.python.getDef(commentless_code, \"shortest_path\");\nassert(function_body.match(/^\\s+while\\s+(unvisited|unvisited\\s!=\\s[\\s]|len\\s(\\sunvisited\\s)\\s(>|!=)\\s0)\\s:/m));\nconst {block_body} = __helpers.python.getBlock(commentless_code, /while\\s+(unvisited|unvisited\\s!=\\s[\\s]|len\\s(\\sunvisited\\s)\\s(>|!=)\\s0)\\s/);\nassert(block_body.match(/\\s+pass/))\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1461,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578cee7f2cb8b80127cce2.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3048ca8ce1a2e0babaa52b7115e8dec5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578d0f6c78a0b868a43b9c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578d0f6c78a0b868a43b9c\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nInside the while loop, the first thing to do is define the current node to visit. For that you can use the min() function. It returns the smallest item from the iterable passed as the argument.\nRemove pass, then create a variable called current and assign it min(unvisited).\n--hints--\nYou should create a current variable in your while loop.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"shortest_path\").find_whiles()[0].has_variable(\"current\")`)) })\nYou should assign min(unvisited) to your current variable. Remember to delete pass.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"shortest_path\").find_whiles()[0].find_bodies()[0].is_equivalent(\"current = min(unvisited)\")`)) })\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\n--fcc-editable-region--\nwhile unvisited:\npass\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1462,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578d0f6c78a0b868a43b9c.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f01c73a9572ae013c8b93dd6342b69ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578d4fc3afc3b8f554c882.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578d4fc3afc3b8f554c882\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nmin() takes also a keyword-only argument. Passing a function as an additional argument to min(), you can modify the way the list items are compared.\nThe result of the line you've just written in the previous step is the node that comes first in alphabetical order. Instead you want to select the unvisited node having the smallest distance from the starting node.\nPass key=distances.get as the second argument to your min() call. In this way, the comparison will take place depending on the value each unvisited list item has inside the distances dictionary.\n--hints--\nYou should pass key=distances.get as the second argument to your min() call.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s{4})while\\s+unvisited\\s*:\\s*^\\1\\1current\\s*=\\s*min\\s*\\(\\s*unvisited\\s*,\\s*key\\s*=\\s*distances\\.get\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\n--fcc-editable-region--\nwhile unvisited:\ncurrent = min(unvisited)\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1691,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578d4fc3afc3b8f554c882.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "911d8cc8a5d7812c823605fab9708057",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578f895f2a65ba7a916804.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578f895f2a65ba7a916804\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nAfter the current variable assignment, create a for loop to iterate over the tuples in the graph[current] list. You will need two iterating variables for that. Remember to use pass to fill the loop body.\n--hints--\nYou should create a for loop to iterate over the tuples items in the graph[current] list. Use two iterating variables and don't forget to add the pass keyword.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)while\\s+unvisited\\s*:.*^\\1\\1for\\s+\\w+\\s*,\\s*\\w+\\s+in\\s+graph\\s*\\[\\s*current\\s*\\]\\s*:\\s*^\\1\\1\\1pass/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\n--fcc-editable-region--\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578f895f2a65ba7a916804.md",
      "source_type": "git_repo"
    },
    "token_count": 398,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "204b88858e51c6c40400f3e6ccf74b25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578fcf00322dbad5dee05b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65578fcf00322dbad5dee05b\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nCreate an if statement to check if the distance of the neighbor node (the second item in the processed tuple) plus the distance of current is less than the currently known distance of the neighbor node (the first item in the processed tuple).\nUse the pass keyword to temporarily fill the body of the if.\n--hints--\nYou should have an if statement to check if distance + distances[current] is less than distances[node].\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)for\\s+\\w+\\s*,\\s*\\w+\\s+in\\s+graph\\s*\\[\\s*current\\s*\\]\\s*:\\s*^\\1(\\s{4})if\\s+distance\\s*\\+\\s*distances\\s*\\[\\s*current\\s*\\]\\s*<\\s*distances\\s*\\[\\s*node\\s*\\]\\s*:/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\n--fcc-editable-region--\nfor node, distance in graph[current]:\npass\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1598,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65578fcf00322dbad5dee05b.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e5b04c4614c5183e277de0224705b97a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655790d113d14dbb727eaf41.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655790d113d14dbb727eaf41\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nOnce the distance to a node is set inside the distances dictionary, you need to keep track of the path to that node, too. If the distance for the node in the processed tuple has been updated, the last item in its path is the node itself.\nInside your conditional, nest another if statement that triggers when the last element of paths[node] is equal to node. Use pass to fill the if statement body.\n--hints--\nYou should create a nested if statements that checks if paths[node][-1] is equal to node. Don't forget to use pass.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)if.*:.*^\\1(\\s{4})if\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1\\2\\2pass/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\n--fcc-editable-region--\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1754,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655790d113d14dbb727eaf41.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c97078e122f86d5a39e64bad73c10895",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557910b0ebaeebc18209e90.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557910b0ebaeebc18209e90\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nNow remove pass and assign paths[current] to paths[node].\n--hints--\nYou should delete pass and assign paths[current] to paths[node].\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)if.*:.*^\\1(\\s{4})if\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1\\2\\2paths\\s*\\[\\s*node\\s*\\]\\s*=\\s*paths\\s*\\[\\s*current\\s*\\]/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\n--fcc-editable-region--\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node][-1] == node:\npass\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1474,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557910b0ebaeebc18209e90.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "08535eeb35751a7ac6603baf3c60defc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791847db8a9bd0b685f40.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655791847db8a9bd0b685f40\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nFinally, below the else clause, append the neighbor node to its path.\n--hints--\nYou should append node to paths[node] just after your else clause.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^(\\s*)else\\s*:\\s*^\\1\\s{4}paths\\s*\\[\\s*node\\s*\\]\\s*\\.extend\\s*\\(\\s*paths\\s*\\[\\s*current\\s*\\]\\s*\\)\\s*^\\1paths\\s*\\[\\s*node\\s*\\]\\s*\\.append\\s*\\(\\s*node\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\n--fcc-editable-region--\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node][-1] == node:\npaths[node] = paths[current]\nelse:\npaths[node].extend(paths[current])\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791847db8a9bd0b685f40.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9f96961bb40817579d7749a6e0c7391b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791e6cf5e03be3de73451.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655791e6cf5e03be3de73451\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nIf you try to uncomment your function call, it won't work You have a couple of bugs to fix The first one happens because in the nested if you are trying to access an element that might not exist in your paths[node] list So, you need to be sure that paths[node] is not empty before accessing paths[node][-1] Add an additional condition to your nested if statement to ensure that paths[node] is non-empty before accessing paths[node][-1] --hints--\nYou should add paths[node] as the first condition to your nested if statement Use the and operator to combine your conditions js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/if\\s+paths\\s*\\[\\s*node\\s*\\]\\s+and\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:/));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\n--fcc-editable-region--\nif paths[node][-1] == node:\npaths[node] = paths[current]\n--fcc-editable-region--\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2084,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791e6cf5e03be3de73451.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5486238c017b56affc4d34f18f8ea7e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791ae44c182bd92f31caa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655791ae44c182bd92f31caa\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nThe remove() method removes from a list the first matching element that is passed as the argument:\npy\nmy_list = ['larch', 1, True, 1]\nmy_list remove(1)\nprint(my_list) # Output: ['larch', True, 1]\nTerminate the while loop by removing the current node from the unvisited list Pay attention to the indentation --hints--\nYou should use the remove() method to remove the current node from unvisited after your for loop js\n({ test: () =>  {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /while\\s+unvisited/);\nassert(block_body match(/^\\s+unvisited\\ remove\\s*\\(\\s*current\\s*\\)/m));\nconst {block_body: for_body} = __helpers python getBlock(commentless_code, /for\\s+node\\s*,\\s*distance\\s+in\\s+graph\\s*\\[\\s*current\\s*\\]\\s*/);\nassert notMatch(for_body, /^\\s+unvisited\\ remove\\s*\\(\\s*current\\s*\\)/m);\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\n--fcc-editable-region--\nwhile unvisited:\ncurrent = min(unvisited, key=distances get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node][-1] == node:\npaths[node] = paths[current]\nelse:\npaths[node] extend(paths[current])\npaths[node]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791ae44c182bd92f31caa.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fbf9d7dc5f5b7486000dead6cbd55382",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791ae44c182bd92f31caa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'C': [('B', 4), ('D', 7)], 'D': [('A', 1), ('C', 7)] } def shortest_path(graph, start): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) --fcc-editable-region-- while unvisited: current = min(unvisited, key=distances get) for node, distance in graph[current]: if distance + distances[current] < distances[node]: distances[node] = distance + distances[current] if paths[node][-1] == node: paths[node] = paths[current] else: paths[node] extend(paths[current]) paths[node]append(node)\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\655791ae44c182bd92f31caa.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ce3b0cd0cb222f196dcdb25565ac790e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557913b8fe5c0bc834c9f4f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557913b8fe5c0bc834c9f4f\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nThe extend() method, allows you to add elements from an iterable to the end of a list:\npy\nmy_list = ['larch', 'birch']\ntree_list = ['fir', 'redwood', 'pine']\nmy_list extend(tree_list)\nprint(my_list) # Output: ['larch', 'birch', 'fir', 'redwood', 'pine']\nCreate an else clause and use the extend() method to add the current node path to the neighbor node path --hints--\nYou should create an else clause after your nested if statement js\n({ test: () =>  {\nconst commentless_code = __helpers python removeComments(code);\nconst {block_body} = __helpers python getBlock(commentless_code, /if\\s+distance\\s*\\+\\s*distances\\s*\\[\\s*current\\s*\\]\\s*<\\s*distances\\s*\\[\\s*node\\s*\\]\\s*/);\nassert(block_body match(/^\\s+else\\s*:/m));\n}\n})\nYou should have paths[node] extend(paths[current]) in your else clause js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/^(\\s*)if\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1(\\s{4})paths\\s*\\[\\s*node\\s*\\]\\s*=\\s*paths\\s*\\[\\s*current\\s*\\]\\s*^\\1else\\s*:\\s*^\\1\\2paths\\s*\\[\\s*node\\s*\\]\\s*\\",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557913b8fe5c0bc834c9f4f.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "88e4cd6cd2abc150b2e20e293bc28748",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557913b8fe5c0bc834c9f4f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "extend() method to add the current node path to the neighbor node path --hints-- You should create an else clause after your nested if statement js ({ test: () => { const commentless_code = __helpers python removeComments(code); const {block_body} = __helpers python getBlock(commentless_code, /if\\s+distance\\s*\\+\\s*distances\\s*\\[\\s*current\\s*\\]\\s*<\\s*distances\\s*\\[\\s*node\\s*\\]\\s*/); assert(block_body match(/^\\s+else\\s*:/m)); } }) You should have paths[node] extend(paths[current]) in your else clause js ({ test: () => { const shortest = __helpers python getDef(code, \"shortest_path\"); const {function_body} = shortest; assert(function_body match(/^(\\s*)if\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1(\\s{4})paths\\s*\\[\\s*node\\s*\\]\\s*=\\s*paths\\s*\\[\\s*current\\s*\\]\\s*^\\1else\\s*:\\s*^\\1\\2paths\\s*\\[\\s*node\\s*\\]\\s*\\extend\\s*\\(\\s*paths\\s*\\[\\s*current\\s*\\]\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557913b8fe5c0bc834c9f4f.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ab5867ad5d537e7e2398265ebe577ceb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557913b8fe5c0bc834c9f4f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= __helpers python getDef(code, \"shortest_path\"); const {function_body} = shortest; assert(function_body match(/^(\\s*)if\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1(\\s{4})paths\\s*\\[\\s*node\\s*\\]\\s*=\\s*paths\\s*\\[\\s*current\\s*\\]\\s*^\\1else\\s*:\\s*^\\1\\2paths\\s*\\[\\s*node\\s*\\]\\s*\\extend\\s*\\(\\s*paths\\s*\\[\\s*current\\s*\\]\\s*\\)/ms)); } }) --seed-- --seed-contents-- ```py my_graph = { 'A': [('B', 3), ('D', 1)], 'B': [('A', 3), ('C', 4)], 'C': [('B', 4), ('D', 7)], 'D': [('A', 1), ('C', 7)] } def shortest_path(graph, start): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distancesget)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\n--fcc-editable-region--\nif paths[node][-1] == node:\npaths[node] = paths[current]\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2289,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557913b8fe5c0bc834c9f4f.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "80d4dec08db58a7f55461f455aa8d783",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557924d47c325bf27afbe51.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557924d47c325bf27afbe51\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nThe algorithm is complete but you can improve the output. Also, you can provide the function with an additional argument to return only the path between two nodes.\nAdd target as the third parameter to your function declaration and give it the default value of an empty string.\n--hints--\nYour function should take three parameters:graph, start, and target. The order matters.\njs\n({ test: () => assert.match(code, /^def\\s+shortest_path\\s*\\(\\s*graph\\s*,\\s*start\\s*,\\s*target\\s*=?\\s*.*\\s*\\)\\s*:/m) })\nThe target parameter should have the default value of an empty string.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(shortest_path))\nsig == \"(graph, start, target='')\"\n`))\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start):\n--fcc-editable-region--\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node].extend(paths[current])\npaths[node].append(node)\nunvisited.remove(current)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557924d47c325bf27afbe51.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b678dd6a983685669434615adfbc90f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65579228c669fcbebffd01d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65579228c669fcbebffd01d5\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nThe other bug is subtle When a shorter distance is found for a neighbor node, paths[current] gets assigned to the neighbor node path, paths[node] This means both variables point to the same list Since lists are mutable, when you append the neighbor node to its path, both paths[node] and paths[current] are modified because they are the same list This results in wrong paths, although the distances are correct You can fix that bug by assigning a copy of paths[current] to the neighbor node path For that you can use the slice syntax:\npy\nmy_list[:]\nWhere my_list is the list you want to copy Modify the existing paths[node] = paths[current] assignment inside your if block by slicing paths[current] --hints--\nYou should assign paths[current][:] to the neighbor node path js\n({ test: () => assert match(code, /^(\\s*)if\\s+paths\\s*\\[\\s*node\\s*\\]\\s+and\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1\\s{4}paths\\s*\\[\\s*node\\s*\\]\\s*=\\s*paths\\s*\\[\\s*current\\s*\\]\\s*\\[\\s*:: \\s*\\]/ms) })\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65579228c669fcbebffd01d5.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "09f840ed7f44a9f7fce8115c251d8f50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65579228c669fcbebffd01d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "neighbor node path js ({ test: () => assert match(code, /^(\\s*)if\\s+paths\\s*\\[\\s*node\\s*\\]\\s+and\\s+paths\\s*\\[\\s*node\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*==\\s*node\\s*:\\s*^\\1\\s{4}paths\\s*\\[\\s*node\\s*\\]\\s*=\\s*paths\\s*\\[\\s*current\\s*\\]\\s*\\[\\s*:: \\s*\\]/ms) }) --seed-- --seed-contents-- ```py my_graph = { 'A': [('B', 3), ('D', 1)], 'B': [('A', 3), ('C', 4)], 'C': [('B', 4), ('D', 7)], 'D': [('A', 1), ('C', 7)] } def shortest_path(graph, start): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distancesget)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\n--fcc-editable-region--\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current]\n--fcc-editable-region--\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2269,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65579228c669fcbebffd01d5.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d152d5d4e6e7f55f03d58ba81c69915f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557927ad11e58bf8c794b25.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6557927ad11e58bf8c794b25\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nCreate a for loop to iterate over targets_to_print and print the following f-string: f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \" join(paths[node])}' --hints--\nYou should create a for loop to iterate over targets_to_print Use node as the loop variable js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s*:/m));\n}\n})\nYou should print the provided string inside your new for loop js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s*:\\s*^\\1\\1print\\s*\\(\\s*f(\"|')\\\\n\\{\\s*start\\s*\\}-\\{\\s*node\\s*\\}\\sdistance:\\s\\{\\s*distances\\s*\\[\\s*node\\s*\\]\\s*\\}\\\\nPath:\\s\\{\\s*( =[^\\1])(\"|')\\s->\\s\\3\\ join\\s*\\(\\s*paths\\s*\\[\\s*node\\s*\\]\\s*\\)\\s*\\}\\2\\s*\\)/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557927ad11e58bf8c794b25.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f99309159ff981044409bcfc2c04ce51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557927ad11e58bf8c794b25.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const {function_body} = shortest; assert(function_body match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s*:\\s*^\\1\\1print\\s*\\(\\s*f(\"|')\\\\n\\{\\s*start\\s*\\}-\\{\\s*node\\s*\\}\\sdistance:\\s\\{\\s*distances\\s*\\[\\s*node\\s*\\]\\s*\\}\\\\nPath:\\s\\{\\s*( =[^\\1])(\"|')\\s->\\s\\3\\ join\\s*\\(\\s*paths\\s*\\[\\s*node\\s*\\]\\s*\\)\\s*\\}\\2\\s*\\)/ms)); } }) --seed-- --seed-contents-- ```py my_graph = { 'A': [('B', 3), ('D', 1)], 'B': [('A', 3), ('C', 4)], 'C': [('B', 4), ('D', 7)], 'D': [('A', 1), ('C', 7)] } def shortest_path(graph, start, target = ''): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distancesget)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\n--fcc-editable-region--\ntargets_to_print = [target] if target else graph\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2188,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6557927ad11e58bf8c794b25.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7543932dc60994b17a10d7fa26536cc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 5e44413e903586ffb414c94e\ntitle: Build a Budget App Project\nchallengeType: 23\nforumTopicId: 462361\ndashedName: build-a-budget-app-project\n--description--\nComplete the Category class It should be able to instantiate objects based on different budget categories like food, clothing, and entertainment When objects are created, they are passed in the name of the category The class should have an instance variable called ledger that is a list The class should also contain the following methods:\nA deposit method that accepts an amount and description If no description is given, it should default to an empty string The method should append an object to the ledger list in the form of {'amount': amount, 'description': description} A withdraw method that is similar to the deposit method, but the amount passed in should be stored in the ledger as a negative number If there are not enough funds, nothing should be added to the ledger This method should return True if the withdrawal took place, and False otherwise A get_balance method that returns the current balance of the budget category based on the deposits and withdrawals that have occurred A transfer method that accepts an amount and another budget category as arguments The method should add a withdrawal with the amount and the description 'Transfer to [Destination Budget Category]' The method should then add a deposit to the other budget category with the amount and the description 'Transfer from [Source Budget Category]' If there are not enough funds, nothing should be added to either ledgers This method should return True if the transfer took place, and False otherwise A check_funds method that accepts an amount as an argument It returns False if the amount is greater than the balance of the budget category and returns True otherwise This method should be used by both the withdraw method and transfer method When the budget object is printed it should display:\nA title line of 30 characters where the name of the category is centered in a line of * characters A list of the items in the ledger Each line should show the description and amount The first 23 characters of the description should be displayed, then the amount The amount should be right aligned, contain two decimal places, and display a maximum of 7 characters A line displaying the category total Here is an example usage:\npy\nfood = Category('Food')\nfood deposit(1000, 'deposit')\nfood withdraw(10 15, 'groceries')\nfood withdraw(15",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 23
  },
  {
    "id": "f696f6580dead5e65f74bf4b529e7222",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in a line of * characters A list of the items in the ledger Each line should show the description and amount The first 23 characters of the description should be displayed, then the amount The amount should be right aligned, contain two decimal places, and display a maximum of 7 characters A line displaying the category total Here is an example usage: py food = Category('Food') food deposit(1000, 'deposit') food withdraw(10 15, 'groceries') food withdraw(1589, 'restaurant and more food for dessert')\nclothing = Category('Clothing')\nfood transfer(50, clothing)\nprint(food)\nAnd here is an example of the output:\nbash\n*************Food*************\ninitial deposit        1000 00\ngroceries               -10 15\nrestaurant and more foo -15 89\nTransfer to Clothing    -50 00\nTotal: 923 96\nBesides the Category class, create a function (outside of the class) called create_spend_chart that takes a list of categories as an argument It should return a string that is a bar chart The chart should show the percentage spent in each category passed in to the function The percentage spent should be calculated only with withdrawals and not with deposits, and it should be the percentage of the amount spent for each category to the total spent for all categories Down the left side of the chart should be labels 0 - 100 The 'bars' in the bar chart should be made out of the 'o' character The height of each bar should be rounded down to the nearest 10 The horizontal line below the bars should go two spaces past the final bar Each category name should be written vertically below the bar There should be a title at the top that says 'Percentage spent by category' This function will be tested with up to four categories Look at the example output below very closely and make sure the spacing of the output matches the example exactly bash\nPercentage spent by category\n100|\n90|\n80|\n70|\n60| o\n50| o\n40| o\n30| o\n20| o  o\n10| o  o  o\n0| o  o  o\n----------\nF  C  A\no  l  u\no  o  t\nd  t  o\nh\ni\nn\ng\nNote: open the browser console with F12 to see a more verbose output of the tests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 23
  },
  {
    "id": "c1d44674894bbaa03be9f5e5bf00fb51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "below very closely and make sure the spacing of the output matches the example exactly bash Percentage spent by category 100| 90| 80| 70| 60| o 50| o 40| o 30| o 20| o o 10| o o o 0| o o o ---------- F C A o l u o o t d t o h i n g Note: open the browser console with F12 to see a more verbose output of the tests--hints--\nThe deposit method should create a specific object in the ledger instance variable ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_deposit(self):\nself food deposit(900, \"deposit\")\nactual = self food ledger[0]\nexpected = {\"amount\": 900, \"description\": \"deposit\"}\nself assertEqual(actual, expected, 'Expected \"deposit\" method to create a specific object in the ledger instance variable ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling the deposit method with no description should create a blank description ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_deposit_no_description(self):\nself food deposit(45 56)\nactual = self food ledger[0]\nexpected = {\"amount\": 45 56, \"description\": \"\"}\nself assertEqual(actual, expected, 'Expected calling \"deposit\" method with no description to create a blank description ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 23
  },
  {
    "id": "074e7ed7684c54960252cd86276c5b76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") def test_deposit_no_description(self): self food deposit(45 56) actual = self food ledger[0] expected = {\"amount\": 45 56, \"description\": \"\"} self assertEqual(actual, expected, 'Expected calling \"deposit\" method with no description to create a blank description ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe withdraw method should create a specific object in the ledger instance variable ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_withdraw(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\nactual = self food ledger[1]\nexpected = {\"amount\": -45 67, \"description\": \"milk, cereal, eggs, bacon, bread\"}\nself assertEqual(actual, expected, 'Expected \"withdraw\" method to create a specific object in the ledger instance variable ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling the withdraw method with no description should create a blank description ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_withdraw_no_description(self):\nself food",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 23
  },
  {
    "id": "60a3ab54992d5555b49e1a46aab9c4a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling the withdraw method with no description should create a blank description ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") def test_withdraw_no_description(self): self fooddeposit(900, \"deposit\")\ngood_withdraw = self food withdraw(45 67)\nactual = self food ledger[1]\nexpected = {\"amount\": -45 67, \"description\": \"\"}\nself assertEqual(actual, expected, 'Expected \"withdraw\" method with no description to create a blank description ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe withdraw method should return True if the withdrawal took place ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_withdraw_no_description(self):\nself food deposit(900, \"deposit\")\ngood_withdraw = self food withdraw(45 67)\nself assertEqual(good_withdraw, True, 'Expected \"withdraw\" method to return \"True\" ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling food deposit(900, 'deposit') and food withdraw(45 67, 'milk, cereal, eggs, bacon, bread') should return a balance of 854 33",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 4,
    "total_chunks": 23
  },
  {
    "id": "c19d663cf9c0ba15f933076e826adec4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= budget Category(\"Food\") def test_withdraw_no_description(self): self food deposit(900, \"deposit\") good_withdraw = self food withdraw(45 67) self assertEqual(good_withdraw, True, 'Expected \"withdraw\" method to return \"True\" ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling food deposit(900, 'deposit') and food withdraw(45 67, 'milk, cereal, eggs, bacon, bread') should return a balance of 854 33``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_get_balance(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\nactual = self food get_balance()\nexpected = 854 33\nself assertEqual(actual, expected, 'Expected balance to be 854 33')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling the transfer method on a category object should create a specific ledger item in that category object ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_transfer(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\ntransfer_amount = 20\ngood_transfer = self food",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 5,
    "total_chunks": 23
  },
  {
    "id": "297edc503b77668b5f26936ddae10ac2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "category object should create a specific ledger item in that category object ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") self entertainment = budget Category(\"Entertainment\") def test_transfer(self): self food deposit(900, \"deposit\") self food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\") transfer_amount = 20 good_transfer = self foodtransfer(transfer_amount, self entertainment)\nactual = self food ledger[2]\nexpected = {\"amount\": -transfer_amount, \"description\": \"Transfer to Entertainment\"}\nself assertEqual(actual, expected, 'Expected \"transfer\" method to create a specific ledger item in food object ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe transfer method should return True if the transfer took place ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_transfer(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\ntransfer_amount = 20\ngood_transfer = self food transfer(transfer_amount, self entertainment)\nself assertEqual(good_transfer, True, 'Expected \"transfer\" method to return \"True\" ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nCalling transfer on a category object should reduce the balance in the category object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 6,
    "total_chunks": 23
  },
  {
    "id": "d72547a7e9874df6bab7b8cc1a32c352",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "deposit(900, \"deposit\") self food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\") transfer_amount = 20 good_transfer = self food transfer(transfer_amount, self entertainment) self assertEqual(good_transfer, True, 'Expected \"transfer\" method to return \"True\" ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` Calling transfer on a category object should reduce the balance in the category object``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_transfer(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\ntransfer_amount = 20\nfood_balance_before = self food get_balance()\ngood_transfer = self food transfer(transfer_amount, self entertainment)\nfood_balance_after = self food get_balance()\nself assertEqual(food_balance_before - food_balance_after, transfer_amount, 'Expected \"transfer\" method to reduce balance in food object ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe transfer method should increase the balance of the category object passed as its argument ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_transfer(self):\nself food deposit(900, \"deposit\")\nself food",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 7,
    "total_chunks": 23
  },
  {
    "id": "f3f37a570cccf3d0b42d189e80bcc0fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The transfer method should increase the balance of the category object passed as its argument ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") self entertainment = budget Category(\"Entertainment\") def test_transfer(self): self food deposit(900, \"deposit\") self foodwithdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\ntransfer_amount = 20\nentertainment_balance_before = self entertainment get_balance()\ngood_transfer = self food transfer(transfer_amount, self entertainment)\nentertainment_balance_after = self entertainment get_balance()\nself assertEqual(entertainment_balance_after - entertainment_balance_before, transfer_amount, 'Expected \"transfer\" method to increase balance in entertainment object ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe transfer method should create a specific ledger item in the category object passed as its argument ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_transfer(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\ntransfer_amount = 20\ngood_transfer = self food transfer(transfer_amount, self entertainment)\nactual = self entertainment ledger[0]\nexpected = {\"amount\": transfer_amount, \"description\": \"Transfer from Food\"}\nself assertEqual(actual, expected, 'Expected \"transfer\" method to create a specific ledger item in entertainment object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 8,
    "total_chunks": 23
  },
  {
    "id": "0449dfe9635e6798776e56f25d42336e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") self entertainment = budget Category(\"Entertainment\") def test_transfer(self): self food deposit(900, \"deposit\") self food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\") transfer_amount = 20 good_transfer = self food transfer(transfer_amount, self entertainment) actual = self entertainment ledger[0] expected = {\"amount\": transfer_amount, \"description\": \"Transfer from Food\"} self assertEqual(actual, expected, 'Expected \"transfer\" method to create a specific ledger item in entertainment object')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe check_funds method should return False if the amount passed to the method is greater than the category balance ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_check_funds(self):\nself food deposit(10, \"deposit\")\nactual = self food check_funds(20)\nexpected = False\nself assertEqual(actual, expected, 'Expected \"check_funds\" method to be False')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe check_funds method should return True if the amount passed to the method is not greater than the category balance ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 9,
    "total_chunks": 23
  },
  {
    "id": "e4554763157bbdffe8f0fc80f063e704",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The check_funds method should return True if the amount passed to the method is not greater than the category balance ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budgetCategory(\"Food\")\ndef test_check_funds(self):\nself food deposit(10, \"deposit\")\nactual = self food check_funds(10)\nexpected = True\nself assertEqual(actual, expected, 'Expected \"check_funds\" method to be True')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe withdraw method should return False if the withdrawal didn't take place ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_withdraw_no_funds(self):\nself food deposit(100, \"deposit\")\ngood_withdraw = self food withdraw(100 10)\nself assertEqual(good_withdraw, False, 'Expected \"withdraw\" method to return \"False\" ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe transfer method should return False if the transfer didn't take place ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 10,
    "total_chunks": 23
  },
  {
    "id": "c68921e4b3277002a3fd2767ab0e9ce2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "food deposit(100, \"deposit\") good_withdraw = self food withdraw(100 10) self assertEqual(good_withdraw, False, 'Expected \"withdraw\" method to return \"False\" ') ); const testCode = from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The transfer method should return False if the transfer didn't take place ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_modulepy',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_transfer_no_funds(self):\nself food deposit(100, \"deposit\")\ngood_transfer = self food transfer(200, self entertainment)\nself assertEqual(good_transfer, False, 'Expected \"transfer\" method to return \"False\" ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nPrinting a Category instance should give a different string representation of the object ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\ndef test_to_string(self):\nself food deposit(900, \"deposit\")\nself food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\")\nself food transfer(20, self entertainment)\nactual = str(self food)\nexpected = \"*************Food*************\\\\ndeposit                 900 00\\\\nmilk, cereal, eggs, bac -45 67\\\\nTransfer to Entertainme -20 00\\\\nTotal: 834",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 11,
    "total_chunks": 23
  },
  {
    "id": "5ac4506ff9c5bb2c3b503de6faab3398",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") self entertainment = budget Category(\"Entertainment\") def test_to_string(self): self food deposit(900, \"deposit\") self food withdraw(45 67, \"milk, cereal, eggs, bacon, bread\") self food transfer(20, self entertainment) actual = str(self food) expected = \"*************Food*************\\\\ndeposit 900 00\\\\nmilk, cereal, eggs, bac -45 67\\\\nTransfer to Entertainme -20 00\\\\nTotal: 83433\"\nself assertEqual(actual, expected, 'Expected different string representation of object ')\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nTitle at the top of create_spend_chart chart should say Percentage spent by category ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_create_spend_chart(self):\nself food deposit(900, \"deposit\")\nself food withdraw(105 55)\nchart = budget create_spend_chart([self food])\nexpected = \"Percentage spent by category\"\nself assertEqual(chart split(\"\\\\n\")[0], expected, \"Chart should have correct title \")\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\ncreate_spend_chart chart should have correct percentages down the left side ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 12,
    "total_chunks": 23
  },
  {
    "id": "f2db9ab7bc9aa57976066e28a9196936",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self food withdraw(105 55) chart = budget create_spend_chart([self food]) expected = \"Percentage spent by category\" self assertEqual(chart split(\"\\\\n\")[0], expected, \"Chart should have correct title \") `); const testCode = ` from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` create_spend_chart chart should have correct percentages down the left side ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budgetpy', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\ndef test_create_spend_chart(self):\nself food deposit(900, \"deposit\")\nself food withdraw(105 55)\nchart = budget create_spend_chart([self food])\npercentages = [\"100|\", \" 90|\", \" 80|\", \" 70|\", \" 60|\", \" 50|\", \" 40|\", \" 30|\", \" 20|\", \" 10|\", \"  0|\"]\nfor line, percent in zip(chart split(\"\\\\n\")[1:], percentages):\nself assertTrue(line startswith(percent), \"Chart correct percentages in the vertical axis \")\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nThe height of each bar on the create_spend_chart chart should be rounded down to the nearest 10 ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\nself business = budget Category(\"Business\")\nself food",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 13,
    "total_chunks": 23
  },
  {
    "id": "d02f3b210b2e756fdc6e64117da18e55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` The height of each bar on the create_spend_chart chart should be rounded down to the nearest 10 ``js ({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") self entertainment = budget Category(\"Entertainment\") self business = budget Category(\"Business\") self fooddeposit(900, \"deposit\")\nself entertainment deposit(900, \"deposit\")\nself business deposit(900, \"deposit\")\nself food withdraw(78)\nself entertainment withdraw(22)\nself business withdraw(8)\ndef test_create_spend_chart_rounding_close_to_upper_and_lower_ten(self):\nchart_lines = budget create_spend_chart([self food, self entertainment]) split(\"\\\\n\")[1:12]\nresult_lines = '''100|\n90|\n80|\n70| o\n60| o\n50| o\n40| o\n30| o\n20| o  o\n10| o  o\n0| o  o''' split(\"\\n\")\nself assertEqual(len(chart_lines), len(result_lines), \"Lines missing in chart \")\nfor actual, expected in zip(chart_lines, result_lines):\nself assertTrue(actual startswith(expected), \"Expected different rounding of bars \")\ndef test_create_spend_chart_rounding_single_digit(self):\nchart_lines = budget create_spend_chart([self business, self food, self entertainment]) split(\"\\\\n\")[1:12]\nresult_lines = '''100|\n90|\n80|\n70|    o\n60|    o\n50|    o\n40|    o\n30|    o\n20|    o  o\n10|    o  o\n0| o  o  o''' split(\"\\n\")\nself assertEqual(len(chart_lines), len(result_lines), \"Lines missing in chart \")\nfor actual, expected in zip(chart_lines, result_lines):\nself assertTrue(actual startswith(expected), \"Expected different rounding of bars \")\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 14,
    "total_chunks": 23
  },
  {
    "id": "3ea98332c3087f45584743c91ed41e68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self food, self entertainment]) split(\"\\\\n\")[1:12] result_lines = '''100| 90| 80| 70| o 60| o 50| o 40| o 30| o 20| o o 10| o o 0| o o o''' split(\"\\n\") self assertEqual(len(chart_lines), len(result_lines), \"Lines missing in chart \") for actual, expected in zip(chart_lines, result_lines): self assertTrue(actual startswith(expected), \"Expected different rounding of bars \") `); const testCode = ` from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t resultwasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\nEach line in create_spend_chart chart should have the same length Bars for different categories should be separated by two spaces, with additional two spaces after the final bar ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\nself business = budget Category(\"Business\")\nself food deposit(900, \"deposit\")\nself entertainment deposit(900, \"deposit\")\nself business deposit(900, \"deposit\")\nself food withdraw(78)\nself entertainment withdraw(22)\nself business withdraw(8)\ndef test_create_spend_chart_chart_lines_have_expected_length(self):\nchart_categories = [[self food, self entertainment], [self business, self food, self entertainment]]\nexpected_lengths = [len(line) for line in [\"  0| o  o  \", \"  0| o  o  o  \"]]\nexpected_chart_lines = 11\nfor categories, expected_length in zip(chart_categories, expected_lengths):\nchart_lines = budget create_spend_chart(categories) split(\"\\\\n\")[1:12]\nself assertEqual(len(chart_lines), expected_chart_lines, \"Lines missing in chart \")\nfor actual in chart_lines:\nself assertEqual(len(actual), expected_length, \"Expected different length of the chart line Check that all spacing is exact",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 15,
    "total_chunks": 23
  },
  {
    "id": "de7ac537cfc0671baa4a09922ff89f51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self business withdraw(8) def test_create_spend_chart_chart_lines_have_expected_length(self): chart_categories = [[self food, self entertainment], [self business, self food, self entertainment]] expected_lengths = [len(line) for line in [\" 0| o o \", \" 0| o o o \"]] expected_chart_lines = 11 for categories, expected_length in zip(chart_categories, expected_lengths): chart_lines = budget create_spend_chart(categories) split(\"\\\\n\")[1:12] self assertEqual(len(chart_lines), expected_chart_lines, \"Lines missing in chart \") for actual in chart_lines: self assertEqual(len(actual), expected_length, \"Expected different length of the chart line Check that all spacing is exact\")\n);\nconst testCode =\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\ncreate_spend_chart should correctly show horizontal line below the bars Using three - characters for each category, and in total going two characters past the final bar ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\nself business = budget Category(\"Business\")\nself food deposit(900, \"deposit\")\nself entertainment deposit(900, \"deposit\")\nself business deposit(900, \"deposit\")\nself food withdraw(105 55)\nself entertainment withdraw(33 40)\nself business withdraw(10 99)\ndef test_create_spend_chart_horizontal_bar(self):\nchart_categories = [[self business], [self business, self food], [self business, self food, self entertainment]]\nhorizontal_lines = [\"    ----\", \"    -------\", \"    ----------\"]\nfor categories, expected in zip(chart_categories, horizontal_lines):\nactual = budget create_spend_chart(categories) split(\"\\\\n\")[12]\nself assertEqual(actual, expected, \"Expected different horizontal bar Check that all spacing is exact",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 16,
    "total_chunks": 23
  },
  {
    "id": "73ccfa02f12b5f7b8c7070f571f6b32a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "business = budget Category(\"Business\") self food deposit(900, \"deposit\") self entertainment deposit(900, \"deposit\") self business deposit(900, \"deposit\") self food withdraw(105 55) self entertainment withdraw(33 40) self business withdraw(10 99) def test_create_spend_chart_horizontal_bar(self): chart_categories = [[self business], [self business, self food], [self business, self food, self entertainment]] horizontal_lines = [\" ----\", \" -------\", \" ----------\"] for categories, expected in zip(chart_categories, horizontal_lines): actual = budget create_spend_chart(categories) split(\"\\\\n\")[12] self assertEqual(actual, expected, \"Expected different horizontal bar Check that all spacing is exact\")\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\ncreate_spend_chart chart should not have new line character at the end ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\nself business = budget Category(\"Business\")\ndef test_create_spend_chart_no_ending_new_line(self):\nself food deposit(900, \"deposit\")\nself entertainment deposit(900, \"deposit\")\nself business deposit(900, \"deposit\")\nself food withdraw(105 55)\nself entertainment withdraw(33 40)\nself business withdraw(10 99)\nactual = budget create_spend_chart([self business, self food, self entertainment])\nself assertFalse(actual endswith(\"\\\\n\"), \"Expected chart to not have new line at the end \")\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\ncreate_spend_chart chart should have each category name written vertically below the bar",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 17,
    "total_chunks": 23
  },
  {
    "id": "797b0cb4858aa53317e7d294187726bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "55) self entertainment withdraw(33 40) self business withdraw(10 99) actual = budget create_spend_chart([self business, self food, self entertainment]) self assertFalse(actual endswith(\"\\\\n\"), \"Expected chart to not have new line at the end \") `); const testCode = ` from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` create_spend_chart chart should have each category name written vertically below the barEach line should have the same length, each category should be separated by two spaces, with additional two spaces after the final category ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\nself business = budget Category(\"Business\")\nself food deposit(900, \"deposit\")\nself entertainment deposit(900, \"deposit\")\nself business deposit(900, \"deposit\")\nself food withdraw(105 55)\nself entertainment withdraw(33 40)\nself business withdraw(10 99)\ndef test_create_spend_chart_names_two_categories(self):\nchart = budget create_spend_chart([self food, self entertainment])\nactual = \"\\\\n\" join(chart split(\"\\\\n\")[13:]) rstrip(\"\\\\n\")\nexpected = \"     F  E  \\\\n     o  n  \\\\n     o  t  \\\\n     d  e  \\\\n        r  \\\\n        t  \\\\n        a  \\\\n        i  \\\\n        n  \\\\n        m  \\\\n        e  \\\\n        n  \\\\n        t  \"\nself assertEqual(actual, expected, \"Expected different category names written vertically below the bar Check that all spacing is exact \")\ndef test_create_spend_chart_names_three_categories(self):\nchart = budget create_spend_chart([self business, self food, self entertainment])\nactual = \"\\\\n\" join(chart split(\"\\\\n\")[13:])",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 18,
    "total_chunks": 23
  },
  {
    "id": "69e0a26f7b41a54d65f888079b00a595",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self entertainment]) actual = \"\\\\n\" join(chart split(\"\\\\n\")[13:]) rstrip(\"\\\\n\") expected = \" F E \\\\n o n \\\\n o t \\\\n d e \\\\n r \\\\n t \\\\n a \\\\n i \\\\n n \\\\n m \\\\n e \\\\n n \\\\n t \" self assertEqual(actual, expected, \"Expected different category names written vertically below the bar Check that all spacing is exact \") def test_create_spend_chart_names_three_categories(self): chart = budget create_spend_chart([self business, self food, self entertainment]) actual = \"\\\\n\" join(chart split(\"\\\\n\")[13:])rstrip(\"\\\\n\")\nexpected = \"     B  F  E  \\\\n     u  o  n  \\\\n     s  o  t  \\\\n     i  d  e  \\\\n     n     r  \\\\n     e     t  \\\\n     s     a  \\\\n     s     i  \\\\n           n  \\\\n           m  \\\\n           e  \\\\n           n  \\\\n           t  \"\nself assertEqual(actual, expected, \"Expected different category names written vertically below the bar Check that all spacing is exact \")\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\ncreate_spend_chart should print a different chart representation Check that all spacing is exact Open your browser console with F12 for more details ``js\n({\ntest: () => {\npyodide FS writeFile('/home/pyodide/budget py', code);\npyodide FS writeFile('/home/pyodide/test_module py',\nimport unittest\nimport budget\nfrom importlib import reload\nreload(budget)\nclass UnitTests(unittest TestCase):\nmaxDiff = None\ndef setUp(self):\nself food = budget Category(\"Food\")\nself entertainment = budget Category(\"Entertainment\")\nself business = budget Category(\"Business\")\ndef test_create_spend_chart(self):\nself food deposit(900, \"deposit\")\nself entertainment deposit(900, \"deposit\")\nself business deposit(900, \"deposit\")\nself food withdraw(105 55)\nself entertainment withdraw(33 40)\nself business withdraw(10 99)\nactual = budget create_spend_chart([self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 19,
    "total_chunks": 23
  },
  {
    "id": "c8e59399a4b484d4710f5b6371fe3fa7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "({ test: () => { pyodide FS writeFile('/home/pyodide/budget py', code); pyodide FS writeFile('/home/pyodide/test_module py', import unittest import budget from importlib import reload reload(budget) class UnitTests(unittest TestCase): maxDiff = None def setUp(self): self food = budget Category(\"Food\") self entertainment = budget Category(\"Entertainment\") self business = budget Category(\"Business\") def test_create_spend_chart(self): self food deposit(900, \"deposit\") self entertainment deposit(900, \"deposit\") self business deposit(900, \"deposit\") self food withdraw(105 55) self entertainment withdraw(33 40) self business withdraw(10 99) actual = budget create_spend_chart([selfbusiness, self food, self entertainment])\nexpected = \"Percentage spent by category\\\\n100|          \\\\n 90|          \\\\n 80|          \\\\n 70|    o     \\\\n 60|    o     \\\\n 50|    o     \\\\n 40|    o     \\\\n 30|    o     \\\\n 20|    o  o  \\\\n 10|    o  o  \\\\n  0| o  o  o  \\\\n    ----------\\\\n     B  F  E  \\\\n     u  o  n  \\\\n     s  o  t  \\\\n     i  d  e  \\\\n     n     r  \\\\n     e     t  \\\\n     s     a  \\\\n     s     i  \\\\n           n  \\\\n           m  \\\\n           e  \\\\n           n  \\\\n           t  \"\nself assertEqual(actual, expected, 'Expected different chart representation Check that all spacing is exact ')\n`);\nconst testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt result wasSuccessful()\n`;\nconst out = runPython(testCode);\nassert(out);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nclass Category:\npass\ndef create_spend_chart(categories):\npass\n```\n--solutions--\n```py\nclass Category:\ndef __init__(self, name):\nself name = name\nself ledger = []\nself balance = 0\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 20,
    "total_chunks": 23
  },
  {
    "id": "95149ce174d5ee20e46139ac7cafc227",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self assertEqual(actual, expected, 'Expected different chart representation Check that all spacing is exact ') `); const testCode = ` from unittest import main from importlib import reload import test_module reload(test_module) t = main(module='test_module', exit=False) t result wasSuccessful() `; const out = runPython(testCode); assert(out); } }) ``` --seed-- --seed-contents-- ```py class Category: pass def create_spend_chart(categories): pass ``` --solutions-- ```py class Category: def __init__(self, name): self name = name self ledger = [] self balance = 0 selfspent = 0\ndef __str__(self):\nfirst_line = f'{self name center(30, \"*\")}\\n'\nlines = ''\ntotal = f'Total: {format(self balance, \" 2f\")}'\nfor n in range(len(self ledger)):\ndescr = self ledger[n][\"description\"][:23]\nam = format(float(self ledger[n][\"amount\"]), \" 2f\")[:7]\nlines = lines + f'{descr:<23}{am:>7}\\n'\nreturn f'{first_line}{lines}{total}'\ndef deposit(self, amount, description=''):\nself ledger append({\n'amount': float(amount),\n'description': description\n})\nself balance = self balance + float(amount)\ndef withdraw(self, amount, description=''):\nif self check_funds(amount):\nself ledger append({\n'amount': -float(amount),\n'description': description\n})\nself balance = self balance - float(amount)\nself spent = self spent + float(amount)\nreturn True\nelse:\nreturn False\ndef get_balance(self):\nreturn self balance\ndef transfer(self, amount, category):\nif self check_funds(amount):\n# withdraw\nself ledger append({\n'amount': -float(amount),\n'description': f'Transfer to {category name}'\n})\nself balance = self balance - float(amount)\n# deposit\ncategory deposit(amount, f'Transfer from {self name}')\nreturn True\nelse:\nreturn False\ndef check_funds(self, amount):\nif float(amount) > self balance:\nreturn False\nelse:\nreturn True\ndef create_spend_chart(categories):\ntotal_expenses = 0\nobj = {}\ncol1 = []\nstr = []\nfinal_str = 'Percentage spent by category\\n'\nlabel_max_length = 0\nlabel_strings = []\nfor category in categories:\ntotal_expenses = total_expenses + category spent\nobj[category",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 21,
    "total_chunks": 23
  },
  {
    "id": "81f5a4dcb0e03034541ab910b9fddf84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'description': f'Transfer to {category name}' }) self balance = self balance - float(amount) # deposit category deposit(amount, f'Transfer from {self name}') return True else: return False def check_funds(self, amount): if float(amount) > self balance: return False else: return True def create_spend_chart(categories): total_expenses = 0 obj = {} col1 = [] str = [] final_str = 'Percentage spent by category\\n' label_max_length = 0 label_strings = [] for category in categories: total_expenses = total_expenses + category spent obj[categoryname] = {'expenses': category spent}\nobj[category name]['label'] = list(category name)\nif len(obj[category name]['label']) > label_max_length:\nlabel_max_length = len(obj[category name]['label'])\nfor category in categories:\nobj[category name]['percent'] = (\n(category spent / total_expenses * 100) // 10) * 10\nobj[category name]['column'] = []\nfor i in range(0, 110, 10):\nif obj[category name]['percent'] >= i:\nobj[category name]['column'] insert(0, 'o')\nelse:\nobj[category name]['column'] insert(0, ' ')\nfor i in range(0, 110, 10):\ncol1 insert(0, i)\nfor i in range(11):\nstr append(\"\")\nfor key in obj:\nstr[i] += (f'{obj[key][\"column\"][i]}  ')\nfinal_str += f'{col1[i]:>3}| {str[i]}\\n'\nfinal_str += f'    {\"-\"*(1+3*len(obj))}\\n   '\nfor i in range(label_max_length):\nlabel_strings append('  ')\nfor k in obj:\nif len(obj[k]['label']) < label_max_length:\nobj[k]['label'] extend(\nf'{\" \"*(label_max_length-len(obj[k][\"label\"]))}')\nlabel_strings[i] += f'{obj[k][\"label\"][i]}  '\nif i < label_max_length - 1:\nlabel_strings[i] += '\\n   '\nfinal_str += label_strings[i]\nprint(final_str)\nreturn (final_str)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 38881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\build-a-budget-app-project\\budget-app.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 22,
    "total_chunks": 23
  },
  {
    "id": "db180e9bb906545e6f8a26df6ca4dcda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d86fe1b8947954b9178d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6559d86fe1b8947954b9178d\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nNow it's better but you don't want to print the details about the starting node Before the print call, add an if statement to execute when node is equal to start and use the continue keyword to go to the next loop iteration --hints--\nYou should nest an if statement to check that node is equal to start inside your for loop js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s*:\\s*^\\1\\1if\\s+(node\\s*==\\s*start|start\\s*==\\s*node)\\s*:/m));\n}\n})\nYou should use the continue keyword to go to the next iteration inside your new if statement ```js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s:\\s^\\1\\1if\\s+(node\\s==\\sstart|start\\s==\\snode)\\s:\\s^\\1\\1\\1continue/m));\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d86fe1b8947954b9178d.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "40beffa70362312b4e4b738f873fdfdf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d86fe1b8947954b9178d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"shortest_path\"); const {function_body} = shortest; assert(function_body match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s:\\s^\\1\\1if\\s+(node\\s==\\sstart|start\\s==\\snode)\\s:\\s^\\1\\1\\1continue/m)); } }) ``` --seed-- --seed-contents-- ```py my_graph = { 'A': [('B', 3), ('D', 1)], 'B': [('A', 3), ('C', 4)], 'C': [('B', 4), ('D', 7)], 'D': [('A', 1), ('C', 7)] } def shortest_path(graph, start, target = ''): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distancesget)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\n--fcc-editable-region--\ntargets_to_print = [target] if target else graph\nfor node in targets_to_print:\nprint(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \" join(paths[node])}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2341,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d86fe1b8947954b9178d.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7c54cd850b5feb9dae583c67fb280729",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d70c5161b16ff1d6530d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6559d70c5161b16ff1d6530d\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nPython provides a concise way to write if/else conditionals by using the ternary syntax:\npy\nval_1 if condition else val_2\nThe expression above evaluates to val_1 if condition is true, otherwise to val_2 Delete your print call and create a variable called targets_to_print after your while loop Use the ternary syntax to assign it [target] when target is truthy, and graph otherwise --hints--\nYou should delete your print call js\n({ test: () => assert isFalse( /print\\s*\\(\\s*f(\"|')Unvisited:\\s*\\{\\s*unvisited\\s*\\}\\\\nDistances:\\s\\{\\s*distances\\s*\\}\\\\nPaths:\\s\\{\\s*paths\\s*\\}\\1\\s*\\)/ test(code)) })\nYou should create a variable called targets_to_print after your while loop js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/unvisited\\ remove\\(\\s*current\\s*\\) *^\\s{4}targets_to_print\\s*=/ms));\n}\n})\nYou should use the ternary syntax to assign [target] when target is truthy, and graph otherwise to your targets_to_print variable js\n({ test: () =>  {\nconst shortest = __helpers python getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body match(/unvisited\\ remove\\(\\s*current\\s*\\)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2610,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d70c5161b16ff1d6530d.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "60d38245631f1d96ca567f3ff8b556b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d70c5161b16ff1d6530d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "test(code)) }) You should create a variable called targets_to_print after your while loop js ({ test: () => { const shortest = __helpers python getDef(code, \"shortest_path\"); const {function_body} = shortest; assert(function_body match(/unvisited\\ remove\\(\\s*current\\s*\\) *^\\s{4}targets_to_print\\s*=/ms)); } }) You should use the ternary syntax to assign [target] when target is truthy, and graph otherwise to your targets_to_print variable js ({ test: () => { const shortest = __helpers python getDef(code, \"shortest_path\"); const {function_body} = shortest; assert(function_body match(/unvisited\\ remove\\(\\s*current\\s*\\)*^\\s{4}targets_to_print\\s*=\\s*\\[\\s*target\\s*\\]\\s+if\\s+target\\s+else\\s+graph/ms));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2610,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559d70c5161b16ff1d6530d.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0b6c6cf87f21a9e66a39d39712615152",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6566195b0a021bb660b2b4b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6566195b0a021bb660b2b4b1\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nNow modify my_graph['B'] into a list of tuples, where the first element in the tuple is the connected node, and the second element is the distance. The B-C distance is 4.\n--hints--\nmy_graph['B'] should be a list containing the tuples ('A', 3) and ('C', 4).\njs\n({ test: () => assert(runPython(`\ntuples = [(\"A\", 3), (\"C\", 4)]\nlen(my_graph[\"B\"]) == 2 and all(t in my_graph[\"B\"] for t in tuples)\n`))\n})\nmy_graph should have 4 keys named 'A', 'B', 'C', and 'D'.\njs\n({ test: () => assert(runPython(`\nkey_list = [\"A\", \"B\", \"C\", \"D\"]\nlen(my_graph) == 4 and all(key in my_graph for key in key_list)\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': ['A', 'C'],\n--fcc-editable-region--\n'C': ['B', 'D'],\n'D': ['A', 'C']\n}\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6566195b0a021bb660b2b4b1.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d47537d2c649f5e68214c953ea66aa67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da1b7d75f088f5e6b89f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6559da1b7d75f088f5e6b89f\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nFinally, at the very end of your function, return distances, paths.\n--hints--\nYou should return distances, paths at the bottom of your function.\njs\n({ test: () =>  {\nconst shortest = __helpers.python.getDef(code, \"shortest_path\");\nconst {function_body} = shortest;\nassert(function_body.match(/^\\s{4}return\\s+distances\\s*,\\s*paths/m));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node].extend(paths[current])\npaths[node].append(node)\nunvisited.remove(current)\n--fcc-editable-region--\ntargets_to_print = [target] if target else graph\nfor node in targets_to_print:\nif node == start:\ncontinue\nprint(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da1b7d75f088f5e6b89f.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b6ccd27da643ab5b8e09105b8accb2ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65661b72d6745ebec6a96923.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65661b72d6745ebec6a96923\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nIn the same way, modify the remaining two lists considering that the C-D distance is 7 --hints--\nmy_graph['C'] should be a list containing the tuples ('B', 4) and ('D', 7) js\n({ test: () => assert(runPython(`\ntuples = [(\"B\", 4), (\"D\", 7)]\nlen(my_graph[\"C\"]) == 2 and all(t in my_graph[\"C\"] for t in tuples)\n`))\n})\nmy_graph['D'] should be a list containing the tuples ('A', 1) and ('C', 7) js\n({ test: () => assert(runPython(`\ntuples = [(\"A\", 1), (\"C\", 7)]\nlen(my_graph[\"D\"]) == 2 and all(t in my_graph[\"D\"] for t in tuples)\n`))\n})\nmy_graph should have 4 keys named 'A', 'B', 'C', and 'D' js\n({ test: () => assert(runPython(`\nkey_list = [\"A\", \"B\", \"C\", \"D\"]\nlen(my_graph) == 4 and all(key in my_graph for key in key_list)\n`))\n})\nmy_graph['A'] should be a list containing the tuples ('B', 3) and ('D', 1) js\n({ test: () => assert(runPython(`\ntuples = [(\"B\", 3), (\"D\", 1)]\nlen(my_graph[\"A\"]) == 2 and all(t in my_graph[\"A\"] for t in tuples)\n`))\n})\nmy_graph['B'] should be a list containing the tuples ('A', 3) and ('C', 4)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1626,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65661b72d6745ebec6a96923.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ba9f09da175a5d5a4614dd9575c55080",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65661b72d6745ebec6a96923.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js ({ test: () => assert(runPython(` key_list = [\"A\", \"B\", \"C\", \"D\"] len(my_graph) == 4 and all(key in my_graph for key in key_list) `)) }) my_graph['A'] should be a list containing the tuples ('B', 3) and ('D', 1) js ({ test: () => assert(runPython(` tuples = [(\"B\", 3), (\"D\", 1)] len(my_graph[\"A\"]) == 2 and all(t in my_graph[\"A\"] for t in tuples) `)) }) my_graph['B'] should be a list containing the tuples ('A', 3) and ('C', 4)js\n({ test: () => assert(runPython(`\ntuples = [(\"A\", 3), (\"C\", 4)]\nlen(my_graph[\"B\"]) == 2 and all(t in my_graph[\"B\"] for t in tuples)\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': ['B', 'D'],\n'D': ['A', 'C']\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1626,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65661b72d6745ebec6a96923.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6aebc130fe9ba1893aa3bd55cc22a224",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6567722f53ad97d7ea6bb082.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6567722f53ad97d7ea6bb082\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nNow uncomment your function call.\n--hints--\nYou should restore your shortest_path(my_graph, 'A') call.\njs\n({ test: () => assert.match(code, /^shortest_path\\s*\\(\\s*my_graph\\s*,\\s*(\"|')A\\1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\n--fcc-editable-region--\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current]\nelse:\npaths[node].extend(paths[current])\npaths[node].append(node)\nunvisited.remove(current)\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1397,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6567722f53ad97d7ea6bb082.md",
      "source_type": "git_repo"
    },
    "token_count": 355,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b59da82dde344d6102650a006ef2c9f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65789506b30453080f77470c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65789506b30453080f77470c\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nSo far, you have already met different data types:\nImmutable data types, such as integers, strings, tuples, and Booleans.\nMutable data types, such as lists, and dictionaries.\nA dictionary is identified by a pair of curly braces, {}.\nStart by creating a variable called copper and assign it an empty dictionary using a pair of curly braces, in the same way you would create an empty list with a pair of square brackets.\n--hints--\nYou should have a variable called copper.\njs\n({ test: () => assert(__userGlobals.has(\"copper\")) })\nYour copper variable should have the value of an empty dictionary. Use a pair of curly braces for that.\njs\n({ test: () => assert(runPython(`\ncopper == {}\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 933,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65789506b30453080f77470c.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c90c3afb1d992f874d88bd17e0baaa1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\657891ab9c1903f4e55433ba.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657891ab9c1903f4e55433ba\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nWhen the condition of your new if is true, a shorter path to the neighbor node has been found.\nInside your new if block, delete pass and reassign the neighbor node distance to the sum of the neighbor node distance plus the distance of current.\n--hints--\nYou should assign distance + distances[current] to distances[node] inside your new if.\njs\n({ test: () =>  {\nconst commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+distance\\s*\\+\\s*distances\\s*\\[\\s*current\\s*\\]\\s*<\\s*distances\\s*\\[\\s*node\\s*\\]\\s*/);\nassert(block_body.match(/^\\s+distances\\s*\\[\\s*node\\s*\\]\\s*=\\s*distance\\s*\\+\\s*distances\\s*\\[\\s*current\\s*\\]/));\n}\n})\n--seed--\n--seed-contents--\n```py\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start].append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances.get)\nfor node, distance in graph[current]:\n--fcc-editable-region--\nif distance + distances[current] < distances[node]:\npass\n--fcc-editable-region--\nprint(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\657891ab9c1903f4e55433ba.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "39436ef249606979caa965cb9ab6c430",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6578b13757611e2825beb8a5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6578b13757611e2825beb8a5\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nKeys must be unique within a dictionary and they can be only immutable data types. This means you cannot use a list or another dictionary as keys.\nAdd another key 'age' to your dictionary and give it the integer number 2 as value.\n--hints--\nYou should have an 'age' key with the value 2 just after 'species': 'guinea pig', inside your copper dictionary. Don't forget the comma.\njs\n({ test: () => assert(runPython(`\ncopper == {\"species\": \"guinea pig\", \"age\": 2}\n`))\n})\nYou should have two key-value pairs in your copper dictionary.\njs\n({ test: () => assert(runPython(`\nlen(copper) == 2\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ncopper = {'species': 'guinea pig'}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 876,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6578b13757611e2825beb8a5.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d4771244cd20477e28e95868de92631",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65796fac81f983127558f3f4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65796fac81f983127558f3f4\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nNow, modify your existing print() call to print the value of the age key.\n--hints--\nYou should use copper['age'] to access the value of the age key.\njs\n({ test: () => assert.match(code, /copper\\s*\\[\\s*(\"|')age\\1\\s*\\]/) })\nYou should call print() passing copper['age'] as argument.\njs\n({ test: () => assert.match(code, /^print\\(\\s*copper\\s*\\[\\s*(\"|')age\\1\\s*\\]\\s*\\)/m) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\nprint(copper['species'])\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 686,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65796fac81f983127558f3f4.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "570dc9526e63d00522e860f5e56f9000",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6578b57361f2f132a02e2a18.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6578b57361f2f132a02e2a18\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nYou can access the data stored in a dictionary through its keys:\n```py\nmy_dict = {\n'name': 'Michael',\n'occupation': 'Lumberjack'\n}\nmy_dict['name'] # 'Michael'\n```\nAfter your dictionary, follow the example above to access the 'species' key of copper and print the result.\n--hints--\nYou should not modify the assignment of your dictionary.\njs\n({ test: () => assert(runPython(`\ncopper == {\"species\": \"guinea pig\", \"age\": 2}\n`))\n})\nYou should use copper['species'] to access the value of the 'species' key.\njs\n({ test: () => assert.match(code, /copper\\s*\\[\\s*(\"|')species\\1\\s*\\]/) })\nYou should call print() passing copper['species'] as argument.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*copper\\s*\\[\\s*(\"|')species\\1\\s*\\]\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6578b57361f2f132a02e2a18.md",
      "source_type": "git_repo"
    },
    "token_count": 294,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f2c08322efd12403259b89e70de1fd9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65774ae7c3eee66fe79b9459.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65774ae7c3eee66fe79b9459\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nNow, you are going to test your function with another graph Change my_graph into the following graph:\npy\n{\n'A': [('B', 5), ('C', 3), ('E', 11)],\n'B': [('A', 5), ('C', 1), ('F', 2)],\n'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n'D': [('C', 1), ('E', 9), ('F', 3)],\n'E': [('A', 11), ('C', 5), ('D', 9)],\n'F': [('B', 2), ('D', 3)]\n}\n--hints--\nYou should modify my_graph into the provided graph ``js\n({ test: () => assert(runPython(\ng = {\n'A': [('B', 5), ('C', 3), ('E', 11)],\n'B': [('A', 5), ('C', 1), ('F', 2)],\n'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n'D': [('C',1 ), ('E', 9), ('F', 3)],\n'E': [('A', 11), ('C', 5), ('D', 9)],\n'F': [('B', 2), ('D', 3)]\n}\nmy_graph == g\n`))\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 3), ('D', 1)],\n'B': [('A', 3), ('C', 4)],\n'C': [('B', 4), ('D', 7)],\n'D': [('A', 1), ('C', 7)]\n}\n--fcc-editable-region--\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2176,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65774ae7c3eee66fe79b9459.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3b4d75629961544b2f47702c00e67d41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65774ae7c3eee66fe79b9459.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3)] } my_graph == g `)) }) ``` --seed-- --seed-contents-- ```py --fcc-editable-region-- my_graph = { 'A': [('B', 3), ('D', 1)], 'B': [('A', 3), ('C', 4)], 'C': [('B', 4), ('D', 7)], 'D': [('A', 1), ('C', 7)] } --fcc-editable-region-- def shortest_path(graph, start, target = ''): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distancesget)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\ntargets_to_print = [target] if target else graph\nfor node in targets_to_print:\nif node == start:\ncontinue\nprint(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \" join(paths[node])}')\nreturn distances, paths\nshortest_path(my_graph, 'A')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2176,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65774ae7c3eee66fe79b9459.md",
      "source_type": "git_repo"
    },
    "token_count": 307,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "58fe2c3214fe117d4d2768b6a24a5cfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da93115de78dbbdc7ba3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6559da93115de78dbbdc7ba3\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nAs a final step, modify your function call passing 'F' as the third argument to print only the path from A to F With that, the shortest path algorithm is complete --hints--\nYou should call shortest_path passing my_graph, 'A' and 'F' as the arguments js\n({ test: () => assert match(code, /^shortest_path\\s*\\(\\s*my_graph\\s*,\\s*(\"|')A\\1\\s*,\\s*(\"|')F\\2\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_graph = {\n'A': [('B', 5), ('C', 3), ('E', 11)],\n'B': [('A', 5), ('C', 1), ('F', 2)],\n'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n'D': [('C',1 ), ('E', 9), ('F', 3)],\n'E': [('A', 11), ('C', 5), ('D', 9)],\n'F': [('B', 2), ('D', 3)]\n}\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited remove(current)\ntargets_to_print = [target] if target else graph\nfor node in targets_to_print:\nif node == start:\ncontinue\nprint(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da93115de78dbbdc7ba3.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eb8710cc33785fef953d89db6750269d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da93115de78dbbdc7ba3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distances get) for node, distance in graph[current]: if distance + distances[current] < distances[node]: distances[node] = distance + distances[current] if paths[node] and paths[node][-1] == node: paths[node] = paths[current][:] else: paths[node] extend(paths[current]) paths[node] append(node) unvisited remove(current) targets_to_print = [target] if target else graph for node in targets_to_print: if node == start: continue print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \"join(paths[node])}')\nreturn distances, paths\nshortest_path(my_graph, 'A')\n--fcc-editable-region--\n```\n--solutions--\n```py\nmy_graph = {\n'A': [('B', 5), ('C', 3), ('E', 11)],\n'B': [('A', 5), ('C', 1), ('F', 2)],\n'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n'D': [('C',1 ), ('E', 9), ('F', 3)],\n'E': [('A', 11), ('C', 5), ('D', 9)],\n'F': [('B', 2), ('D', 3)]\n}\ndef shortest_path(graph, start, target = ''):\nunvisited = list(graph)\ndistances = {node: 0 if node == start else float('inf') for node in graph}\npaths = {node: [] for node in graph}\npaths[start] append(start)\nwhile unvisited:\ncurrent = min(unvisited, key=distances get)\nfor node, distance in graph[current]:\nif distance + distances[current] < distances[node]:\ndistances[node] = distance + distances[current]\nif paths[node] and paths[node][-1] == node:\npaths[node] = paths[current][:]\nelse:\npaths[node] extend(paths[current])\npaths[node] append(node)\nunvisited",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da93115de78dbbdc7ba3.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e7f217a32a8930386605d500eb69e927",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da93115de78dbbdc7ba3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[('B', 2), ('D', 3)] } def shortest_path(graph, start, target = ''): unvisited = list(graph) distances = {node: 0 if node == start else float('inf') for node in graph} paths = {node: [] for node in graph} paths[start] append(start) while unvisited: current = min(unvisited, key=distances get) for node, distance in graph[current]: if distance + distances[current] < distances[node]: distances[node] = distance + distances[current] if paths[node] and paths[node][-1] == node: paths[node] = paths[current][:] else: paths[node] extend(paths[current]) paths[node] append(node) unvisitedremove(current)\ntargets_to_print = [target] if target else graph\nfor node in targets_to_print:\nif node == start:\ncontinue\nprint(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \" join(paths[node])}')\nreturn distances, paths\nshortest_path(my_graph, 'A', 'F')\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3241,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6559da93115de78dbbdc7ba3.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b11a4407b2bf9342fe7f890e44179031",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579717f0920131304286804.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6579717f0920131304286804\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nTo add a new key-value pair after declaring a dictionary, you can indicate the key in the same way you would access an existing key, and set the value of the new key by using the assignment operator:\n```py\nmy_dict = {\n'name': 'Michael',\n'occupation': 'Lumberjack'\n}\nmy_dict['country'] = 'Canada'\n```\nDelete your print() call. Then, after the copper declaration, add the key 'food' to your dictionary and set its value to 'hay'.\n--hints--\nYou should not have print(copper['age']) in your code.\njs\n({ test: () => assert.notMatch(code, /^print\\(\\s*copper\\s*\\[\\s*(\"|')age\\1\\s*\\]\\s*\\)/m) })\nYou should add the key 'food' to copper after declaring the dictionary.\njs\n({ test: () => assert.match(code, /copper\\s*\\[\\s*(\"|')food\\1\\s*\\]/) })\nYou should set copper['food'] to 'hay' after declaring the dictionary.\njs\n({ test: () => assert.match(code, /^copper\\s*\\[\\s*(\"|')food\\1\\s*\\]\\s*=\\s*(\"|')hay\\2/m) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\nprint(copper['age'])\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1232,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579717f0920131304286804.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35b4f484e7979a63bfc39312ed98b223",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65797670e0c0d016f17e7660.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65797670e0c0d016f17e7660\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nNow, at the bottom of your code, print copper.\n--hints--\nYou should print copper at the bottom of your code.\n```js\n({ test: () =>\n{\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /print\\s(\\scopper\\s)\\s$/)\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 570,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65797670e0c0d016f17e7660.md",
      "source_type": "git_repo"
    },
    "token_count": 161,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b172814fdbab011a5064843287e75647",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579cd5f6dd62c189e53ddbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6579cd5f6dd62c189e53ddbb\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nNow that you reviewed the basic aspects of dictionaries, you can proceed to build the shortest path algorithm.\nDelete every line of code after the declaration of the copper dictionary.\n--hints--\nYou should delete all the lines of code after the declaration of your dictionary.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.isFalse( /copper\\s*\\[.*?\\]|del|for|print\\s*\\(.*?\\)/ms.test(commentless_code))\n}\n})\n--seed--\n--seed-contents--\n```py\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\n--fcc-editable-region--\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\ndel copper['age']\nfor i, j in copper.items():\nprint(i, j)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 858,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579cd5f6dd62c189e53ddbb.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c33ec0e55e48a21920331c6375594fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579cbab9825b8170974c69a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6579cbab9825b8170974c69a\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nYou can remove a key-value pair from a dictionary by using the del keyword:\n```py\nmy_dict = {\n'name': 'Michael',\n'occupation': 'Lumberjack'\n}\ndel my_dict['occupation']\n```\nJust before your for loop, use the del keyword to delete the 'age' key and its value from copper.\n--hints--\nYou should use the del keyword to delete copper['age'] before the for loop.\njs\n({ test: () => assert.match(code, /^del\\s+copper\\s*\\[\\s*(\"|')age\\1\\s*\\].*^for\\s*/ms) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\nfor i, j in copper.items():\nprint(i, j)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 850,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579cbab9825b8170974c69a.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40727b3dad5fd39c326e59a3211ec5a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579ca0923cfa7162089d2f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6579ca0923cfa7162089d2f0\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nThe same syntax can be used to change the value of an existing key.\nJust before the print() call, access the 'species' key and reassign its value to 'Cavia porcellus'.\n--hints--\nYou should reassign the copper['species'] to the string 'Cavia porcellus' before the print() call.\njs\n({ test: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^copper\\s*\\[\\s*(\"|')species\\1\\s*\\]\\s*=\\s*(\"|')Cavia porcellus\\2\\s+^print\\s*\\(\\s*copper\\s*\\)/m)\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\nprint(copper)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 822,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579ca0923cfa7162089d2f0.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce451c8362074f65d4010044bcc763fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7cd2b7bd9a684ccf1dc16.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65b7cd2b7bd9a684ccf1dc16\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nTo iterate over the keys of a dictionary, you can simply put the dictionary into a for loop. The code below would print each key in the dictionary dict:\npy\nfor i in dict:\nprint(i)\nReplace the print() call with a for loop that iterates over copper and prints each key.\n--hints--\nYou should not have print(copper) in your code.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).has_call(\"print(copper)\")`)) })\nYou should create a for loop to iterate over the copper dictionary.\njs\n({ test: () => assert(runPython(`_Node(_code).find_for_loops()[0].find_for_iter().is_equivalent(\"copper\")`)) })\nYou should print each key of the copper inside your for loop.\njs\n({ test: () => assert(runPython(`\nvar = _Node(_code).find_for_loops()[0].find_for_vars()\n_Node(_code).find_for_loops()[0].find_bodies()[0].is_equivalent(f\"print({var})\")\n`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\nprint(copper)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7cd2b7bd9a684ccf1dc16.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d2b6a76b3b7a4df3b8495373c1a909c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579dd49fa8a8e1fd06b85a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6579dd49fa8a8e1fd06b85a9\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nGraphs are data structures representing relations between pairs of elements.\nThese elements, called nodes, can be real-life objects, entities, points in space or others. The connections between the nodes are called the edges.\nHere's a visual representation of a graph:\nRename the copper dictionary into my_graph. This will represent the graph to test your algorithm.\n--hints--\nYou should rename your copper dictionary into my_graph.\njs\n({ test: () => assert(__userGlobals.has(\"my_graph\")) })\nYour my_graph variable should be a dictionary.\njs\n({ test: () => assert(runPython(`\ntype(my_graph) is dict\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\6579dd49fa8a8e1fd06b85a9.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cf548e9afd5e95248f2593353c706bc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65affe602a2a828b0382a058.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65affe602a2a828b0382a058\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nReplace the 'age' key with the string 'B' and set its value to the string 'A' to represent the connection between the nodes in both directions.\n--hints--\nYour dictionary should have a 'B' key.\njs\n({ test: () => assert(runPython(`\n\"B\" in my_graph\n`))\n})\nYour 'B' key should have 'A' as the value.\njs\n({ test: () => assert(runPython(`\nmy_graph[\"B\"] == \"A\"\n`))\n})\nYour dictionary should have an 'A' key.\njs\n({ test: () => assert(runPython(`\n\"A\" in my_graph\n`))\n})\nYour 'A' key should have 'B' as the value.\njs\n({ test: () => assert(runPython(`\nmy_graph[\"A\"] == \"B\"\n`))\n})\nYour dictionary should have two keys.\njs\n({ test: () => assert(runPython(`\nlen(my_graph) == 2\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_graph = {\n'A': 'B',\n'age': 2\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65affe602a2a828b0382a058.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cab803a1c2bf2b8d2b61555cdc995bcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7d25992879698180e6a71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65b7d25992879698180e6a71\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nFinally, if you want to be able to go through the key-value pairs, you can use the .items() method.\nModify your for loop to iterate over copper.items() instead of copper.values().\n--hints--\nYou should mmodify your for loop to iterate over copper.items() instead of copper.values().\njs\n({ test: () => assert(runPython(`_Node(_code).find_for_loops()[0].find_for_iter().is_equivalent(\"copper.items()\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\nfor i in copper.values():\nprint(i)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 791,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7d25992879698180e6a71.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "333a2b92caf06d0c65dc6edff4c70e37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7cf140d34058d7ea8935f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65b7cf140d34058d7ea8935f\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nIf you want to iterate over the values of the dictionary keys, one way is to use the .values() method.\nModify your for loop to iterate over copper.values() instead of copper and look at the output.\n--hints--\nYou should modify your for loop to iterate over copper.values() instead of copper.\njs\n({ test: () => assert(runPython(`_Node(_code).find_for_loops()[0].find_for_iter().is_equivalent(\"copper.values()\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\nfor i in copper:\nprint(i)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7cf140d34058d7ea8935f.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7dcc2506e7563fab5f0651f817b3f3c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069167b3307b2f4067b22b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66069167b3307b2f4067b22b\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nA new instance of a class is created by using the function notation, which involves appending a pair of parentheses to the class name.\nOutside the class definition, create an instance of the Board class and assign it to a variable named gameboard.\n--hints--\nYou should declare a variable gameboard outside the Board class.\njs\n({ test: () => assert(runPython(`_Node(_code).has_variable(\"gameboard\")`)) })\nYour gameboard variable should have the value of Board().\njs\n({ test: () => assert(runPython(`_Node(_code).find_variable(\"gameboard\").is_equivalent(\"gameboard = Board()\")`)) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass Board:\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 838,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069167b3307b2f4067b22b.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87f6b929f6dcae9a6b0fbe7ba57693cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7d3319ebec69b983fb91b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65b7d3319ebec69b983fb91b\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nAs you can see from the output, .items() creates a data structure that stores each key-value pair in a distinct tuple. To iterate over the elements in those tuples you can add a second loop variable:\npy\nfor i, j in dict.items():\nprint(i, j)\nModify your for loop to take two loop variables and print both of them inside the loop body.\n--hints--\nYou should modify your for loop to use two variables.\njs\n({ test: () => assert(runPython(`\nimport ast\nvar = _Node(_code).find_for_loops()[0].find_for_vars()\nisinstance(var.tree, ast.Tuple)\n`)) })\nYou should print both loop variables inside your for loop.\njs\n({ test: () => assert(runPython(`\nvar = _Node(_code).find_for_loops()[0].find_for_vars()\n_Node(_code).find_for_loops()[0].find_bodies()[0].is_equivalent(f\"print{var}\")\n`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ncopper = {\n'species': 'guinea pig',\n'age': 2\n}\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\nfor i in copper.items():\nprint(i)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1177,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-algorithm-design-by-building-a-shortest-path-algorithm\\65b7d3319ebec69b983fb91b.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5ca4bf2e33d2666a14646771ffb494a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66068fb0bfddba2b7977eb60.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66068fb0bfddba2b7977eb60\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you will learn about classes and objects by building a sudoku puzzle solver.\nIn Python, a class is a blueprint for creating objects. Objects created from a class are instances of that class. You can create a class using this syntax:\npy\nclass ClassName:\npass\nWhere class is the keyword required to define the class and ClassName is the name of the class, written by convention in PascalCase.\nBegin by creating a Board class.\n--hints--\nYou should create a class named Board.\njs\n({ test: () => assert(runPython(`_Node(_code).has_class(\"Board\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 803,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66068fb0bfddba2b7977eb60.md",
      "source_type": "git_repo"
    },
    "token_count": 189,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3c615e0e4026be6a37694605f5e4860d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606933d6813a8308c962dd1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606933d6813a8308c962dd1\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nIn order to be an instance method, a method requires a special parameter, named self by convention. This parameter is a reference to the instance of the class and must always be the first parameter.\nAdd a self parameter to your spam method.\n--hints--\nYour spam method should have a self parameter.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"spam\").has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef spam():\npass\ngameboard = Board()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 703,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606933d6813a8308c962dd1.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ac3e9dbc4ce1be7f080e39a8973a28f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660699119472f332798860ad.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660699119472f332798860ad\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nNow, replace pass with a print call and pass it the string 'Spam!'.\n--hints--\nYou should delete pass and print the string 'Spam!' within the spam method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"spam\").find_body().is_equivalent(\"print('Spam!')\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef spam(self):\npass\ngameboard = Board()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 591,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660699119472f332798860ad.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "81ea1b477b751e39b502ce09ca0813eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606927d010be4300a4e5330.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606927d010be4300a4e5330\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nThe instantiation creates an empty object. But classes can have methods, which are like local functions for each instance. Within a class, methods are declared as follows:\npy\nclass ClassName:\ndef method_name():\npass\nInside the Board class, replace pass with an empty method spam.\n--hints--\nYou should define a method named spam inside the Board class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").has_function(\"spam\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\npass\ngameboard = Board()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 739,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606927d010be4300a4e5330.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f747e039267023026566b3faa61838a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069b0b36053733a2f012fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66069b0b36053733a2f012fe\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nNow, delete your spam call.\n--hints--\nYou should not have gameboard.spam() in your code.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).has_call(\"gameboard.spam()\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef spam(self):\nprint('Spam!')\ngameboard = Board()\ngameboard.spam()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 496,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069b0b36053733a2f012fe.md",
      "source_type": "git_repo"
    },
    "token_count": 139,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e3a6822bc890347e02d0b8dfffa24e49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660699aabc59c532f2d556e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660699aabc59c532f2d556e5\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nTo call an instance method, you need to use dot notation:\npy\ninstance_name.method_name()\nWhere instance_name is the instance or object, and method_name is the method you want to call.\nCall the spam method of the gameboard object.\n--hints--\nYou should call the spam method of the gameboard object with gameboard.spam().\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"gameboard.spam()\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef spam(self):\nprint('Spam!')\ngameboard = Board()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660699aabc59c532f2d556e5.md",
      "source_type": "git_repo"
    },
    "token_count": 179,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9bc6eddcd1dea1c6817530f4b9fd07c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069b992c1c5e3451f3deb0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66069b992c1c5e3451f3deb0\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nThe instantiation creates an empty object. The __init__ method is a special method that allows you to instantiate an object to a customized state. When a class implements an __init__ method, __init__ is automatically called upon instantiation.\nInside your Board class, delete the spam method and replace it with an __init__ method that includes a self parameter.\n--hints--\nYou should not have a spam method in your Board class.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).find_class(\"Board\").has_function(\"spam\")`)) })\nYou should define an __init__ method in your Board class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").has_function(\"__init__\")`)) })\nYour __init__ method should have a self parameter.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"__init__\").has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef spam(self):\nprint('Spam!')\ngameboard = Board()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069b992c1c5e3451f3deb0.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6022023a00c6e6c0b0316ebd48cc3619",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069e5759b800364707988e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66069e5759b800364707988e\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nGoing back to the __init__ method, it requires an additional parameter representing the puzzle to solve.\nAdd a second parameter named board to the __init__ method and fix the instantiation of gameboard by passing it the puzzle list as you would pass an argument to a function call.\n--hints--\nYour __init__ method should have two parameters in the order: self, and board.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"__init__\").has_args(\"self, board\")`)) })\nYour gameboard variable should have the value of Board(puzzle).\njs\n({ test: () => assert(runPython(`_Node(_code).find_variable(\"gameboard\").is_equivalent(\"gameboard = Board(puzzle)\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef init(self):\npass\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1294,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069e5759b800364707988e.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ebc6eed6f555ba8ddb6e02d226ee2d1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069f86f58f85371d47123e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66069f86f58f85371d47123e\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nAn attribute is a variable associated with an object, which is used to store data as regular variables.\nInside the __init__ method, assign the board parameter (which is passed when creating an instance of the Board class) to an instance attribute board using self.board.\nself.board refers to the board attribute of the instance of the class. It's a variable that belongs to the object created from the Board class.\n--hints--\nYou should delete pass and assign the board parameter to self.board inside the __init__ method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"__init__\").find_body().is_equivalent(\"self.board = board\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef init(self, board):\npass\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069f86f58f85371d47123e.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ed149434dfabac789810a51c1af168fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a219f9efbf38ad496f67.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606a219f9efbf38ad496f67\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nYou can also use dot notation to access an instance attribute.\nOutside the Board class, after initializing the gameboard object, use gameboard.board to access the board attribute of your gameboard object and print the result to the screen.\n--hints--\nYou should print gameboard.board.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(gameboard.board)\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef init(self, board):\nself.board = board\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a219f9efbf38ad496f67.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "faec60132ccd5f61f66858619bf1e687",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a2f8a6a36f39518e0439.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606a2f8a6a36f39518e0439\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nAs you can see, the board is printed on the screen. Now, delete your print call.\n--hints--\nYou should not have print(gameboard.board) in your code.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).has_call(\"print(gameboard.board)\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef init(self, board):\nself.board = board\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\nprint(gameboard.board)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 878,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a2f8a6a36f39518e0439.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "33df25af336dce70f53a7d39618f121b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069d65162e61357c793e0c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66069d65162e61357c793e0c\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nThe sudoku puzzle to solve will be a list of lists, as the following:\npy\n[\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\nNote that the empty cells are filled with a zero Declare a puzzle variable and assign it the list of lists in the example above --hints--\nYou should declare a variable puzzle and assign it the provided 2D-list js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"puzzle\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069d65162e61357c793e0c.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bdcddfe2f545c62cc6a12c140a28a347",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069d65162e61357c793e0c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5] ] Note that the empty cells are filled with a zero Declare a puzzle variable and assign it the list of lists in the example above --hints-- You should declare a variable puzzle and assign it the provided 2D-list js ({ test: () => assert(runPython(`_Node(_code) find_variable(\"puzzle\")is_equivalent(\"puzzle = [[0, 0, 2, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 3, 7, 6, 2], [4, 3, 0, 0, 0, 0, 8, 0, 0], [0, 5, 0, 0, 3, 0, 0, 9, 0], [0, 4, 0, 0, 0, 0, 0, 2, 6], [0, 0, 0, 4, 6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5]]\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self):\npass\n--fcc-editable-region--\n--fcc-editable-region--\ngameboard = Board()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\66069d65162e61357c793e0c.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a5091a8de14c57575398095058e0ecd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a3ccb1eea93a23c066bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606a3ccb1eea93a23c066bf\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nNow you'll work on a method that finds the empty cells in the sudoku board.\nWithin the Board class, create an empty method named find_empty_cell and give it a self parameter.\n--hints--\nYou should define a method named find_empty_cell inside your Board class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").has_function(\"find_empty_cell\")`)) })\nYour find_empty_cell method should have a parameter self.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"find_empty_cell\").has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nclass Board:\ndef init(self, board):\nself.board = board\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a3ccb1eea93a23c066bf.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "38b51ff5c4f1c789b6c74638e02efa9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b0d602d1e33e81bcef0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606b0d602d1e33e81bcef0d\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nYou need to locate the empty cell, which is filled with the number zero.\nReplace pass with a variable col and assign it a call to .index() on contents, passing 0 as the argument.\n--hints--\nYou should replace pass with a variable col and assign it contents.index(0).\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"find_empty_cell\").find_for_loops()[0].find_bodies()[0].is_equivalent(\"col = contents.index(0)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b0d602d1e33e81bcef0d.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "233270717ccec62094fec1a598c9d89a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b63c0fd55e4314d2ec85.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606b63c0fd55e4314d2ec85\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nIf 0 is found, the method should immediately return a tuple containing the row index and column index of the empty cell.\nInside the try block, after the assignment of col, return row, col.\n--hints--\nYou should return row, col from the try block.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"find_empty_cell\").find_for_loops()[0].find_bodies()[0].is_equivalent(\"try:\\\\n  col = contents.index(0)\\\\n  return row, col\\\\nexcept:\\\\n  pass\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nexcept:\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b63c0fd55e4314d2ec85.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "26de54141434162b462638adbd305156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a4641ec48b3a9fe8c2fc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606a4641ec48b3a9fe8c2fc\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nThe enumerate built-in function takes an iterable as its argument and returns an enumerate object you can iterate over It provides the count (which by default starts at zero) and the value from the iterable py\niterable = ['a', 'b', 'c']\nfor i, j in enumerate(iterable):\nprint(i, j)\nThe loop from the example above would output the tuples 0, a, 1, b, and 2, c Inside the find_empty_cell method, replace pass with a for loop that uses the enumerate() function to iterate over each row in the sudoku board Use row as the index of the current row and contents for the elements of the current row --hints--\nYou should replace pass with a for loop that iterates over enumerate(self board) Use row and contents as the loop variables js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"find_empty_cell\") find_body() is_equivalent(\"for row, contents in enumerate(self board):\\\\n  pass\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1616,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a4641ec48b3a9fe8c2fc.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9acbee398410c6b5cf8371dc0b5b7370",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a4641ec48b3a9fe8c2fc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "function to iterate over each row in the sudoku board Use row as the index of the current row and contents for the elements of the current row --hints-- You should replace pass with a for loop that iterates over enumerate(self board) Use row and contents as the loop variables js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"find_empty_cell\") find_body() is_equivalent(\"for row, contents in enumerate(self board):\\\\n pass\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): selfboard = board\n--fcc-editable-region--\ndef find_empty_cell(self):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1616,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606a4641ec48b3a9fe8c2fc.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d766a7ef208df6f9cdc74de6c8688582",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b8d31356fe4563f0e99c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606b8d31356fe4563f0e99c\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nOutside the for loop, return None. This handles the case in which no empty cell is found, indicating that the sudoku board is completely filled.\n--hints--\nYou should return None after the for loop.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"find_empty_cell\").has_return(\"None\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nreturn row, col\nexcept ValueError:\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b8d31356fe4563f0e99c.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b866fcd32a570313042e6f640abaa9ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b961ebcf04460f8af76e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606b961ebcf04460f8af76e\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nTest that the find_empty_cell method works properly by calling it on gameboard and printing the result.\nNote that, although find_empty_cell is defined with one parameter, you must not give it a value by passing an argument to the function call, since self is automatically passed in as the object you are calling the method on.\n--hints--\nYou should print gameboard.find_empty_cell().\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(gameboard.find_empty_cell())\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1348,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b961ebcf04460f8af76e.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "220fa53094bae0a17244e9aa7ed398f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b6b7760d0643c3b4eb29.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606b6b7760d0643c3b4eb29\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nIf the code inside the try block raises an exception, you want the program to continue running, and the pass statement accomplishes this Although this code works, specifying the exception type after the except keyword is considered good practice Since you know that a ValueError might be raised, leave a space after the except keyword and add ValueError after that --hints--\nYou should have except ValueError: in your code js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"find_empty_cell\") find_for_loops()[0] find_bodies()[0] is_equivalent(\"try:\\\\n  col = contents index(0)\\\\n  return row, col\\\\nexcept ValueError:\\\\n  pass\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b6b7760d0643c3b4eb29.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0942fd00c073bccc1894f8beb53b046f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b6b7760d0643c3b4eb29.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Since you know that a ValueError might be raised, leave a space after the except keyword and add ValueError after that --hints-- You should have except ValueError: in your code js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"find_empty_cell\") find_for_loops()[0] find_bodies()[0] is_equivalent(\"try:\\\\n col = contents index(0)\\\\n return row, col\\\\nexcept ValueError:\\\\n pass\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board --fcc-editable-region-- def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contentsindex(0)\nreturn row, col\nexcept:\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b6b7760d0643c3b4eb29.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8d43de9019dabcd302a71f30081f4c33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b224a69a293f98f8db8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606b224a69a293f98f8db8f\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nThe index() method raises a ValueError exception when the value is not found To prevent the program from halting execution, you'll nest this line of code inside a try block The try statement is used to encapsulate code that might raise an exception The except clause, on the other hand, offers alternative code to execute if an exception occurs:\npy\ntry:\n<code>\nexcept:\n<code>\nPut the assignment of col inside a try block Then, create an except clause and fill its body with pass --hints--\nYou should put the assignment of col inside a try block and create an except clause js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"find_empty_cell\") find_for_loops()[0] find_bodies()[0] is_equivalent(\"try:\\\\n  col = contents index(0)\\\\nexcept:\\\\n  pass\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ncol = contents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1558,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b224a69a293f98f8db8f.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "05b6cbac4a594034d58e5dbdeced172d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b224a69a293f98f8db8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assignment of col inside a try block Then, create an except clause and fill its body with pass --hints-- You should put the assignment of col inside a try block and create an except clause js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"find_empty_cell\") find_for_loops()[0] find_bodies()[0] is_equivalent(\"try:\\\\n col = contents index(0)\\\\nexcept:\\\\n pass\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board --fcc-editable-region-- def find_empty_cell(self): for row, contents in enumerate(self board): col = contentsindex(0)\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1558,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606b224a69a293f98f8db8f.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7f1ccdc26d4e031596547c6cdc778a46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606baaf1828ff46ebcc008c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606baaf1828ff46ebcc008c\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nfind_empty_cell is returning (0, 0), which is the position of the first empty cell in the sudoku board Turn the first 0 inside puzzle into a 1 You will see in the output that the next empty cell will be found --hints--\nYou should modify the first item of the first list in puzzle into a 1 js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"puzzle\") is_equivalent(\"puzzle = [[1, 0, 2, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 3, 7, 6, 2], [4, 3, 0, 0, 0, 0, 8, 0, 0], [0, 5, 0, 0, 3, 0, 0, 9, 0], [0, 4, 0, 0, 0, 0, 0, 2, 6], [0, 0, 0, 4, 6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5]]\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1558,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606baaf1828ff46ebcc008c.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ec1f92b4010c3be9f4db85f6bc67861f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606baaf1828ff46ebcc008c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0, 3, 0, 0, 9, 0], [0, 4, 0, 0, 0, 0, 0, 2, 6], [0, 0, 0, 4, 6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5]]\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contentsindex(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n--fcc-editable-region--\ngameboard = Board(puzzle)\nprint(gameboard find_empty_cell())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1558,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606baaf1828ff46ebcc008c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2060fbe8ecf6dd8fadb71d707eb7079a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bc4e5535c0484990ccd5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606bc4e5535c0484990ccd5\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nNext, you're going to work on a method that checks if a given number can be inserted into a specified row of the sudoku board Within the Board class, create a method named valid_in_row and give it three parameters: self, row, and num Where self represents the instance of the class, and row and num are the row index and the number to be checked, respectively --hints--\nYou should create a new method named valid_in_row within the Board class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"valid_in_row\")`)) })\nYour valid_in_row method should have three parameters: self, row, and num, in this order js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_row\") has_args(\"self, row, num\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bc4e5535c0484990ccd5.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a031ecf4a552b84a36e27a62b52f6b00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bc4e5535c0484990ccd5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to be checked, respectively --hints-- You should create a new method named valid_in_row within the Board class js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"valid_in_row\")`)) }) Your valid_in_row method should have three parameters: self, row, and num, in this order js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_row\") has_args(\"self, row, num\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contentsindex(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\n--fcc-editable-region--\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1666,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bc4e5535c0484990ccd5.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7760336854f3fd389a55a47c42b0c7e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bd3d02e86548d3ce1a0a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606bd3d02e86548d3ce1a0a\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nReplace pass with an expression that checks if the number num is not already present in that row.\n--hints--\nYou should replace pass with the expression num not in self.board[row].\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"valid_in_row\").find_body().is_equivalent(\"num not in self.board[row]\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\n--fcc-editable-region--\ndef valid_in_row(self, row, num):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1249,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bd3d02e86548d3ce1a0a.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4e33cf00c78f84230a3f43b798ebad8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bbd52233b247cf0a56e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606bbd52233b247cf0a56e4\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nNow, turn the 1 you modified earlier back into a 0 to restore the original board configuration Then, delete your print call --hints--\nYou should turn the first item of the first list of puzzle back into a zero js\n({ test: () => assert(runPython(`_Node(_code) find_variable(\"puzzle\") is_equivalent(\"puzzle = [[0, 0, 2, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 3, 7, 6, 2], [4, 3, 0, 0, 0, 0, 8, 0, 0], [0, 5, 0, 0, 3, 0, 0, 9, 0], [0, 4, 0, 0, 0, 0, 0, 2, 6], [0, 0, 0, 4, 6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5]]\")`)) })\nYou should not have print(gameboard find_empty_cell()) in your code js\n({ test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(gameboard find_empty_cell())\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bbd52233b247cf0a56e4.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5a26b0ea93628d812956518f847aacbe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bbd52233b247cf0a56e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5]]\")`)) }) You should not have print(gameboard find_empty_cell()) in your code js ({ test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(gameboard find_empty_cell())\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contentsindex(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\n--fcc-editable-region--\npuzzle = [\n[1, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\nprint(gameboard find_empty_cell())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bbd52233b247cf0a56e4.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "99602097c19b316475a769eb097af825",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c0dd3293064b30d17a72.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606c0dd3293064b30d17a72\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nGreat! 7 is not present in the first row of the sudoku board and the method is telling that 7 is a valid choice for that row.\nNow delete the print call.\n--hints--\nYou should not have print(gameboard.valid_in_row(0, 7)) in your code.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).has_call(\"print(gameboard.valid_in_row(0, 7))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self.board[row]\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\nprint(gameboard.valid_in_row(0, 7))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1320,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c0dd3293064b30d17a72.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ce11510833a8d5a205cabff38806ea44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c05b5624a54ab85808fa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606c05b5624a54ab85808fa\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nAs you can see, the output is False because 8 is already present in the first row of the board. Now change the 8 into a 7.\n--hints--\nYou modify your print call to print the result of calling valid_in_row(0, 7) on gameboard.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(gameboard.valid_in_row(0, 7))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self.board[row]\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\nprint(gameboard.valid_in_row(0, 8))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c05b5624a54ab85808fa.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "efed3f5449cf8dd3de8c2ac8494a1cb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606beade9200b49aaeecd94.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606beade9200b49aaeecd94\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nIf num is not in the row, the expression evaluates to True and it means the number is valid for insertion If num is in the row, the expression evaluates to False and insertion would violate the rules Prepend a return keyword to the expression inside the valid_in_row method body, so that the validity of the number can be checked --hints--\nYou should return num not in self board[row] js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_row\") find_body() is_equivalent(\"return num not in self board[row]\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\n--fcc-editable-region--\ndef valid_in_row(self, row, num):\nnum not in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1495,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606beade9200b49aaeecd94.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "151323c8de3fd32bdc8725086ef20bce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606beade9200b49aaeecd94.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that the validity of the number can be checked --hints-- You should return num not in self board[row] js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_row\") find_body() is_equivalent(\"return num not in self board[row]\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None --fcc-editable-region-- def valid_in_row(self, row, num): num not in selfboard[row]\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1495,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606beade9200b49aaeecd94.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d0424db8aed0f05d6bd34992076db648",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bf4561f8794a0d345919.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606bf4561f8794a0d345919\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nIt's time to test the valid_in_row method Call valid_in_row on gameboard Pass it 0 and 8 as the arguments and print the result Again, note how the method is defined with three parameters, yet it is called with only two arguments because self is automatically passed as the object on which the method is called --hints--\nYou should print the result of calling valid_in_row(0, 8) on gameboard js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_row(0, 8))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bf4561f8794a0d345919.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7095ba5dd1e8be14a2d11cec2686bf3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bf4561f8794a0d345919.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is automatically passed as the object on which the method is called --hints-- You should print the result of calling valid_in_row(0, 8) on gameboard js ({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_row(0, 8))\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in selfboard[row]\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1448,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606bf4561f8794a0d345919.md",
      "source_type": "git_repo"
    },
    "token_count": 411,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1b73b2825ca279847abe8d1a15a8d0f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cb019db4f74f224856f4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606cb019db4f74f224856f4\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nCall valid_in_col on gameboard Pass it 0 and 7 as the arguments to see if the number 7 is allowed in the first column of the board and print the result --hints--\nYou should print the result of calling valid_in_col(0, 7) on gameboard js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_col(0, 7))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cb019db4f74f224856f4.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8c97a8def6072b15e2af9cd0863b16d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cb019db4f74f224856f4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and print the result --hints-- You should print the result of calling valid_in_col(0, 7) on gameboard js ({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_col(0, 7))\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cb019db4f74f224856f4.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3a2207eb4105ca31eb2b9c5c42dedb65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c2d203a8124c83b2234b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606c2d203a8124c83b2234b\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nYou need to check if a given number is not equal to the number in the specified column of the current row For this, replace pass with a generator expression that iterates over the range from 0 to 8 (inclusive), and for each row, evaluates whether the number at the specified row and column col on the board is different from num --hints--\nYou should delete pass and create a generator expression (self board[row][col] = num for row in range(9)) js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_col\") find_body() is_equivalent(\"(self board[row][col] = num for row in range(9))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c2d203a8124c83b2234b.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "716271b59740d04fa457a8541b126a11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c2d203a8124c83b2234b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should delete pass and create a generator expression (self board[row][col] = num for row in range(9)) js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_col\") find_body() is_equivalent(\"(self board[row][col] = num for row in range(9))\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in selfboard[row]\n--fcc-editable-region--\ndef valid_in_col(self, col, num):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c2d203a8124c83b2234b.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "66664c8e38ac41144b04e4a34981be73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c14182435d4bab0de2ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606c14182435d4bab0de2ee\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nNext, you're going to create a method that checks if a number can be inserted in a specified column of the sudoku board by checking if the number is not already present in that column Within the Board class, create a method named valid_in_col and give it three parameters: self, col and num Where col and num are the column index and the number to be checked, respectively --hints--\nYou should create a new method named valid_in_col within the Board class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"valid_in_col\")`)) })\nYour valid_in_col method should have three parameters: self, col, and num, in this order js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_col\") has_args(\"self, col, num\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1757,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c14182435d4bab0de2ee.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6d1064695b3f51e1e0eb1cb6217a698a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c14182435d4bab0de2ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"valid_in_col\")`)) }) Your valid_in_col method should have three parameters: self, col, and num, in this order js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_col\") has_args(\"self, col, num\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in selfboard[row]\n--fcc-editable-region--\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1757,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c14182435d4bab0de2ee.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3bd61d36d1b9a22c0633f3e1efca8b53",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c3fd5634684d48a7887b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606c3fd5634684d48a7887b\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nThe generator expression you just wrote in the previous step generates a list of boolean values representing whether the condition self board[row][col] = num is True or False for each element in the specified column across all rows Pass that generator expression to the all() function to check if all the elements in the column are different from num and return the result --hints--\nYou should pass the generator expression as the argument to an all() call and return the result js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_col\") find_body() is_equivalent(\"return all(self board[row][col] = num for row in range(9))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\n--fcc-editable-region--\ndef valid_in_col(self, col, num):\n(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c3fd5634684d48a7887b.md",
      "source_type": "git_repo"
    },
    "token_count": 288,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2d9e31d3dde61c2140d2acc9698af74a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c3fd5634684d48a7887b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an all() call and return the result js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_col\") find_body() is_equivalent(\"return all(self board[row][col] = num for row in range(9))\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] --fcc-editable-region-- def valid_in_col(self, col, num): (self board[row][col]= num for row in range(9))\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1716,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606c3fd5634684d48a7887b.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "098f9adfa0743eb00784c66d9cab892e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc088fd3574fa9010a4f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606cc088fd3574fa9010a4f\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nNow change the 7 into a 1.\n--hints--\nYou should modify your print call to print the result of calling valid_in_col(0, 1) on gameboard.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(gameboard.valid_in_col(0, 1))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself.board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self.board):\ntry:\ncol = contents.index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self.board[row]\ndef valid_in_col(self, col, num):\nreturn all(self.board[row][col] != num for row in range(9))\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\nprint(gameboard.valid_in_col(0, 7))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc088fd3574fa9010a4f.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d75f2cc550dfc16a4d653bc753607428",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cd69f56e27516583b0cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606cd69f56e27516583b0cc\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nNow you need to calculate the starting row index for the 3x3 square within the board grid and ensure that the starting row index for each 3x3 square is a multiple of 3 This can be achieved by taking the result of the integer division row // 3 multiplied by 3 Replace pass with a variable row_start and assign it (row // 3) * 3 --hints--\nYou should delete pass and declare a variable row_start with the value of (row // 3) * 3 js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_body() is_equivalent(\"row_start = (row//3)*3\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1704,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cd69f56e27516583b0cc.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4187244e3c5c26532163da28b4dac2b1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cd69f56e27516583b0cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "declare a variable row_start with the value of (row // 3) * 3 js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_body() is_equivalent(\"row_start = (row//3)*3\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\n--fcc-editable-region--\ndef valid_in_square(self, row, col, num):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1704,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cd69f56e27516583b0cc.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "53ec7147855b7ff397448f40e114604f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc754a8834509cd0afb6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606cc754a8834509cd0afb6\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nAnother thing to check is if a number can be inserted in a 3x3 square Inside the Board class, create a method named valid_in_square with four parameters: self, row, col, and num Where row, col, and num represent the row index, the column index, and the number to be checked, respectively --hints--\nYou should create a new method named valid_in_square within the Board class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"valid_in_square\")`)) })\nYour valid_in_square method should have four parameters: self, row, col, and num, in this order js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") has_args(\"self, row, col, num\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc754a8834509cd0afb6.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a99df1a5407fbfda18d22492a44e426b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc754a8834509cd0afb6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "method should have four parameters: self, row, col, and num, in this order js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") has_args(\"self, row, col, num\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\n--fcc-editable-region--\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc754a8834509cd0afb6.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f336fe3a198611eb189cfbd8b96fcdfe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cf1b2b9f65529c161098.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606cf1b2b9f65529c161098\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nSimilarly to the previous step, you need to ensure that the starting column index for each 3x3 square is a multiple of 3 Declare a variable col_start and assign it (col // 3) * 3 --hints--\nYou should declare a variable col_start with the value of (col // 3) * 3 js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_variable(\"col_start\") is_equivalent(\"col_start = (col//3)*3\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cf1b2b9f65529c161098.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1422b4b5712cfbc5808535c268866aa9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cf1b2b9f65529c161098.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "declare a variable col_start with the value of (col // 3) * 3 js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_variable(\"col_start\") is_equivalent(\"col_start = (col//3)*3\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\n--fcc-editable-region--\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cf1b2b9f65529c161098.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "de5d1293a8af7d0b25646cecdfcc475b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc473675e85017b0c53d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606cc473675e85017b0c53d\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nThe 1 is already present in the first column So, everything seems to work fine Now delete your print call --hints--\nYou should not have print(gameboard valid_in_col(0, 1)) in your code js\n({ test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_col(0, 1))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\nprint(gameboard",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc473675e85017b0c53d.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ff1a70df738c1578d2ad802c86e39751",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc473675e85017b0c53d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0, 0, 0, 3, 7, 6, 2], [4, 3, 0, 0, 0, 0, 8, 0, 0], [0, 5, 0, 0, 3, 0, 0, 9, 0], [0, 4, 0, 0, 0, 0, 0, 2, 6], [0, 0, 0, 4, 6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5] ] gameboard = Board(puzzle) --fcc-editable-region-- print(gameboardvalid_in_col(0, 1))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1380,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606cc473675e85017b0c53d.md",
      "source_type": "git_repo"
    },
    "token_count": 242,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "12d62760e84d9b1713524e8bef92b4ba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d03ff198245383e61d90.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d03ff198245383e61d90\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nNow, iterate only over the rows inside the 3x3 square by creating a for loop Use the range() function to generate a sequence starting at row_start, and use row_no as the loop variable --hints--\nYou should create a for loop that iterates over range(row_start, row_start + 3) js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_iter() is_equivalent(\"range(row_start, row_start + 3)\")`)) })\nYour for loop should use row_no as the loop variable js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_vars() is_equivalent(\"row_no\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d03ff198245383e61d90.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2a2a6eb3c8627203c8e89883fedadb0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d03ff198245383e61d90.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row_start + 3)\")`)) }) Your for loop should use row_no as the loop variable js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_vars() is_equivalent(\"row_no\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\n--fcc-editable-region--\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d03ff198245383e61d90.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "12fcab4bb44e8a3b01f3aa7f18d33c8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d32096165654b8e73f21.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d32096165654b8e73f21\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nInside the loop created in the previous step, nest another for loop to iterate over a sequence of three elements starting at col_start Use the range() function to generate this sequence and col_no as the loop variable --hints--\nYou should create a for loop that iterates over range(col_start, col_start + 3) inside the existing loop body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_loops()[0] find_for_iter() is_equivalent(\"range(col_start, col_start + 3)\")`)) })\nYour for loop should use col_no as the loop variable js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_loops()[0] find_for_vars() is_equivalent(\"col_no\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d32096165654b8e73f21.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3e09015917b7e76a8acdb8726a60a397",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d32096165654b8e73f21.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 3)\")`)) }) Your for loop should use col_no as the loop variable js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_loops()[0] find_for_vars() is_equivalent(\"col_no\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\n--fcc-editable-region--\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2046,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d32096165654b8e73f21.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "13055de6d8222772a06f9cd0fd0b81fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d589750ad655fa0df168.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d589750ad655fa0df168\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nIf the number is not present, it can be inserted into the square without violating the rules of sudoku After the outer for loop, return True --hints--\nYou should return True after the outer for loop js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") has_return(\"True\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\n--fcc-editable-region--\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d589750ad655fa0df168.md",
      "source_type": "git_repo"
    },
    "token_count": 295,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ca0f86ac542dfd0ee42723e235c8f827",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d589750ad655fa0df168.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) --fcc-editable-region-- def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d589750ad655fa0df168.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a1a844b0c6c927b30fa61618232783a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d378de78d55523f08298.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d378de78d55523f08298\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nNow, check if the given number num is already present in the current cell of the 3x3 square Replace pass with an if statement that checks if the number in the current cell of the sudoku board is equal to num If so, return False from the if body, indicating that the number is not a valid choice --hints--\nYou should delete pass and create an if statement that checks if the current cell of the sudoku board is equal to num js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_loops()[0] find_ifs()[0] find_conditions()[0] is_equivalent(\"self board[row_no][col_no] == num\")`)) })\nYou should return False from your new if statement body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_loops()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"return False\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d378de78d55523f08298.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d0fdf3325d280dcb3fb19b62dfc5e2f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d378de78d55523f08298.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "}) You should return False from your new if statement body js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"valid_in_square\") find_for_loops()[0] find_for_loops()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"return False\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col]= num for row in range(9))\n--fcc-editable-region--\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d378de78d55523f08298.md",
      "source_type": "git_repo"
    },
    "token_count": 511,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "da3c4caa95b74142858bd3828ff781ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d6138c49e456920fa818.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d6138c49e456920fa818\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nTest the method to ensure it works properly by calling valid_in_square on gameboard Pass it 1, 0, and 3 as the arguments and print the result --hints--\nYou should print the result of calling valid_in_square(1, 0, 3) on gameboard js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_square(1, 0, 3))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d6138c49e456920fa818.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6abc2c49741eb6a4ec8f2262b57639c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d6138c49e456920fa818.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\nreturn True\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d6138c49e456920fa818.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f3258f5b8be013b2dc6cc79b1abf103d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d7bb9e4c6b574235159a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d7bb9e4c6b574235159a\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nThe method returns False because 3 is already present in that square Try another square by changing the column index to 6 --hints--\nYou should print the result of calling valid_in_square(1, 6, 3) on gameboard js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_square(1, 6, 3))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d7bb9e4c6b574235159a.md",
      "source_type": "git_repo"
    },
    "token_count": 304,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "59dbb262e28d659fd0782394877fbbd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d7bb9e4c6b574235159a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\nreturn True\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\nprint(gameboard valid_in_square(1, 0, 3))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d7bb9e4c6b574235159a.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "df2388bcb9db1f9b410c2395bbf2ab25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8c323d6205890fbbd54.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d8c323d6205890fbbd54\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nWithin the Board class, create another method is_valid and give it three parameters: self, empty, and num Where empty is a tuple representing the row and column indices of an empty cell and num is the number to be checked This method will check if a given number is a valid choice for an empty cell in the sudoku board by validating its compatibility with the row, column, and 3x3 square of the specified empty cell --hints--\nYou should create a new method named is_valid within the Board class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"is_valid\")`)) })\nYour is_valid method should have three parameters: self, empty, and num, in this order js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"is_valid\") has_args(\"self, empty, num\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8c323d6205890fbbd54.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aae3bde95a531aff760cb814c6d9ec37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8c323d6205890fbbd54.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\nreturn True\n--fcc-editable-region--\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2233,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8c323d6205890fbbd54.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cbdb9c491cd106ca9d40fe784aa0cb5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8795bd533582425a363.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d8795bd533582425a363\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nEverything works fine Now delete your print call --hints--\nYou should not have print(gameboard valid_in_square(1, 6, 3)) in your code js\n({ test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(gameboard valid_in_square(1, 6, 3))\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8795bd533582425a363.md",
      "source_type": "git_repo"
    },
    "token_count": 286,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ad8436de06a303bafd1e6f61eb8b159b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8795bd533582425a363.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\nreturn True\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n--fcc-editable-region--\nprint(gameboard valid_in_square(1, 6, 3))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1676,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d8795bd533582425a363.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "caccfef65decea742e8822c59fcadd40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606db6a23a1455a402f91ae.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606db6a23a1455a402f91ae\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nWithin the is_valid method, check if the number is valid for insertion in the specified row by calling the valid_in_row() method with row and num as arguments, and assign the result to a variable valid_in_row Remember to use self to reference the methods of the current instance --hints--\nYou should declare a variable valid_in_row and assign it self valid_in_row(row, num) js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"is_valid\") find_variable(\"valid_in_row\") is_equivalent(\"valid_in_row = self valid_in_row(row, num)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2020,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606db6a23a1455a402f91ae.md",
      "source_type": "git_repo"
    },
    "token_count": 346,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "65c833f4dd3e29def8139d6c6117d542",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606db6a23a1455a402f91ae.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\nreturn True\n--fcc-editable-region--\ndef is_valid(self, empty, num):\nrow, col = empty\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2020,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606db6a23a1455a402f91ae.md",
      "source_type": "git_repo"
    },
    "token_count": 437,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aa928e285d041b95bddd020cfc2120b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d9d92fcf78598b3b5184.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606d9d92fcf78598b3b5184\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nA tuple can be unpacked, meaning that the elements contained in the tuple can be assigned to variables, like this:\npy\nspam = ('lemon', 'curry')\nitem1, item2 = spam\nIn the example above, item1 would have the value 'lemon' and item2 would have the value 'curry' Inside the method, delete pass and unpack the empty tuple into row and col --hints--\nYou should delete pass and unpack the empty tuple into row and col js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"is_valid\") find_body() is_equivalent(\"row, col = empty\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2020,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d9d92fcf78598b3b5184.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9733edc20656135aec76d498e1b11bcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d9d92fcf78598b3b5184.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "row, contents in enumerate(self board): try: col = contents index(0) return row, col except ValueError: pass return None def valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if selfboard[row_no][col_no] == num:\nreturn False\nreturn True\n--fcc-editable-region--\ndef is_valid(self, empty, num):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2020,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606d9d92fcf78598b3b5184.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c891e5a22a1dea58b7ff7b624491ea4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dcf5a31e4e5b43737417.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606dcf5a31e4e5b43737417\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nCheck if the number is valid for insertion in the specified column by calling the valid_in_col() method with col and num as the arguments and assign the result to a variable valid_in_col --hints--\nYou should declare a variable valid_in_col and assign it self valid_in_col(col, num) js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"is_valid\") find_variable(\"valid_in_col\") is_equivalent(\"valid_in_col = self valid_in_col(col, num)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\n--fcc-editable-region--\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dcf5a31e4e5b43737417.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8af84b84bb5daed628c2ab159517c0a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dcf5a31e4e5b43737417.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "valid_in_row(self, row, num): return num not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True --fcc-editable-region-- def is_valid(self, empty, num): row, col = empty valid_in_row = selfvalid_in_row(row, num)\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1974,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dcf5a31e4e5b43737417.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a5670d3e78a775166280371f9c7728b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606de006a82e05c9a65cebe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606de006a82e05c9a65cebe\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nTo verify that the number is valid after all those checks, call the all() function and pass it a list containing valid_in_row, valid_in_col, and valid_in_square Also, return the result of the all() call --hints--\nYou should return a call to the all() function passing it a list containing valid_in_row, valid_in_col, and valid_in_square js\n({ test: () => assert(runPython(`\nimport itertools\np = list(itertools permutations([\"valid_in_row\", \"valid_in_col\", \"valid_in_square\"]))\nl = [\", \" join(i) for i in p]\nnode = _Node(_code) find_class(\"Board\") find_function(\"is_valid\")\nany([node has_return(f\"all([{i}])\") for i in l])\n`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\n--fcc-editable-region--\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2251,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606de006a82e05c9a65cebe.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6808a15ec1867ab07ed4723ccd38827c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606de006a82e05c9a65cebe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True --fcc-editable-region-- def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2251,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606de006a82e05c9a65cebe.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "12a2cb5f7bf83eab1ac2f0fc80b8792c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e2f27f19ca5f398c6aed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606e2f27f19ca5f398c6aed\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nNext, you'll work on a method that attempts to solve the sudoku in-place, meaning it will modify the existing sudoku board rather than creating a new one Within the Board class, create a method named solver and give it a single parameter, self --hints--\nYou should create a new method named solver within the Board class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"solver\")`)) })\nYour solver method should have a single parameter self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e2f27f19ca5f398c6aed.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5f3b931b95b494eca82accfed05da3d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e2f27f19ca5f398c6aed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e2f27f19ca5f398c6aed.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "103d507a97014291e2558a7de43bacc5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dd63109f9f5c2195e30c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606dd63109f9f5c2195e30c\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nCheck if the number is valid for insertion in the specified 3x3 square by calling the valid_in_square() method with row, col and num as the arguments and assign the result to a variable valid_in_square --hints--\nYou should declare a variable valid_in_square and assign it self valid_in_square(row, col, num) js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"is_valid\") find_variable(\"valid_in_square\") is_equivalent(\"valid_in_square = self valid_in_square(row, col, num)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\n--fcc-editable-region--\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dd63109f9f5c2195e30c.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "03dff07c85bd10e6d13066edd9fba058",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dd63109f9f5c2195e30c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "not in self board[row] def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True --fcc-editable-region-- def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = selfvalid_in_col(col, num)\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2067,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606dd63109f9f5c2195e30c.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "63f8ab2be38353abddf8695501ab0095",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e3e6231702600bd5860c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6606e3e6231702600bd5860c\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nDelete pass and create an if statement that checks if the value returned by find_empty_cell is None In that case, the puzzle is solved Therefore, return True from the if body --hints--\nYou should delete pass and create an if statement that checks if the value returned by self find_empty_cell is None js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_ifs()[0] find_conditions()[0] is_equivalent(\"self find_empty_cell() is None\")`)) })\nYou should return True from your new if statement body js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_ifs()[0] find_bodies()[0] is_equivalent(\"return True\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e3e6231702600bd5860c.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4c11340c1ea8d05f77a02c0010c18c83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e3e6231702600bd5860c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\6606e3e6231702600bd5860c.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "24d1ac2cbcb337c691c31c73fc991533",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a737f0f72b51de361051c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a737f0f72b51de361051c\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nThe := operator gives you the ability to assign variables in the middle of an expression The syntax is: name := val, where name is the variable name and val is the variable value This construct is formally named assignment expressions, while the := operator is commonly referred to as the walrus operator Since you are going to need the self find_empty_cell() call more than once, assign it to a variable next_empty by using the walrus operator Then, enclose the assignment between a pair of parentheses In this way, you'll combine the assignment and the conditional check into a single line, making the code more concise --hints--\nYou should modify the if condition into (next_empty := self find_empty_cell()) is None js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_ifs()[0] find_conditions()[0] is_equivalent(\"(next_empty := self find_empty_cell()) is None\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a737f0f72b51de361051c.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4e4e674907df899c6552c56b9df5ab41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a737f0f72b51de361051c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif self find_empty_cell() is None:\nreturn True\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2705,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a737f0f72b51de361051c.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b93a11add0c8962c9b68d697710d604c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7a1cac69b7217cbae22d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a7a1cac69b7217cbae22d\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nAfter the if statement, create a for loop to iterate over the range from 1 to 9 inclusive Use guess as the loop variable This loop will enable you to systematically check if any cipher from 1 to 9 is suitable to fill an empty cell --hints--\nYou should create a for loop that iterates over range(1, 10) js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_for_iter() is_equivalent(\"range(1, 10)\")`)) })\nYour for loop should have guess as the loop variable js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_for_vars() is_equivalent(\"guess\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7a1cac69b7217cbae22d.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "afd286d9892d65b32ef6aadc27699d8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7a1cac69b7217cbae22d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := selffind_empty_cell()) is None:\nreturn True\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2487,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7a1cac69b7217cbae22d.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1d9f5b8f2337e289685cef9e555e7128",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7ea6e3a21a243d6aa288.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a7ea6e3a21a243d6aa288\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nInside the if body, delete pass and unpack the tuple next_empty into row, col --hints--\nYou should delete pass and unpack the tuple next_empty into row, col js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"row, col = next_empty\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7ea6e3a21a243d6aa288.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "caf83aa795a6e7a7d4222963d377aeaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7ea6e3a21a243d6aa288.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7ea6e3a21a243d6aa288.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dc2856fe06005d7ddaf1a00b0f24c1f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7f28d5ce6a24ef856a50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a7f28d5ce6a24ef856a50\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nNow, modify the board in place by accessing the cell at the given row and column and assigning it the value of guess --hints--\nYou should assign guess to self board[row][col] js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"row, col = next_empty\\\\nself board[row][col] = guess\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7f28d5ce6a24ef856a50.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6175b634145a258c975b4b437f505de9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7f28d5ce6a24ef856a50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess):\nrow, col = next_empty\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2297,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7f28d5ce6a24ef856a50.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "071b296962cead54c7245456b081bdaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7cb75dce3d22ab562c0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a7cb75dce3d22ab562c0d\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nInside the loop body, replace pass with an if statement that checks if the number is a valid choice for the current cell Build the if condition with an is_valid call, passing next_empty and guess as the arguments --hints--\nYou should delete pass and create an if statement that checks if self is_valid(next_empty, guess) is True js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_bodies()[0] is_equivalent(\"if self is_valid(next_empty, guess):\\\\n  pass\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7cb75dce3d22ab562c0d.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5d1fe2c04ff0f2e060bc0dec49f7bf26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7cb75dce3d22ab562c0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := selffind_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a7cb75dce3d22ab562c0d.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ccf8a91bd0a44c29d63bf79c168ab383",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8b6cd8de406ae82ce910.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a8b6cd8de406ae82ce910\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nNest an if statement inside the current if For the if condition, use a recursive call to solver() and return True from the new if body --hints--\nYou should nest an if statement inside the current if statement and use self solver() as the condition js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_ifs()[0] find_ifs()[0] find_conditions()[0] is_equivalent(\"self solver()\")`)) })\nYou should return True from your new if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_ifs()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"return True\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8b6cd8de406ae82ce910.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5f57a7bcab9dc3f7fa46cf99612067c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8b6cd8de406ae82ce910.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := selffind_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2664,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8b6cd8de406ae82ce910.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9e266aabedcd26cce5ac087bc323d6f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8d7c5f33c16c67e58b37.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a8d7c5f33c16c67e58b37\ntitle: Step 61\nchallengeType: 20\ndashedName: step-61\n--description--\nFinally, make the solver method return False if none of the guesses leads to a solution Pay attention to the indentation --hints--\nYou should return False after the for loop js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") has_return(\"False\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8d7c5f33c16c67e58b37.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "873318d64f2b7047ecb928e11927955a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8d7c5f33c16c67e58b37.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8d7c5f33c16c67e58b37.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "baa4165686c65676be314b4b5bb7fe1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8c3b21100c6b83e57cb0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a8c3b21100c6b83e57cb0\ntitle: Step 60\nchallengeType: 20\ndashedName: step-60\n--description--\nIf the recursive call returns False, it means the guess led to an unsolvable sudoku So you'll need to restore the cell to be empty and explore another guess After the innermost if statement, set the current cell value back to 0 --hints--\nYou should set the current cell value back to 0 after the innermost if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"solver\") find_for_loops()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"row, col = next_empty\\\\nself board[row][col] = guess\\\\nif self solver():\\\\n  return True\\\\nself board[row][col] = 0\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\n--fcc-editable-region--\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8c3b21100c6b83e57cb0.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "423608c75b3e405efc401e7f530b0774",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8c3b21100c6b83e57cb0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) --fcc-editable-region-- def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8c3b21100c6b83e57cb0.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "356a0237ecb2da3396939c3f85d6d2a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a92e93854486efa68fe6f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a92e93854486efa68fe6f\ntitle: Step 63\nchallengeType: 20\ndashedName: step-63\n--description--\nInside the solve_sudoku function, delete pass and create a gameboard variable and assign it an instance of the Board class, passing board as the argument --hints--\nYou should replace pass with a variable gameboard and assign it Board(board) js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solve_sudoku\") find_body() is_equivalent(\"gameboard = Board(board)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a92e93854486efa68fe6f.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a4743a6e187e645ea0ed35d283ebe4ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a92e93854486efa68fe6f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\n--fcc-editable-region--\ndef solve_sudoku(board):\npass\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a92e93854486efa68fe6f.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "18b0b2e8d4bfbf1d3f2787d3f17cc3a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a937220bf966fd844f1ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a937220bf966fd844f1ee\ntitle: Step 64\nchallengeType: 20\ndashedName: step-64\n--description--\nNow, add a print() call to print the following f-string: f'Puzzle to solve:\\n{gameboard}' --hints--\nYou should print the provided string inside the solve_sudoku function js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solve_sudoku\") has_call(\"print(f'Puzzle to solve:\\\\\\\\n{gameboard}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a937220bf966fd844f1ee.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a0c22981fb7cd91b89808aecb3b7076a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a937220bf966fd844f1ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\n--fcc-editable-region--\ndef solve_sudoku(board):\ngameboard = Board(board)\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2440,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a937220bf966fd844f1ee.md",
      "source_type": "git_repo"
    },
    "token_count": 445,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e92222cee1be6629dcebe04a1d12304b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8ef6b7571f6dddc3553b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a8ef6b7571f6dddc3553b\ntitle: Step 62\nchallengeType: 20\ndashedName: step-62\n--description--\nOutside the class definition, create a function solve_sudoku to print and solve the sudoku board Give it a single parameter board that will be your 2D list --hints--\nYou should define a new function named solve_sudoku outside the Board class js\n({ test: () => assert(runPython(`_Node(_code) has_function(\"solve_sudoku\")`)) })\nYour solve_sudoku function should have a single parameter board js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solve_sudoku\") has_args(\"board\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8ef6b7571f6dddc3553b.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "250e515bc76f2b6d82a802d5d266b840",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8ef6b7571f6dddc3553b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\n--fcc-editable-region--\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a8ef6b7571f6dddc3553b.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4f615394affc2e5c53ce8f42554c2751",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a940b3379fb708a83593a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a940b3379fb708a83593a\ntitle: Step 65\nchallengeType: 20\ndashedName: step-65\n--description--\nCreate an if statement that checks if the solver() method call from the gameboard object returns True Then, add a print() call inside the if body passing the following f-string: f'Solved puzzle:\\n{gameboard}' --hints--\nYou should create an if statement that checks if the solver() method call from the gameboard object returns True js\n({ test: () => assert(runPython(`\nconditions = [\"gameboard solver()\", \"gameboard solver() == True\", \"True == gameboard solver()\"]\nnode = _Node(_code) find_function(\"solve_sudoku\") find_ifs()[0] find_conditions()[0]\nany(node is_equivalent(condition) for condition in conditions)`)) })\nYou should print f'Solved puzzle:\\n{gameboard}' inside the new if body js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solve_sudoku\") find_ifs()[0] find_bodies()[0] has_call(\"print(f'Solved puzzle:\\\\\\\\n{gameboard}')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a940b3379fb708a83593a.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c2ebb7102ae1a456bb0dd8f40fa4733f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a940b3379fb708a83593a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a940b3379fb708a83593a.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d3010ad8e09de6ca40a9d01991d0eed1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a940b3379fb708a83593a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\n--fcc-editable-region--\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3066,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a940b3379fb708a83593a.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0852f1cd7e91ccc3a34f226f41ae039b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a957f44c096728ba9c41f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a957f44c096728ba9c41f\ntitle: Step 67\nchallengeType: 20\ndashedName: step-67\n--description--\nAfter the conditional statements, return your instance of the Board class, which represents the final state of the sudoku board after attempting to solve it --hints--\nYou should return gameboard after the else clause js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solve_sudoku\") has_return(\"gameboard\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\n--fcc-editable-region--\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a957f44c096728ba9c41f.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b4c853b7c904141ed4d7aeb33064748e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a957f44c096728ba9c41f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False --fcc-editable-region-- def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboardsolver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable ')\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a957f44c096728ba9c41f.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ea5f5468c39d32e4d31e9d05f505ae91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a94f55c3c9b71a37e1c8b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a94f55c3c9b71a37e1c8b\ntitle: Step 66\nchallengeType: 20\ndashedName: step-66\n--description--\nCreate an else clause for when the sudoku puzzle is not solvable and print the following string inside the new else block: 'The provided puzzle is unsolvable ' --hints--\nYou should create an else clause and print 'The provided puzzle is unsolvable ' js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solve_sudoku\") find_ifs()[0] find_bodies()[1] has_call(\"print('The provided puzzle is unsolvable ')\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2673,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a94f55c3c9b71a37e1c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f3df92f24af08a57aa9bb9db4f1c661d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a94f55c3c9b71a37e1c8b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\n--fcc-editable-region--\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\n--fcc-editable-region--\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\ngameboard = Board(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2673,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a94f55c3c9b71a37e1c8b.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b158434936304b72b285a79dcdb5b594",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a95c3da857673124ed698.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a95c3da857673124ed698\ntitle: Step 68\nchallengeType: 20\ndashedName: step-68\n--description--\nThere's still something to fix Try to print your gameboard object --hints--\nYou should print gameboard js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(gameboard)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a95c3da857673124ed698.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "29df5d08880dc7512656e2299807f510",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a95c3da857673124ed698.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n--fcc-editable-region--\ngameboard = Board(puzzle)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a95c3da857673124ed698.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7a536a551b2c083253e3953bcd74c431",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a9819ad113774d65a1e7c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a9819ad113774d65a1e7c\ntitle: Step 70\nchallengeType: 20\ndashedName: step-70\n--description--\nThe __str__ method is a special method that is called under the hood when the object is printed using the print() function, or converted into a string using the str() function Define an empty __str__ method within the Board class and give it a self parameter --hints--\nYou should create a new method named __str__ within the Board class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") has_function(\"__str__\")`)) })\nYour __str__ method should have a single parameter self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a9819ad113774d65a1e7c.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d1194be2ba06e59775fea06f22b9e24b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a9819ad113774d65a1e7c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a9819ad113774d65a1e7c.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "29147b0a4c35e757155747e4afdda79f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a9819ad113774d65a1e7c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a9819ad113774d65a1e7c.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e91c86a2c9f8e0543947a4b329e48a11",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac1d158923e805d3c3099.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac1d158923e805d3c3099\ntitle: Step 71\nchallengeType: 20\ndashedName: step-71\n--description--\nReplace pass with a variable board_str and assign it an empty string You'll use this variable to build the custom string representation to return --hints--\nYou should replace pass with a variable board_str and assign it an empty string js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_body() is_equivalent(\"board_str = ''\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\npass\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac1d158923e805d3c3099.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9df86bf81adfb4556e7d4d94fb568272",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac1d158923e805d3c3099.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable ')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac1d158923e805d3c3099.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "64087dd7f9eb2a4912e8565ccdfda673",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a968ca0838773c9bbfc85.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660a968ca0838773c9bbfc85\ntitle: Step 69\nchallengeType: 20\ndashedName: step-69\n--description--\nWhen you print your gameboard object, you get something like <__main__ Board object at 0xf3c1c8>, which is the default representation of an object This means that the solve_sudoku function will also give you an output different from what you expect Delete both the print() call and the gameboard object --hints--\nYou should not have print(gameboard) in your code js\n({ test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(gameboard)\")`)) })\nYou should not have gameboard = Board(puzzle) in your code js\n({ test: () => assert isFalse(runPython(`_Node(_code) has_variable(\"gameboard\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a968ca0838773c9bbfc85.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0c93dcb84611b4f5cdc121df92b9dda2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a968ca0838773c9bbfc85.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty selfboard[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a968ca0838773c9bbfc85.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f8b6a61667fa986b12fbcc26ea62f0ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a968ca0838773c9bbfc85.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty selfboard[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n--fcc-editable-region--\ngameboard = Board(puzzle)\nprint(gameboard)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660a968ca0838773c9bbfc85.md",
      "source_type": "git_repo"
    },
    "token_count": 447,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "408be1bec761bc40f97362eaa1fefeb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac44c7eec868220318297.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac44c7eec868220318297\ntitle: Step 74\nchallengeType: 20\ndashedName: step-74\n--description--\nModify the row_str comprehension to give a string only when the item is not zero, and an asterisk character otherwise --hints--\nThe list comprehension assigned to the row_str variable should call str() on each item i in row if i is truthy, and it should evaluate to '*' otherwise js\n({ test: () => assert(runPython(`\nexpressions = [\"str(i) if i else '*'\",\"'*' if i == 0 else str(i)\",\"str(i) if i = 0 else '*'\"]\nnode =_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_variable(\"row_str\") find_comp_expr()\nany(node is_equivalent(expr) for expr in expressions)`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\nboard_str = ''\nfor row in self board:\nrow_str = [str(i) for i in row]\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac44c7eec868220318297.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1ca23446d5e62875c526305ae610a7c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac44c7eec868220318297.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac44c7eec868220318297.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "21730255e546b83d1eaa3a27226c2125",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac44c7eec868220318297.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3048,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac44c7eec868220318297.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4df989d6f4c47124265834c310735f7c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac4f4f784b9829e89632a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac4f4f784b9829e89632a\ntitle: Step 75\nchallengeType: 20\ndashedName: step-75\n--description--\nNext, join the items in row_str with a space and add the result to the current value of board_str --hints--\nYou should use join() to join the items in row_str with a space and add the result to the current value of board_str js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_aug_variable(\"board_str\") is_equivalent(\"board_str += ' ' join(row_str)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\nboard_str = ''\nfor row in self board:\nrow_str = [str(i) if i else '*' for i in row]\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac4f4f784b9829e89632a.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4d17e6d9fe8dfd535e6c2a434a605ce3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac4f4f784b9829e89632a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac4f4f784b9829e89632a.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ffc9d23fcd951773df1a8d594eac65ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac4f4f784b9829e89632a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac4f4f784b9829e89632a.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ab5ab7bb77f989a12d83538d23f69fd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac35d55a15d81afdedd76.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac35d55a15d81afdedd76\ntitle: Step 73\nchallengeType: 20\ndashedName: step-73\n--description--\nInside the for loop, declare a variable row_str and assign it a list comprehension that iterates over row and turns each item i in row into a string Use the str() function for that --hints--\nYou should declare a variable row_str js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] has_variable(\"row_str\")`)) })\nYou should assign a list comprehension that iterates over row to the row_str variable js\n({ test: () => (runPython(`\nimport ast\nvar = _Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_variable(\"row_str\")\nassert var find_comp_iters()[0] is_equivalent(\"row\"), \"You should iterate over row\"\nassert isinstance(var tree value, ast ListComp), \"It's not a list comprehension\"\n`)) })\nThe list comprehension assigned to the row_str variable should use i as iteration variable js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_variable(\"row_str\") find_comp_targets()[0] is_equivalent(\"i\")`)) })\nThe list comprehension assigned to the row_str variable should call str() on each item i in row js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_variable(\"row_str\") find_comp_expr() is_equivalent(\"str(i)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\nboard_str = ''\nfor row in self board:\npass\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac35d55a15d81afdedd76.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3d58daee5d67fe7d693ccd4e4ecd5269",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac35d55a15d81afdedd76.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_variable(\"row_str\") find_comp_targets()[0] is_equivalent(\"i\")`)) }) The list comprehension assigned to the row_str variable should call str() on each item i in row js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] find_variable(\"row_str\") find_comp_expr() is_equivalent(\"str(i)\")`)) }) --seed-- --seed-contents-- ```py class Board: def init(self, board): self board = board --fcc-editable-region-- def str(self): board_str = '' for row in self board: pass --fcc-editable-region-- def find_empty_cell(self): for row, contents in enumerate(self board): try: col = contentsindex(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac35d55a15d81afdedd76.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "077a796dfd42519c5e6f16e84b3fa0d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac35d55a15d81afdedd76.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable ')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac35d55a15d81afdedd76.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fc248e75bbbbe30174adfd4ae5cee6e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac2873b090d80d6aa6ce2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac2873b090d80d6aa6ce2\ntitle: Step 72\nchallengeType: 20\ndashedName: step-72\n--description--\nNow, create a for loop to iterate over the rows in the board Use row as the loop variable --hints--\nYou should create a for loop that iterates over self board js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_for_iter() is_equivalent(\"self board\")`)) })\nYou should use row as the loop variable js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_for_vars() is_equivalent(\"row\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\nboard_str = ''\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac2873b090d80d6aa6ce2.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c24f016c954002cc10ad838200adfe8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac2873b090d80d6aa6ce2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac2873b090d80d6aa6ce2.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4fca97330cade64fd71ad48581f18708",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac2873b090d80d6aa6ce2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if selfis_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac2873b090d80d6aa6ce2.md",
      "source_type": "git_repo"
    },
    "token_count": 424,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "bb746f7fe255c0c305134eb7ff2f5e0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\655cd899f8de09431eabb40c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 655cd899f8de09431eabb40c\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you'll learn data structures by building the merge sort algorithm.\nThis is a sorting algorithm that uses the divide-and-conquer principle to sort collections of data. That is, it 'divides' a collection into smaller sub-parts, and 'conquers' the sub-parts by sorting them independently, then merges the sorted sub-parts.\nCreate a function called merge_sort. This function will handle the task of sorting a list of numbers.\nUse the pass keyword in the function body.\n--hints--\nYou should declare a function named merge_sort. Don't forget use the pass keyword in the function body.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(merge_sort)\n`))})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 920,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\655cd899f8de09431eabb40c.md",
      "source_type": "git_repo"
    },
    "token_count": 211,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ed4ebeb5bfb5cf0d00abe8437ed0964e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6564a9fe51964c229d5b7f4c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564a9fe51964c229d5b7f4c\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nYou'll need a parameter that denotes the data collection to be sorted. Create a parameter called array in the merge_sort function.\n--hints--\nYour merge_sort function should take a single parameter: array.\njs\n({ test: () => assert(runPython(`\nimport inspect\nstr(inspect.signature(merge_sort)) == '(array)'\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef merge_sort():\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 574,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6564a9fe51964c229d5b7f4c.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0105b4ee8fc15536231ce6b7ada545b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac56326c2eb831583c0de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac56326c2eb831583c0de\ntitle: Step 76\nchallengeType: 20\ndashedName: step-76\n--description--\nAdd a new line character to the current value of board_str --hints--\nYou should add a '\\n' character to the current value of board_str js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") find_for_loops()[0] find_bodies()[0] has_stmt(\"board_str += '\\\\\\\\n'\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\nboard_str = ''\nfor row in self board:\nrow_str = [str(i) if i else '*' for i in row]\nboard_str += ' ' join(row_str)\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac56326c2eb831583c0de.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9b300ca70eae725e3b0e31689738fb76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac56326c2eb831583c0de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable ')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2787,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac56326c2eb831583c0de.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9e3153b62478c3065e2e724cfbe55774",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6564aee9c077774ea49c3faf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6564aee9c077774ea49c3faf\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nThe merge sort algorithm mainly performs three actions:\nDivide an unsorted sequence of items into sub-parts\nSort the items in the sub-parts\nMerge the sorted sub-parts\nThe above happens recursively until the sub-parts are merged into the complete sorted sequence. Let's start by dividing the sequence.\nFirst, replace the pass keyword with a variable middle_point. Use the integer division operator (//) to divide the length of the array list by 2 and assign the result to your new middle_point variable. Remember to indent your code.\n--hints--\nYou should not have pass in the body of the function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.notMatch(function_body, /^\\s{4}pass/m);\n}\n})\n```\nYou should declare a middle_point variable and assign len(array) // 2 to it.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /^\\s{4}middle_point\\s*=\\s*len\\(\\s*array\\s*\\)\\s*\\/\\/\\s*2/m);\n}\n})\n```\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef merge_sort(array):\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1518,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6564aee9c077774ea49c3faf.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d55bc0bc34c24c16c99f33b2c1e34b7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac59d7ea60083900b83df.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac59d7ea60083900b83df\ntitle: Step 77\nchallengeType: 20\ndashedName: step-77\n--description--\nFinally, return board_str after the for loop --hints--\nYou should return board_str after the for loop js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Board\") find_function(\"__str__\") has_return(\"board_str\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\n--fcc-editable-region--\ndef str(self):\nboard_str = ''\nfor row in self board:\nrow_str = [str(i) if i else '*' for i in row]\nboard_str += ' ' join(row_str)\nboard_str += '\\n'\n--fcc-editable-region--\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2740,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac59d7ea60083900b83df.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a5ac3e8f63f1b0a8266226cf6b3a7d46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac59d7ea60083900b83df.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable ')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2740,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac59d7ea60083900b83df.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4bb79c048d1095ae68df6e57519f0da2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656627b47bd2d2a4afbc945d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656627b47bd2d2a4afbc945d\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nIn the previous step, you got the mid point. You can use it to divide array into two and assign each part to new variables.\nUse the slice syntax to extract the left half of array and assign it to a variable named left_part.\n--hints--\nYou should have a variable named left_part in your merge_sort function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /left_part\\s*(?!=)/m);\n}\n})\n```\nYou should assign array[:middle_point] to the left_part variable.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /left_part\\s*=\\s*array\\s*\\[\\s*:\\s*middle_point\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef merge_sort(array):\nmiddle_point = len(array) // 2\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656627b47bd2d2a4afbc945d.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd9a519489d79ffcd05331c44fe2353c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656639771fed09b5c0e8fe71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656639771fed09b5c0e8fe71\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nNow that you've divided the array list into two separate lists, you'll keep dividing each list until every element stands alone in its own list. A list with a single number is always sorted.\nTo do that, recursively call merge_sort inside your function. Do not pass in any argument for now.\n--hints--\nYou should call merge_sort at the bottom of your function body.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /merge_sort\\s*\\(\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\n--fcc-editable-region--\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 986,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656639771fed09b5c0e8fe71.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c7086f4572d967bb4605e7704e615053",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656702f8b4cbd8cbf0a433c6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656702f8b4cbd8cbf0a433c6\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nInside your function, create a while loop that compares an element in left_part to an element in right_part, and merges the smaller element to the main array list.\nCreate two conditions for the loop: one that checks whether the left_array_index is less than the length of left_part and another condition that checks whether right_array_index is less than the length of right_part.\n--hints--\nYour while loop should have these conditions: left_array_index < len(left_part) and right_array_index < len(right_part). Don't forget to use the pass keyword in the body of the loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):/);\n}\n})\n```\nUse the pass keyword in the body of the loop\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*pass/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1859,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656702f8b4cbd8cbf0a433c6.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d5b0817ea300426b16b48fa07d658df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656706afd65547d22bee0b68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656706afd65547d22bee0b68\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nWithin the while loop, replace pass with an if statement that checks if the index of left_part is less than the index of right_part.\nUse the pass keyword in the body of the if statement.\n--hints--\nYou should replace pass keyword with an if statement with this condition: left_part[left_array_index] < right_part[right_array_index]. Add the pass keyword to the body of the if statement.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_function(\"merge_sort\").find_whiles()[0].find_body().is_equivalent(\"if left_part[left_array_index] < right_part[right_array_index]:\\\\n  pass\")`))\n})\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\n--fcc-editable-region--\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656706afd65547d22bee0b68.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fec4b0a0b828f2d6ad106fb126ecef8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656707e11e671ed54c96f7ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656707e11e671ed54c96f7ec\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nWhen the if condition evaluates to True, it means that the element in the left_part list is smaller than the element it is being compared to in the right_part list.\nIn that case, you can assign the left_part index to the sorted array.\nInside the if block, remove pass and assign left_part[left_array_index] to array[sorted_index].\n--hints--\nYou should replace pass with array[sorted_index] = left_part[left_array_index] in the body of the if statement.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_function(\"merge_sort\").find_whiles()[0].find_ifs()[0].find_body().is_equivalent(\"array[sorted_index] = left_part[left_array_index]\")`))\n})\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\n--fcc-editable-region--\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1334,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656707e11e671ed54c96f7ec.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "da4e477fb4bd65e71366076665d65485",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\65670d1ef177e7e2b76d9528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65670d1ef177e7e2b76d9528\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nThe if and else statements you created in the previous steps will assign elements to the sorted array.\nEach element assigned to the sorted array takes up an index in the list. So you have to move to the next index without an element.\nBelow the if/else block, but still within the while loop increment sorted_index by 1. This should not be in the body of the if or else statement\n--hints--\nYou should increment the current value of sorted_index by 1.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /^\\s{8}sorted_index\\s*(\\+=\\s*1|=\\s*sorted_index\\s*\\+\\s*1)/m);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\n--fcc-editable-region--\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\65670d1ef177e7e2b76d9528.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2f27a336ed9eb7e3118a8ab1fe9e4b02",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656709e50ed928da35260276.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656709e50ed928da35260276\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nIn a previous step, you assigned the element in the left_part to the array list because it was smaller. But this will not always be the case. In some comparison cases, the element on the right could be smaller.\nCreate an else clause to execute when the left_part index is not less than the right_part index.\nInside the else block, assign right_part[right_array_index] to array[sorted_index].\n--hints--\nYou should have array[sorted_index] = right_part[right_array_index] in the body of your else clause.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /else:\\s*[^}]*array\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\n--fcc-editable-region--\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1598,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656709e50ed928da35260276.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85d78148ce8add72e9a5bca4aec8af76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660ac60e22aa218400acb4b6\ntitle: Step 78\nchallengeType: 20\ndashedName: step-78\n--description--\nAnd now call the solve_sudoku method passing puzzle as the argument You should see the partially empty puzzle to solve, and the solved puzzle as the output With this, you completed the sudoku solver project --hints--\nYou should call solve_sudoku() and pass it puzzle as the argument js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"solve_sudoku(puzzle)\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Board:\ndef init(self, board):\nself board = board\ndef __str__(self):\nboard_str = ''\nfor row in self board:\nrow_str = [str(i) if i else '*' for i in row]\nboard_str += ' ' join(row_str)\nboard_str += '\\n'\nreturn board_str\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self valid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "33c67286b987824bdf8a9c86a62a49e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = self valid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True selfboard[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable ')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n--fcc-editable-region--\n--fcc-editable-region--\n```\n--solutions--\n```py\nclass Board:\ndef init(self, board):\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7052ee09cc31b9bfff377df9f54949e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2], [4, 3, 0, 0, 0, 0, 8, 0, 0], [0, 5, 0, 0, 3, 0, 0, 9, 0], [0, 4, 0, 0, 0, 0, 0, 2, 6], [0, 0, 0, 4, 6, 7, 0, 0, 0], [0, 8, 6, 7, 0, 4, 0, 0, 0], [0, 0, 0, 5, 1, 9, 0, 0, 8], [1, 7, 0, 0, 0, 6, 0, 0, 5] ] --fcc-editable-region-- --fcc-editable-region-- ``` --solutions-- ```py class Board: def init(self, board): selfboard = board\ndef __str__(self):\nboard_str = ''\nfor row in self board:\nrow_str = [str(i) if i else '*' for i in row]\nboard_str += ' ' join(row_str)\nboard_str += '\\n'\nreturn board_str\ndef find_empty_cell(self):\nfor row, contents in enumerate(self board):\ntry:\ncol = contents index(0)\nreturn row, col\nexcept ValueError:\npass\nreturn None\ndef valid_in_row(self, row, num):\nreturn num not in self board[row]\ndef valid_in_col(self, col, num):\nreturn all(self board[row][col] = num for row in range(9))\ndef valid_in_square(self, row, col, num):\nrow_start = (row // 3) * 3\ncol_start = (col // 3) * 3\nfor row_no in range(row_start, row_start + 3):\nfor col_no in range(col_start, col_start + 3):\nif self board[row_no][col_no] == num:\nreturn False\nreturn True\ndef is_valid(self, empty, num):\nrow, col = empty\nvalid_in_row = self valid_in_row(row, num)\nvalid_in_col = self valid_in_col(col, num)\nvalid_in_square = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "245955fcc30f42403b31254a089e980f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def valid_in_col(self, col, num): return all(self board[row][col] = num for row in range(9)) def valid_in_square(self, row, col, num): row_start = (row // 3) * 3 col_start = (col // 3) * 3 for row_no in range(row_start, row_start + 3): for col_no in range(col_start, col_start + 3): if self board[row_no][col_no] == num: return False return True def is_valid(self, empty, num): row, col = empty valid_in_row = self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num)\nreturn all([valid_in_row, valid_in_col, valid_in_square])\ndef solver(self):\nif (next_empty := self find_empty_cell()) is None:\nreturn True\nfor guess in range(1, 10):\nif self is_valid(next_empty, guess):\nrow, col = next_empty\nself board[row][col] = guess\nif self solver():\nreturn True\nself board[row][col] = 0\nreturn False\ndef solve_sudoku(board):\ngameboard = Board(board)\nprint(f'Puzzle to solve:\\n{gameboard}')\nif gameboard solver():\nprint(f'Solved puzzle:\\n{gameboard}')\nelse:\nprint('The provided puzzle is unsolvable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "40f2a70c5bb6ef02c29ae98a679eb4d7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= self valid_in_row(row, num) valid_in_col = self valid_in_col(col, num) valid_in_square = selfvalid_in_square(row, col, num) return all([valid_in_row, valid_in_col, valid_in_square]) def solver(self): if (next_empty := self find_empty_cell()) is None: return True for guess in range(1, 10): if self is_valid(next_empty, guess): row, col = next_empty self board[row][col] = guess if self solver(): return True self board[row][col] = 0 return False def solve_sudoku(board): gameboard = Board(board) print(f'Puzzle to solve:\\n{gameboard}') if gameboard solver(): print(f'Solved puzzle:\\n{gameboard}') else: print('The provided puzzle is unsolvable')\nreturn gameboard\npuzzle = [\n[0, 0, 2, 0, 0, 8, 0, 0, 0],\n[0, 0, 0, 0, 0, 3, 7, 6, 2],\n[4, 3, 0, 0, 0, 0, 8, 0, 0],\n[0, 5, 0, 0, 3, 0, 0, 9, 0],\n[0, 4, 0, 0, 0, 0, 0, 2, 6],\n[0, 0, 0, 4, 6, 7, 0, 0, 0],\n[0, 8, 6, 7, 0, 4, 0, 0, 0],\n[0, 0, 0, 5, 1, 9, 0, 0, 8],\n[1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\nsolve_sudoku(puzzle)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-classes-and-objects-by-building-a-sudoku-solver\\660ac60e22aa218400acb4b6.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "eedd930e97766d2498acb6ce4ba0ffb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656680b0fc79f2c38a34d90e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656680b0fc79f2c38a34d90e\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nNow it's time to sort and merge the lists (left_part and right_part) into the original array You can do this by comparing elements on both lists, and merging the smaller element to the main list You are going to do this comparison for all the indexes in left_part and right_part Create three variables: left_array_index, right_array_index, and sorted_index and set their values to 0 These variables will help you keep track of each index during the sorting process --hints--\nYou should have a variable named left_array_index inside your merge_sort function\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /left_array_index/);\n}\n})\n```\nThe value of left_array_index should be 0\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /left_array_index\\s*=\\s*0/);\n}\n})\n```\nYou should have a variable named right_array_index inside your merge_sort function\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /right_array_index/);\n}\n})\n```\nThe value of right_array_index should be 0\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /right_array_index\\s*=\\s*0/);\n}\n})\n```\nYou should have a variable named sorted_index inside your merge_sort function\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2941,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656680b0fc79f2c38a34d90e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dbacb9744929f4133674c9ee9a5e71e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656680b0fc79f2c38a34d90e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= merge_sort; assert match(function_body, /right_array_index/); } }) ``` The value of right_array_index should be 0 ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /right_array_index\\s*=\\s*0/); } }) ``` You should have a variable named sorted_index inside your merge_sort function ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers pythongetDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /sorted_index/);\n}\n})\n```\nThe value of sorted_index should be 0\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /sorted_index\\s*=\\s*0/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2941,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656680b0fc79f2c38a34d90e.md",
      "source_type": "git_repo"
    },
    "token_count": 315,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "48803198ab5f0864ffc544a062325296",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b19d31a09b65b4bc390a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b19d31a09b65b4bc390a\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nStill within the while loop, increment the value of left_array_index by 1.\n--hints--\nYou should use the += operator to increment the current value of left_array_index by one within the while loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):[^}]*\\bleft_array_index\\s*\\+=\\s*1\\b/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1530,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b19d31a09b65b4bc390a.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "80702c9c698f27e95bdda24e4fa3b934",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656710d1e0ec62253426db24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656710d1e0ec62253426db24\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nThe while loop you created compares one element from left_part with another in right_part, then adds the smaller element to the main array list It will continue this operation until there are no elements left to be compared But left_part may still have elements left while right_part has none, and vice versa Create another while loop to copy the remaining elements in left_part into the array list Use left_array_index < len(left_part) for the while condition --hints--\nYour while loop should have this condition: left_array_index < len(left_part) Don't forget to use the pass keyword in the body of the loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /^\\s{4}while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):/m);\n}\n})\n```\nYou should have the pass keyword in the body of your while loop\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656710d1e0ec62253426db24.md",
      "source_type": "git_repo"
    },
    "token_count": 310,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3bcf8f658e0060ac9ef7e9789d13211c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656710d1e0ec62253426db24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /^\\s{4}while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):/m); } }) ``` You should have the pass keyword in the body of your while loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assertmatch(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):[^}]*\\bpass\\b/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2222,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\656710d1e0ec62253426db24.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "14b242e256bfda43438132cec0f14306",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b0a63423f65dd30888df.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b0a63423f65dd30888df\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nRemove the pass keyword For the while loop's code block, assign left_part[left_array_index] to array[sorted_index] --hints--\nYou should have array[sorted_index] = left_part[left_array_index] in the body of the loop Don't forget to remove the pass keyword in the body of the loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):[^}]*\\barray\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*left_part\\s*\\[\\s*left_array_index\\s*\\]/);\n}\n})\n```\nYou should not have pass in the while loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):( :(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2076,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b0a63423f65dd30888df.md",
      "source_type": "git_repo"
    },
    "token_count": 306,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bb21136b9414be462629aa305ccfadc4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b0a63423f65dd30888df.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of the loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):[^}]*\\barray\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*left_part\\s*\\[\\s*left_array_index\\s*\\]/); } }) ``` You should not have pass in the while loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):( :(\\bpass\\b)[^}])*\\barray\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*left_part\\s*\\[\\s*left_array_index\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nwhile left_array_index < len(left_part):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2076,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b0a63423f65dd30888df.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2c88ea28d475be9f3222611384286702",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b20f829b7e69d43c232a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b20f829b7e69d43c232a\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nThe last thing to do for the while loop is to move to the next index in the sorted array.\nUsing the augmented assignment addition operator, add 1 to the value of sorted_index.\n--hints--\nYou should use the += operator to increment the current value of sorted_index by one within the while loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\):[^}]*\\bsorted_index\\s*\\+=\\s*1\\b/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1656,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b20f829b7e69d43c232a.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9606b56184bad77f356272d7d7a28d3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b68fac723e8c20223ed3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b68fac723e8c20223ed3\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nNow, use the += operator to increment right_array_index by 1.\n--hints--\nYou should have right_array_index += 1 within the while loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):[^}]*\\bright_array_index\\s*\\+=\\s*1\\b/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1630,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b68fac723e8c20223ed3.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "14a3984e036333fb2c761470bd7f9cc9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b6be44940a8e2a469c31.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b6be44940a8e2a469c31\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nFor the last step in the while loop, increment sorted_index by 1.\n--hints--\nYou should use the += operator to increment the current value of sorted_index by one within the while loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):[^}]*\\bsorted_index\\s*\\+=\\s*1\\b/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1708,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b6be44940a8e2a469c31.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d2c6f367172c6e987e0ca50246388e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b4e0bd29d17d4b53b16c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b4e0bd29d17d4b53b16c\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nNow, you are going to replicate the same while loop logic for right_part Create a while loop that runs when right_array_index is less than len(right_part), and use the pass keyword in the body of the loop --hints--\nYour while loop should have this condition: right_array_index < len(right_part) Don't forget to use the pass keyword in the body of the loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /^\\s{4}while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):/m);\n}\n})\n```\nYou should have the pass keyword in the body of your while loop\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2123,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b4e0bd29d17d4b53b16c.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "43c9851cdf8c78198df2f0fb2257c775",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b4e0bd29d17d4b53b16c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /^\\s{4}while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):/m); } }) ``` You should have the pass keyword in the body of your while loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assertmatch(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):[^}]*\\bpass\\b/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2123,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b4e0bd29d17d4b53b16c.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "23ae61690b1557ab4bfba82a6a69d1e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b5c820a6a1859786e774.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b5c820a6a1859786e774\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nWithin the while loop, assign right_part[right_array_index] to array[sorted_index] --hints--\nYou should have array[sorted_index] = right_part[right_array_index] in the body of the loop Don't forget to remove the pass keyword in the body of the loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):[^}]*\\barray\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]/);\n}\n})\n```\nThere should be no pass keyword in the while loop\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):( :(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b5c820a6a1859786e774.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a363c87250ea7f36be1f971771b774dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b5c820a6a1859786e774.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):[^}]*\\barray\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]/); } }) ``` There should be no pass keyword in the while loop ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /while\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):( :(\\bpass\\b)[^}])*\\barray\\s*\\[\\s*sorted_index\\s*\\]\\s*=\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nwhile right_array_index < len(right_part):\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2215,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b5c820a6a1859786e774.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "93b2012b9f21c30ca2249ba0c423addc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569beee367427c90c74899e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569beee367427c90c74899e\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nIt's time to test the merge_sort function!\nReplace pass with a list called numbers, and assign this list to it: [4, 10, 6, 14, 2, 1, 8, 5]\n--hints--\nYou should replace pass with a numbers list with these values: [4, 10, 6, 14, 2, 1, 8, 5]\njs\n({ test: () =>  assert.equal(__userGlobals.get(\"numbers\"), \"[4, 10, 6, 14, 2, 1, 8, 5]\") })\nYou should not have the pass keyword in the body of your if statement\njs\n({ test: () =>  assert(runPython(`\n_Node(_code).find_ifs()[0].find_body().is_equivalent(\"numbers = [4, 10, 6, 14, 2, 1, 8, 5]\")\n`)) })\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nif name == 'main':\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1852,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569beee367427c90c74899e.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "647a2ba991391f194524748211ba207e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b743630ee592a65a7e2f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b743630ee592a65a7e2f\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nBefore testing the merge_sort() function, you need to create a base case that stops the function execution when the length of array is less than or equal to 1.\nThis base case will stop the recursion call. Without it, the merge sort operation would continue to run even when the list has been sorted or has no element in it.\nRight after the function declaration, create an if statement with this condition: len(array) <= 1. Use the pass keyword in the function's body.\n--hints--\nYou should create an if statement to check if len(array) <= 1. Don't forget to use the pass keyword in the body of the if statement.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_function(\"merge_sort\").find_ifs()[0].find_conditions()[0].is_equivalent(\"len(array) <= 1\")\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef merge_sort(array):\n--fcc-editable-region--\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2001,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569b743630ee592a65a7e2f.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "493fbfc91ada5e8c1ab5313542425c04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c05b9166f9d5bb36c09e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569c05b9166f9d5bb36c09e\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nUse the print() function to print the string 'Unsorted array:'.\n--hints--\nYou should have print('Unsorted array:')\njs\n({ test: () => assert.match(code, /^\\s{4}print\\s*\\(\\s*('|\")Unsorted array:\\1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nif name == 'main':\nnumbers = [4, 10, 6, 14, 2, 1, 8, 5]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c05b9166f9d5bb36c09e.md",
      "source_type": "git_repo"
    },
    "token_count": 378,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9b7ac7461976e9ef18fedbeafaf8bc85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c166d708dcdf7c8fd34c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569c166d708dcdf7c8fd34c\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nCall the print() function again to print the numbers list. This will print the unsorted list in the console.\n--hints--\nYou should have print(numbers) in your code.\njs\nassert.match(code, /^\\s{4}print\\s*\\(\\s*numbers\\s*\\)/m)\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nif name == 'main':\nnumbers = [4, 10, 6, 14, 2, 1, 8, 5]\nprint('Unsorted array:')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c166d708dcdf7c8fd34c.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "6620c5726534086c9aa6c358982dc8e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569bca4dd9feab7b295a5e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569bca4dd9feab7b295a5e1\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nReplace the pass keyword within the if statement with a return statement This will stop the execution of the merge_sort function when the given condition is true --hints--\nYou should replace pass with a return statement in the body of the if statement ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /if\\s+len\\(\\s*array\\s*\\)\\s*<=\\s*1:\\s*return/);\n}\n})\n```\nThere should be no pass keyword in the body of the if statement\n```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert match(function_body, /if\\s+len\\(\\s*array\\s*\\)\\s*<=\\s*1:\\s*( *\\bpass\\b)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569bca4dd9feab7b295a5e1.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b99010108d0bc1f4dfa2eb952beac390",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569bca4dd9feab7b295a5e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /if\\s+len\\(\\s*array\\s*\\)\\s*<=\\s*1:\\s*return/); } }) ``` There should be no pass keyword in the body of the if statement ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; assert match(function_body, /if\\s+len\\(\\s*array\\s*\\)\\s*<=\\s*1:\\s*( *\\bpass\\b)*return/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef merge_sort(array):\nif len(array) <= 1:\npass\n--fcc-editable-region--\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569bca4dd9feab7b295a5e1.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e31e2cbd6b37a050ea2c63af423503cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c1aeecaf95e25a3e2573.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569c1aeecaf95e25a3e2573\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nAfter your print() calls, call the merge_sort function and pass in the numbers list as an argument.\n--hints--\nYou should call the merge_sort function passing numbers as the argument.\njs\n({ test: () => assert.match(code, /merge_sort\\s*\\(\\s*numbers\\s*\\)/) })\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nif name == 'main':\nnumbers = [4, 10, 6, 14, 2, 1, 8, 5]\nprint('Unsorted array: ')\nprint(numbers)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1628,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c1aeecaf95e25a3e2573.md",
      "source_type": "git_repo"
    },
    "token_count": 387,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "932ebf40b8c731c0ae7e5016e59383ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577254891048c8f2c19e961.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6577254891048c8f2c19e961\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nCall the merge_sort() function again. Do not pass in any argument for now.\n--hints--\nYou should call merge_sort() again after the previous function call.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /merge_sort\\s*\\(\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 804,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577254891048c8f2c19e961.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b33c9973e4227129311f2d3e64baa778",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\65772ef923f922cd720e5008.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65772ef923f922cd720e5008\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nPass left_part as the argument to the merge_sort() call you added in the last step.\n--hints--\nYou should pass left_part as the argument to your merge_sort() call.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /merge_sort\\s*\\(\\s*left_part\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\65772ef923f922cd720e5008.md",
      "source_type": "git_repo"
    },
    "token_count": 205,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "60d0d572e87cc15cfb8a2f21d18b8818",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577320da0d4c2e594d418e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6577320da0d4c2e594d418e2\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nPass right_part as the argument to the merge_sort() call you added in the last step.\n--hints--\nYou should pass right_part as the argument to your last merge_sort() call.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /merge_sort\\s*\\(\\s*right_part\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577320da0d4c2e594d418e2.md",
      "source_type": "git_repo"
    },
    "token_count": 215,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d1e0a9377980cdcf953a84aef1fcf4e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\657823a9f4f372518614c8b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657823a9f4f372518614c8b7\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nStill within the else block, increment right_array_index by 1.\n--hints--\nYou should add 1 to the current value of right_array_index.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nconst allowedMatches = [\n/else:\\s*[^}]*right_array_index\\s*\\+=\\s*1/,\n/else:\\s*[^}]*right_array_index\\s*=\\s*right_array_index\\s*\\+\\s*1/\n]\nconst anyMatch = allowedMatches.some((match) => match.test(function_body))\nassert.isTrue(anyMatch);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\n--fcc-editable-region--\nelse:\narray[sorted_index] = right_part[right_array_index]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1446,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\657823a9f4f372518614c8b7.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2e4b819dbd659cb86ec8a4bbdedd9366",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\657f3a661730891aa64f3568.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f3a661730891aa64f3568\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nUse the slice syntax to extract the right half of array and assign it to a variable named right_part.\n--hints--\nYou should have a variable named right_part\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /right_part\\s*(?!=)/m);\n}\n})\n```\nYou should assign array[middle_point:] to the right_part variable\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nassert.match(function_body, /right_part\\s*=\\s*array\\s*\\[\\s*middle_point\\s*:\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1115,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\657f3a661730891aa64f3568.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "23ecb6871b29d225345cca2c780ab777",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c2cbf6c993ea8cd85682.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569c2cbf6c993ea8cd85682\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nAt this point, the numbers list has been sorted Call the print function to print string 'Sorted array: ' and the sorted list To do that, concatenate 'Sorted array: ' and str(numbers) in the print() call With that, the merge sort algorithm is complete --hints--\nYou should have print('Sorted array: ' + str(numbers)) in your code Remember to add the space after the colon js\n({ test: () => assert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c2cbf6c993ea8cd85682.md",
      "source_type": "git_repo"
    },
    "token_count": 130,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "890690e78d4385c374af29d2e6e5aafa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c2cbf6c993ea8cd85682.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "33 challengeType: 20 dashedName: step-33 --description-- At this point, the numbers list has been sorted Call the print function to print string 'Sorted array: ' and the sorted list To do that, concatenate 'Sorted array: ' and str(numbers) in the print() call With that, the merge sort algorithm is complete --hints-- You should have print('Sorted array: ' + str(numbers)) in your code Remember to add the space after the colon js ({ test: () => assertmatch(code, /^\\s{4}print\\s*\\(\\s*(\"|')Sorted array: \\1\\s*\\+\\s*str\\s*\\(\\s*numbers\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\nif name == 'main':\nnumbers = [4, 10, 6, 14, 2, 1, 8, 5]\nprint('Unsorted array: ')\nprint(numbers)\nmerge_sort(numbers)\n--fcc-editable-region--\n```\n--solutions--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nif name == 'main':\nnumbers = [4, 10, 6, 14, 2, 1, 8, 5]\nprint('Unsorted array: ')\nprint(numbers)\nmerge_sort(numbers)\nprint('Sorted array: ' + str(numbers))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3135,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6569c2cbf6c993ea8cd85682.md",
      "source_type": "git_repo"
    },
    "token_count": 714,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "08ba9bc5bca76308c40189b8c676661a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577562501feabdf0984a184.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6577562501feabdf0984a184\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nAfter assigning the left_part index to the sorted array, increment left_array_index by 1 --hints--\nYou should add 1 to the current value of left_array_index ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\");\nconst { function_body } = merge_sort;\nconst allowedMatches = [\n/while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*[^}]*if\\s+left_part\\s*\\[\\s*left_array_index\\s*\\]\\s*<\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]\\s*:\\s*[^}]*left_array_index\\s*\\+=\\s*1\\s*( *\\bpass\\b)/,\n/while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*[^}]*if\\s+left_part\\s*\\[\\s*left_array_index\\s*\\]\\s*<\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]\\s*:\\s*[^}]*left_array_index\\s*=\\s*left_array_index\\s*\\+\\s*1\\s*( *\\bpass\\b)/\n]\nconst anyMatch = allowedMatches some((match) => match test(function_body));\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1793,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577562501feabdf0984a184.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dfdb4cfdf85db17138741070fd742ef3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577562501feabdf0984a184.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Step 14 challengeType: 20 dashedName: step-14 --description-- After assigning the left_part index to the sorted array, increment left_array_index by 1 --hints-- You should add 1 to the current value of left_array_index ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const merge_sort = __helpers python getDef(\"\\n\" + transformedCode, \"merge_sort\"); const { function_body } = merge_sort; const allowedMatches = [ /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*[^}]*if\\s+left_part\\s*\\[\\s*left_array_index\\s*\\]\\s*<\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]\\s*:\\s*[^}]*left_array_index\\s*\\+=\\s*1\\s*( *\\bpass\\b)/, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*[^}]*if\\s+left_part\\s*\\[\\s*left_array_index\\s*\\]\\s*<\\s*right_part\\s*\\[\\s*right_array_index\\s*\\]\\s*:\\s*[^}]*left_array_index\\s*=\\s*left_array_index\\s*\\+\\s*1\\s*( *\\bpass\\b)/ ] const anyMatch = allowedMatches some((match) => match test(function_body)); assertisTrue(anyMatch);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\n--fcc-editable-region--\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1793,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\6577562501feabdf0984a184.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "42e8155b7fb27ff76cf9a5b6b0e4b680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\657f59751d5a5c9b069ae0f3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f59751d5a5c9b069ae0f3\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nYou can use the __name__ variable to determine if a Python script is being run as the main program or if it is being imported as a module (code written in another Python file).\nIf the value of __name__ is set to '__main__', it implies that the current script is the main program, and not a module.\nIn this project, you'll use the current script as the main program.\nCreate an if statement that checks whether the value of __name__ is '__main__'.\nUse the pass keyword in the body of the if statement.\n--hints--\nYour if statement should check if __name__ has a value of '__main__'\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_ifs()[0].find_conditions()[0].is_equivalent(\"__name__ == '__main__'\")\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef merge_sort(array):\nif len(array) <= 1:\nreturn\nmiddle_point = len(array) // 2\nleft_part = array[:middle_point]\nright_part = array[middle_point:]\nmerge_sort(left_part)\nmerge_sort(right_part)\nleft_array_index = 0\nright_array_index = 0\nsorted_index = 0\nwhile left_array_index < len(left_part) and right_array_index < len(right_part):\nif left_part[left_array_index] < right_part[right_array_index]:\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nelse:\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\nwhile left_array_index < len(left_part):\narray[sorted_index] = left_part[left_array_index]\nleft_array_index += 1\nsorted_index += 1\nwhile right_array_index < len(right_part):\narray[sorted_index] = right_part[right_array_index]\nright_array_index += 1\nsorted_index += 1\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-data-structures-by-building-the-merge-sort-algorithm\\657f59751d5a5c9b069ae0f3.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a0fe083bc8c1d08c8e511daecd16a073",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65fd4b3bedee044b4b957d33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd4b3bedee044b4b957d33\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nCreate a Projectile class with an __init__ method that initializes the class using three arguments: the starting speed, the starting height, and the starting angle of the throw of the projectile, in this order.\nInside the __init__ method, assign these arguments to three private attributes: __speed, __height, and __angle. The angle provided will be in degrees; however, it should be stored internally in radians. To achieve this, use the math.radians() function to convert the angle from degrees to radians when assigning it to __angle.\nThe use of two underscores before an attribute name triggers name mangling in Python. This means the attributes are not directly accessible from outside the class using their given names, and must be accessed with the mangled names like ball._Projectile__height if needed externally, indicating these are intended for internal use only.\n--hints--\nYou should use class Projectile: to create the class.\n``js\n({test: () => assert(runPython(_Node(_code).has_class(\"Projectile\")`))})\n```\nYou should have an __init__ method inside the Projectile class.\njs\n({test: () => assert(runPython(`_Node(_code).find_class(\"Projectile\").find_body().has_function(\"__init__\")`))})\nA new Projectile class instance should have the values of the three attributes properly initialized.\n``js\n({test: () => assert(runPython(\nimport math\nGRAVITATIONAL_ACCELERATION = 9.81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\np = Projectile(20, 21, 22)\np._Projectile__height == 21 and p._Projectile__speed == 20 and p._Projectile__angle == math.radians(22)\n`))})\n```\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9.81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1941,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65fd4b3bedee044b4b957d33.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "053897b82a87c9a543130d47efeb112a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65fd4bd84561a14d3e720061.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65fd4bd84561a14d3e720061\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nThe class variable __slots__ has a special usage in Python classes. Declaring __slots__ and assigning it a sequence of strings restricts the creation of attributes to those included in that sequence. Also, it prevents the creation of the __dict__ special attribute and it allows for more efficient attribute access.\nYou should use the __slots__ variable inside the class to define which attributes the class has: assign to __slots__ a tuple containing 3 strings, each equal to one of the attribute names defined in the __init__.\n--hints--\nYou should assign to __slots__ a tuple that contains '__height', '__speed', and '__angle'.\n``js\n({test: () => assert(runPython(\nfrom itertools import permutations\nslots = _Node(_code).find_class(\"Projectile\").find_body().find_variable(\"slots\")\nperms = permutations((\"height\", \"__speed\", \"__angle\"))\nany(slots.is_equivalent(f'__slots = {perm}') for perm in perms)\n`))})\n```\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9.81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\n--fcc-editable-region--\nclass Projectile:\ndef __init__(self, speed, height, angle):\nself.__speed = speed\nself.__height = height\nself.__angle = math.radians(angle)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65fd4bd84561a14d3e720061.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a88881beb87eab66a7093dc237ee519a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65f569725359e10d345bc52a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65f569725359e10d345bc52a\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nYou are going to build a program that calculates and draws the trajectory of a projectile given the angle, speed and height of the throw Start by importing math, you will use it a lot in this project as it has useful methods like math radians, math cos, math sin and others Also create these variables to have the value of the gravitational acceleration and some special symbols that will be useful later (use copy and paste for these) py\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\n--hints--\nUse import math to import the math module js\n({test: () => assert(runPython(`_Node(_code) has_import('import math')`))})\nYou should have a GRAVITATIONAL_ACCELERATION variable with value of 9 81 js\n({test: () => runPython(`\nassert _Node(_code) has_variable(\"GRAVITATIONAL_ACCELERATION\"), \"missing variable\"\nassert _Node(_code) find_variable(\"GRAVITATIONAL_ACCELERATION\") is_equivalent('GRAVITATIONAL_ACCELERATION = 9 81'), \"variable has wrong value\"\n`)})\nYou should have a PROJECTILE variable with value of \"∙\" js\n({test: () => runPython(`\nassert _Node(_code) has_variable(\"PROJECTILE\"), \"missing variable\"\nassert _Node(_code) find_variable(\"PROJECTILE\") is_equivalent('PROJECTILE = \"∙\"'), \"variable has wrong value\"\n`)})\nYou should have a x_axis_tick variable with value of \"T\" js\n({test: () => runPython(`\nassert _Node(_code) has_variable(\"x_axis_tick\"), \"missing variable\"\nassert _Node(_code) find_variable(\"x_axis_tick\") is_equivalent('x_axis_tick = \"T\"'), \"variable has wrong value\"\n`)})\nYou should have a y_axis_tick variable with value of \"⊣\" js\n({test: () => runPython(`\nassert _Node(_code) has_variable(\"y_axis_tick\"), \"missing variable\"\nassert _Node(_code) find_variable(\"y_axis_tick\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65f569725359e10d345bc52a.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "374842d779e6932f12e6cdd4f6e7f460",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65f569725359e10d345bc52a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"∙\" js ({test: () => runPython(` assert _Node(_code) has_variable(\"PROJECTILE\"), \"missing variable\" assert _Node(_code) find_variable(\"PROJECTILE\") is_equivalent('PROJECTILE = \"∙\"'), \"variable has wrong value\" `)}) You should have a x_axis_tick variable with value of \"T\" js ({test: () => runPython(` assert _Node(_code) has_variable(\"x_axis_tick\"), \"missing variable\" assert _Node(_code) find_variable(\"x_axis_tick\") is_equivalent('x_axis_tick = \"T\"'), \"variable has wrong value\" `)}) You should have a y_axis_tick variable with value of \"⊣\" js ({test: () => runPython(` assert _Node(_code) has_variable(\"y_axis_tick\"), \"missing variable\" assert _Node(_code) find_variable(\"y_axis_tick\")is_equivalent('y_axis_tick = \"⊣\"'), \"variable has wrong value\"\n`)})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\65f569725359e10d345bc52a.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "52780e1c6cc42c3855d293f186ff83ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660400f02cf3a76795b82d4e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660400f02cf3a76795b82d4e\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nThe first thing to set up is a method that calculates the displacement of the projectile, which is the horizontal space traveled from the throw to when the projectile touches the ground Create a method __calculate_displacement, which has only self as a parameter, and return the displacement of the projectile Use the following formula to compute the projectile displacement:\n\\[ d = \\frac{v \\cdot \\cos\\theta \\cdot \\left(v\\cdot\\sin\\theta + \\sqrt{v^2 \\cdot \\sin^2\\theta + 2 \\cdot g \\cdot h}\\right)}{g} \\]\nIn which $d$ is the displacement, $v$ is the starting speed, $\\theta$ is the angle and $h$ is the starting height of the projectile For $g$ you can use the GRAVITATIONAL_ACCELERATION variable You should use the methods math cos() and math sin() for the trigonometric functions and math sqrt() to calculate the square root Also you should know that $x^y$ is written as x ** y in python Also $\\sin^2\\theta$ means that the value resulting from the sine is then squared Remember that with name mangling you need to call the method as _Projectile__calculate_displacement if you want to test, or use it from outside of the class:\npy\nball = Projectile(10, 3, 45)\ndisplacement_of_ball = ball _Projectile__calculate_displacement() # 12 6173996009878\n--hints--\nYou should declare a method called __calculate_displacement with def __calculate_displacement(self): js\n({test: () => assert(runPython(`_Node(_code) find_class(\"Projectile\") has_function(\"__calculate_displacement\")`))})\nThe __calculate_displacement method should have only the self argument js\n({test: () => assert(runPython(`_Node(_code) find_class(\"Projectile\") find_function(\"__calculate_displacement\") has_args('self')`))})\nThe __calculate_displacement method should return the correct value js\n({test: () => assert(runPython(`\np = Projectile(20, 21, 22)\ndisp = p",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660400f02cf3a76795b82d4e.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f7ed8cd814958d171d50ac9b3103c85",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660400f02cf3a76795b82d4e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "use it from outside of the class: py ball = Projectile(10, 3, 45) displacement_of_ball = ball _Projectile__calculate_displacement() # 12 6173996009878 --hints-- You should declare a method called __calculate_displacement with def __calculate_displacement(self): js ({test: () => assert(runPython(`_Node(_code) find_class(\"Projectile\") has_function(\"__calculate_displacement\")`))}) The __calculate_displacement method should have only the self argument js ({test: () => assert(runPython(`_Node(_code) find_class(\"Projectile\") find_function(\"__calculate_displacement\") has_args('self')`))}) The __calculate_displacement method should return the correct value js ({test: () => assert(runPython(` p = Projectile(20, 21, 22) disp = p_Projectile__calculate_displacement()\nround(disp, 2) == 55 06 and round(disp, 2) = disp\n`))})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660400f02cf3a76795b82d4e.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1ed5ff0757e2f89ce97f152fe9812873",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660fcf3e1b9bb056b2edb567.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 660fcf3e1b9bb056b2edb567\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nAt this point you are ready to create the string representation Start by creating an instance of the Projectile class Below the class definition, create a ball variable and assign it a call to Projectile using 10, 3, 45 as arguments Define a __str__ method within the class, to give your instance a proper string representation, and make it return a string with the following format:\n```py\nProjectile details:\nspeed: 10 m/s\nheight: 3 m\nangle: 45°\ndisplacement: 12 6 m\n```\nIt should start and end with a new line character, the angle has to be written as an integer in degrees and the displacement should be printed with one decimal digit You will find useful math degrees to convert the angle from radians to degrees When you are ready you can print(ball) to test your function --hints--\nYou should have a ball variable js\n({test: () => assert(runPython(`_Node(_code) has_variable('ball')`))})\nThe ball variable should have a value of Projectile(10, 3, 45) js\n({test: () => assert(runPython(`_Node(_code) find_variable('ball') is_equivalent('ball = Projectile(10, 3, 45)')`))})\nThe string representation for Projectile(45, 45, 45) should be correct js\n({test: () => assert(runPython(\n`\nball = Projectile(45, 45, 45)\nstr(ball) == \"\"\"\nProjectile details:\nspeed: 45 m/s\nheight: 45 m\nangle: 45°\ndisplacement: 244 4 m\n\"\"\"`\n))})\nThe string representation should also be correct for other instances js\n({test: () => assert(runPython(`p = Projectile(10, 10, 10)\nstr(\np\n) == \"\"\"\nProjectile details:\nspeed: 10 m/s\nheight: 10 m\nangle: 10°\ndisplacement: 15 9 m\n\"\"\"`))})\nYou should have a print(ball) call js\n({\ntest: () => runPython(`\ncalls = _Node(_code) find_calls('print')\nassert any(c",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660fcf3e1b9bb056b2edb567.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b3c9acaa70adaf0722370e898281dfc6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660fcf3e1b9bb056b2edb567.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "str(ball) == \"\"\" Projectile details: speed: 45 m/s height: 45 m angle: 45° displacement: 244 4 m \"\"\"` ))}) The string representation should also be correct for other instances js ({test: () => assert(runPython(`p = Projectile(10, 10, 10) str( p ) == \"\"\" Projectile details: speed: 10 m/s height: 10 m angle: 10° displacement: 15 9 m \"\"\"`))}) You should have a print(ball) call js ({ test: () => runPython(` calls = _Node(_code) find_calls('print') assert any(cis_equivalent('print(ball)') for c in calls)\n`)\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2866,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\660fcf3e1b9bb056b2edb567.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "70b1abf3900eddb7aa0351341d9ff6f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6616ec0bf9ee8548ce6b0f08.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6616ec0bf9ee8548ce6b0f08\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nNow it's time to work on calculating the coordinates of the trajectory Create a method of the Projectile class named __calculate_y_coordinate, it should have, other than self, an x parameter \\[ y = y_0 + x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta} \\]\nThe above is the formula to calculate the vertical position $y$ for any given horizontal position $x$, having the starting angle $\\theta$, speed $v_0$ and height $y_0$ You will need to use math tan() and math cos() and remember that x ** y is the way to write $x^y$, and that the value of $g$ is in the variable GRAVITATIONAL_ACCELERATION Implement the method so that it returns the $y$ coordinate If you want to test the method, from outside of class, you can call ball _Projectile__calculate_y_coordinate() with a number as an argument after ball is declared --hints--\nYour Projectile class should have a method named __calculate_y_coordinate js\n({test: () => {assert(runPython(`_Node(_code) find_class('Projectile') has_function('__calculate_y_coordinate')`))}})\nThe __calculate_y_coordinate method should have self, x as arguments js\n({test: () => {assert(runPython(`_Node(_code) find_class('Projectile') find_function('__calculate_y_coordinate') has_args('self, x')`))}})\nThe method should return the correct value For Projectile(12, 12, 12), given the 4 $x$ coordinates of 0, 1, 2 and 3, the y coordinate should be approximately 12, 12 18, 12 28, 12 32 js\n({test: () => {\nassert(runPython(`\na = Projectile(12, 12, 12)\nall([round(a _Projectile__calculate_y_coordinate(x), 2) == y for x,y in [(0, 12 0), (1, 12 18), (2, 12 28), (3, 12 32)]])\n`))\n}})\nThe method should return the correct value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3682,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6616ec0bf9ee8548ce6b0f08.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a2a16d9f1fd9fb22320111641f7de48b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6616ec0bf9ee8548ce6b0f08.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "x')`))}}) The method should return the correct value For Projectile(12, 12, 12), given the 4 $x$ coordinates of 0, 1, 2 and 3, the y coordinate should be approximately 12, 12 18, 12 28, 12 32 js ({test: () => { assert(runPython(` a = Projectile(12, 12, 12) all([round(a _Projectile__calculate_y_coordinate(x), 2) == y for x,y in [(0, 12 0), (1, 12 18), (2, 12 28), (3, 12 32)]]) `)) }}) The method should return the correct valueFor Projectile(45, 12, 22), given the $x$ coordinates of 6, 9, 10 and 12 the y coordinate should be approximately 14 32, 15 41, 15 76, 16 44 js\n({test: () => {\nassert(runPython(`\nb = Projectile(45, 12, 22)\nall([round(b _Projectile__calculate_y_coordinate(x), 2) == y for x,y in [(6, 14 32), (9, 15 41), (10, 15 76), (12, 16 44)]])\n`))\n}})\nThe __calculate_y_coordinate method should not round the result js\n({test: () => assert isFalse(runPython(`Projectile(12, 13, 14) _Projectile__calculate_y_coordinate(5) == round(Projectile(12, 13, 14) _Projectile__calculate_y_coordinate(5), 2)`))})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self __speed} m/s\nheight: {self __height} m\nangle: {round(math degrees(self __angle))}°\ndisplacement: {round(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3682,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6616ec0bf9ee8548ce6b0f08.md",
      "source_type": "git_repo"
    },
    "token_count": 508,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "54de51dbf5a10cc019d5ac4400bb5def",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6616ec0bf9ee8548ce6b0f08.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() => assert isFalse(runPython(`Projectile(12, 13, 14) _Projectile__calculate_y_coordinate(5) == round(Projectile(12, 13, 14) _Projectile__calculate_y_coordinate(5), 2)`))}) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {self __speed} m/s height: {self __height} m angle: {round(math degrees(self __angle))}° displacement: {round(self__calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\n--fcc-editable-region--\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3682,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6616ec0bf9ee8548ce6b0f08.md",
      "source_type": "git_repo"
    },
    "token_count": 323,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c6a540c761b895773ce497f9ddd318ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fa453ec8033322b3ab2e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662fa453ec8033322b3ab2e3\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nIt's time to talk about encapsulation and getters You have written the three instance attributes to be private using a leading double underscore Note that these attributes are called private by convention: although they can still be accessed from outside, it is agreed upon to not do that Getters are what can be used to get the values from outside To define a getter, you define a method that returns the value of the desired attribute and give it a @property decorator:\npy\nclass Nest: @property\ndef number_of_eggs(self):\nreturn self __number_of_eggs\nThe decorator changes the method into a property, meaning that the method is not called like a regular method, but it's used like an attribute:\npy\nn = Nest()\nprint(n number_of_eggs)\nIn the example above, the private attribute __number of eggs is accessed through the number_of_eggs property of n Create a getter named speed and make it return the value of the private attribute __speed --hints--\nYou should define a speed method js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') has_function('speed')\n`))})\nYour speed method should have a single parameter, self js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_function('speed') has_args('self')\n`))})\nYour speed method should have a @property decorator js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_function('speed') has_decorators('property')\n`))})\nYour speed method should return the value of the private attribute __speed js\n({test: () => assert(runPython(`\na = Projectile(22, 23, 24)\na speed == 22\n`))})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3649,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fa453ec8033322b3ab2e3.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "848e9b3ddd2168fbf3843496f96ca026",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fa453ec8033322b3ab2e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=> assert(runPython(` _Node(_code) find_class('Projectile') find_function('speed') has_decorators('property') `))}) Your speed method should return the value of the private attribute __speed js ({test: () => assert(runPython(` a = Projectile(22, 23, 24) a speed == 22 `))}) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = mathradians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self __speed} m/s\nheight: {self __height} m\nangle: {round(math degrees(self __angle))}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n--fcc-editable-region--\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3649,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fa453ec8033322b3ab2e3.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d06c7cf4a80d9e064868f1f29230d875",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662f9f65c50bd21d05ffdee9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662f9f65c50bd21d05ffdee9\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nDefine a method named calculate_all_coordinates, which calculates the coordinates for all \\(x\\) values from 0 up to the displacement rounded up (not inclusive), and then returns them as a list of tuples (x, y) Then, call the calculate_all_coordinates method on the ball instance and assign the output to a new variable named coordinates You can use math ceil() to round up a number to the smallest integer greater than or equal to that number --hints--\nYou should define a calculate_all_coordinates method with a single argument, self js\n({test: () => assert(runPython(`\nc = _Node(_code) find_class('Projectile')\nc has_function('calculate_all_coordinates') and c find_function('calculate_all_coordinates') has_args('self')\n`))})\nYou should call the calculate_all_coordinates method on ball and assign the result to a variable named coordinates ``js\n({\ntest: () => runPython(\nassert _Node(_code) has_variable('coordinates'), \"coordinates variable is missing\"\nassert _Node(_code) find_variable('coordinates') is_equivalent('coordinates = ball calculate_all_coordinates()'), \"wrong value assigned to coordinates variable\"\n`)\n})\n```\nThe calculate_all_coordinates method should return a list containing all the (x, y) coordinates ``js\n({test: () => assert(runPython(\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nball = Projectile(12, 13, 14)\nexpected = [(x, ball _Projectile__calculate_y_coordinate(x)) for x in range(math ceil(ball _Projectile__calculate_displacement()))]\nactual = ball calculate_all_coordinates()\nexpected == actual\n`))})\n```\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3387,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662f9f65c50bd21d05ffdee9.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bb7b74efe3e6f80b034813f4267fd25d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662f9f65c50bd21d05ffdee9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" ball = Projectile(12, 13, 14) expected = [(x, ball _Projectile__calculate_y_coordinate(x)) for x in range(math ceil(ball _Projectile__calculate_displacement()))] actual = ball calculate_all_coordinates() expected == actual `))}) ``` --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = mathradians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self __speed} m/s\nheight: {self __height} m\nangle: {round(math degrees(self __angle))}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x**2 / (\n2 * self __speed**2 * math cos(self __angle)**2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3387,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662f9f65c50bd21d05ffdee9.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d3fc7aa5ff19ab55976979fb877b18bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fc35902038376c7a00b3c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662fc35902038376c7a00b3c\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nOnce you have the getters, you can write the setters, which allow you to set the value of an attribute in an indirect manner Following the example of the last step, a setter would be written as:\npy\nclass Nest: @number_of_eggs setter\ndef number_of_eggs(self, new_value):\nself __number_of_eggs = new_value\nSame as the getter, a setter is not called like a method but used like an attribute:\npy\nnest = Nest()\nnest number_of_eggs = 12\nThis way of writing calls the setter and set the new value For this step you will have to write the setters for the three private attributes Remember that for the angle the value is received in degrees but saved internally in radians --hints--\nYou should define a new speed method js\n({test: () => assert(runPython(`\nlen(_Node(_code) find_class('Projectile') find_functions('speed')) == 2\n`))})\nYour new speed method should have a @speed setter decorator js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_functions('speed')[1] has_decorators('speed setter')\n`))})\nYour new speed method should set the value of the private __speed property js\n({test: () => assert(runPython(`\na = Projectile(22, 23, 24)\na speed = 33\na speed == 33\n`))})\nYou should define a new height method js\n({test: () => assert(runPython(`\nlen(_Node(_code) find_class('Projectile') find_functions('height')) == 2\n`))})\nYour new height method should have a @height setter decorator js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_functions('height')[1] has_decorators('height setter')\n`))})\nYour new height method should set the value of the private __height property js\n({test: () => assert(runPython(`\na = Projectile(22, 23, 24)\na height = 44\na height == 44\n`))})\nYou should define a new angle method js\n({test: () => assert(runPython(`\nlen(_Node(_code)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fc35902038376c7a00b3c.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "319a8a171e29da9d708a05008417015a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fc35902038376c7a00b3c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "({test: () => assert(runPython(` len(_Node(_code) find_class('Projectile') find_functions('height')) == 2 `))}) Your new height method should have a @height setter decorator js ({test: () => assert(runPython(` _Node(_code) find_class('Projectile') find_functions('height')[1] has_decorators('height setter') `))}) Your new height method should set the value of the private __height property js ({test: () => assert(runPython(` a = Projectile(22, 23, 24) a height = 44 a height == 44 `))}) You should define a new angle method js ({test: () => assert(runPython(` len(_Node(_code)find_class('Projectile') find_functions('angle')) == 2\n`))})\nYour new angle method should have a @angle setter decorator js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_functions('angle')[1] has_decorators('angle setter')\n`))})\nYour angle method should set the value of the private __angle property js\n({test: () => assert(runPython(`\na = Projectile(22, 23, 24)\na angle = 12\na angle == 12\n`))})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self __speed} m/s\nheight: {self __height} m\nangle: {round(math degrees(self __angle))}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fc35902038376c7a00b3c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5e4d54ffc0d7b69d626e3e896781e497",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fc35902038376c7a00b3c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {self __speed} m/s height: {self __height} m angle: {round(math degrees(self __angle))}° displacement: {round(self __calculate_displacement(), 1)} m ''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self __angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = mathsqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n--fcc-editable-region--\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\662fc35902038376c7a00b3c.md",
      "source_type": "git_repo"
    },
    "token_count": 364,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "83c3e1bbf68564dfe9a096e3aa485e59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66335223f3e2a31d62d84367.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66335223f3e2a31d62d84367\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nGoing back to the projectile trajectory calculator, now you'll create a new class that accepts a list of coordinates and creates the trajectory drawing Create a new class Graph, which should be instantiated with a private attribute __coordinates where the list of coordinates is stored Declare the __slots__ class variable and define the  __init__ and __repr__ special methods Also, create a Graph instance passing the coordinates variable and assign it to a new graph variable --hints--\nYou should create a new Graph class js\n({\ntest: () => assert(runPython(\n`_Node(_code) has_class('Graph')`\n))\n})\nYou should have the __slots__ variable inside the class js\n({\ntest: () => assert(runPython(\n`_Node(_code) find_class('Graph') has_variable('__slots__')`\n))\n})\nThe __slots__ variable should have a value of ('__coordinates') or ['__coordinates'] ``js\n({\ntest: () => (runPython(\nslots = _Node(_code) find_class('Graph') find_variable('slots')\nassert any(slots is_equivalent(str) for str in ['__slots__ = (\"__coordinates\")', '__slots__ = [\"__coordinates\"]'])`\n))\n})\n```\nYou should have an __init__ method js\n({\ntest: () => assert(runPython(\n`_Node(_code) find_class('Graph') has_function('__init__')`\n))\n})\nThe __init__ method should instantiate the __coordinates private property with the passed in value js\n({\ntest: () => assert(runPython(\n`\nl = [(3, 4), (4, 1), (3, 9)]\ng = Graph(l)\ng _Graph__coordinates == l\n`\n))\n})\nYou should have a __repr__ method js\n({\ntest: () => assert(runPython(\n`_Node(_code) find_class('Graph') has_function('__repr__')`\n))\n})\nThe __repr__ method should return the correct string js\n({\ntest: () => assert(runPython(\n`\nball = Projectile(10, 3, 45)\ncoords = ball",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66335223f3e2a31d62d84367.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5f990f48d4ecb5984c682e9d1befdd33",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66335223f3e2a31d62d84367.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should instantiate the __coordinates private property with the passed in value js ({ test: () => assert(runPython( ` l = [(3, 4), (4, 1), (3, 9)] g = Graph(l) g _Graph__coordinates == l ` )) }) You should have a __repr__ method js ({ test: () => assert(runPython( `_Node(_code) find_class('Graph') has_function('__repr__')` )) }) The __repr__ method should return the correct string js ({ test: () => assert(runPython( ` ball = Projectile(10, 3, 45) coords = ballcalculate_all_coordinates()\nrepr(Graph(coords)) == f'Graph({coords})'\n`\n))\n})\nYou should create a Graph instance passing in the coordinates variable and assign it to graph variable ``js\n({\ntest: () => {\nrunPython(\nassert _Node(_code) has_variable('graph'), \"variable graph is missing\"\nassert _Node(_code) find_variable('graph') is_equivalent('graph = Graph(coordinates)'), \"assignment to graph is wrong\"\n`)\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66335223f3e2a31d62d84367.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "985f8153fca1fc67ae1b65ac1fc9f6bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66335223f3e2a31d62d84367.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__str__(self): return f''' Projectile details: speed: {self speed} m/s height: {self height} m angle: {self angle}° displacement: {round(self __calculate_displacement(), 1)} m ''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self __angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = math sqrt(squared_component + gh_component) return horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self__angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f\"{self __class__ __name__}({self speed}, {self height}, {self angle})\"\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66335223f3e2a31d62d84367.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "084262da56e94d21ba7f549c11b94b7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\663353465bfb14259717da93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663353465bfb14259717da93\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nCreate a method create_coordinates_table, then at the end of the code print graph create_coordinates_table()) The method should use the __coordinates property and return a string containing all the coordinates, where x and y have always the same position, the values for x are always integers, and the values for y are always rounded to two decimal places:\npy\nx      y\n0   3 00\n1   3 90\n2   4 61\n3   5 12\n4   5 43\n5   5 55\n6   5 47\n7   5 19\n8   4 72\n9   4 05\n10   3 19\n11   2 13\n12   0 87\nThe table should start with a newline character and end with a newline character --hints--\nYou should have a create_coordinates_table() method js\n({\ntest: () => assert(runPython(\n`_Node(_code) find_class('Graph') has_function('create_coordinates_table')`\n))\n})\nThe create_coordiantes_table method for Projectile(10, 3, 45) should return '\\n  x      y\\n  0   3 00\\n  1   3 90\\n  2   4 61\\n  3   5 12\\n  4   5 43\\n  5   5 55\\n  6   5 47\\n  7   5 19\\n  8   4 72\\n  9   4 05\\n 10   3 19\\n 11   2 13\\n 12   0 87\\n' js\n({\ntest: () => assert(runPython(\n`a = \"\"\"\nx      y\n0   3 00\n1   3 90\n2   4 61\n3   5 12\n4   5 43\n5   5 55\n6   5 47\n7   5 19\n8   4 72\n9   4 05\n10   3 19\n11   2 13\n12   0 87\n\"\"\"\nball = Projectile(10, 3, 45)\ng = Graph(ball calculate_all_coordinates())\ng",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4413,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\663353465bfb14259717da93.md",
      "source_type": "git_repo"
    },
    "token_count": 534,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "13b005191e2efb8748e136245dd05f24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\663353465bfb14259717da93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "8 4 72\\n 9 4 05\\n 10 3 19\\n 11 2 13\\n 12 0 87\\n' js ({ test: () => assert(runPython( `a = \"\"\" x y 0 3 00 1 3 90 2 4 61 3 5 12 4 5 43 5 5 55 6 5 47 7 5 19 8 4 72 9 4 05 10 3 19 11 2 13 12 0 87 \"\"\" ball = Projectile(10, 3, 45) g = Graph(ball calculate_all_coordinates()) gcreate_coordinates_table() == a`\n))\n})\nYou should print graph create_coordiantes_table() js\n({\ntest: () => {\nrunPython(`\nprints = _Node(_code) find_calls('print')\nassert any(p is_equivalent('print(graph create_coordinates_table())') for p in prints), \"print(graph create_coordiantes_table()) is missing\"\n`)\n}\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4413,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\663353465bfb14259717da93.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2f81fba377d8d9c64d36146a7fd83a40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\663353465bfb14259717da93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__str__(self): return f''' Projectile details: speed: {self speed} m/s height: {self height} m angle: {self angle}° displacement: {round(self __calculate_displacement(), 1)} m ''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self __angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = math sqrt(squared_component + gh_component) return horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self__angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f'Graph({self __coordinates})'\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4413,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\663353465bfb14259717da93.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e05e1911866b726ce859a8804452d791",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b26c4f2d603072ef0818.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633b26c4f2d603072ef0818\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nIt's good practice to give a representation to the class by using the __repr__ special method While the __str__ method returns a readable string representation that's intended to be user friendly, __repr__ is intended for programmers Often __repr__ provides a string that can be used to recreate the object Write the __repr__ method, which will return the string needed to instantiate the object You can test this by calling the repr function and passing it an instance of the class --hints--\nThe Projectile class should have a __repr__ method js\n({\ntest: () => assert(runPython(\n`_Node(_code) find_class('Projectile') has_function('__repr__')`\n))\n})\nThe instance Projectile(12, 12, 12) should have representation equal to 'Projectile(12, 12, 12)' js\n({\ntest: () => assert(runPython(\n`repr(Projectile(12, 12, 12)) == 'Projectile(12, 12, 12)' or \\\\\nrepr(Projectile(12, 12, 12)) == 'Projectile(12, 12, 12 0)'`\n))\n})\nThe instance Projectile(21, 22, 45) should have representation equal to 'Projectile(21, 22, 45)' js\n({\ntest: () => assert(runPython(\n`repr(Projectile(21, 22, 45)) == 'Projectile(21, 22, 45)' or \\\\\nrepr(Projectile(21, 22, 45)) == 'Projectile(21, 22, 45 0)'`\n))\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3651,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b26c4f2d603072ef0818.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1d4104a33d4afefe69328cfd1e2e39bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b26c4f2d603072ef0818.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "45)) == 'Projectile(21, 22, 45)' or \\\\ repr(Projectile(21, 22, 45)) == 'Projectile(21, 22, 45 0)'` )) }) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {self speed} m/s height: {self height} m angle: {selfangle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3651,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b26c4f2d603072ef0818.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "27b116514b7517e93fe54fc4587945fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b26c4f2d603072ef0818.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__speed ** 2 * math cos(self __angle) ** 2) y_coordinate = height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self __angle)) @property def speed(self): return self __speed @height setter def height(self, n): self __height = n @angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self__speed = s\n--fcc-editable-region--\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3651,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b26c4f2d603072ef0818.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "17ba0e78cd85475531d72c8f7b92d4d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b4d3271d5b3aea1c1195.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633b4d3271d5b3aea1c1195\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nNow it's time for the graph Create a method create_trajectory and replace the last print call at the bottom of your code with print(graph create_trajectory()) As the first step of this new method, make a local copy of the coordinates but where all the values are rounded to integers Save this new version of the coordinates in a variable named rounded_coords, and return this variable --hints--\nYou should define a method named create_trajectory js\n({\ntest: () => assert(runPython(\n`_Node(_code) find_class('Graph') has_function('create_trajectory')`\n))\n})\nYou should replace print(graph create_coordinates_table()) with print(graph create_trajectory()) ``js\n({\ntest: () => runPython(\nprints = _Node(_code) find_calls('print')\nassert all(not p is_equivalent('print(graph create_coordinates_table())') for p in prints), \"print(graph create_coordinates_table()) should not be present\"\nassert any(p is_equivalent('print(graph create_trajectory())') for p in prints), \"print(graph create_trajectory()) not found\"\n`)\n})\n```\nThe function should return rounded_coords js\n({\ntest: () => runPython(`\nassert _Node(_code) find_class('Graph') find_function('create_trajectory') has_return('rounded_coords'), \"return rounded_coords missing\"\n`)\n})\nThe rounded_coords variable should contain the rounded coordinates js\n({\ntest: () => {\nrunPython(`\nball = Projectile(10, 3, 45)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nassert [(round(x), round(y)) for x,y in coordinates] == graph create_trajectory(), \"coordinates are not rounded correctly\"\n`)\n}\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4639,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b4d3271d5b3aea1c1195.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4d6bfade9b1fc50be3b8e6fa783c850e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b4d3271d5b3aea1c1195.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "coordinates = ball calculate_all_coordinates() graph = Graph(coordinates) assert [(round(x), round(y)) for x,y in coordinates] == graph create_trajectory(), \"coordinates are not rounded correctly\" `) } }) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {selfspeed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4639,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b4d3271d5b3aea1c1195.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "07abea38cd3882c455ef110f1b4bf7be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b4d3271d5b3aea1c1195.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self __angle)) @property def speed(self): return self __speed @height setter def height(self, n): self __height = n @angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {selfheight}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nprint(graph create_coordinates_table())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4639,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633b4d3271d5b3aea1c1195.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fc241c1cdf84f49918bd3df07b2f58f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bfcef57e1d70cc3142c6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633bfcef57e1d70cc3142c6\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nFinally, make the final output a multiline string It should start with a newline character and end with a newline character ```py\n⊣     ∙\n⊣  ∙∙∙ ∙∙∙\n⊣ ∙       ∙\n⊣∙         ∙\n⊣           ∙\n⊣            ∙\n⊣\nTTTTTTTTTTTTT\n```\n--hints--\nThe method should return the correct string js\n({\ntest: () => (runPython(\n`gr = '\\\\n⊣     ∙       \\\\n⊣  ∙∙∙ ∙∙∙    \\\\n⊣ ∙       ∙   \\\\n⊣∙         ∙  \\\\n⊣           ∙ \\\\n⊣            ∙\\\\n⊣             \\\\n TTTTTTTTTTTTT\\\\n'\nball = Projectile(10, 3, 45)\ncoords = ball calculate_all_coordinates()\ng = Graph(coords)\nactual = g create_trajectory()\nexpected = gr\nassert actual == expected, f'expected {repr(expected)} but found {repr(actual)}'`\n))\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bfcef57e1d70cc3142c6.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a70a4939b23c576da18706a1a13b1250",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bfcef57e1d70cc3142c6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {self speed} m/s height: {self height} m angle: {self angle}° displacement: {round(self __calculate_displacement(), 1)} m ''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self__angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bfcef57e1d70cc3142c6.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3866a452aee4ec419a3977ca2b71bab8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bfcef57e1d70cc3142c6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "round(math degrees(self __angle)) @property def speed(self): return self __speed @height setter def height(self, n): self __height = n @angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {self height}, {self angle})' class Graph: slots = ('__coordinates') def __init__(self, coord): self __coordinates = coord def __repr__(self): return f\"Graph({self __coordinates})\" def create_coordinates_table(self): table = '\\n x y\\n' for x, y in self__coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x, y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nfor x, y in rounded_coords:\nmatrix_list[-1 - y][x] = PROJECTILE\nmatrix = [\"\" join(line) for line in matrix_list]\nmatrix_axes = [y_axis_tick + row for row in matrix]\nmatrix_axes append(\" \" + x_axis_tick * (len(matrix[0])))\nreturn matrix_axes\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nprint(graph create_trajectory())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bfcef57e1d70cc3142c6.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4e8df918bdc92427eeef52523bc31822",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633bdc3ca38c068c3735984\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nAdd the x and y axes to the graph to obtain the following output:\npy\n[\n\"⊣     ∙       \",\n\"⊣  ∙∙∙ ∙∙∙    \",\n\"⊣ ∙       ∙   \",\n\"⊣∙         ∙  \",\n\"⊣           ∙ \",\n\"⊣            ∙\",\n\"⊣             \",\n\" TTTTTTTTTTTTT\",\n]\nThe symbols are available as x_axis_tick and y_axis_tick --hints--\nThe method should return the correct output js\n({\ntest: () => assert(runPython(\n`\ngr = [\n\"⊣     ∙       \",\n\"⊣  ∙∙∙ ∙∙∙    \",\n\"⊣ ∙       ∙   \",\n\"⊣∙         ∙  \",\n\"⊣           ∙ \",\n\"⊣            ∙\",\n\"⊣             \",\n\" TTTTTTTTTTTTT\",\n]\nball = Projectile(10, 3, 45)\ncoords = ball calculate_all_coordinates()\ng = Graph(coords)\ng create_trajectory() == gr`\n))\n})\nThe method should return the correct output for different instances js\n({\ntest: () => assert(runPython(\n`\ngr = [\n\"⊣     ∙∙             \",\n\"⊣ ∙∙∙∙  ∙∙∙          \",\n\"⊣∙         ∙∙        \",\n\"⊣            ∙       \",\n\"⊣             ∙      \",\n\"⊣              ∙     \",\n\"⊣               ∙    \",\n\"⊣                ∙   \",\n\"⊣                 ∙  \",\n\"⊣                  ∙ \",\n\"⊣                    \",\n\"⊣                   ∙\",\n\" TTTTTTTTTTTTTTTTTTTT\",\n]\nball = Projectile(11, 9, 30)\ncoords = ball calculate_all_coordinates()\ng = Graph(coords)\ng",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a516ba60d79e08cf9b44ac40bba5b932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "create_trajectory() == gr` )) }) The method should return the correct output for different instances js ({ test: () => assert(runPython( ` gr = [ \"⊣ ∙∙ \", \"⊣ ∙∙∙∙ ∙∙∙ \", \"⊣∙ ∙∙ \", \"⊣ ∙ \", \"⊣ ∙ \", \"⊣ ∙ \", \"⊣ ∙ \", \"⊣ ∙ \", \"⊣ ∙ \", \"⊣ ∙ \", \"⊣ \", \"⊣ ∙\", \" TTTTTTTTTTTTTTTTTTTT\", ] ball = Projectile(11, 9, 30) coords = ball calculate_all_coordinates() g = Graph(coords) gcreate_trajectory() == gr`\n))\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ed5006ef55c25af8cdfbfccbe8ba0482",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self __angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = math sqrt(squared_component + gh_component) return horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self __angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self__angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x, y in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "29166337fb43c0c60b95fe49a5a16bed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {self height}, {self angle})' class Graph: slots = ('__coordinates') def __init__(self, coord): self __coordinates = coord def __repr__(self): return f\"Graph({self __coordinates})\" def create_coordinates_table(self): table = '\\n x y\\n' for x, y in self __coordinates: table += f'{x:>3}{y:>7 2f}\\n' return table --fcc-editable-region-- def create_trajectory(self): rounded_coords = [(round(x), round(y)) for x, y in self__coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nfor x, y in rounded_coords:\nmatrix_list[-1 - y][x] = PROJECTILE\nmatrix = [\"\" join(line) for line in matrix_list]\nreturn matrix\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nfor row in graph create_trajectory():\nprint(row)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633bdc3ca38c068c3735984.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "060cad19a0ceeca532e0bd6833c98845",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6634fa2417d7194b0c9425f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6634fa2417d7194b0c9425f9\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nNow create the two getters for __height and __angle Remember that for the angle, the value is given to the class in degrees, but is saved internally in radians, so have the getter return the degrees value You can use math degrees, and the round function for this --hints--\nYou should define a height method js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') has_function('height')\n`))})\nYour height method should have a single parameter, self js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_function('height') has_args('self')\n`))})\nYour height method should have a @property decorator js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_function('height') has_decorators('property')\n`))})\nYour height method should return the value of the private attribute __height js\n({test: () => assert(runPython(`\na = Projectile(22, 23, 24)\na height == 23\n`))})\nYou should define an angle method js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') has_function('angle')\n`))})\nYour angle method should have a @property decorator js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_function('angle') has_decorators('property')\n`))})\nYour angle method should have a single parameter, self js\n({test: () => assert(runPython(`\n_Node(_code) find_class('Projectile') find_function('angle') has_args('self')\n`))})\nYour angle method should return the value of the private attribute __angle converted to degrees js\n({test: () => assert(runPython(`\na = Projectile(22, 23, 24)\na angle == 24\n`))})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6634fa2417d7194b0c9425f9.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a6329743e104b81187335962c9892ff0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6634fa2417d7194b0c9425f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "`))}) Your angle method should have a @property decorator js ({test: () => assert(runPython(` _Node(_code) find_class('Projectile') find_function('angle') has_decorators('property') `))}) Your angle method should have a single parameter, self js ({test: () => assert(runPython(` _Node(_code) find_class('Projectile') find_function('angle') has_args('self') `))}) Your angle method should return the value of the private attribute __angle converted to degrees js ({test: () => assert(runPython(` a = Projectile(22, 23, 24) a angle == 24 `))}) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 981\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self __speed} m/s\nheight: {self __height} m\nangle: {round(math degrees(self __angle))}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6634fa2417d7194b0c9425f9.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a2ef5389fbb4981036332218fe60378d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6634fa2417d7194b0c9425f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = math sqrt(squared_component + gh_component) return horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self __angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self __angle) ** 2) y_coordinate = height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self__calculate_displacement()))\n]\n--fcc-editable-region--\n@property\ndef speed(self):\nreturn self __speed\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3721,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6634fa2417d7194b0c9425f9.md",
      "source_type": "git_repo"
    },
    "token_count": 198,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fbb2c125efd7a2cc45dd219b54804fe1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475bab40e5125c84b03337.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66475bab40e5125c84b03337\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nNow that you have the rounded coordinates, find the maximum value between all the x coordinates and the maximum value between all the y coordinates These max values will be the number of rows and columns in the graph Save the first in a new variable named x_max and the second in a variable named y_max Return x_max, y_max --hints--\nThe method should return x_max, y_max js\n({\ntest: () => runPython(`\nassert _Node(_code) find_class('Graph') find_function('create_trajectory') has_return('x_max, y_max'), \"return x_max, y_max missing\"\n`)\n})\nThe variable x_max should contain the highest x value ``js\n({\ntest: () => {\nrunPython(\nball = Projectile(10, 3, 45)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nassert graph create_trajectory()[0] == round(max(coordinates, key=lambda i: round(i[0]))[0])\n`)\n}\n})\n```\nThe variable y_max should contain the highest y value ``js\n({\ntest: () => {\nrunPython(\nball = Projectile(10, 3, 45)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nassert graph create_trajectory()[1] == round(max(coordinates, key=lambda i: round(i[1]))[1])\n`)\n}\n})\n```\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4384,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475bab40e5125c84b03337.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "adae4d783a3c31dd8c95a1d8dd56385a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475bab40e5125c84b03337.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {self speed} m/s height: {self height} m angle: {self angle}° displacement: {round(self __calculate_displacement(), 1)} m ''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self__angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\ndisplacement = horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\nreturn displacement\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4384,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475bab40e5125c84b03337.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0d898d0f634069b71945d182afd86f21",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475bab40e5125c84b03337.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self __angle)) @property def speed(self): return self __speed @height setter def height(self, n): self __height = n @angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {self height}, {self angle})' class Graph: slots = ('__coordinates') def __init__(self, coord): self __coordinates = coord def __repr__(self): return f\"Graph({self__coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x,y in self __coordinates]\nreturn rounded_coords\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nprint(graph create_trajectory())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4384,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475bab40e5125c84b03337.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0dc4ed6491d8495c7342c93c81197504",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66475d40dd42fb614f14fd03\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nNow that you have x_max and y_max you can use these as number of rows and columns to start building the graph structure: create a list of lists where the external list contains y_max +1 lists, each with inside x_max +1 elements, where each element is a string containing a single space Save this list of lists in a variable named matrix_list and return this value matrix_list should look like this:\npy\n[\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n]\n--hints--\nThe method should return the correct value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "12a23d99102c08a83b0f5cac1df37528",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], ] --hints-- The method should return the correct valuejs\n({\ntest: () => {\nrunPython(`\nexpected = [\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n]\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nactual = graph create_trajectory()\nassert actual == expected, \"matrix_list has wrong value\"\n`)\n}\n})\nThe create_trajectory method should return the right value for any instance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1c80d0854502c5a9f767ef2f5eaea627",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], ] ball = Projectile(10, 3, 45) print(ball) coordinates = ball calculate_all_coordinates() graph = Graph(coordinates) actual = graph create_trajectory() assert actual == expected, \"matrix_list has wrong value\" `) } }) The create_trajectory method should return the right value for any instancejs\n({\ntest: () => {\nrunPython(`\nexpected = [\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n]\nball = Projectile(9, 9, 30)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nactual = graph",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "610e36bdff70652cd9c0d317ad6ad2f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], ] ball = Projectile(9, 9, 30) print(ball) coordinates = ball calculate_all_coordinates() graph = Graph(coordinates) actual = graphcreate_trajectory()\nassert actual == expected, \"matrix_list has wrong value\"\n`)\n}\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "9d4e20f5effa23ca11c78be85cbd203e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self __angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self __angle) ** 2) y_coordinate = height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self __angle)) @property def speed(self): return self__speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x,y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nreturn x_max, y_max\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nprint(graph create_trajectory())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6202,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475d40dd42fb614f14fd03.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9fa18fdd586cb6c27c838583e3ecb670",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66475e40f3891c645d50135e\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nmatrix_list is a list of lists, each element has an (x, y) coordinate Use the list of coordinates in rounded_coords to change the elements in matrix_list at the coordinates in the list to the symbol in the PROJECTILE variable Remember that a coordinates graph has the (0, 0) in the bottom left corner py\n[\n[\" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \"∙\", \"∙\", \"∙\", \" \", \"∙\", \"∙\", \"∙\", \" \", \" \", \" \", \" \"],\n[\" \", \"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \"],\n[\"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n]\n--hints--\nThe method should return the correct value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
      "source_type": "git_repo"
    },
    "token_count": 333,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "cd365d1329ccd4aa29c9c318d0a3cf01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], ] --hints-- The method should return the correct valuejs\n({\ntest: () => {\nrunPython(`\nexpected = [\n[\" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \"∙\", \"∙\", \"∙\", \" \", \"∙\", \"∙\", \"∙\", \" \", \" \", \" \", \" \"],\n[\" \", \"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \"],\n[\"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n]\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nactual = graph create_trajectory()\nassert actual == expected, \"matrix_list has wrong value\"\n`)\n}\n})\nThe method should return the correct value for different instances",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "435cc83906f564b95cf3a07264f03896",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\" \", \" \", \" \", \" \", \" \", \"∙\"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], ] ball = Projectile(10, 3, 45) print(ball) coordinates = ball calculate_all_coordinates() graph = Graph(coordinates) actual = graph create_trajectory() assert actual == expected, \"matrix_list has wrong value\" `) } }) The method should return the correct value for different instancesjs\n({\ntest: () => {\nrunPython(`\nexpected = [\n[\" \", \" \", \"∙\", \"∙\", \"∙\", \"∙\", \"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\"∙\", \"∙\", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \"∙\", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n]\nball = Projectile(9, 9, 30)\nprint(ball)\ncoordinates = ball",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0a16e319c8e2e880752fb7749b911ee3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\", \" \", \" \", \" \"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"∙\"], [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"], ] ball = Projectile(9, 9, 30) print(ball) coordinates = ballcalculate_all_coordinates()\ngraph = Graph(coordinates)\nactual = graph create_trajectory()\nassert actual == expected, \"matrix_list has wrong value\"\n`)\n}\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "88bc09bc45d57020e62b406cad60fea9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "* (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self __angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self __angle) ** 2) y_coordinate = height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self__angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x,y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[' ' for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nreturn matrix_list\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nfor row in graph create_trajectory():\nprint(row)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6277,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475e40f3891c645d50135e.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "7b24fd63c2b24a72bcb54a7d6061b968",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475f7b91d7c6681987739d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66475f7b91d7c6681987739d\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nYou have a list of lists of strings Join the inner lists to have a list of strings It should look like this:\npy\n[\n\"     ∙       \",\n\"  ∙∙∙ ∙∙∙    \",\n\" ∙       ∙   \",\n\"∙         ∙  \",\n\"           ∙ \",\n\"            ∙\",\n\"             \",\n]\n--hints--\nThe method should return the correct value js\n({\ntest: () => {\nrunPython(`\nexpected = [\n\"     ∙       \",\n\"  ∙∙∙ ∙∙∙    \",\n\" ∙       ∙   \",\n\"∙         ∙  \",\n\"           ∙ \",\n\"            ∙\",\n\"             \",\n]\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nactual = graph create_trajectory()\nassert actual == expected, \"matrix has wrong value\"\n`)\n}\n})\ncreate_trajectory() should calculate the correct output for different instances js\n({\ntest: () => {\nrunPython(`\nexpected = [\n\"  ∙∙∙∙∙        \",\n\"∙∙     ∙       \",\n\"        ∙∙     \",\n\"          ∙    \",\n\"           ∙   \",\n\"               \",\n\"            ∙  \",\n\"             ∙ \",\n\"               \",\n\"              ∙\",\n\"               \",\n]\nball = Projectile(9, 9, 30)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nactual = graph create_trajectory()\nassert actual == expected, \"matrix has wrong value\"\n`)\n}\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475f7b91d7c6681987739d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "877f96c25faed13e3983b7a2d3bb8f92",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475f7b91d7c6681987739d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "9, 30) print(ball) coordinates = ball calculate_all_coordinates() graph = Graph(coordinates) actual = graph create_trajectory() assert actual == expected, \"matrix has wrong value\" `) } }) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {selfspeed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475f7b91d7c6681987739d.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "50c080de36574448ae3cf5d209af9094",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475f7b91d7c6681987739d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self __angle)) @property def speed(self): return self __speed @height setter def height(self, n): self __height = n @angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {selfheight}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\n--fcc-editable-region--\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x,y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[' ' for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nfor (x, y) in rounded_coords:\nmatrix_list[-y-1][x] = PROJECTILE\nreturn matrix_list\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nfor row in graph create_trajectory():\nprint(row)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4824,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66475f7b91d7c6681987739d.md",
      "source_type": "git_repo"
    },
    "token_count": 393,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b44fa8f5fa322952626e8ff064dea914",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6633c06601c081735063b528\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nYou have built a projectile trajectory calculator Now to conclude, modify the code you wrote outside the classes, and incorporate it into a little utility function called projectile_helper that takes in the desired values for speed, height and angle and prints to the terminal in sequence, the details of the projectile, the table of coordinates and the graph of the trajectory Call projectile_helper once with values of your choice --hints--\nYou should create projectile_helper in the global scope js\n({\ntest: () => runPython(`\nassert _Node(_code) has_function('projectile_helper')\n`)\n})\nYou should print the requested strings in order Do not print other values ```js\n({\ntest: () => {\nlet code_ = code replaceAll('print(', '__result append(')\nrunPython(`\n__result = []\n${code_}\n__result = [] # code_ includes a call, so let's reset it here\nprojectile_helper(12, 13, 14)\nbullet = Projectile(12, 13, 14)\nassert str(__result[0]) == str(bullet)\nc = bullet calculate_all_coordinates()\ng = Graph(c)\nassert __result[1] == g create_coordinates_table()\nassert __result[2] == g create_trajectory()\n`)\n}\n})\n```\nYou should call the projectile_helper function at least once js\n({\ntest: () => runPython(`\nassert len(_Node(_code) find_calls('projectile_helper')) > 0\n`)\n})\nYou should not have variables or print calls in the global scope js\n({\ntest: () => runPython(`\nassert _Node(_code) find_calls('print') == [], \"found print\"\nassert not _Node(_code) has_variable('graph'), \"found graph\"\nassert not _Node(_code) has_variable('ball'), \"found ball\"\nassert not _Node(_code) has_variable('coordinates'), \"found coordinates\"\n`)\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "58962007718185a6452ea5ec78bb67c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "You should not have variables or print calls in the global scope js ({ test: () => runPython(` assert _Node(_code) find_calls('print') == [], \"found print\" assert not _Node(_code) has_variable('graph'), \"found graph\" assert not _Node(_code) has_variable('ball'), \"found ball\" assert not _Node(_code) has_variable('coordinates'), \"found coordinates\" `) }) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self__speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "9667ccb82fa41f66fa9ab43f056fc43d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self __angle) ** 2) y_coordinate = height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self __calculate_y_coordinate(x)) for x in range(math ceil(self __calculate_displacement())) ] @property def height(self): return self __height @property def angle(self): return round(math degrees(self __angle)) @property def speed(self): return self __speed @height setter def height(self, n): self __height = n @anglesetter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x, y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nfor x, y in rounded_coords:\nmatrix_list[-1 - y][x] = PROJECTILE\nmatrix = [\"\" join(line) for line in matrix_list]\nmatrix_axes = [y_axis_tick + row for row in matrix]\nmatrix_axes append(\" \" + x_axis_tick * (len(matrix[0])))\ngraph = \"\\n\" + \"\\n\" join(matrix_axes) + \"\\n\"\nreturn graph\n--fcc-editable-region--\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\nprint(graph",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "e767b1589e3767344ffbbf5b702bb592",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "j[1])[1] matrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)] for x, y in rounded_coords: matrix_list[-1 - y][x] = PROJECTILE matrix = [\"\" join(line) for line in matrix_list] matrix_axes = [y_axis_tick + row for row in matrix] matrix_axes append(\" \" + x_axis_tick * (len(matrix[0]))) graph = \"\\n\" + \"\\n\" join(matrix_axes) + \"\\n\" return graph --fcc-editable-region-- ball = Projectile(10, 3, 45) print(ball) coordinates = ball calculate_all_coordinates() graph = Graph(coordinates) print(graphcreate_trajectory())\n--fcc-editable-region--\n```\n--solutions--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "82974236d848c88005f1a762a0f778f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = math sqrt(squared_component + gh_component) return horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self __angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self __angle) ** 2) y_coordinate = height_component + angle_component - acceleration_component return y_coordinate def calculate_all_coordinates(self): return [ (x, self__calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef __str__(self):\nreturn self create_trajectory()\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x, y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nfor x, y in rounded_coords:\nmatrix_list[-1 - y][x] = PROJECTILE\nmatrix = [\"\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "94ad848f4a1d9600ec5d6b380e216705",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__str__(self): return self create_trajectory() def create_coordinates_table(self): table = '\\n x y\\n' for x, y in self __coordinates: table += f'{x:>3}{y:>7 2f}\\n' return table def create_trajectory(self): rounded_coords = [(round(x), round(y)) for x, y in self __coordinates] x_max = max(rounded_coords, key=lambda i: i[0])[0] y_max = max(rounded_coords, key=lambda j: j[1])[1] matrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)] for x, y in rounded_coords: matrix_list[-1 - y][x] = PROJECTILE matrix = [\"\"join(line) for line in matrix_list]\nmatrix_axes = [y_axis_tick + row for row in matrix]\nmatrix_axes append(\" \" + x_axis_tick * (len(matrix[0])))\ngraph = \"\\n\" + \"\\n\" join(matrix_axes) + \"\\n\"\nreturn graph\ndef projectile_helper(speed, height, angle):\np = Projectile(speed, height, angle)\nprint(p)\ncoord = p calculate_all_coordinates()\ng = Graph(coord)\nprint(g create_coordinates_table())\nprint(g create_trajectory())\nprojectile_helper(12, 43, 1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8825,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\6633c06601c081735063b528.md",
      "source_type": "git_repo"
    },
    "token_count": 277,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "abdd59ee772264bf49b20da7506c2ee1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\6565a536ba1f9f25bd30e88b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6565a536ba1f9f25bd30e88b\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you will implement the Luhn Algorithm. This algorithm is a formula to validate a variety of identification numbers.\nStart by declaring a function called main, this will serve as the entry point of the program. Use the pass keyword to avoid an error.\n--hints--\nYou should have def main(): in your code.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\ninspect.isfunction(main)\n`))\n}\n})\nYou should have pass in your code.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst pass = __helpers.python.getDef(\"\\n\"+transformedCode, \"main\");\nassert.include(pass?.function_body, \"pass\");\n}\n})\n--seed--\n--seed-contents--\n```python\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\6565a536ba1f9f25bd30e88b.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "87edec0794f3c664053002b623f4148e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\665d949e628d9f3fe305b6e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665d949e628d9f3fe305b6e8\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nThe output is becoming quite difficult to read, so you should replace the print(graph create_trajectory()) with a loop that prints each row separately --hints--\nRemove the print(graph create_trajectory()) call js\n({\ntest: () => {\nrunPython(`\nprnt = _Node(_code) find_calls('print')\nassert not any(p is_equivalent('print(graph create_trajectory())') for p in prnt), \"print still present\"\n`)\n}\n})\nYou should have a loop that iterates over graph create_trajectory() js\n({\ntest: () => {\nrunPython(`\niter = _Node(_code) find_for_loops()[0] find_for_iter()\nassert iter is_equivalent('graph create_trajectory()'), \"loop is missing\"\n`)\n}\n})\nYou should print each row in graph create_trajectory() js\n({ test: () => runPython(`\nloop = _Node(_code) find_for_loops()[0]\nvar = str(loop find_for_vars())\nassert loop find_bodies()[0] has_call(f\"print({var})\")\n`) })\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\665d949e628d9f3fe305b6e8.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0797735929bea813419a4ae199b16281",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\665d949e628d9f3fe305b6e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) def __str__(self): return f''' Projectile details: speed: {self speed} m/s height: {self height} m angle: {self angle}° displacement: {round(self __calculate_displacement(), 1)} m ''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self __angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = mathsqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\665d949e628d9f3fe305b6e8.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "12cf8b180e3421a7818221db6a121261",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\665d949e628d9f3fe305b6e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def speed(self): return self __speed @height setter def height(self, n): self __height = n @angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {self height}, {self angle})' class Graph: slots = ('__coordinates') def __init__(self, coord): self __coordinates = coord def __repr__(self): return f\"Graph({self __coordinates})\" def create_coordinates_table(self): table = '\\n x y\\n' for x, y in self __coordinates: table += f'{x:>3}{y:>72f}\\n'\nreturn table\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x,y in self __coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[' ' for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nreturn matrix_list\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\n--fcc-editable-region--\nprint(graph create_trajectory())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4179,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\665d949e628d9f3fe305b6e8.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8ce298ebc5e8df522cec1c59eac883e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656877c202f44995ed952608.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656877c202f44995ed952608\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nReplace the pass statement with a variable named card_number and a value of '4111-1111-4555-1142'.\n--hints--\nYou should have card_number = '4111-1111-4555-1142' within the main function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +card_number\\s*=\\s*('|\")4111-1111-4555-1142\\1/);\n}\n})\n```\nYou should not have a pass in your code.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst no_comments = __helpers.python.removeComments(transformedCode);\nassert.notInclude(no_comments, \"pass\");\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef main():\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 996,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656877c202f44995ed952608.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "384cf54629e849ad8042d0077d436316",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656877f71bba2b97acedf9af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656877f71bba2b97acedf9af\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nPython comes with built-in classes that can help us with string manipulation. One of them is the str class. It has a method called maketrans that can help us create a translation table. This table can be used to replace characters in a string:\npython\nstr.maketrans({'t': 'c', 'l': 'b'})\nThe above, when called on a string, will replace all t characters with c and all l characters with b.\nCreate a variable called card_translation and assign it a translation table to replace all - and  characters with an empty string.\n--hints--\nYou should create a card_translation variable within main.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +card_translation\\s*=/);\n}\n})\n```\nYou should assign card_translation a value of str.maketrans({'-': '', ' ': ''}).\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nconst allowedMatches = [\n/ +card_translation\\s*=\\s*str\\.maketrans\\(\\s*\\{\\s*('|\")-\\1\\s*:\\s*('|\")\\2\\s*,\\s*('|\") \\3\\s*:\\s*('|\")\\4\\s*\\}\\s*\\)/,\n/ +card_translation\\s*=\\s*str\\.maketrans\\(\\s*\\{\\s*('|\") \\1\\s*:\\s*('|\")\\2\\s*,\\s*('|\")-\\3\\s*:\\s*('|\")\\4\\s*\\}\\s*\\)/,\n];\nconst anyMatch = allowedMatches.some((match) => match.test(function_body));\nassert.isTrue(anyMatch);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1880,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656877f71bba2b97acedf9af.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "84ae6df4f3bbaed235de58957b63bc70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656878585631369a6b2d2191.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656878585631369a6b2d2191\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nDefining the translation does not in itself translate the string. The translate method must be called on the string to be translated with the translation table as an argument:\npy\nmy_string = \"tamperlot\"\ntranslation_table = str.maketrans({'t': 'c', 'l': 'b'})\ntranslated_string = my_string.translate(translation_table)\nCreate a variable called translated_card_number and assign it the result of calling the translate method on card_number with card_translation as an argument.\n--hints--\nYou should create a translated_card_number variable within main.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +translated_card_number\\s*=/);\n}\n})\n```\nYou should assign translated_card_number a value of card_number.translate(card_translation).\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +translated_card_number\\s*=\\s*card_number\\.translate\\(\\s*card_translation\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1614,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656878585631369a6b2d2191.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a30260de238f3037045918f8a576cf17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66671a41b55e531d08ab82b5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66671a41b55e531d08ab82b5\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nThe __str__ method refers to the attributes of the class directly, but now that you have created the getters it is better to use those to obtain those values Edit the __str__ method to not reference the attributes anymore, but to use the getters --hints--\nThe string representation for Projectile(45, 45, 45) should be correct js\n({test: () => assert(runPython(\n`\nball = Projectile(45, 45, 45)\nstr(ball) == \"\"\"\nProjectile details:\nspeed: 45 m/s\nheight: 45 m\nangle: 45°\ndisplacement: 244 4 m\n\"\"\"`\n))})\nThe string representation should also be correct for other instances js\n({test: () => assert(runPython(`p = Projectile(10, 10, 10)\nstr(\np\n) == \"\"\"\nProjectile details:\nspeed: 10 m/s\nheight: 10 m\nangle: 10°\ndisplacement: 15 9 m\n\"\"\"`))})\nYou should not be referencing the private properties directly js\n({\ntest: () => runPython(`\nrtrn = str(_Node(_code) find_class('Projectile') find_function('__str__') find_return())\nassert not 'self __angle' in rtrn\nassert not 'self __speed' in rtrn\nassert not 'self __height' in rtrn\n`)\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\n--fcc-editable-region--\ndef str(self):\nreturn f'''\nProjectile details:\nspeed: {self __speed} m/s\nheight: {self __height} m\nangle: {round(math degrees(self __angle))}°\ndisplacement: {round(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3459,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66671a41b55e531d08ab82b5.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e1d4bbe91137bb22f7be7e867723b4dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66671a41b55e531d08ab82b5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'self __speed' in rtrn assert not 'self __height' in rtrn `) }) --seed-- --seed-contents-- ```py import math GRAVITATIONAL_ACCELERATION = 9 81 PROJECTILE = \"∙\" x_axis_tick = \"T\" y_axis_tick = \"⊣\" class Projectile: slots = ('__speed', '__height', '__angle') def __init__(self, speed, height, angle): self __speed = speed self __height = height self __angle = math radians(angle) --fcc-editable-region-- def str(self): return f''' Projectile details: speed: {self __speed} m/s height: {self __height} m angle: {round(math degrees(self __angle))}° displacement: {round(self__calculate_displacement(), 1)} m\n'''\n--fcc-editable-region--\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self __angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3459,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66671a41b55e531d08ab82b5.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a671e90e41f19909ba73101f9b64e8a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66601c3c460ee12fbd669d6a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66601c3c460ee12fbd669d6a\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nNow you can remove the loop to print each row of the output, and replace it with print(graph create_trajectory()) --hints--\nYou should not have a loop in the global scope js\n({\ntest: () => {\nrunPython(`\nassert not _Node(_code) find_for_loops(), \"loop still present\"\n`)\n}\n})\nYou should have print(graph create_trajectory()) js\n({\ntest: () => {\nrunPython(`\nprnt = _Node(_code) find_calls('print')\nassert any(p is_equivalent('print(graph create_trajectory())') for p in prnt), \"print not present\"\n`)\n}\n})\n--seed--\n--seed-contents--\n```py\nimport math\nGRAVITATIONAL_ACCELERATION = 9 81\nPROJECTILE = \"∙\"\nx_axis_tick = \"T\"\ny_axis_tick = \"⊣\"\nclass Projectile:\nslots = ('__speed', '__height', '__angle')\ndef __init__(self, speed, height, angle):\nself __speed = speed\nself __height = height\nself __angle = math radians(angle)\ndef __str__(self):\nreturn f'''\nProjectile details:\nspeed: {self speed} m/s\nheight: {self height} m\nangle: {self angle}°\ndisplacement: {round(self __calculate_displacement(), 1)} m\n'''\ndef __calculate_displacement(self):\nhorizontal_component = self __speed * math cos(self __angle)\nvertical_component = self __speed * math sin(self __angle)\nsquared_component = vertical_component**2\ngh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height\nsqrt_component = math sqrt(squared_component + gh_component)\nreturn horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION\ndef __calculate_y_coordinate(self, x):\nheight_component = self __height\nangle_component = math tan(self __angle) * x\nacceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / (\n2 * self __speed ** 2 * math cos(self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66601c3c460ee12fbd669d6a.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3f086becf5378f38d662f060f344e816",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66601c3c460ee12fbd669d6a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "''' def __calculate_displacement(self): horizontal_component = self __speed * math cos(self __angle) vertical_component = self __speed * math sin(self __angle) squared_component = vertical_component**2 gh_component = 2 * GRAVITATIONAL_ACCELERATION * self __height sqrt_component = math sqrt(squared_component + gh_component) return horizontal_component * (vertical_component + sqrt_component) / GRAVITATIONAL_ACCELERATION def __calculate_y_coordinate(self, x): height_component = self __height angle_component = math tan(self __angle) * x acceleration_component = GRAVITATIONAL_ACCELERATION * x ** 2 / ( 2 * self __speed ** 2 * math cos(self__angle) ** 2)\ny_coordinate = height_component + angle_component - acceleration_component\nreturn y_coordinate\ndef calculate_all_coordinates(self):\nreturn [\n(x, self __calculate_y_coordinate(x))\nfor x in range(math ceil(self __calculate_displacement()))\n]\n@property\ndef height(self):\nreturn self __height\n@property\ndef angle(self):\nreturn round(math degrees(self __angle))\n@property\ndef speed(self):\nreturn self __speed\n@height setter\ndef height(self, n):\nself __height = n\n@angle setter\ndef angle(self, n):\nself __angle = math radians(n)\n@speed setter\ndef speed(self, s):\nself __speed = s\ndef __repr__(self):\nreturn f'{self __class__}({self speed}, {self height}, {self angle})'\nclass Graph:\nslots = ('__coordinates')\ndef __init__(self, coord):\nself __coordinates = coord\ndef __repr__(self):\nreturn f\"Graph({self __coordinates})\"\ndef create_coordinates_table(self):\ntable = '\\n  x      y\\n'\nfor x, y in self __coordinates:\ntable += f'{x:>3}{y:>7 2f}\\n'\nreturn table\ndef create_trajectory(self):\nrounded_coords = [(round(x), round(y)) for x, y in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66601c3c460ee12fbd669d6a.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e749152d2ed7be66185ce4f4c97d5e7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66601c3c460ee12fbd669d6a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "@angle setter def angle(self, n): self __angle = math radians(n) @speed setter def speed(self, s): self __speed = s def __repr__(self): return f'{self __class__}({self speed}, {self height}, {self angle})' class Graph: slots = ('__coordinates') def __init__(self, coord): self __coordinates = coord def __repr__(self): return f\"Graph({self __coordinates})\" def create_coordinates_table(self): table = '\\n x y\\n' for x, y in self __coordinates: table += f'{x:>3}{y:>7 2f}\\n' return table def create_trajectory(self): rounded_coords = [(round(x), round(y)) for x, y in self__coordinates]\nx_max = max(rounded_coords, key=lambda i: i[0])[0]\ny_max = max(rounded_coords, key=lambda j: j[1])[1]\nmatrix_list = [[\" \" for _ in range(x_max + 1)] for _ in range(y_max + 1)]\nfor x, y in rounded_coords:\nmatrix_list[-1 - y][x] = PROJECTILE\nmatrix = [\"\" join(line) for line in matrix_list]\nmatrix_axes = [y_axis_tick + row for row in matrix]\nmatrix_axes append(\" \" + x_axis_tick * (len(matrix[0])))\nreturn matrix_axes\nball = Projectile(10, 3, 45)\nprint(ball)\ncoordinates = ball calculate_all_coordinates()\ngraph = Graph(coordinates)\n--fcc-editable-region--\nfor row in graph create_trajectory():\nprint(row)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-encapsulation-by-building-a-projectile-trajectory-calculator\\66601c3c460ee12fbd669d6a.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d0c3aceea6a95568ee8555a8c3e21b4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687946130b0ea10aa19b75.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687946130b0ea10aa19b75\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nCall the main function at the end of your script.\n--hints--\nYou should have main() outside of the main function.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nassert.match(transformedCode, /\\nmain\\(\\s*\\)/);\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 693,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687946130b0ea10aa19b75.md",
      "source_type": "git_repo"
    },
    "token_count": 175,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "57210d03ffa02a3f683cd35a323cc650",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\6568789edf2ed39c81983cc4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6568789edf2ed39c81983cc4\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nPrint the translated card number to the console.\n--hints--\nYou should print translated_card_number to the console.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +print\\(\\s*translated_card_number\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\6568789edf2ed39c81983cc4.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "686ea1b31710e94041b4ec3ff311a063",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879613a96aba21cbe80b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656879613a96aba21cbe80b9\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nWithin your main function, call the verify_card_number function and pass in the translated_card_number variable as an argument.\n--hints--\nYou should have verify_card_number(translated_card_number) within the main function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +verify_card_number\\(\\s*translated_card_number\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\npass\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\n--fcc-editable-region--\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1016,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879613a96aba21cbe80b9.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1d62d7e88b0174caac313d1d8883c33c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879c6f35a85a59c06b3a7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656879c6f35a85a59c06b3a7\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nYou have accessed elements (characters) of a string before, using the index operator []. You can also use the index operator to access a range of characters in a string with string[start:stop:step]:\npython\nmy_string = 'camperbot'\nmy_string[0:6] == 'camper' # True\nmy_string[0:6:3] == 'cp' # True\nWhere start is the starting index (inclusive), stop is the ending index (exclusive), and step is the amount of characters to skip over. If not specified, step is default to 1.\nCreate a variable named card_number_reversed and assign it the value of the first 4 characters of card_number.\n--hints--\nYou should have card_number_reversed = card_number[0:4] within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /card_number_reversed\\s*=\\s*card_number\\s*\\[\\s*0\\s*:\\s*4\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879c6f35a85a59c06b3a7.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "27e895004d1eeb6d518e1b15027cfd98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687a005aba3ea815b84e68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687a005aba3ea815b84e68\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nRemove the print call from the main function.\n--hints--\nYou should not have a print call within the main function.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nconst no_comments = __helpers.python.removeComments(function_body);\nassert.notMatch(no_comments, /print\\(/);\n}\n})\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\n--fcc-editable-region--\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687a005aba3ea815b84e68.md",
      "source_type": "git_repo"
    },
    "token_count": 243,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "a57c6be0df251847d1ada432fb863d73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879e1c749d7a6c5eba2d2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656879e1c749d7a6c5eba2d2\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nRemove the print call from the verify_card_number function.\n--hints--\nYou should not have a print call within the verify_card_number function.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst no_comments = __helpers.python.removeComments(function_body);\nassert.notMatch(no_comments, /print\\(/);\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nprint(card_number_reversed)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1155,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879e1c749d7a6c5eba2d2.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4ba753631da944bee4cca27c4aa202a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687a8253766cac4c99c57f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687a8253766cac4c99c57f\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nWithin the verify_card_number function, create a variable odd_digits that contains every other digit of the card_number_reversed string.\n--hints--\nYou should have odd_digits = card_number_reversed[::2] within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /odd_digits\\s*=\\s*card_number_reversed\\s*\\[\\s*:\\s*:\\s*2\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1165,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687a8253766cac4c99c57f.md",
      "source_type": "git_repo"
    },
    "token_count": 282,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c905c58e004282e5d8857125285baf5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687a923dd792ad339f9c09.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687a923dd792ad339f9c09\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nPrint the value of the odd_digits variable to the console.\n--hints--\nYou should have print(odd_digits) within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /print\\(\\s*odd_digits\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1071,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687a923dd792ad339f9c09.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ffaf52e55e3d918c23d13a59055b6105",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687ad86596e0af38640a84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687ad86596e0af38640a84\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nUse a for loop to iterate over each digit in the odd_digits list. Move your print call from the previous step into the for loop, and change it to print each digit.\n--hints--\nYou should use a for loop over odd_digits.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /for\\s+\\w+\\s+in\\s+odd_digits/);\n}\n})\n```\nYou should have --fcc-expected-- within the for loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\n// Get variable name used in for loop\nconst for_loop_variable = function_body.match(/for\\s+(\\w+)\\s+in\\s+odd_digits/)?.[1];\nassert.exists(for_loop_variable);\nassert.equal(function_body.match(new RegExp(`print\\\\(\\\\s*${for_loop_variable}\\\\s*\\\\)`))?.[0], `print(${for_loop_variable})`);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nprint(odd_digits)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1814,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687ad86596e0af38640a84.md",
      "source_type": "git_repo"
    },
    "token_count": 430,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2b646c651320addf4c1b94f923884041",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879a66338b2a461d5d307.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656879a66338b2a461d5d307\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nThe Luhn algorithm is as follows:\nFrom the right to left, double the value of every second digit; if the product is greater than 9, sum the digits of the products Take the sum of all the digits If the sum of all the digits is a multiple of 10, then the number is valid; else it is not valid Assume an example of an account number \"7992739871\" that will have a check digit added, making it of the form 7992739871x:\nmarkdown\nAccount number      7   9  9  2  7  3  9   8  7  1  x\nDouble every other  7  18  9  4  7  6  9  16  7  2  x\nSum 2-char digits   7   9  9  4  7  6  9   7  7  2  x\nReplace the pass statement with a variable sum_of_odd_digits and a value of 0 --hints--\nYou should have sum_of_odd_digits = 0 within the verify_card_number function ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert match(function_body, /sum_of_odd_digits\\s*=\\s*0/);\n}\n})\n```\nYou should not have pass within the verify_card_number function ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert notMatch(function_body, /pass/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\npass\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879a66338b2a461d5d307.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "144cde5b179d23eecfcf5eb4227acb1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879a66338b2a461d5d307.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "__helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\"); const { function_body } = verify_card_number; assert match(function_body, /sum_of_odd_digits\\s*=\\s*0/); } }) ``` You should not have pass within the verify_card_number function ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\"); const { function_body } = verify_card_number; assert notMatch(function_body, /pass/); } }) ``` --seed-- --seed-contents-- ```py --fcc-editable-region-- def verify_card_number(card_number): pass --fcc-editable-region-- def main(): card_number = '4111-1111-4555-1142' card_translation = strmaketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656879a66338b2a461d5d307.md",
      "source_type": "git_repo"
    },
    "token_count": 214,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8f0b8d52443c751020b012ebcd275979",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b182c2a8fb1470e0b97.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687b182c2a8fb1470e0b97\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nWithin the for loop, use the += operator to add the digit to the sum_of_odd_digits variable.\nDoing this your script throws a TypeError because you are trying to add a string to an integer, but don't worry, you will learn more about how to make it work in the next step.\n--hints--\nYou should have sum_of_odd_digits += digit within the for loop.\n```js\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /sum_of_odd_digits\\s+=\\sdigit/);\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nprint(digit)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1280,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b182c2a8fb1470e0b97.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d83bbb33ccb92da8a3b549abafaffb56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b68003a61b46fe691f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687b68003a61b46fe691f0\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nBelow your print call, create a variable named sum_of_even_digits and assign it a value of 0.\n--hints--\nYou should have sum_of_even_digits = 0 below your print call.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /sum_of_even_digits\\s*=\\s*0/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nprint(sum_of_odd_digits)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b68003a61b46fe691f0.md",
      "source_type": "git_repo"
    },
    "token_count": 290,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "84b6e6d3bd2b9892696de87fa449c6f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b8eb0bbf7b5d41b610b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687b8eb0bbf7b5d41b610b\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nCreate a variable even_digits and assign it the even digits of the reversed card number.\n--hints--\nYou should have even_digits = card_number_reversed[1::2] within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /even_digits\\s*=\\s*card_number_reversed\\s*\\[\\s*1\\s*:\\s*:\\s*2\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nprint(sum_of_odd_digits)\n--fcc-editable-region--\nsum_of_even_digits = 0\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b8eb0bbf7b5d41b610b.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "97a8e5b6e79c929de3d892ff3281aff2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687bbfd9a7d6b78cd5b5cf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687bbfd9a7d6b78cd5b5cf\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nLoop over the even digits and print each to the console.\n--hints--\nYou should have a for loop over even_digits within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /for +(\\w+) +in +even_digits:/);\n}\n})\n```\nYou should have --fcc-expected-- within the for loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\n// Get the name of the variable used in the for loop\nconst for_loop_variable = function_body.match(/for +(\\w+) +in +even_digits:/)?.[1];\nassert.exists(for_loop_variable);\nconst [_,lower_function_body] = function_body.split(\"sum_of_even_digits\");\nassert.equal(lower_function_body.match(new RegExp(`print\\\\(\\\\s*${for_loop_variable}\\\\s*\\\\)`))?.[0], `print(${for_loop_variable})`);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nprint(sum_of_odd_digits)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687bbfd9a7d6b78cd5b5cf.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1b8280e84db4701fac1d5abafcbaad14",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687c2fd0fec7ba9fb8af30.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687c2fd0fec7ba9fb8af30\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nRemove the print call for the sum of the odd digits.\n--hints--\nYou should not have print(sum_of_odd_digits) in your code.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst no_comments = __helpers.python.removeComments(function_body);\nassert.notMatch(no_comments, /print\\(\\s*sum_of_odd_digits\\s*\\)/);\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nprint(sum_of_odd_digits)\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nprint(digit)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1349,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687c2fd0fec7ba9fb8af30.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "133ac891009fed34b78612d37ade9187",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b48f2201ab32e06c37c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687b48f2201ab32e06c37c\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nCurrently, your script throws a TypeError because you are trying to add a string to an integer You can fix this by converting the digit variable to an integer before adding it to sum_of_odd_digits, using the built-in int function:\npython\nmy_string = '123'\nmy_int = int(my_string)\nConvert the digit variable to an integer before adding it to sum_of_odd_digits Then, move the print call to the end of the verify_card_number function to print the value of sum_of_odd_digits --hints--\nYou should have sum_of_odd_digits += int(digit) within the for loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert match(function_body, /sum_of_odd_digits\\s*\\+=\\s*int\\(\\s*digit\\s*\\)/);\n}\n})\n```\nYou should have print(sum_of_odd_digits) at the end of the verify_card_number function ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert match(function_body, /print\\(\\s*sum_of_odd_digits\\s*\\)/);\n}\n})\n```\nYou should not have print(digit) anymore ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst no_comments = __helpers python removeComments(function_body);\nassert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b48f2201ab32e06c37c.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5c8b0a544ac24ce0b678b511629bd3b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b48f2201ab32e06c37c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the verify_card_number function ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\"); const { function_body } = verify_card_number; assert match(function_body, /print\\(\\s*sum_of_odd_digits\\s*\\)/); } }) ``` You should not have print(digit) anymore ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\"); const { function_body } = verify_card_number; const no_comments = __helpers python removeComments(function_body); assertnotMatch(no_comments, /print\\(\\s*digit\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\n--fcc-editable-region--\nfor digit in odd_digits:\nprint(digit)\nsum_of_odd_digits += digit\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687b48f2201ab32e06c37c.md",
      "source_type": "git_repo"
    },
    "token_count": 302,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a31da3a1c5459eb64f430ea4b0cdccf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687c8d86e18cbd775a53c9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687c8d86e18cbd775a53c9\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nThe next part of the Luhn Algorithm is to multiply all the even digits by 2.\nWithin the even digit for loop, replace the print call with a variable named number and assign it the value of digit multiplied by 2.\n--hints--\nYou should have number = int(digit) * 2 within the for loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /number\\s*=\\s*int\\(\\s*digit\\s*\\)\\s*\\*\\s*2/);\n}\n})\n```\nYou should not have print(digit) within the for loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst no_comments = __helpers.python.removeComments(function_body);\nassert.notMatch(no_comments, /print\\s*\\(\\s*digit\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nprint(digit)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687c8d86e18cbd775a53c9.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8eb6fb21aef395a11f6d51cfc79a8ba4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687da2e60409c45595bbe1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687da2e60409c45595bbe1\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nTo prevent the multiplication of one digit from being greater than 9, within the even digit loop, add an if statement that checks if number is greater than or equal to 10. If it is, print number.\n--hints--\nYou should have if number >= 10: within the for loop.\njs\n({\ntest: () =>\n{\nassert(runPython(`_Node(_code).find_function(\"verify_card_number\").find_for_loops()[1].find_ifs()[0].find_conditions()[0].is_equivalent(\"number >= 10\")`));\n}\n})\nYou should have print(number) within the if statement.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst [_,lower_function_body] = function_body.split(\"sum_of_even_digits\");\nassert.match(lower_function_body, /print\\s*\\(\\s*number\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1762,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687da2e60409c45595bbe1.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fb7b9090ee9e6edd7db8ddceccdd2fcc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687dd4b641fdc67d7de487.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687dd4b641fdc67d7de487\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nMove the print call below the number reassignment.\n--hints--\nYou should move print(number) below number = (number // 10) + (number % 10).\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst if_statement = __helpers.python.getBlock(\"\\n\" + transformedCode, \"if number >= 10\");\nconst { block_body } = if_statement;\nconst [number_assignment, print_pos] = block_body.split('\\n').filter(line => line.trim().length > 0);\nassert.match(number_assignment, /number *=/);\nassert.match(print_pos, /print\\s*\\(\\s*number\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nprint(number)\nnumber = (number // 10) + (number % 10)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1527,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687dd4b641fdc67d7de487.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e3f284bc0f4b65361698e1883e5e9c9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e294ef2bdca637fb213.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687e294ef2bdca637fb213\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nReturn the result of comparing 0 to total modulo 10.\n--hints--\nYou should have return 0 == total % 10 within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst acceptableMatches = [\n/return +0 *== *total *% *10/,\n/return +total *% *10 *== *0/\n];\nconst someMatch = acceptableMatches.some((match) => {\nreturn match.test(function_body);\n});\nassert.isTrue(someMatch);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nsum_of_even_digits += number\n--fcc-editable-region--\ntotal = sum_of_odd_digits + sum_of_even_digits\nprint(total)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1679,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e294ef2bdca637fb213.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "84ef716b593347e0824c4d45e9217b8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687db6a9fcf3c548a6c1b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687db6a9fcf3c548a6c1b7\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nPart of the algorithm is to double every second digit, starting from the right If the result of doubling the number is greater than or equal to 10, add the two digits together For example, if the digit is 6, double it to get 12 Add 1 and 2 together to get 3 You can do this by using integer division to get the first digit and the modulus operator (%) to get the second digit:\npython\nmy_number = 12\nfirst_digit = my_number // 10\nsecond_digit = my_number % 10\nInteger division results in the quotient of the division, rounded down to the nearest integer Within the if statement, assign number the result of number // 10 (integer division) plus the modulus of number and 10 --hints--\nYou should have number = number // 10 + number % 10 within the if statement ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getBlock(\"\\n\" + transformedCode, \"if number >= 10\");\nconst { block_body } = verify_card_number;\nconst allowedMatches = [\n/number = ( \\snumber \\/\\/ 10\\s) + ( \\snumber % 10/,\n/number = ( \\snumber % 10\\s) + ( \\snumber \\/\\/ 10/\n];\nconst someMatch = allowedMatches some(allowedMatch => allowedMatch test(block_body));\nassert isTrue(someMatch);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nprint(number)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687db6a9fcf3c548a6c1b7.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ed27491a907090193e3e153f571307f0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687db6a9fcf3c548a6c1b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "/number = ( \\snumber % 10\\s) + ( \\snumber \\/\\/ 10/ ]; const someMatch = allowedMatches some(allowedMatch => allowedMatch test(block_body)); assert isTrue(someMatch); } }) ``` --seed-- --seed-contents-- ```py def verify_card_number(card_number): sum_of_odd_digits = 0 card_number_reversed = card_number[::-1] odd_digits = card_number_reversed[::2] for digit in odd_digits: sum_of_odd_digits += int(digit) --fcc-editable-region-- sum_of_even_digits = 0 even_digits = card_number_reversed[1::2] for digit in even_digits: number = int(digit) * 2 if number >= 10: print(number) --fcc-editable-region-- def main(): card_number = '4111-1111-4555-1142' card_translation = strmaketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2252,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687db6a9fcf3c548a6c1b7.md",
      "source_type": "git_repo"
    },
    "token_count": 220,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f953cf3407d37d1df62b437381677514",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e069cf4e0c85b0a06b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687e069cf4e0c85b0a06b1\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nOutside of the if statement, add number to sum_of_even_digits Also, remove the print call --hints--\nYou should have sum_of_even_digits += number within the for loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst for_loop = __helpers python getBlock(\"\\n\" + transformedCode, \"for digit in even_digits\");\nconst {block_body} = for_loop;\nassert match(block_body, /sum_of_even_digits\\s*\\+=\\s*number/);\n}\n})\n```\nYou should not have print(number) within the for loop ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst no_comments = __helpers python removeComments(function_body);\nassert notMatch(no_comments, /print\\s*\\(\\s*number\\s*\\)/);\n}\n})\n```\nYou should not have sum_of_even_digits += number within the if statement ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst if_statement = __helpers python getBlock(\"\\n\" + transformedCode, \"if number >= 10\");\nconst {block_body} = if_statement;\nassert notMatch(block_body, /sum_of_even_digits *\\+= *number/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nprint(number)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e069cf4e0c85b0a06b1.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a900071743b408c5570238798b4e473b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e069cf4e0c85b0a06b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"if number >= 10\"); const {block_body} = if_statement; assert notMatch(block_body, /sum_of_even_digits *\\+= *number/); } }) ``` --seed-- --seed-contents-- ```py def verify_card_number(card_number): sum_of_odd_digits = 0 card_number_reversed = card_number[::-1] odd_digits = card_number_reversed[::2] for digit in odd_digits: sum_of_odd_digits += int(digit) --fcc-editable-region-- sum_of_even_digits = 0 even_digits = card_number_reversed[1::2] for digit in even_digits: number = int(digit) * 2 if number >= 10: number = (number // 10) + (number % 10) print(number) --fcc-editable-region-- def main(): card_number = '4111-1111-4555-1142' card_translation = strmaketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e069cf4e0c85b0a06b1.md",
      "source_type": "git_repo"
    },
    "token_count": 221,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ebf5c8071ed61b22a0fd72f942fa23f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e0ed12e20c91811a48d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687e0ed12e20c91811a48d\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nBelow the second for loop of the verify_card_number function, create a variable named total, and assign it the value of the sum of the odd and even digits Print total to the console --hints--\nYou should have total = sum_of_odd_digits + sum_of_even_digits within the verify_card_number function ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst function_body_indentation = function_body match(/^\\s*/)[0];\nconst total_re = new RegExp(`^${function_body_indentation}total\\\\s*=\\\\s*(sum_of_odd_digits\\\\s*\\\\+\\\\s*sum_of_even_digits|sum_of_even_digits\\\\s*\\\\+\\\\s*sum_of_odd_digits)`, \"m\");\nassert match(function_body, total_re);\n}\n})\n```\nYou should have print(total) within the verify_card_number function ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert match(function_body, /print\\(\\s*total\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\n--fcc-editable-region--\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nsum_of_even_digits += number\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2185,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e0ed12e20c91811a48d.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "97642419d25fa1bc537e010157e1c332",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e0ed12e20c91811a48d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "transformedCode, \"verify_card_number\"); const { function_body } = verify_card_number; assert match(function_body, /print\\(\\s*total\\s*\\)/); } }) ``` --seed-- --seed-contents-- ```py def verify_card_number(card_number): sum_of_odd_digits = 0 card_number_reversed = card_number[::-1] odd_digits = card_number_reversed[::2] for digit in odd_digits: sum_of_odd_digits += int(digit) --fcc-editable-region-- sum_of_even_digits = 0 even_digits = card_number_reversed[1::2] for digit in even_digits: number = int(digit) * 2 if number >= 10: number = (number // 10) + (number % 10) sum_of_even_digits += number --fcc-editable-region-- def main(): card_number = '4111-1111-4555-1142' card_translation = strmaketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2185,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e0ed12e20c91811a48d.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fc611bf56d5a7ca63f8fcaab33187216",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687f47f9001dd35bdcd5ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687f47f9001dd35bdcd5ab\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nChange the value of card_number such that 'INVALID!' is printed to the console.\n--hints--\nYou should have card_number = '4111-1111-4555-1141' within the main function.\njs\n({\ntest: () => {\nconst spyCode = \"a = ''\\ndef printSpy(*x):\\n    global a\\n    a += str(x)\\n\" + code.replaceAll(\"print(\", \"printSpy(\") + \"\\na\";\nconst out = runPython(spyCode);\nassert.include(out, \"INVALID!\");\n}\n})\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nsum_of_even_digits += number\ntotal = sum_of_odd_digits + sum_of_even_digits\nprint(total)\nreturn total % 10 == 0\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\n--fcc-editable-region--\nif verify_card_number(translated_card_number):\nprint('VALID!')\nelse:\nprint('INVALID!')\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687f47f9001dd35bdcd5ab.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "efe4e473d0953fea30ba3f79bedbf0df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b4638cb8bcf2729afe9a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656b4638cb8bcf2729afe9a9\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nPrint the value of the card_number_reversed variable to the console.\n--hints--\nYou should have print(card_number_reversed) within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /print\\(\\s*card_number_reversed\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[0:4]\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1092,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b4638cb8bcf2729afe9a9.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4f823b0ece64d7991f983d24a103941c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\6569b831a07d7154c793301b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6569b831a07d7154c793301b\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nDefine a function verify_card_number with a parameter card_number, and use the pass keyword to make the function do nothing.\n--hints--\nYou should have a function called verify_card_number with a parameter called card_number.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nassert.exists(verify_card_number);\nconst { function_parameters } = verify_card_number;\nassert.equal(function_parameters.trim(), \"card_number\");\n}\n})\nYou should use the pass keyword in the body of the verify_card_number function.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nassert.exists(verify_card_number);\nconst { function_body } = verify_card_number;\nassert.match(function_body, / +pass/);\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1468,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\6569b831a07d7154c793301b.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b10d5ca5e7f9a73c08f01b29a4de4b18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e457ab1c4cb8c3fe7c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65687e457ab1c4cb8c3fe7c8\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nAdjust the verify_card_number call such that if it returns True, print 'VALID ' to the console Otherwise, print 'INVALID ' --hints--\nYou should have if verify_card_number(translated_card_number): within the main function ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst main = __helpers python getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nconst if_statement = __helpers python getBlock(\"\\n\" + function_body, \"if verify_card_number(translated_card_number)\");\nassert exists(if_statement);\n}\n})\n```\nYou should have print('VALID ') within the if statement ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst if_statement = __helpers python getBlock(\"\\n\" + transformedCode, \"if verify_card_number(translated_card_number)\");\nconst {block_body} = if_statement;\nassert match(block_body, /print\\(\\s*('|\")VALID \\1\\s*\\)/);\n}\n})\n```\nYou should have print('INVALID ') within the else clause ```js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst else_statement = __helpers python getBlock(\"\\n\" + transformedCode, \"else\");\nconst {block_body} = else_statement;\nassert match(block_body, /print\\(\\s*('|\")INVALID",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2395,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e457ab1c4cb8c3fe7c8.md",
      "source_type": "git_repo"
    },
    "token_count": 332,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b181902664ed36847fe61fc3fd04437a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e457ab1c4cb8c3fe7c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "print('VALID ') within the if statement ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const if_statement = __helpers python getBlock(\"\\n\" + transformedCode, \"if verify_card_number(translated_card_number)\"); const {block_body} = if_statement; assert match(block_body, /print\\(\\s*('|\")VALID \\1\\s*\\)/); } }) ``` You should have print('INVALID ') within the else clause ```js ({ test: () => { const transformedCode = code replace(/\\r/g, \"\"); const else_statement = __helpers python getBlock(\"\\n\" + transformedCode, \"else\"); const {block_body} = else_statement; assert match(block_body, /print\\(\\s*('|\")INVALID\\1\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nsum_of_even_digits += number\ntotal = sum_of_odd_digits + sum_of_even_digits\nprint(total)\nreturn total % 10 == 0\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nverify_card_number(translated_card_number)\n--fcc-editable-region--\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2395,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\65687e457ab1c4cb8c3fe7c8.md",
      "source_type": "git_repo"
    },
    "token_count": 385,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "421ad6f28caace249c5126fb670c2602",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656880227dab4bd8fbc02d41.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656880227dab4bd8fbc02d41\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nWell done on completing this project As a final step, remove the print call from the verify_card_number function, and change the card_number back to something valid --hints--\nYou should not have a print call within the verify_card_number function js\n({\ntest: () => {\nconst transformedCode = code replace(/\\r/g, \"\");\nconst verify_card_number = __helpers python getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nconst no_comments = __helpers python removeComments(function_body);\nassert notMatch(no_comments, /print\\(/);\n}\n})\nYou should change card_number back to something valid js\n({\ntest: () => {\nconst spyCode = \"a = ''\\ndef printSpy(*x):\\n    global a\\n    a = str(x)\\n\" + code replaceAll(\"print(\", \"printSpy(\") + \"\\na\";\nconst out = runPython(spyCode);\nassert notInclude(out, \"INVALID \");\nassert include(out, \"VALID \");\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nsum_of_even_digits += number\ntotal = sum_of_odd_digits + sum_of_even_digits\nprint(total)\nreturn total % 10 == 0\ndef main():\ncard_number = '4111-1111-4555-1141'\ncard_translation = str maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nif verify_card_number(translated_card_number):\nprint('VALID ')\nelse:\nprint('INVALID",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656880227dab4bd8fbc02d41.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bc9fae9d63ec4a912594a4eaaccdd50e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656880227dab4bd8fbc02d41.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "odd_digits = card_number_reversed[::2] for digit in odd_digits: sum_of_odd_digits += int(digit) sum_of_even_digits = 0 even_digits = card_number_reversed[1::2] for digit in even_digits: number = int(digit) * 2 if number >= 10: number = (number // 10) + (number % 10) sum_of_even_digits += number total = sum_of_odd_digits + sum_of_even_digits print(total) return total % 10 == 0 def main(): card_number = '4111-1111-4555-1141' card_translation = str maketrans({'-': '', ' ': ''}) translated_card_number = card_number translate(card_translation) if verify_card_number(translated_card_number): print('VALID ') else: print('INVALID')\nmain()\n--fcc-editable-region--\n```\n--solutions--\n```py\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[::-1]\nodd_digits = card_number_reversed[::2]\nfor digit in odd_digits:\nsum_of_odd_digits += int(digit)\nsum_of_even_digits = 0\neven_digits = card_number_reversed[1::2]\nfor digit in even_digits:\nnumber = int(digit) * 2\nif number >= 10:\nnumber = (number // 10) + (number % 10)\nsum_of_even_digits += number\ntotal = sum_of_odd_digits + sum_of_even_digits\nreturn total % 10 == 0\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number translate(card_translation)\nif verify_card_number(translated_card_number):\nprint('VALID ')\nelse:\nprint('INVALID ')\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2947,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656880227dab4bd8fbc02d41.md",
      "source_type": "git_repo"
    },
    "token_count": 391,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b6099c323950d1fdcf44eee5350b1a2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b47dc2cf39e37025dc033.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656b47dc2cf39e37025dc033\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nReverse the order of the digits in the last four digits of card_number, by using a slice with a step of -1. You can use either negative or positive indices for the start and end indices.\n--hints--\nYou should have card_number_reversed = card_number[-1:-5:-1] within the verify_card_number function. Expected --fcc-actual-- to equal --fcc-expected--.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body, def } = verify_card_number;\nconst pyCode = `\ncard_number = \"4111111145551142\"\n${def}\n${function_body.match(/ +/)[0]}return card_number_reversed\nverify_card_number(card_number)\n`;\nconst out = runPython(pyCode, {});\nassert.equal(out, \"2411\");\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[0:4:2]\nprint(card_number_reversed)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b47dc2cf39e37025dc033.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b7e470407f1c05a962be215d45b948fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b475b394390334828eb12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656b475b394390334828eb12\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nChange card_number_reversed to be every second digit of the first four digits of card_number.\n--hints--\nYou should have card_number_reversed = card_number[0:4:2] within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /card_number_reversed\\s*=\\s*card_number\\s*\\[\\s*0\\s*:\\s*4\\s*:\\s*2\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[0:4]\nprint(card_number_reversed)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1198,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b475b394390334828eb12.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "293757a7cfcccb5f7b207c748b5b978e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662a6bc12cde72c32fb526f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662a6bc12cde72c32fb526f0\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nAn interface is like a blueprint for a class. An interface contains a set of methods and properties that a class should implement.\nStart this project by declaring an empty class named Equation. You will use this class to define an interface, a blueprint for a generic equation.\n--hints--\nYou should define a new class named Equation.\njs\n({ test: () => assert(runPython(`_Node(_code).has_class(\"Equation\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 643,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662a6bc12cde72c32fb526f0.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ede3e6a6c2edad4217edada0d24b9982",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b481ec4976439565a78b2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 656b481ec4976439565a78b2\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nJust as the step is optional, a start at 0 and an end at the end of the slice are optional:\npython\nmy_string = 'camperbot'\ncamperbot = my_string[::]\nAssign the reverse of the full card_number string to the card_number_reversed variable.\n--hints--\nYou should have card_number_reversed = card_number[::-1] within the verify_card_number function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\nconst { function_body } = verify_card_number;\nassert.match(function_body, /card_number_reversed\\s*=\\s*card_number\\s*\\[\\s*:\\s*:\\s*-1\\s*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef verify_card_number(card_number):\nsum_of_odd_digits = 0\ncard_number_reversed = card_number[-1:-5:-1]\nprint(card_number_reversed)\n--fcc-editable-region--\ndef main():\ncard_number = '4111-1111-4555-1142'\ncard_translation = str.maketrans({'-': '', ' ': ''})\ntranslated_card_number = card_number.translate(card_translation)\nprint(translated_card_number)\nverify_card_number(translated_card_number)\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1349,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm\\656b481ec4976439565a78b2.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "156c56d344124ae28a11ab98c8f0b4d5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bd552e1c1d2db1b88ba47.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662bd552e1c1d2db1b88ba47\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nNow, define another class named LinearEquation and make it inherit from Equation. You'll use this class to represent linear equations.\n--hints--\nYou should define a class named LinearEquation.\njs\n({ test: () => assert(runPython(`_Node(_code).has_class(\"LinearEquation\")`)) })\nYour LinearEquation class should inherit from the Equation class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"LinearEquation\").inherits_from(\"Equation\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Equation:\ndef solve(self):\npass\ndef analyze(self):\npass\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 780,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bd552e1c1d2db1b88ba47.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "2892fb7b8158f477845f414a08c18e63",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bd456896f16d9bd03f1a6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662bd456896f16d9bd03f1a6\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nWithin the Equation class, define two new instance methods named solve and analyze.\n--hints--\nYou should define a method named solve within the Equation class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").has_function(\"solve\")`)) })\nYour solve method should take one parameter, self.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").find_function(\"solve\").has_args(\"self\")`)) })\nYou should define a method named analyze within the Equation class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").has_function(\"analyze\")`)) })\nYour analyze method should take one parameter, self.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").find_function(\"analyze\").has_args(\"self\")`)) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nclass Equation:\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1059,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bd456896f16d9bd03f1a6.md",
      "source_type": "git_repo"
    },
    "token_count": 260,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7868effc12c0dbafa8eef407c82a655f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bdd364bf2cde1487922a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662bdd364bf2cde1487922a9\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nUnlike other programming languages, Python does not implement interfaces in its core language, but the Python standard library allows you to define interfaces in a simple way.\nFor this project, you'll use utilities from the abc module. Therefore, import this module in your code.\n--hints--\nYou should import the abc module.\njs\n({ test: () => assert(runPython(`_Node(_code).has_import(\"import abc\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\nclass Equation:\ndef solve(self):\npass\ndef analyze(self):\npass\nclass LinearEquation(Equation):\npass\neq = Equation()\nlin_eq = LinearEquation()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bdd364bf2cde1487922a9.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "108a77ba542341ec8cdbb4d453a55cfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bd8260da84bdd5feae419.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662bd8260da84bdd5feae419\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nYou want the LinearEquation class to implement and not simply inherit all the methods defined inside the Equation class, which should act as an interface.\nCurrently, the Equation class is simply the parent class of LinearEquation. In the next steps you will learn how to turn it into a formal interface.\nFor now, create an instance of Equation and assign it to a variable eq, and an instance of LinearEquation and assign it to a variable lin_eq.\n--hints--\nYou should declare a variable eq and assign it an instance of Equation.\njs\n({ test: () => assert(runPython(`_Node(_code).has_stmt(\"eq = Equation()\")`)) })\nYou should declare a variable lin_eq and assign it an instance of LinearEquation.\njs\n({ test: () => assert(runPython(`_Node(_code).has_stmt(\"lin_eq = LinearEquation()\")`)) })\n--seed--\n--seed-contents--\n```py\nclass Equation:\ndef solve(self):\npass\ndef analyze(self):\npass\nclass LinearEquation(Equation):\npass\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1181,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bd8260da84bdd5feae419.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "274f278a6a5197edfa195b455e6ab56b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bde88dc84f1e249801b1a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662bde88dc84f1e249801b1a\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nABC stands for Abstract Base Classes. The ABC class enables you to turn a regular class into an abstract class, which is a class that acts as a blueprint for concrete classes.\nModify your import statement to import just the ABC class from the abc module. You can import a specific object x from a module y following the import construct from y import x.\nThen, turn your Equation class into an abstract class by making it inherit from ABC.\n--hints--\nYou should import ABC from the abc module.\njs\n({ test: () => assert(runPython(`_Node(_code).has_import(\"from abc import ABC\")`)) })\nYour Equation class should inherit from ABC.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").inherits_from(\"ABC\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nimport abc\nclass Equation:\ndef solve(self):\npass\ndef analyze(self):\npass\nclass LinearEquation(Equation):\npass\neq = Equation()\nlin_eq = LinearEquation()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1184,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662bde88dc84f1e249801b1a.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "85df8acc4c67dc6efd152bc295e14b44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662f6d7c92381a3049e4c987.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662f6d7c92381a3049e4c987\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nAn interface doesn't have to define only abstract methods, but it can also implement methods to be inherited by the concrete classes.\nBefore taking care of the actual implementation of solve and analyze, within the Equation class, define an __init__ method. Do not use any decorator on it.\n--hints--\nYou should define an __init__ method in your Equation class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").has_function(\"__init__\")`)) })\nYour __init__ method should take one parameter, self.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").find_function(\"__init__\").has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1189,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662f6d7c92381a3049e4c987.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7bd4d807cb88239f4daf0d86eb039116",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fa2e2cf27c09f21f4f5d0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662fa2e2cf27c09f21f4f5d0\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nIn Python, data types are recognized during runtime (when the code is executed). Therefore, you don't have to specify the data type of a variable when you declare it. Nonetheless, you can annotate a variable to clarify that it will hold a specific data type with variable: <data type> = value or just variable: <data type>. Note that the Python interpreter does not enforce the types used to annotate variables, and normally you'd need external tools to do it.\nInside the Equation class, define a class attribute degree. Do not assign it a value. Instead use a type annotation of int to show that it will store an integer number inside the concrete classes.\nLater on, you'll use this class attribute as a part of the validation process of the arguments passed to instantiate the equation objects.\n--hints--\nYou should define class attribute named degree and annotate it with int within the Equation class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").find_variable(\"degree\").is_equivalent(\"degree: int\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\n--fcc-editable-region--\nclass Equation(ABC):\ndef init(self):\npass\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndef solve(self):\npass\ndef analyze(self):\npass\n--fcc-editable-region--\nlin_eq = LinearEquation()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1617,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fa2e2cf27c09f21f4f5d0.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9c04ce8ad137f31e966eb0d6bba89a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6639f947d3a1818c9322c64a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6639f947d3a1818c9322c64a\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nThe last step of validating the coefficients is checking that the highest degree coefficient is different from zero Remember that the highest degree coefficient should be passed as the first argument when instantiating the object Add an if statement for that and raise a ValueError using the following string to provide a custom message: 'Highest degree coefficient must be different from zero' --hints--\nYou should create an if statement that checks if the first coefficient passed to instantiate the equation is equal to zero js\n({ test: () => assert(runPython(`\ncond = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[2] find_conditions()[0]\ncond is_equivalent(\"args[0] == 0\") or cond is_equivalent(\"0 == args[0]\") or cond is_equivalent(\"not args[0]\")\n`)) })\nYou should raise a ValueError within the new if statement and use the provided string to return a custom error message js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[2] find_bodies()[0] has_stmt(\"raise ValueError('Highest degree coefficient must be different from zero')\")\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\n--fcc-editable-region--\ndef init(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\n--fcc-editable-region--\ndef init_subclass(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls name}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6639f947d3a1818c9322c64a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "184a2f7f781cf233bdc2c56ec85a53a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fbcef5f05e1b84f541a0c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662fbcef5f05e1b84f541a0c\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nEach equation object will be instantiated passing as many arguments as the coefficients of the equation, starting from n-th degree of \\( x \\) down to the zero-th degree, including the possible coefficient with the value of 0 For example, LinearEquation(4, 5) would represent the equation \\( 4x + 5 = 0 \\), with 4 being the coefficient of the first (highest here) degree and 5 the coefficient of the zero-th degree You need to check that the right number of arguments is passed to instantiate the equation object Inside the __init__ method, create an if statement to check if the length of args is different from the number of coefficients the equation should have (degree + 1) If it is, raise a TypeError and use the following string to provide a custom message: f\"'{self __class__ __name__}' object takes {self degree + 1} positional arguments but {len(args)} were given\" Then, fix the error by passing the 2 and 3 to instantiate lin_eq --hints--\nYou should create an if statement that checks if the number of coefficients used to instantiate the equation is different from degree + 1 js\n({ test: () => assert(runPython(`\ncond = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[0] find_conditions()[0]\ncond is_equivalent(\"(self degree + 1) = len(args)\") or cond is_equivalent(\"len(args) = (self degree + 1)\")\n`)) })\nYou should raise a TypeError within the new if statement and use the provided string to return a custom error message js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[0] find_bodies()[0] has_stmt('raise TypeError(f\"\\\\'{self __class__ __name__}\\\\' object takes {self degree + 1} positional arguments but {len(args)} were given\")')\n`)) })\nYou should pass 2 and 3 to instantiate lin_eq js\n({ test: () => assert(runPython(`_Node(_code)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fbcef5f05e1b84f541a0c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "97d351cc28f52360b77c1d9bcd81eed4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fbcef5f05e1b84f541a0c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= len(args)\") or cond is_equivalent(\"len(args) = (self degree + 1)\") `)) }) You should raise a TypeError within the new if statement and use the provided string to return a custom error message js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[0] find_bodies()[0] has_stmt('raise TypeError(f\"\\\\'{self __class__ __name__}\\\\' object takes {self degree + 1} positional arguments but {len(args)} were given\")') `)) }) You should pass 2 and 3 to instantiate lin_eq js ({ test: () => assert(runPython(`_Node(_code)has_stmt(\"lin_eq = LinearEquation(2, 3)\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\n--fcc-editable-region--\ndef init(self, *args):\npass\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fbcef5f05e1b84f541a0c.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d01de2659842487e9c3c5d3f37067ffc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662f96576ef178927de87975.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662f96576ef178927de87975\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nIn order to be recognized as an abstract method, a method should be decorated with the @abstractmethod decorator A decorator is used in Python to modify the behavior of a function Here's an example of how to use a decorator named spam:\npy\n@spam\ndef foo():\npass\nModify your import statement to import the abstractmethod decorator and decorate both the solve and analyze methods of the Equation class This will raise two exceptions Once a class inheriting from ABC has an abstract method, the class cannot be instantiated anymore Therefore, delete the Equation instance to get rid of the error The other error occurs because the LinearEquation class must implement all the abstract methods defined in the interface Make sure to define them inside the LinearEquation class, too You must not use the abstractmethod decorator in the concrete class --hints--\nYou should import abstractmethod from the abc module js\n({ test: () => assert(runPython(`\n_Node(_code) has_import(\"from abc import ABC, abstractmethod\") or \\\\\n_Node(_code) has_import(\"from abc import abstractmethod, ABC\") or \\\\\n(_Node(_code) has_import(\"from abc import abstractmethod\") and _Node(_code) has_import(\"from abc import ABC\"))\n`)) })\nYou should decorate with @abstractmethod the solve method within the Equation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"solve\") has_decorators(\"abstractmethod\")`)) })\nYou should decorate with @abstractmethod the analyze method within the Equation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"analyze\") has_decorators(\"abstractmethod\")`)) })\nYou should define a method named solve within the LinearEquation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") has_function(\"solve\")`)) })\nYour solve method should take one parameter, self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"solve\") has_args(\"self\")`)) })\nYou should define a method named analyze within the LinearEquation class js\n({ test: () => assert(runPython(`_Node(_code)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2926,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662f96576ef178927de87975.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5e321abc4fb063489912e823f8affaa4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662f96576ef178927de87975.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should decorate with @abstractmethod the analyze method within the Equation class js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"analyze\") has_decorators(\"abstractmethod\")`)) }) You should define a method named solve within the LinearEquation class js ({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") has_function(\"solve\")`)) }) Your solve method should take one parameter, self js ({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"solve\") has_args(\"self\")`)) }) You should define a method named analyze within the LinearEquation class js ({ test: () => assert(runPython(`_Node(_code)find_class(\"LinearEquation\") has_function(\"analyze\")`)) })\nYour solve method should take one parameter, self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"analyze\") has_args(\"self\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nfrom abc import ABC\nclass Equation(ABC):\ndef solve(self):\npass\ndef analyze(self):\npass\nclass LinearEquation(Equation):\npass\neq = Equation()\nlin_eq = LinearEquation()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2926,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662f96576ef178927de87975.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5e4ef34d3ff48566fbdc9f8acf409596",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fc3eba556a6bf800d48c1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 662fc3eba556a6bf800d48c1\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nThe isinstance() built-in function takes two arguments and returns a Boolean indicating if the object passed as the first argument is an instance of the class passed as the second argument py\nisinstance(7, int) # True\nAnother thing you want to check is that every argument is a number After your first if, create a for loop that iterates over args and checks if the argument at the current iteration is not an instance of int or float Use the isinstance() function and pass it a tuple containing int and float as the second argument If the argument is not a number, raise a TypeError saying \"Coefficients must be of type 'int' or 'float'\" --hints--\nYou should create a for loop that iterates over args after your if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_for_iter() is_equivalent(\"args\")`)) })\nYou should create an if statement that checks if the current coefficient is not an instance of either int or float within the for loop js\n({ test: () => assert(runPython(`\nvar = str(_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_for_vars())\ncond1 = f'not isinstance({var}, (int, float))'\ncond2 = f'not isinstance({var}, (float, int))'\nif_stmt = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_ifs()[0] find_conditions()[0]\nif_stmt is_equivalent(cond1) or if_stmt is_equivalent(cond2)\n`)) })\nYou should use the provided string to raise a TypeError within the if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_ifs()[0] find_bodies()[0]",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2894,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fc3eba556a6bf800d48c1.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bf7a0fc64d7ee9917884cb617bc04714",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fc3eba556a6bf800d48c1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an instance of either int or float within the for loop js ({ test: () => assert(runPython(` var = str(_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_for_vars()) cond1 = f'not isinstance({var}, (int, float))' cond2 = f'not isinstance({var}, (float, int))' if_stmt = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_ifs()[0] find_conditions()[0] if_stmt is_equivalent(cond1) or if_stmt is_equivalent(cond2) `)) }) You should use the provided string to raise a TypeError within the if statement js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_for_loops()[0] find_ifs()[0] find_bodies()[0]has_stmt(\"raise TypeError(\\\\\"Coefficients must be of type 'int' or 'float'\\\\\")\")\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\n--fcc-editable-region--\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'{self __class__ __name__}' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\n--fcc-editable-region--\ndef init_subclass(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls name}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2894,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\662fc3eba556a6bf800d48c1.md",
      "source_type": "git_repo"
    },
    "token_count": 413,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "031516bd2431d289bb943ac8e74aea65",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a2dd1901cbeecc28748bd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663a2dd1901cbeecc28748bd\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nIt's time to test the solve method. Call it on lin_eq and print the result.\n--hints--\nYou should call the solve method of your lin_eq object and print the result.\njs\n({ test: () => assert(runPython(`\n_Node(_code).has_call(\"print(lin_eq.solve())\")\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self.degree + 1) != len(args):\nraise TypeError(\nf\"'Equation' object takes {self.degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself.coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls.__name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self.coefficients.items():\nif not coefficient:\ncontinue\nif n == 0:\nterms.append(f'{coefficient:+}')\nelif n == 1:\nterms.append(f'{coefficient:+}x')\nequation_string = ' '.join(terms) + ' = 0'\nreturn equation_string.strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self.coefficients.values()\nx = -b / a\nreturn x\ndef analyze(self):\npass\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2124,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a2dd1901cbeecc28748bd.md",
      "source_type": "git_repo"
    },
    "token_count": 463,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b7b35a3d1f4dd32a9d7a5e95618967c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a22ba7420c4d2f7fd2aec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663a22ba7420c4d2f7fd2aec\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nIt's time to implement the solve method Given a linear equation in the form \\( ax + b = 0 \\), the solution is \\(x = -\\frac{b}{a}\\) Unpack the coefficients stored in the coefficients attribute into the variables a and b Note that you'll need to use the values() method Then, declare a variable x, assign it the solution of the equation and return it from the solve method --hints--\nYou should unpack the values stored inside the coefficients attribute into the variables a and b js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"solve\") has_stmt(\"a, b = self coefficients values()\")`)) })\nYou should declare a variable named x and assign it the solution of the linear equation js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"solve\") has_stmt(\"x = -b/a\")`)) })\nYou should return x from your solve method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"solve\") has_return(\"x\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a22ba7420c4d2f7fd2aec.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9c1e7b34f2acaaa3d26d1a295272f4d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a22ba7420c4d2f7fd2aec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficientsitems():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\n--fcc-editable-region--\ndef solve(self):\npass\n--fcc-editable-region--\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a22ba7420c4d2f7fd2aec.md",
      "source_type": "git_repo"
    },
    "token_count": 266,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9bce31beb8ed375a22007510c7e5e5f3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6639fdcc701833a54c364211.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6639fdcc701833a54c364211\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nAfter validating the coefficients, you need to store them in an instance attribute Use a dictionary comprehension to create a dictionary in which the key is the degree of the coefficient and the corresponding value is the coefficient, and assign it to an attribute named coefficients For example, a LinearEquation object instantiated with 2 and 4 should have the following coefficients attribute: {1: 2, 0: 4}, because 2 corresponds to the first degree of x and 4 corresponds to zero-th degree of x Create the key-value pairs in your new dictionary following the same order as in args --hints--\nYou should declare an attribute named coefficients within your __init__ method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") has_variable(\"self coefficients\")`)) })\nYou should use a dictionary comprehension to store your coefficients js\n({ test: () => runPython(`\nimport ast\nnode = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_variable(\"self coefficients\")\nassert isinstance(node tree value, ast DictComp)\n`) })\nYour coefficients attribute should be a dictionary containing key-value pairs in the form degree-coefficient Remember to follow the same order in which coefficients are stored inside args js\n({ test: () => runPython(`\nactual1 = list(LinearEquation(1, 6) coefficients items())\nexpected1 = list({1: 1, 0: 6} items())\nactual2 = list(LinearEquation(-3 5, 0) coefficients items())\nexpected2 = list({1: -3 5, 0: 0} items())\nassert actual1 == expected1\nassert actual2 == expected2\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6639fdcc701833a54c364211.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e7913d341d36c790b4ca59311ac27da7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6639fdcc701833a54c364211.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are stored inside args js ({ test: () => runPython(` actual1 = list(LinearEquation(1, 6) coefficients items()) expected1 = list({1: 1, 0: 6} items()) actual2 = list(LinearEquation(-3 5, 0) coefficients items()) expected2 = list({1: -3 5, 0: 0} items()) assert actual1 == expected1 assert actual2 == expected2 `) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\n--fcc-editable-region--\n--fcc-editable-region--\ndef init_subclass(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls name}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6639fdcc701833a54c364211.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3bd2d6e2197c59ffd69d0cce9fb5f63e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a32735b317af9812eb0d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663a32735b317af9812eb0d7\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nIn linear equations in the form \\( ax + b = 0 \\), the slope is simply the coefficient \\( a \\), and the y-intercept is the coefficient \\( b \\) You are going to use the analyze method to provide additional information about the equation Inside the analyze method, unpack the coefficients into the variables slope and intercept Then, return a dictionary with the keys 'slope' and 'intercept' and the values of the slope and the y-intercept, respectively After that, call analyze on lin_eq and print the result --hints--\nYou should unpack the values stored in the coefficients attribute into the variables slope and intercept inside the analyze method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"analyze\") has_stmt(\"slope, intercept = self coefficients values()\")`)) })\nThe analyze method should return a dictionary with the keys 'slope' and 'intercept' and the values of the slope and the y-intercept, respectively js\n({ test: () => runPython(`\neq = LinearEquation(2 2, 1 5)\na = eq analyze()\nassert a['slope'] == 2 2, \"Expected different slope\"\nassert a['intercept'] == 1 5, \"Expected different intercept\"\n`) })\nYou should call the analyze method of your lin_eq object js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(lin_eq analyze())\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a32735b317af9812eb0d7.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b493bec5fdda273bf05d593f34367e8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a32735b317af9812eb0d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "() => assert(runPython(`_Node(_code) has_call(\"print(lin_eq analyze())\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") selfcoefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\n--fcc-editable-region--\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nprint(lin_eq solve())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3523,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663a32735b317af9812eb0d7.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a0ea850803778a1fc397c7902635c9c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b7fefd437bd984e091cbf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663b7fefd437bd984e091cbf\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nNext, create a new class named QuadraticEquation and make it inherit from Equation You'll use this new class to represent quadratic equations, which are second-degree equations having the form $ax^2 + bx + c = 0$ Inside your new class, define a degree class attribute with the value 2, which is the degree of a quadratic equation Also, define the solve and analyze methods You will take care of the implementation in the following steps --hints--\nYou should create a new class named QuadraticEquation and make it inherit from the Equation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") inherits_from(\"Equation\")`)) })\nYou should define a solve method within the QuadraticEquation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") has_function(\"solve\")`)) })\nYour solve method should take a single parameter, self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"solve\") has_args(\"self\")`)) })\nYou should define an analyze method within the QuadraticEquation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") has_function(\"analyze\")`)) })\nYour analyze method should take a single parameter, self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"analyze\") has_args(\"self\")`)) })\nYou should define a degree class attribute within the QuadraticEquation class and assign it the value 2 js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_variable(\"degree\") is_equivalent(\"degree = 2\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b7fefd437bd984e091cbf.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "079c6f3613f88eec71f592ea700e7a3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b7fefd437bd984e091cbf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Your analyze method should take a single parameter, self js ({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"analyze\") has_args(\"self\")`)) }) You should define a degree class attribute within the QuadraticEquation class and assign it the value 2 js ({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_variable(\"degree\") is_equivalent(\"degree = 2\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\n--fcc-editable-region--\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3681,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b7fefd437bd984e091cbf.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "19ca3079e72f43f2bebf872bbb4bfbd6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b83a28943e6aa6275a514.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663b83a28943e6aa6275a514\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nStill within the Equation class, define a __str__ method to give a proper string representation to the equation objects you are going to create For now, within the __str__ method, declare a variable terms and assign it an empty list You'll use this variable to store each term (coefficient times \\( x^n \\)) of your equation Then, declare a variable equation_string, assign it the result of joining the elements in the terms list with a space Finally, return equation_string --hints--\nYou should define a __str__ method within the Equation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") has_function(\"__str__\")`)) })\nYour __str__ method should take one parameter, self js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_args(\"self\")`)) })\nYou should declare a variable terms and assign it an empty list within the __str__ method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_stmt(\"terms = []\")`)) })\nYou should declare a variable equation_string and assign it the result of joining the elements in terms with a space within the __str__ method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_stmt(\"equation_string = ' ' join(terms)\")`)) })\nYou should return equation_string from your __str__ method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_return(\"equation_string\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b83a28943e6aa6275a514.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "84fa33594e098e70dc6504e676e4b6a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b83a28943e6aa6275a514.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it the result of joining the elements in terms with a space within the __str__ method js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_stmt(\"equation_string = ' ' join(terms)\")`)) }) You should return equation_string from your __str__ method js ({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_return(\"equation_string\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\n--fcc-editable-region--\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2989,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b83a28943e6aa6275a514.md",
      "source_type": "git_repo"
    },
    "token_count": 369,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7cce46d630ef707aa70642dfe9856902",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b93aee129b3c4cc07d0db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663b93aee129b3c4cc07d0db\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nJust after the terms list, create a for loop and use the items() method to iterate over the keys and values stored in the coefficients attribute Use n and coefficient as the loop variables Inside the loop, create an if statement that checks if the coefficient at the current iteration has a falsy value and skip the iteration in that case This is because you don't want to represent coefficients with the value of zero --hints--\nYou should create a for loop that iterates over coefficients items() js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_for_iter() is_equivalent(\"self coefficients items()\")`)) })\nYour for loop should use n and coefficient to iterate over coefficients items() js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_for_vars() is_equivalent(\"n, coefficient\")`)) })\nYou should create an if statement to check if coefficient has a falsy value inside your for loop js\n({ test: () => assert(runPython(`\nif_cond = _Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[0] find_conditions()[0]\nconditions = [\"not coefficient\", \"coefficient == 0\", \"0 == coefficient\"]\nany(if_cond is_equivalent(condition) for condition in conditions)\n`)) })\nYou should use the continue keyword inside your new if statement js\n({ test: () => assert(runPython(`\n_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[0] find_bodies()[0] has_stmt(\"continue\")\n`)) })\nYour for loop should be placed just after the declaration of terms js\n({ test: () => assert(runPython(`\nloop = str(_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0])\n_Node(_code) find_class(\"Equation\") find_function(\"__str__\")",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b93aee129b3c4cc07d0db.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9939828cbe1448a32a8b759684af811c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b93aee129b3c4cc07d0db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[0] find_conditions()[0] conditions = [\"not coefficient\", \"coefficient == 0\", \"0 == coefficient\"] any(if_cond is_equivalent(condition) for condition in conditions) `)) }) You should use the continue keyword inside your new if statement js ({ test: () => assert(runPython(` _Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[0] find_bodies()[0] has_stmt(\"continue\") `)) }) Your for loop should be placed just after the declaration of terms js ({ test: () => assert(runPython(` loop = str(_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0]) _Node(_code) find_class(\"Equation\") find_function(\"__str__\")is_ordered(\"terms = []\", loop, \"equation_string = ' ' join(terms)\", \"return equation_string\")\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\n--fcc-editable-region--\ndef str(self):\nterms = []\n--fcc-editable-region--\nequation_string = ' '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b93aee129b3c4cc07d0db.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a214dd6ad7e4a64245c669e29f054328",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b93aee129b3c4cc07d0db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) --fcc-editable-region-- def str(self): terms = [] --fcc-editable-region-- equation_string = ' 'join(terms)\nreturn equation_string\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3539,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b93aee129b3c4cc07d0db.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f4e73fcc3d9537a2883365e15968f2aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664c670069bae45fd060c25d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664c670069bae45fd060c25d\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nNext, print your lin_eq instance.\n--hints--\nYou should print lin_eq.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(lin_eq)\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self.degree + 1) != len(args):\nraise TypeError(\nf\"'Equation' object takes {self.degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself.coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls.__name__}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1526,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664c670069bae45fd060c25d.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cb041ba8650551af17cf3ebcdd71716f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664cb04a16fe6938708967ef.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664cb04a16fe6938708967ef\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nAfter joining the terms, concatenate the string ' = 0' to equation_string to display the complete equation.\nAlso, to refine the output, remove any leading + sign from equation_string.\n--hints--\nThe __str__ method should return a different string representation.\njs\n({ test: () => assert(runPython(`\neq1 = LinearEquation(4, 2)\nstr(eq1) == '4x +2 = 0'\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self.degree + 1) != len(args):\nraise TypeError(\nf\"'Equation' object takes {self.degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself.coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls.__name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self.coefficients.items():\nif not coefficient:\ncontinue\nif n == 0:\nterms.append(f'{coefficient:+}')\nelif n == 1:\nterms.append(f'{coefficient:+}x')\n--fcc-editable-region--\nequation_string = ' '.join(terms)\nreturn equation_string\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2152,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664cb04a16fe6938708967ef.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "adb17e7218d33b499d98efe982859abd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c981b9b06922e13a97fe9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663c981b9b06922e13a97fe9\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nCreate an elif clause for the case n == 1 Within the elif clause, create an f-string containing the coefficient directly followed by a lowercase x and append it to the terms list --hints--\nYou should create an elif clause to check if n is equal to 1 js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_conditions()[1] is_equivalent(\"n==1\")`)) })\nYou should append f'{coefficient}x' to the terms list within your new elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_bodies()[1] is_equivalent(\"terms append(f'{coefficient}x')\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\n--fcc-editable-region--\ndef str(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient}')\nequation_string = ' '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c981b9b06922e13a97fe9.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d774f11ab8c78486ffec3d4cd842e279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c981b9b06922e13a97fe9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) --fcc-editable-region-- def str(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient}') equation_string = ' 'join(terms)\nreturn equation_string\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c981b9b06922e13a97fe9.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d938e8ec33b25b64885bcd2a4c7bd434",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b95d65caeb3ca04c5fef4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663b95d65caeb3ca04c5fef4\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nIf the coefficient has a non-zero value, you can have different cases If n == 0, the term is made by the coefficient itself After your if statement, create another if statement for this case and append a string containing the coefficient to the terms list Use an f-string for that --hints--\nYou should create an if statement to check if n is equal to 0 after your existing if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_conditions()[0] is_equivalent(\"n==0\")`)) })\nYou should append f'{coefficient}' to the terms list within your new if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_bodies()[0] is_equivalent(\"terms append(f'{coefficient}')\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\n--fcc-editable-region--\ndef str(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nequation_string = ' '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2499,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b95d65caeb3ca04c5fef4.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ab09e46432000bb3b9382588596d76be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b95d65caeb3ca04c5fef4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) --fcc-editable-region-- def str(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue equation_string = ' 'join(terms)\nreturn equation_string\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2499,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663b95d65caeb3ca04c5fef4.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "49d1e251c69516db2a29aa3953af98f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c9f31306353460da54542.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663c9f31306353460da54542\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nAs you can see, the + sign is missing from the output The number sign is displayed by default only if negative To change this behavior, you can write a colon after the expression to be evaluated within the curly braces of your f-string, and specify the option + This will allow you to display the sign both for positive and negative numbers Modify the string in your two conditional clauses by adding :+ inside the curly braces after coefficient --hints--\nYou should modify the string to append to the terms list within your if statement into f'{coefficient:+}' js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_bodies()[0] is_equivalent(\"terms append(f'{coefficient:+}')\")`)) })\nYou should modify the string to insert into the terms list within your elif clause into f'{coefficient:+}x' js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_bodies()[1] is_equivalent(\"terms append(f'{coefficient:+}x')\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c9f31306353460da54542.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "188b1a505e6f7f900cebf25672376978",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c9f31306353460da54542.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls__name__}' class: missing required attribute 'degree'\"\n)\n--fcc-editable-region--\ndef str(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient}')\nelif n == 1:\nterms append(f'{coefficient}x')\nequation_string = ' ' join(terms)\nreturn equation_string\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\663c9f31306353460da54542.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "99380666e0bd15e8a168b9a35a27d02e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4a590b52ba8d2adff19f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664e4a590b52ba8d2adff19f\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nThe discriminant of a quadratic equation in the form \\( ax^2 + bx + c = 0 \\), usually indicated by the capital Greek letter delta, is equal to \\( Δ = b^2 - 4ac \\) Within the QuadraticEquation class, define an __init__ method Use super() to call the __init__ method from the parent class Then, define a new attribute named delta, which stores the value of the discriminant of the equation --hints--\nYou should define an __init__ method within the QuadraticEquation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") has_function(\"__init__\")`)) })\nYour __init__ method should take two parameters, self and *args js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"__init__\") has_args(\"self, *args\")`)) })\nYou should call super() __init__(*args) within your __init__ method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"__init__\") has_call(\"super() __init__(*args)\")`)) })\nYou should declare a delta attribute within your __init__ method and assign it the value of the discriminant of the equation js\n({ test: () => runPython(`\neq = QuadraticEquation(2, -3, -4)\nassert eq delta == 41\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4a590b52ba8d2adff19f.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "20fc712c358ad0207342eb9d054e3d5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4a590b52ba8d2adff19f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "eq delta == 41 `) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") selfcoefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\n--fcc-editable-region--\n--fcc-editable-region--\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4a590b52ba8d2adff19f.md",
      "source_type": "git_repo"
    },
    "token_count": 406,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0dba2cca33979664233ef14ce752ea09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4e1b6c35a99cbba49e84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664e4e1b6c35a99cbba49e84\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nNow, create an instance of the QuadraticEquation class to represent the equation \\( 11x^2 - x + 1 = 0 \\) Assign the new instance to a variable quadr_eq, then print your new variable Note that, at this point, the second degree term would be missing from the string representation of the equation --hints--\nYou should declare a variable named quadr_eq and assign it an instance of QuadraticEquation passing it 11, -1, and 1 as the arguments js\n({ test: () => assert(runPython(`_Node(_code) has_stmt(\"quadr_eq = QuadraticEquation(11, -1, 1)\")`)) })\nYou should print your quadr_eq variable js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(quadr_eq)\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4e1b6c35a99cbba49e84.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "353b2d49ca1e34bc71ba1c878173abe2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4e1b6c35a99cbba49e84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') equation_string = ' ' join(terms) + ' = 0' return equation_stringstrip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\npass\ndef analyze(self):\npass\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664e4e1b6c35a99cbba49e84.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "124beb489aee63bd1429feac92374a0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eec7f38234443b42c206f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664eec7f38234443b42c206f\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nYour equation is currently represented as 11x**2 -1x +1 = 0, but it would be nice not to display the coefficient multiplying \\( x \\) when it's equal to one So that equation is represented as 11x**2 -x +1 = 0 Import the re module You are going to use a regular expression to substitute the coefficients for this case during the next steps --hints--\nYou should import the re module js\n({ test: () => assert(runPython(`_Node(_code) has_import(\"import re\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\n--fcc-editable-region--\n--fcc-editable-region--\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eec7f38234443b42c206f.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "37349a237ca3f2642e745f4b0009d4bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eec7f38234443b42c206f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return equation_string strip('+') @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficientsvalues()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eec7f38234443b42c206f.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "506699ac2b69eb6371be60b84a1ac923",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ee8037f4bbe3c0944c35e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664ee8037f4bbe3c0944c35e\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nAs you can see, the second-degree term is missing from the string representation Within the __str__ method, create an else clause to handle the case in which the exponent of \\( x \\) is greater than 1 Append a string to the terms list so that the term is represented as <coefficient>x**<exponent> Display the number sign both for positive and negative coefficients and make sure that the inserted string is suitable to represent equations of degree > 2, too --hints--\nYou should create an else clause after your existing elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_conditions()[2] is_empty()`)) })\nYou should append f'{coefficient:+}x**{n}' to the terms list within your new else clause js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") find_for_loops()[0] find_ifs()[1] find_bodies()[2] is_equivalent(\"terms append(f'{coefficient:+}x**{n}')\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ee8037f4bbe3c0944c35e.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "10b1ba7c9e7da1685f866102d751a6d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ee8037f4bbe3c0944c35e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in selfcoefficients items():\nif not coefficient:\ncontinue\n--fcc-editable-region--\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\n--fcc-editable-region--\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ee8037f4bbe3c0944c35e.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "49439af424c879f6ca710a0ae9ba30e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eef158d792a509e8d708a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664eef158d792a509e8d708a\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nThe sub function from the re module enables you to replace text inside a string based on a regex pattern py\nverse = 'Always look on the bright side of life'\nspam = re sub('bright', 'spam', verse)\nspam == 'Always look on the spam side of life' # True\nIt takes three arguments: the regex pattern to match, the replacement, and the string on which you want to perform the replacement From your __str__ method, return a sub() call passing the string '1', an empty string, and your existing equation_string strip('+') call as the arguments This will replace each 1 with an empty string The result is not refined yet and you'll continue to work on the regex pattern in the next steps --hints--\nYou should return a re sub() call from your __str__ method Pass the string '1', an empty string, and your existing equation_string strip('+') call as the arguments to re sub() js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_return(\"re sub('1', '', equation_string strip('+'))\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eef158d792a509e8d708a.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ce835c9defccb377d9b23357b7d44131",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eef158d792a509e8d708a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficientsitems():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\n--fcc-editable-region--\nreturn equation_string strip('+')\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3420,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664eef158d792a509e8d708a.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "29ec677d787d5e8c883c713375086892",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ef4623946e65e18d59764.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664ef4623946e65e18d59764\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nIn a regex pattern, a lookaround is an assertion that matches a certain pattern without consuming characters in the string One kind of lookaround is the lookbehind, which can be either positive or negative They are denoted by ( <= ) and ( < ), respectively py\nspam = 'black back bat'\nre sub('( <=l)a', 'o', spam) == 'block back bat' # True\nre sub('( < l)a', 'o', spam) == 'black bock bot' # True\nIn the example above, the pattern ( <=l)a contains a positive lookbehind, which is used to match the a character only when preceded by an l In the last line of the example, the pattern ( < l)a contains a negative lookbehind, which is used to match the a character only if it is not preceded by an l Note how, in both cases, the character contained in the lookbehind is not consumed Modify your regex pattern to use a negative lookbehind so that the character 1 is substituted only if not preceded by a digit --hints--\nYou should modify the pattern passed as the first argument to the re sub() call using a negative lookbehind js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"Equation\") find_function(\"__str__\")\nvalues = [\n\"re sub('( < \\\\d)1', '', equation_string strip('+'))\",\n\"re sub(r'( < \\\\d)1', '', equation_string strip('+'))\",\n\"re sub('( < [0-9])1', '', equation_string strip('+'))\"\n]\nany(node has_return(value) for value in values)\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3790,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ef4623946e65e18d59764.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "eb494996f74b23c30c9dc63a1ad6f30b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ef4623946e65e18d59764.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "negative lookbehind js ({ test: () => assert(runPython(` node = _Node(_code) find_class(\"Equation\") find_function(\"__str__\") values = [ \"re sub('( < \\\\d)1', '', equation_string strip('+'))\", \"re sub(r'( < \\\\d)1', '', equation_string strip('+'))\", \"re sub('( < [0-9])1', '', equation_string strip('+'))\" ] any(node has_return(value) for value in values) `)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\n--fcc-editable-region--\nreturn re sub('1', '', equation_string strip('+'))\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3790,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ef4623946e65e18d59764.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "682a2137cf05c19ec12d1accaa732811",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ef4623946e65e18d59764.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' --fcc-editable-region-- return re sub('1', '', equation_string strip('+')) --fcc-editable-region-- @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return x def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3790,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664ef4623946e65e18d59764.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "21e74d80643a1c915ca9cb0ba4539bf4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f0389424a6f7aa15fd3e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664f0389424a6f7aa15fd3e5\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nAnother kind of lookaround assertion is the lookahead Positive and negative lookahead are denoted by ( = ) and ( ), respectively They are used to match a pattern if followed by a certain sequence of characters, which is not consumed:\npy\nspam = 'black back bat'\nre sub('a( =t)', 'o', spam) == 'black back bot' # True\nre sub('a( t)', 'o', spam) == 'block bock bat' # True\nIn the example above, the pattern a( =t) contains a positive lookahead, which is used to match the a character only when followed by a t In the last line of the example, the pattern a( t) contains a negative lookahead, which is used to match the a character only if not followed by a t Again, in both cases, the character contained in the lookahead is not consumed Add a positive lookahead to your regex pattern so that the character 1 is substituted only if followed by the character x --hints--\nYou should modify your regex pattern using a positive lookahead to substitute the character 1 only if followed by an x Do not remove the negative lookbehind from your pattern js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__str__\") has_return(\"re sub(r'( < \\\\d)1( =x)', '', equation_string strip('+'))\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f0389424a6f7aa15fd3e5.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "46b32f9f202a26f2c745a21ba26e3fc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f0389424a6f7aa15fd3e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'', equation_string strip('+'))\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") selfcoefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\n--fcc-editable-region--\nreturn re sub(r'( < \\d)1', '', equation_string strip('+'))\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f0389424a6f7aa15fd3e5.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a1179a4763dc55f7b09116d48f6b1073",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f0389424a6f7aa15fd3e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "' ' join(terms) + ' = 0' --fcc-editable-region-- return re sub(r'( < \\d)1', '', equation_string strip('+')) --fcc-editable-region-- @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return x def analyze(self): slope, intercept = self coefficients values() return {'slope': slope, 'intercept': intercept} class QuadraticEquation(Equation): degree = 2 def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() selfdelta = b**2 - 4 * a * c\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f0389424a6f7aa15fd3e5.md",
      "source_type": "git_repo"
    },
    "token_count": 216,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3879b16af407f379f6e0a89391d9a49e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f4559c17d2138ae680566.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 664f4559c17d2138ae680566\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nIt's time to implement the solve method When the discriminant of the quadratic equation is negative, the equation does not have real solutions, or roots Within the solve method, create an if statement to check if the discriminant is negative If it is, return an empty list --hints--\nYou should create an if statement to check if self delta is lower than 0 js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"solve\") find_ifs()[0] find_conditions()[0] is_equivalent(\"self delta < 0\")`)) })\nYou should return an empty list from your new if statement js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") find_function(\"solve\") find_ifs()[0] find_bodies()[0] has_return(\"[]\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3156,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f4559c17d2138ae680566.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "05996216d770a910423261119801334a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f4559c17d2138ae680566.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' 'join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\n--fcc-editable-region--\ndef solve(self):\npass\n--fcc-editable-region--\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3156,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\664f4559c17d2138ae680566.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0f19decffa1753c583ef754568c6de73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650583d9d9a194714da47f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650583d9d9a194714da47f0\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nThe roots of quadratic equations can be found by applying the formula:\n\\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} = \\frac{-b \\pm \\sqrt{\\Delta}}{2a} \\]\nAfter the if statement, create two variables: assign them the root obtained by taking the plus sign between \\( b \\) and the square root of the discriminant in the formula above, and the root obtained by taking the minus sign Then, return a list containing your two new variables --hints--\nYour solve method should return a list containing the correct solutions js\n({ test: () => runPython(`\neq = QuadraticEquation(-1, 2, 3)\nassert eq solve() == [-1, 3] or eq solve() == [3, -1]\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3059,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650583d9d9a194714da47f0.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "87b4be422e9f9134fff722b43a105cd5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650583d9d9a194714da47f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"(< \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\n--fcc-editable-region--\ndef solve(self):\nif self delta < 0:\nreturn []\n--fcc-editable-region--\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3059,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650583d9d9a194714da47f0.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "00c22b1063aee9cd8e856d9e1463cb82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650633eaeccf266fee14ba6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650633eaeccf266fee14ba6\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nIt's time to test the solve method Call it on your quadr_eq instance and print the result --hints--\nYou should print quadr_eq solve() js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(quadr_eq solve())\") or _Node(_code) has_call(\"print(quadr_eq solve(), quadr_eq results)\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650633eaeccf266fee14ba6.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a91e79f6139eb41c599d89d4379006af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650633eaeccf266fee14ba6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return x def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nreturn [x1, x2]\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n--fcc-editable-region--\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650633eaeccf266fee14ba6.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d1a72243111f671d5bf9363eb427c19b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e11fa60e222e691bb283.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650e11fa60e222e691bb283\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nModify the first argument used to instantiate quadr_eq into -11 In this way, the discriminant of the equation will be positive --hints--\nYou should modify the first argument used to instantiate quadr_eq into -11 js\n({ test: () => assert(runPython(`_Node(_code) has_stmt(\"quadr_eq = QuadraticEquation(-11, -1, 1)\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e11fa60e222e691bb283.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fe15c92c00825b4fbdb29a794839d473",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e11fa60e222e691bb283.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return x def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nreturn [x1, x2]\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n--fcc-editable-region--\nquadr_eq = QuadraticEquation(11, -1, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2937,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e11fa60e222e691bb283.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2e2c83858315d34a712e3262cc20a4d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e27cf34f2335a9bbbd08.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650e27cf34f2335a9bbbd08\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nOne last check: modify your quadr_eq instance to represent the equation \\( x^2 + 2x + 1 = 0 \\) --hints--\nYou should modify the first two arguments used to instantiate quadr_eq into 1 and 2 js\n({ test: () => assert(runPython(`_Node(_code) has_stmt(\"quadr_eq = QuadraticEquation(1, 2, 1)\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e27cf34f2335a9bbbd08.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f7d18a028138f9061dfd806ae6943b1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e27cf34f2335a9bbbd08.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return x def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nreturn [x1, x2]\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n--fcc-editable-region--\nquadr_eq = QuadraticEquation(-11, -1, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e27cf34f2335a9bbbd08.md",
      "source_type": "git_repo"
    },
    "token_count": 353,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cccff4a8725fd605af910a99cbd41749",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650f037c017aa6855a608e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650f037c017aa6855a608e3\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nThe graph of any quadratic equation has a parabolic shape The \\( x \\) coordinate of the vertex of the parabola can be found at \\( x = - \\frac{b}{2a} \\) From the analyze method, return the dictionary containing two keys, 'x', and 'y', and the corresponding values of the vertex \\( x \\) and \\( y \\) coordinates, respectively Use the relation above to find the \\( x \\) coordinate Then, use the \\( x \\) coordinate to calculate the \\( y \\) coordinate --hints--\nYou should return a dictionary containing two keys, 'x', and 'y', and the corresponding values of vertex x and y coordinates, respectively js\n({ test: () => runPython(`\neq = QuadraticEquation(16, 2, 1)\nassert eq analyze() == {'x': -0 0625, 'y': 0 9375}\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650f037c017aa6855a608e3.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3b9c47751bd29c181ec4af81216153ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650f037c017aa6855a608e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' 'join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\n--fcc-editable-region--\ndef analyze(self):\npass\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3408,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650f037c017aa6855a608e3.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f7311558f37e1e79d7565981827491a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e88cc500673ec881c9ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650e88cc500673ec881c9ca\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nIn this case, the discriminant is zero and the two roots are coincidents Create an if statement to check if the discriminant is zero and return a list containing the root --hints--\nYou should create an if statement to check if the delta attribute is equal to zero js\n({ test: () => assert(runPython(`\nnode = _Node(_code) find_class(\"QuadraticEquation\") find_function(\"solve\") find_ifs()[1] find_conditions()[0]\nnode is_equivalent(\"self delta == 0\") or node is_equivalent(\"not self delta\")\n`)) })\nYou should return a list containing the root within your new if statement js\n({ test: () => runPython(`\neq = QuadraticEquation(4, 4, 1)\nassert eq solve() == [-0 5]\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1(",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e88cc500673ec881c9ca.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "65a1c98d1c9cdd2fe4ba92074cff62dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e88cc500673ec881c9ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1(=x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\n--fcc-editable-region--\n--fcc-editable-region--\nreturn [x1, x2]\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650e88cc500673ec881c9ca.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "49d1a38df14fb2c722151c94ffd897f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650eb84e248684c2f57555c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6650eb84e248684c2f57555c\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nIn general, it is good practice to make the same methods from different classes return the same type of data The solve method from the QuadraticEquation class returns a list, because quadratic equations can have two roots Although linear equations have a single real solution, modify the solve method within the LinearEquation class to return a list containing the root, so that the solve methods from different classes return the same type of data --hints--\nYou should return a list containing the single root from the solve method of your LinearEquation class js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") find_function(\"solve\") has_return(\"[x]\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3363,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650eb84e248684c2f57555c.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4dcdf081eb22ba90d33d9fe6a713fa3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650eb84e248684c2f57555c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "- n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_stringstrip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\n--fcc-editable-region--\nreturn x\n--fcc-editable-region--\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3363,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6650eb84e248684c2f57555c.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1587021a4aa62ba40665fb8faa0f0ddd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665467883dded0a1dad983b2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665467883dded0a1dad983b2\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nNow, get rid of all your print calls --hints--\nYou should delete all your print calls js\n({ test: () => assert(runPython(`\n_Node(_code) find_calls(\"print\") == []`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3155,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665467883dded0a1dad983b2.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5297544d7e0cbfffc07bf0381844557a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665467883dded0a1dad983b2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return [x] def analyze(self): slope, intercept = self coefficients values() return {'slope': slope, 'intercept': intercept} class QuadraticEquation(Equation): degree = 2 def __init__(self, *args): super() __init__(*args) a, b, c = self coefficientsvalues()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3155,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665467883dded0a1dad983b2.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7e603088e2ea386416f14a6b6bb7248c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66558720bbe6e038315b7f81.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66558720bbe6e038315b7f81\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nNext, you are going to create a function that will trigger the instance methods you wrote to solve the equation Also, it will display the results in a formatted output Outside the classes, create a new function named solver that takes a single parameter, equation --hints--\nYou should define a function named solver that takes a single parameter, equation js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_args(\"equation\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66558720bbe6e038315b7f81.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "04c2ec924f793d95cf7169617e9545e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66558720bbe6e038315b7f81.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return [x] def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\n--fcc-editable-region--\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3398,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66558720bbe6e038315b7f81.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "28d49cfd548ba3d3c2b0e1313c91b1b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665460392acb7e91db2afad1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665460392acb7e91db2afad1\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nWhen the second-degree coefficient is positive, the parabola has a minimum point and opens upward, or it is called concave upwards Instead, when the second-degree coefficient is negative, the parabola has a maximum point and opens downward, or it is called concave downwards Declare a concavity variable and assign it either the string 'upwards' or 'downwards', depending on the concavity of the parabola Also, declare a variable named min_max and assign it either the string 'min' or 'max', depending on if the vertex is a minimum or a maximum, respectively Finally, add the dictionary to return two keys 'min_max' and 'concavity' with the values of min_max' and concavity, respectively --hints--\nYour analyze method should return a dictionary with four keys, 'x', 'y', 'min_max', and 'concavity' and the values of x, y, min_max, and concavity, respectively js\n({ test: () => runPython(`\neq1 = QuadraticEquation(16, 2, 1)\neq2 = QuadraticEquation(-16, 2, 1)\nassert eq1 analyze() == {'x': -0 0625, 'y': 0 9375, 'min_max': 'min', 'concavity': 'upwards'}\nassert eq2 analyze() == {'x': 0 0625, 'y': 1 0625, 'min_max': 'max', 'concavity': 'downwards'}\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665460392acb7e91db2afad1.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "07552542f101f2ee997803bd7a202b96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665460392acb7e91db2afad1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'concavity': 'downwards'} `) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") selfcoefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665460392acb7e91db2afad1.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cfab7d2b1536ca1558fd5344843c5787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665460392acb7e91db2afad1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "analyze(self): slope, intercept = self coefficients values() return {'slope': slope, 'intercept': intercept} class QuadraticEquation(Equation): degree = 2 def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 05) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\n--fcc-editable-region--\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nreturn {'x': x, 'y': y}\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(quadr_eq)\nprint(quadr_eq solve())\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665460392acb7e91db2afad1.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a206c4514648cebddb5d49e113886e9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665621ef85db565d26632761.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665621ef85db565d26632761\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nWithin your new function, create an if statement that checks if equation is not an instance of the Equation class and raise a TypeError using the string 'Argument must be an Equation object' to provide a custom message --hints--\nYou should create an if statement to check if equation is not an instance of the Equation class within your solver function js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_ifs()[0] find_conditions()[0] is_equivalent(\"not isinstance(equation, Equation)\")`)) })\nYou should raise a TypeError with the provided string within your new if statement js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_ifs()[0] find_bodies()[0] has_stmt(\"raise TypeError('Argument must be an Equation object')\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( <",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665621ef85db565d26632761.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fb81184f2df056f60bf838648627f46a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665621ef85db565d26632761.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( <\\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665621ef85db565d26632761.md",
      "source_type": "git_repo"
    },
    "token_count": 394,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e8cfb5a60d8c488bf0f2730c815bc864",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665621ef85db565d26632761.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\n--fcc-editable-region--\ndef solver(equation):\npass\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3772,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665621ef85db565d26632761.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e001f40a0b54443c8b5ce6a493b2332d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66759e32b88fb5459b1e0234.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66759e32b88fb5459b1e0234\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nThe __init_subclass__ method is called whenever the class that defines it is subclassed and it enables to customize the child classes. The method takes a parameter named by convention cls (standing for \"class\"), which represents the new child class.\nDefine an __init_subclass__ method in your Equation class and give it a cls parameter.\n--hints--\nYou should define an __init_subclass__ method with a cls parameter in your Equation class.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").find_function(\"__init_subclass__\").has_args(\"cls\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self):\npass\n--fcc-editable-region--\n--fcc-editable-region--\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1173,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66759e32b88fb5459b1e0234.md",
      "source_type": "git_repo"
    },
    "token_count": 263,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "91a8718993093a063afc583103d36730",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665ee783d35cb68875c626d4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 665ee783d35cb68875c626d4\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nNow, remove both the print(lin_eq solve()) and print(lin_eq analyze()) calls from your code --hints--\nYou should remove both your print(lin_eq solve()) and print(lin_eq analyze()) calls js\n({ test: () => runPython(`\nassert not _Node(_code) has_call(\"print(lin_eq analyze())\")\nassert not _Node(_code) has_call(\"print(lin_eq solve())\")\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nequation_string = ' ' join(terms) + ' = 0'\nreturn equation_string strip('+')\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn x\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2353,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665ee783d35cb68875c626d4.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "346dff7f5599e6f7bd4e8967133605e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665ee783d35cb68875c626d4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": ") def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') equation_string = ' ' join(terms) + ' = 0' return equation_string strip('+') @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return x def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nlin_eq = LinearEquation(2, 3)\nprint(lin_eq)\n--fcc-editable-region--\nprint(lin_eq solve())\nprint(lin_eq analyze())\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2353,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\665ee783d35cb68875c626d4.md",
      "source_type": "git_repo"
    },
    "token_count": 187,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1493df6f43d2a1cba2ec69c954092086",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6675aaf418b41157f6ccd692.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6675aaf418b41157f6ccd692\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nIt's time to go back to the __init__ method. Depending on the equation type, you'll need to pass a variable number of arguments during the instantiation.\nAdd a second parameter args to the method and use the * operator to make it accept a variable number of arguments.\n--hints--\nYour __init__ method should take two parameters, self, and *args.\njs\n({ test: () => assert(runPython(`_Node(_code).find_class(\"Equation\").find_function(\"__init__\").has_args(\"self, *args\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\n--fcc-editable-region--\ndef init(self):\npass\n--fcc-editable-region--\ndef init_subclass(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls.name}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1294,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6675aaf418b41157f6ccd692.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b9a56d26dcd09afc86e5863e2ed64bec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66562f71937f877c66123bbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66562f71937f877c66123bbe\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nThe first thing to display at the top of the output will be the equation type Add a class attribute named type to the Equation class and annotate it with str Then, add another if statement to the __init_subclass__ method to check if the classes inheriting from Equation have the type attribute Use the same format of the existing if statement with the appropriate modifications Finally, add the new class attribute to the LinearEquation class and to the QuadraticEquation class Assign it the string 'Linear Equation' and the string 'Quadratic Equation', respectively --hints--\nYou should define a class variable named type within the Equation class and annotate it with str js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") has_stmt(\"type: str\")`)) })\nYou should create an if statement that checks if cls does not have the attribute type inside the __init_subclass__ method and raise an AttributeError using the provided string js\n({ test: () => assert(runPython(`\nif_str = \"\"\"\nif not hasattr(cls, 'type'):\nraise AttributeError(\nf\\\\\"Cannot create '{cls __name__}' class: missing required attribute 'type'\\\\\"\n)\n\"\"\"\n_Node(_code) find_class(\"Equation\") find_function(\"__init_subclass__\") has_stmt(if_str)\n`)) })\nThe type attribute of the LinearEquation class shouls have the value 'Linear Equation' js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") has_stmt(\"type = 'Linear Equation'\")`)) })\nThe type attribute of the QuadraticEquation class should have the value 'Quadratic Equation' js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") has_stmt(\"type = 'Quadratic Equation'\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\n--fcc-editable-region--\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4815,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66562f71937f877c66123bbe.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "111bfed57c7808172ca2666e47fb5d58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66562f71937f877c66123bbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "LinearEquation class shouls have the value 'Linear Equation' js ({ test: () => assert(runPython(`_Node(_code) find_class(\"LinearEquation\") has_stmt(\"type = 'Linear Equation'\")`)) }) The type attribute of the QuadraticEquation class should have the value 'Quadratic Equation' js ({ test: () => assert(runPython(`_Node(_code) find_class(\"QuadraticEquation\") has_stmt(\"type = 'Quadratic Equation'\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re --fcc-editable-region-- class Equation(ABC): degree: int def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4815,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66562f71937f877c66123bbe.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e418d72b40b6eefde1713c8a505e557d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66562f71937f877c66123bbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 def solve(self): a, b = self coefficients values() x = -b / a return [x] def analyze(self): slope, intercept = self coefficientsvalues()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\n--fcc-editable-region--\ndef init(self, args):\nsuper() init(args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4815,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66562f71937f877c66123bbe.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4c2803b2778d5d7a49c3dd9724a1dd84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6675a38a8b535e4ff3274520.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6675a38a8b535e4ff3274520\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nThe hasattr built-in function takes an object as its first argument and a string representing an attribute name as its second argument It returns a boolean indicating if the object has the specified attribute Now you are going to use the __init_subclass__ method to check if the child class has the degree attribute at the moment of the instantiation Create an if statement to check if cls does not have a degree attribute If so, raise an AttributeError and use the string f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" to provide a custom message After that, fix the error that has appeared in the terminal by declaring a degree class attribute inside the LinearEquation class This attribute should represent the degree of the equation, which is the exponent of the highest \\( x \\) term Therefore, assign the integer 1 to the degree attribute --hints--\nYou should create an if statement that checks if cls does not have the attribute degree inside the __init_subclass__ method js\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init_subclass__\") find_ifs()[0] find_conditions()[0] is_equivalent(\"not hasattr(cls, 'degree')\")`)) })\nYou should raise an AttributeError using the provided string inside your if statement js\n({ test: () => runPython(`\nraise_stmt = 'raise AttributeError(f\"Cannot create \\\\'{cls __name__}\\\\' class: missing required attribute \\\\'degree\\\\'\")'\nnode = _Node(_code) find_class(\"Equation\") find_function(\"__init_subclass__\") find_ifs()[0] find_bodies()[0]\nassert node has_stmt(raise_stmt)\n`) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self):\npass\n--fcc-editable-region--\ndef init_subclass(cls):\npass\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\n--fcc-editable-region--\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2282,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6675a38a8b535e4ff3274520.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7f0fb9009e933f104ba396883564a8b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667938f754145d165c25725d\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nAn interesting feature of f-strings is the capability of forcing the output to be right/left-aligned, or centered After the expression to be evaluated is inside the curly braces, you need to write a colon followed by an alignment option (< to left-align, > to right-align, ^ to center) and a number representing the width, that is the number of characters in which you want to arrange the text For example:\npy\nf'{\"Hello World\":>20}'\nPrinting the string from the example above would result in right-aligned text arranged in a space of 20 characters Back to the solver function, after your if statement, create a variable named output_string and assign it an f-string containing the equation type centered in a width of 24 characters Make the string begin with a new line character, and return output_string from your function Then, call the solver function passing lin_eq as the argument, and print the result --hints--\nYou should define a variable named output_string and assign it f'\\n{equation type:^24}' js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_stmt(\"output_string = f'\\\\\\\\n{equation type:^24}'\")`)) })\nYour solver function should return output_string js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_return(\"output_string\")`)) })\nYou should print solver(lin_eq) js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(solver(lin_eq))\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "720abca129c007f16f11378396c89463",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and assign it f'\\n{equation type:^24}' js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_stmt(\"output_string = f'\\\\\\\\n{equation type:^24}'\")`)) }) Your solver function should return output_string js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_return(\"output_string\")`)) }) You should print solver(lin_eq) js ({ test: () => assert(runPython(`_Node(_code) has_call(\"print(solver(lin_eq))\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int type: str def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ed3edcc7647c80a59daadc90de715533",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 type = 'Linear Equation' def solve(self): a, b = selfcoefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "01203035741b71e65a079d42870ac608",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\n--fcc-editable-region--\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667938f754145d165c25725d.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f85d8b4cef7059e085541f384a54fef5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793c5b4bdacc17c40ff8e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66793c5b4bdacc17c40ff8e7\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nAnother feature of f-strings enables you to convert the content of the replacement field (the curly braces) into a string by using a followed by the conversion type s For example, f'{obj s}' converts obj into a string and it is equivalent to f'{str(obj)}' From now on, you'll keep building the output by concatenating strings to output_string Create a string containing the string representation of your equation centered in a width of 24 characters Make the string begin and end with two newline characters, and add your new string to the current value of output_string The output of the solver function should look like this:\n```md\n----Linear Equation-----\n2x +3 = 0\n```\n--hints--\nThe solver function should return a different string ``js\n({ test: () => runPython(\neq = LinearEquation(4, 3)\nexpected = \"\"\"\n----Linear Equation-----\n4x +3 = 0\n\"\"\"\nassert solver(eq) == expected\n`) })\n```\nYou should use the conversion flag s to convert equation into a string js\n({ test: () => (runPython(`\nfunction = str(_Node(_code) find_function(\"solver\"))\nassert \"equation s\" in function\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793c5b4bdacc17c40ff8e7.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5efaeb8dab93c1787f209705802aa14d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793c5b4bdacc17c40ff8e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls__name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793c5b4bdacc17c40ff8e7.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e865a0c1103114bb8dadbd94aa1e4a50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793c5b4bdacc17c40ff8e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "intercept} class QuadraticEquation(Equation): degree = 2 type = 'Quadratic Equation' def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if selfdelta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\n--fcc-editable-region--\noutput_string = f'\\n{equation type:-^24}'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793c5b4bdacc17c40ff8e7.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "000e20270a1ce0580d180f29a5eaa304",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793a552f357b17006a8726.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66793a552f357b17006a8726\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nBetween the colon and the alignment option, you can specify a fill character, which will be used to fill the space around the text within the specified width Add a - between the colon and the ^ in your f-string --hints--\nYou should add a - character between the colon and the ^ in your f-string js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_stmt(\"output_string = f'\\\\\\\\n{equation type:-^24}'\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3851,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793a552f357b17006a8726.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7971ba2da5d379143d35a4736e31a383",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793a552f357b17006a8726.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_stringstrip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3851,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793a552f357b17006a8726.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7522c4b90a290f33c6d312a32bc977f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793a552f357b17006a8726.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\n--fcc-editable-region--\noutput_string = f'\\n{equation type:^24}'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3851,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793a552f357b17006a8726.md",
      "source_type": "git_repo"
    },
    "token_count": 296,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0fd7442d18d79cb8dcdcc36f26b02580",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793d1e1581681871635ac6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66793d1e1581681871635ac6\ntitle: Step 53\nchallengeType: 20\ndashedName: step-53\n--description--\nAdd a new piece to your output_string formed by the string 'Solutions' centered in a width of 24 characters Use a - as a fill character, and make the string end with two new line characters --hints--\nThe solver function should return a different string ``js\n({ test: () => runPython(\neq = LinearEquation(4, 3)\nexpected = \"\"\"\n----Linear Equation-----\n4x +3 = 0\n-------Solutions--------\n\"\"\"\nassert solver(eq) == expected\n`) })\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793d1e1581681871635ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7afcb4adf98681ace16c9157105d97d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793d1e1581681871635ac6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_stringstrip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793d1e1581681871635ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "da0c286ab031533628fa2bdaf55187a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793d1e1581681871635ac6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\n--fcc-editable-region--\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3904,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66793d1e1581681871635ac6.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d9577a8c8466058856180e3db25e6089",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66794346ddfa141cbe70093a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66794346ddfa141cbe70093a\ntitle: Step 54\nchallengeType: 20\ndashedName: step-54\n--description--\nNow, call the solve() method of equation and assign the result a variable named results --hints--\nYou should declare a variable results and assign it the result of calling equation solve() js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_stmt(\"results = equation solve()\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66794346ddfa141cbe70093a.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c251fc75932699a095fa56ba97c5ed80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66794346ddfa141cbe70093a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 type = 'Linear Equation' def solve(self): a, b = self coefficientsvalues()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\n--fcc-editable-region--\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66794346ddfa141cbe70093a.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4cb72aad7ee2a6c0cf16256174d79936",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66794346ddfa141cbe70093a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[x1, x2] def analyze(self): a, b, c = self coefficients values() x = -b / (2 * a) y = a * x**2 + b * x + c if a > 0: concavity = 'upwards' min_max = 'min' else: concavity = 'downwards' min_max = 'max' return {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity} def solver(equation): if not isinstance(equation, Equation): raise TypeError(\"Argument must be an Equation object\") --fcc-editable-region-- output_string = f'\\n{equation type:-^24}' output_string += f'\\n\\n{equations:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3817,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66794346ddfa141cbe70093a.md",
      "source_type": "git_repo"
    },
    "token_count": 225,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0dc9c15c397a8c5995470fe6c878a7c1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667944fed1f6b61da3406bd8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667944fed1f6b61da3406bd8\ntitle: Step 55\nchallengeType: 20\ndashedName: step-55\n--description--\nStructural pattern matching is a Python construct that enables matching a pattern with a subject value, which is specified after the match keyword:\npy\nmatch value:\ncase x:\n<code>\ncase y:\n<code>\nEach pattern is specified after the case statement If the match is positive, the code inside the case block is run Use the match/case syntax to check the length of results In case the length is 0, assign a list containing the string 'No real roots' to a variable named result_list --hints--\nYou should create a match/case construct using len(results) as the subject value js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_subject() is_equivalent(\"len(results)\")`)) })\nYou should create a new case with the pattern 0 js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[0] find_case_pattern() is_equivalent(\"0\")`)) })\nYou should assign a list containing 'No real roots' to result_list inside the case body js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[0] find_body() is_equivalent(\"result_list = ['No real roots']\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667944fed1f6b61da3406bd8.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f1b91858819228d31eff4a23f2324ad6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667944fed1f6b61da3406bd8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "roots']\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int type: str def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") selfcoefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667944fed1f6b61da3406bd8.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8f58fb998e8b28a76491cc07ea23686e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667944fed1f6b61da3406bd8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "@abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 type = 'Linear Equation' def solve(self): a, b = self coefficients values() x = -b / a return [x] def analyze(self): slope, intercept = self coefficients values() return {'slope': slope, 'intercept': intercept} class QuadraticEquation(Equation): degree = 2 type = 'Quadratic Equation' def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if selfdelta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\n--fcc-editable-region--\nresults = equation solve()\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4810,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667944fed1f6b61da3406bd8.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1df5f4a950f1985f5d6c6521a2d6134a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6679934707d5fe577f898efd\ntitle: Step 57\nchallengeType: 20\ndashedName: step-57\n--description--\nAdd another case for when the length of results is 2 This time, assign result_list a list containing two strings with the format x1 = <root1> and x2 = <root2> Again, make the solution display both positive and negative signs --hints--\nYou should not modify the subject value of your match statement js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_subject() is_equivalent(\"len(results)\")`)) })\nYou should not modify your existing case blocks js\n({ test: () => runPython(`\ncase0 = _Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[0]\nassert case0 find_case_pattern() is_equivalent(\"0\")\nassert case0 find_body() is_equivalent(\"result_list = ['No real roots']\")\ncase1 = _Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1]\nassert case1 find_case_pattern() is_equivalent(\"1\")\nassert case1 find_body() is_equivalent(\"result_list = [f'x = {results[0]:+}']\")\n`) })\nYou should create a new case with the pattern 2 after the existing case block js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_case_pattern() is_equivalent(\"2\")`)) })\nYou should assign a list containing two strings with the format x1 = <root1> and x2 = <root2> to result_list inside your new case body Display both positive and negative signs for the results js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_body()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5336,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "75b980ff4fe8497a6140f532d7c10bf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[f'x = {results[0]:+}']\") `) }) You should create a new case with the pattern 2 after the existing case block js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_case_pattern() is_equivalent(\"2\")`)) }) You should assign a list containing two strings with the format x1 = <root1> and x2 = <root2> to result_list inside your new case body Display both positive and negative signs for the results js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_body()is_equivalent(\"result_list = [f'x1 = {results[0]:+}', f'x2 = {results[1]:+}']\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5336,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "2dc71dd0a8adeb7b77e917ef2afd4e32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' 'join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5336,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "63f8414331747f5f3356fa992675e870",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\n--fcc-editable-region--\nmatch len(results):\ncase 0:\nresult_list = ['No real roots']\ncase 1:\nresult_list = [f'x = {results[0]:+}']\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5336,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679934707d5fe577f898efd.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "42993ebe42f7a3873bf2363240276cde",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66799278873fd2570217bffa\ntitle: Step 56\nchallengeType: 20\ndashedName: step-56\n--description--\nAdd another case for when the length of results is 1 In this case, assign to result_list a list containing a string with the format x = <root>, where <root> is the solution of the equation Format the string so that both positive and negative sign are displayed for the solution --hints--\nYou should not modify the subject value of your match statement js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_subject() is_equivalent(\"len(results)\")`)) })\nYou should not modify your existing case block js\n({ test: () => runPython(`\ncase = _Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[0]\nassert case find_case_pattern() is_equivalent(\"0\")\nassert case find_body() is_equivalent(\"result_list = ['No real roots']\")\n`) })\nYou should create a new case with the pattern 1 after the existing case block js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_case_pattern() is_equivalent(\"1\")`)) })\nYou should assign a list containing f'x = {results[0]:+}' to result_list inside your new case body js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_body() is_equivalent(\"result_list = [f'x = {results[0]:+}']\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "51fa0a4e39bb26f78b2c1179b4aaeb77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_case_pattern() is_equivalent(\"1\")`)) }) You should assign a list containing f'x = {results[0]:+}' to result_list inside your new case body js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_body() is_equivalent(\"result_list = [f'x = {results[0]:+}']\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int type: str def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5893cb6804d496f38a038a82e4169379",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 type = 'Linear Equation' def solve(self): a, b = selfcoefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "bbde86c615ff075e0bcf0c43b8e6ef17",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return [x1, x2] def analyze(self): a, b, c = self coefficients values() x = -b / (2 * a) y = a * x**2 + b * x + c if a > 0: concavity = 'upwards' min_max = 'min' else: concavity = 'downwards' min_max = 'max' return {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity} def solver(equation): if not isinstance(equation, Equation): raise TypeError(\"Argument must be an Equation object\") output_string = f'\\n{equation type:-^24}' output_string += f'\\n\\n{equations:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\n--fcc-editable-region--\nmatch len(results):\ncase 0:\nresult_list = ['No real roots']\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799278873fd2570217bffa.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1f486c148343dd9f49b31da34d580f0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799c1a0204668cef35555d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66799c1a0204668cef35555d\ntitle: Step 59\nchallengeType: 20\ndashedName: step-59\n--description--\nf-strings also enable you to set a specific precision to your numerical data by using the nf format specifier, where n is the number of decimal digits to display Within the curly braces of the f-strings contained inside result_list, write the format specifier needed to display 3 decimal digits just after the :+ --hints--\nYou should modify the string contained in result_list in your case 1 block into f'x = {results[0]:+ 3f}' js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_body() is_equivalent(\"result_list = [f'x = {results[0]:+ 3f}']\")`)) })\nYou should modify the strings contained in result_list in your case 2 block so that the results are displayed with 3 decimal digits js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_body() is_equivalent(\"result_list = [f'x1 = {results[0]:+ 3f}', f'x2 = {results[1]:+ 3f}']\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799c1a0204668cef35555d.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "064afed461e16589eda951f64bdf00a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799c1a0204668cef35555d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls__name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799c1a0204668cef35555d.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6349fb1d5bd362f7ba012c2d0c8d8bae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799c1a0204668cef35555d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "intercept} class QuadraticEquation(Equation): degree = 2 type = 'Quadratic Equation' def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if selfdelta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\n--fcc-editable-region--\nmatch len(results):\ncase 0:\nresult_list = ['No real roots']\ncase 1:\nresult_list = [f'x = {results[0]:+}']\ncase 2:\nresult_list = [f'x1 = {results[0]:+}', f'x2 = {results[1]:+}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4843,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799c1a0204668cef35555d.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1d760c498d8bb032baa428555977c138",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799ba07c5fd58a61a604d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66799ba07c5fd58a61a604d3\ntitle: Step 58\nchallengeType: 20\ndashedName: step-58\n--description--\nAfter your match/case block, iterate through result_list and concatenate each element to output_string Keep aligning the text to the center and make each result string end with a new line character --hints--\nThe solver function should return a different string ``js\n({ test: () => runPython(\neq = LinearEquation(4, 3)\nexpected = \"\"\"\n----Linear Equation-----\n4x +3 = 0\n-------Solutions--------\nx = -0 75\n\"\"\"\nassert solver(eq) == expected\n`) })\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4254,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799ba07c5fd58a61a604d3.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bcdded3304b838991b400295940158f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799ba07c5fd58a61a604d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_stringstrip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4254,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799ba07c5fd58a61a604d3.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8057262e13c3bd064379c4f248edf0d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799ba07c5fd58a61a604d3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\n--fcc-editable-region--\nmatch len(results):\ncase 0:\nresult_list = ['No real roots']\ncase 1:\nresult_list = [f'x = {results[0]:+}']\ncase 2:\nresult_list = [f'x1 = {results[0]:+}', f'x2 = {results[1]:+}']\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4254,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\66799ba07c5fd58a61a604d3.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5a5dd7f81ad740653f63ed699421f5d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bf00da92e5c0db0ffdc3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6679bf00da92e5c0db0ffdc3\ntitle: Step 61\nchallengeType: 20\ndashedName: step-61\n--description--\nRight after your for loop, add another piece to your output Create a string having the text Details centered Use a - as a fill character and make your string begin with a single newline character and end with two newline characters --hints--\nThe solver function should return a different string ``js\n({ test: () => runPython(\neq = LinearEquation(4, 3)\nexpected = \"\"\"\n----Linear Equation-----\n4x +3 = 0\n-------Solutions--------\nx = -0 750\n--------Details---------\n\"\"\"\nassert solver(eq) == expected\n`) })\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4377,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bf00da92e5c0db0ffdc3.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "de3105f4d672a15dfef02f2a6faebea3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bf00da92e5c0db0ffdc3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_stringstrip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4377,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bf00da92e5c0db0ffdc3.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5ef2b93ae95bca9907e25665cb63bcfb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bf00da92e5c0db0ffdc3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\n--fcc-editable-region--\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4377,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bf00da92e5c0db0ffdc3.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e5b8d8fc6b402cb7c62aa90609a7c3b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bfe40a6d77c6a3c17e06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6679bfe40a6d77c6a3c17e06\ntitle: Step 62\nchallengeType: 20\ndashedName: step-62\n--description--\nNow, call the analyze method of equation and assign the result to a new variable named details --hints--\nYou should declare a variable details and assign it the result of calling equation analyze() js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") has_stmt(\"details = equation analyze()\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bfe40a6d77c6a3c17e06.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e7637f4532c7a600385e2aca458869b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bfe40a6d77c6a3c17e06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 type = 'Linear Equation' def solve(self): a, b = self coefficientsvalues()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bfe40a6d77c6a3c17e06.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0e6f5f8a9b152957a6c45dfc29ec5e69",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bfe40a6d77c6a3c17e06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "return [x1, x2] def analyze(self): a, b, c = self coefficients values() x = -b / (2 * a) y = a * x**2 + b * x + c if a > 0: concavity = 'upwards' min_max = 'min' else: concavity = 'downwards' min_max = 'max' return {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity} def solver(equation): if not isinstance(equation, Equation): raise TypeError(\"Argument must be an Equation object\") output_string = f'\\n{equation type:-^24}' output_string += f'\\n\\n{equations:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\n--fcc-editable-region--\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4206,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\6679bfe40a6d77c6a3c17e06.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b82baed456c2d733dacac6a464712f40",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667a7ce2a9925416e7b4781b\ntitle: Step 60\nchallengeType: 20\ndashedName: step-60\n--description--\nThe structural pattern matching enables you to verify that the subject has a specific structure In addition to that, it binds names in the pattern to elements of the subject For example:\npy\nmatch my_list:\ncase [a]:\nprint(a)\ncase [a, b]:\nprint(a, b)\nModify your match/case construct to match results instead of len(results) Then, modify each case to use a list with the appropriate number of elements Use x for the case the list contains a single element, and x1 and x2 for the case the list contains two elements Finally, modify the f-strings to use the variable names used in each case --hints--\nYou should modify your match statement to use results as the subject value js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_subject() is_equivalent(\"results\")`)) })\nYou should modify your first case to use the pattern [] js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[0] find_case_pattern() is_equivalent(\"[]\")`)) })\nYou should not modify your first case body js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[0] find_body() is_equivalent(\"result_list = ['No real roots']\")`)) })\nYou should modify your second case to use the pattern [x] js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_case_pattern() is_equivalent(\"[x]\")`)) })\nYou should modify the f-string contained inside result_list to use x in place of result[0] js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_body() is_equivalent(\"result_list = [f'x = {x:+ 3f}']\")`)) })\nYou should modify your third case to use a list containing x1 and x2 as the pattern",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6294,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1a3d4628afd3b5ae64d229a52d73a785",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "['No real roots']\")`)) }) You should modify your second case to use the pattern [x] js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_case_pattern() is_equivalent(\"[x]\")`)) }) You should modify the f-string contained inside result_list to use x in place of result[0] js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[1] find_body() is_equivalent(\"result_list = [f'x = {x:+ 3f}']\")`)) }) You should modify your third case to use a list containing x1 and x2 as the patternjs\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_case_pattern() is_equivalent(\"[x1, x2]\")`)) })\nYou should modify the f-strings contained inside result_list to use the bound variables from your pattern js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[0] find_match_cases()[2] find_body() is_equivalent(\"result_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6294,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "98686d1934d2db8557f726b3d9ae8d4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls__name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6294,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f9ce35afc5e6e73d973cd5cc058dc1c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "intercept} class QuadraticEquation(Equation): degree = 2 type = 'Quadratic Equation' def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if selfdelta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\n--fcc-editable-region--\nmatch len(results):\ncase 0:\nresult_list = ['No real roots']\ncase 1:\nresult_list = [f'x = {results[0]:+ 3f}']\ncase 2:\nresult_list = [f'x1 = {results[0]:+ 3f}', f'x2 = {results[1]:+ 3f}']\n--fcc-editable-region--\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6294,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a7ce2a9925416e7b4781b.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2981cd267b0ab74cfbb45302503b2d36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667a860c3b61f61b7a18930c\ntitle: Step 63\nchallengeType: 20\ndashedName: step-63\n--description--\nCreate another match/case construct to match the value of the details variable When the equation is linear, details is a dictionary having the form {'slope': slope, 'intercept': intercept} Use it as the pattern for your first case Then, inside the case block, declare a variable named details_list and assign it a list containing two strings having the form slope = <slope> and y-intercept = <intercept>, respectively Format the strings to display 3 decimal digits --hints--\nYou should create a new match statement that uses details as the subject value js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[1] find_match_subject() is_equivalent(\"details\")`)) })\nYou should create a new case with the pattern {'slope': slope, 'intercept': intercept} js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[1] find_match_cases()[0] find_case_pattern() is_equivalent(\"{'slope': slope, 'intercept': intercept}\")`)) })\nYou should assign a list containing two f-strings having the form slope = <slope> and y-intercept = <intercept> to details_list inside the case body Remember to format the numerical values to display 3 decimal digits js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[1] find_match_cases()[0] find_body() is_equivalent(\"details_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept: 3f}']\")`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "e4e44f2dc22fa641d8c2a8d43f19f168",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= <slope> and y-intercept = <intercept> to details_list inside the case body Remember to format the numerical values to display 3 decimal digits js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[1] find_match_cases()[0] find_body() is_equivalent(\"details_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept: 3f}']\")`)) }) --seed-- --seed-contents-- ```py from abc import ABC, abstractmethod import re class Equation(ABC): degree: int type: str def __init__(self, *args): if (self degree + 1) = len(args): raise TypeError( f\"'Equation' object takes {selfdegree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d27242e2c5fdf2753bf2088dab6c2ee2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\")) @abstractmethod def solve(self): pass @abstractmethod def analyze(self): pass class LinearEquation(Equation): degree = 1 type = 'Linear Equation' def solve(self): a, b = self coefficients values() x = -b / a return [x] def analyze(self): slope, intercept = selfcoefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "043d5e344f9be76f7953c6ded1442201",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "c = self coefficients values() x = -b / (2 * a) y = a * x**2 + b * x + c if a > 0: concavity = 'upwards' min_max = 'min' else: concavity = 'downwards' min_max = 'max' return {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity} def solver(equation): if not isinstance(equation, Equation): raise TypeError(\"Argument must be an Equation object\") output_string = f'\\n{equation type:-^24}' output_string += f'\\n\\n{equation s:^24}\\n\\n' output_string += f'{\"Solutions\":-^24}\\n\\n' results = equationsolve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\n--fcc-editable-region--\ndetails = equation analyze()\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5403,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a860c3b61f61b7a18930c.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f6155ae9a68f541d234e5b6683e12e83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667a8d7a735cf221729570ff\ntitle: Step 64\nchallengeType: 20\ndashedName: step-64\n--description--\nAdd another case for when the equation is quadratic Use a dictionary with the same format returned by the analyze method of QuadraticEquation Then, assign details_list a list containing two strings with the format concavity = <concavity> and <min_max> = (<x>, <y>), respectively Format <x> and <y> to display 3 decimal digits Finally, after the match/case block, iterate through details_list and add each item to the current value of output_string Make sure that each string item ends with a newline character Do not use any additional format option here --hints--\nYou should not modify the subject value of your match statement js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_matches()[1] find_match_subject() is_equivalent(\"details\")`)) })\nYou should not modify your existing case block js\n({ test: () => runPython(`\ncase = _Node(_code) find_function(\"solver\") find_matches()[1] find_match_cases()[0]\nassert case find_case_pattern() is_equivalent(\"{'slope': slope, 'intercept': intercept}\")\nassert case find_body() is_equivalent(\"details_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept: 3f}']\")\n`) })\nYou should create a new case block for when equation is a quadratic equation js\n({ test: () => assert(runPython(`len(_Node(_code) find_function(\"solver\") find_matches()[1] find_match_cases()) == 2`)) })\nYou should create a for loop to iterate over details_list js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_for_loops()[1] find_for_iter() is_equivalent(\"details_list\")`)) })\nYour solver function should return a different string ``js\n({ test: () => runPython(\nexpected1 = \"\"\"\n----Linear Equation-----\n4x +3 = 0\n-------Solutions--------\nx = -0 750\n--------Details---------\nslope = 4 000\ny-intercept = 3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e98704a56f6355ee9bfb8b830ed04cb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for when equation is a quadratic equation js ({ test: () => assert(runPython(`len(_Node(_code) find_function(\"solver\") find_matches()[1] find_match_cases()) == 2`)) }) You should create a for loop to iterate over details_list js ({ test: () => assert(runPython(`_Node(_code) find_function(\"solver\") find_for_loops()[1] find_for_iter() is_equivalent(\"details_list\")`)) }) Your solver function should return a different string ``js ({ test: () => runPython( expected1 = \"\"\" ----Linear Equation----- 4x +3 = 0 -------Solutions-------- x = -0 750 --------Details--------- slope = 4 000 y-intercept = 3000\n\"\"\"\neq1 = LinearEquation(4, 3)\nactual1 = solver(eq1)\nassert expected1 == actual1\nexpected2 = \"\"\"\n---Quadratic Equation---\nx**2 -3x +1 = 0\n-------Solutions--------\nx1 = +2 618\nx2 = +0 382\n--------Details---------\nconcavity = upwards\nmin = (1 500, -1 250)\n\"\"\"\neq2 = QuadraticEquation(1, -3, 1)\nactual2 = solver(eq2)\nassert expected2 == actual2\n`) })\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "7d02fd8cd5240af9ed8f2fff39c4817c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls__name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9afdac52c445ce6962e00b9eb4e87003",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "intercept} class QuadraticEquation(Equation): degree = 2 type = 'Quadratic Equation' def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if selfdelta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\n--fcc-editable-region--\ndetails = equation analyze()\nmatch details:\ncase {'slope': slope, 'intercept': intercept}:\ndetails_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept:",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "73c5630122a8400931c8d2407d54bf97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "output_string = f'\\n{equation type:-^24}' output_string += f'\\n\\n{equation s:^24}\\n\\n' output_string += f'{\"Solutions\":-^24}\\n\\n' results = equation solve() match results: case []: result_list = ['No real roots'] case [x]: result_list = [f'x = {x:+ 3f}'] case [x1, x2]: result_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}'] for result in result_list: output_string += f'{result:^24}\\n' output_string += f'\\n{\"Details\":-^24}\\n\\n' --fcc-editable-region-- details = equation analyze() match details: case {'slope': slope, 'intercept': intercept}: details_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept:3f}']\n--fcc-editable-region--\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6369,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a8d7a735cf221729570ff.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "132c85560d76d0459f5dbc63e1f5fd00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667a9c91a87bb453a355b63d\ntitle: Step 66\nchallengeType: 20\ndashedName: step-66\n--description--\nFeel free to change the coefficients of your lin_eq to see how the output changes Then, delete your print(solver(lin_eq)) call, and print the result of calling solver() with quadr_eq as the argument --hints--\nYou should not have print(solver(lin_eq)) in your code js\n({ test: () => assert isFalse(runPython(`_Node(_code) has_call(\"print(solver(lin_eq))\")`)) })\nYou should print solver(quadr_eq) js\n({ test: () => assert(runPython(`_Node(_code) has_call(\"print(solver(quadr_eq))\")`)) })\n--hints--\nTest 1\n```js\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "abdb35180933e29d2fc0b29f1f8634a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: terms append(f'{coefficient:+}') elif n == 1: terms append(f'{coefficient:+}x') else: terms append(f\"{coefficient:+}x**{n}\") equation_string = ' ' join(terms) + ' = 0' return resub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1f0177c7da6ade4850a5a691dd328a87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\ndetails = equation analyze()\nmatch details:\ncase {'slope': slope, 'intercept': intercept}:\ndetails_list = [f'slope = {slope:>16 3f}', f'y-intercept = {intercept:>10 3f}']\ncase {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}:\ncoord = f'({x: 3f}, {y:",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "05bc31602a16c3c3a910b9ec9b6920ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "solve() match results: case []: result_list = ['No real roots'] case [x]: result_list = [f'x = {x:+ 3f}'] case [x1, x2]: result_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}'] for result in result_list: output_string += f'{result:^24}\\n' output_string += f'\\n{\"Details\":-^24}\\n\\n' details = equation analyze() match details: case {'slope': slope, 'intercept': intercept}: details_list = [f'slope = {slope:>16 3f}', f'y-intercept = {intercept:>10 3f}'] case {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}: coord = f'({x: 3f}, {y:3f})'\ndetails_list = [f'concavity = {concavity}', f'{min_max} = {coord}']\nfor detail in details_list:\noutput_string += f'{detail}\\n'\nreturn output_string\n--fcc-editable-region--\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4886,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a9c91a87bb453a355b63d.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "4204790cbcf0109a521ef4d117786367",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658212ba98182f3e855e85f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658212ba98182f3e855e85f9\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nIn this project, you're going to build a simple, yet functional expense tracker in Python.\nStart by defining a function named add_expense that takes three parameters: expenses, amount and category. Use the pass keyword to fill the function body.\n--hints--\nYou should use the def keyword to declare a function named add_expense.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(add_expense)\n`))\n})\nYour add_expense function should take three parameters: expenses, amount and category.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(add_expense))\nsig == '(expenses, amount, category)'\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 923,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658212ba98182f3e855e85f9.md",
      "source_type": "git_repo"
    },
    "token_count": 207,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "362c26c2a5c2fe60a2d0edd461e6a3ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667a965d5a4b5825ffb2e1d8\ntitle: Step 65\nchallengeType: 20\ndashedName: step-65\n--description--\nModify the strings contained inside details_list to right-align the numerical values of the slope and the intercept The final output should look like this:\n```py\n----Linear Equation-----\n2x +3 = 0\n-------Solutions--------\nx = -1 500\n--------Details---------\nslope =            2 000\ny-intercept =      3 000\n```\nNote that the align option and the width should be placed between the colon and the precision format specifier --hints--\nThe solver function should return a different string ``js\n({ test: () => runPython(\neq = LinearEquation(44, 3)\nexpected = \"\"\"\n----Linear Equation-----\n44x +3 = 0\n-------Solutions--------\nx = -0 068\n--------Details---------\nslope =           44 000\ny-intercept =      3 000\n\"\"\"\nassert solver(eq) == expected, f'{solver(eq)}'\n`) })\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "fab4e48516ffd26c4e29c8b2dc01b05f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficients items(): if not coefficient: continue if n == 0: termsappend(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
      "source_type": "git_repo"
    },
    "token_count": 446,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5133b94ab8fc9928a78fedb01edf1dce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\ndetails = equation analyze()\nmatch details:\ncase {'slope': slope, 'intercept': intercept}:\n--fcc-editable-region--\ndetails_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept: 3f}']\n--fcc-editable-region--\ncase {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}:\ncoord = f'({x: 3f}, {y:",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2a9f0c0634b14d5836dd6dd2d3d90c42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "results: case []: result_list = ['No real roots'] case [x]: result_list = [f'x = {x:+ 3f}'] case [x1, x2]: result_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}'] for result in result_list: output_string += f'{result:^24}\\n' output_string += f'\\n{\"Details\":-^24}\\n\\n' details = equation analyze() match details: case {'slope': slope, 'intercept': intercept}: --fcc-editable-region-- details_list = [f'slope = {slope: 3f}', f'y-intercept = {intercept: 3f}'] --fcc-editable-region-- case {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}: coord = f'({x: 3f}, {y:3f})'\ndetails_list = [f'concavity = {concavity}', f'{min_max} = {coord}']\nfor detail in details_list:\noutput_string += f'{detail}\\n'\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(lin_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5182,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667a965d5a4b5825ffb2e1d8.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "027e8dd83574c9b4cec3b9a12df7a058",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65821c1c40ccac44adf38e6b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65821c1c40ccac44adf38e6b\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nCreate an empty list named expenses. You will use it to store each of your expenses.\n--hints--\nYou should declare a new variable named expenses.\njs\n({ test: () => assert(__userGlobals.has(\"expenses\")) })\nYou should assign an empty list to the expenses variable.\njs\n({ test: () => assert.equal(__userGlobals.get(\"expenses\").length, 0) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\npass\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65821c1c40ccac44adf38e6b.md",
      "source_type": "git_repo"
    },
    "token_count": 157,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "afd53fd7dcf89531f3b215084394c0ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65821fcc010c3245718f2a06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65821fcc010c3245718f2a06\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nThe expenses parameter of your add_expense function will be a list of expenses. You want to be able to add items at the end of your list. For that you'll use the .append() list method.\nAdd a call to the .append() method on the expenses list. Don't pass any arguments to .append() for now.\n--hints--\nYou should have expenses.append() in your function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"add_expense\").has_stmt(\"expenses.append()\")`)) })\nYou should not have pass in your function.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).find_function(\"add_expense\").has_pass()`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef add_expense(expenses, amount, category):\npass\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 921,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65821fcc010c3245718f2a06.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b9190e4d670c23820cb37723f09dc09",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822308ded1ba4632f66aa3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65822308ded1ba4632f66aa3\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nA dictionary is another built-in data type in Python. A dictionary is a collection of data in the form of key-value pairs. Dictionaries are defined with curly braces ({}) and they contain key-value pairs separated by commas. Each key is followed by a colon (:) and the value:\npy\n{'amount': 50.0, 'category': 'Food'}\nIn the example above, 'amount' and 'category' are keys, and 50.0 and 'Food' are their corresponding values.\nCreate a dictionary with a key 'amount' and value of the amount parameter and pass your new dictionary to the .append() call.\n--hints--\nYou should pass a dictionary as the argument to the .append() method.\njs\n({ test: () => assert(runPython(`\nimport ast\nnode = _Node(_code).find_function(\"add_expense\").find_calls(\"append\")[0].find_call_args()\nlen(node) == 1 and isinstance(node[0].tree, ast.Dict)\n`)) })\nYou should pass {'amount': amount} as the argument to the .append() method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"add_expense\").has_stmt(\"expenses.append({'amount': amount})\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef add_expense(expenses, amount, category):\nexpenses.append()\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822308ded1ba4632f66aa3.md",
      "source_type": "git_repo"
    },
    "token_count": 342,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "852c59ff17f0ba055b85c5c93b541197",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658225d560369446ece5518b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658225d560369446ece5518b\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nAdd another key-value pair to the dictionary you are appending to the expense list. Use the string 'category' as the key, and the category parameter as the value.\n--hints--\nYou should add a second key-value pair to the dictionary you are passing as the argument to the .append() method.\njs\n({ test: () => assert(runPython(`\nimport ast\nnode = _Node(_code).find_function(\"add_expense\").find_calls(\"append\")[0].find_call_args()\nlen(node) == 1 and isinstance(node[0].tree, ast.Dict) and len(node[0].tree.keys) == 2\n`)) })\nYou should pass {'amount': amount, 'category': category} as the argument to the .append() method.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"add_expense\").has_stmt(\"expenses.append({'amount': amount, 'category': category})\")`)) })\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount})\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1106,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658225d560369446ece5518b.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "94d00fadc17a31a27ce13bf559e62bf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667e623208053643ca9d3c6e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667e623208053643ca9d3c6e\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nNow, replace the for loop and if statement you added in the previous step with an if statement that uses the any() built-in function --hints--\nThe condition of your new if statement should be a call to any() js\n({ test: () => runPython(`\ncond = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[1] find_conditions()[0]\ncalls = _Node(str(cond)) find_calls(\"any\")\nassert len(calls) == 1\n`) })\nYou should pass a generator expression as the argument to your any() call js\n({ test: () => runPython(`\nimport ast\nargument = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[1] find_conditions()[0] find_call_args()[0]\nassert isinstance(argument tree, ast GeneratorExp)\n`) })\nThe generator expression passed to any() should iterate over args js\n({ test: () => runPython(`\nimport ast\nargument = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[1] find_conditions()[0] find_call_args()[0]\niters = argument find_comp_iters()\nassert len(iters) == 1\nassert iters[0] is_equivalent(\"args\")\n`) })\nYour if statement should check if any of the arguments in args is not an instance of either int or float js\n({ test: () => runPython(`\nimport ast\nargument = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[1] find_conditions()[0] find_call_args()[0]\ntarget = argument find_comp_targets()[0]\nexpr = argument find_comp_expr()\nsolutions = [\nf\"not isinstance({target}, (int, float))\",\nf\"not isinstance({target}, (float, int))\",\nf\"not isinstance({target}, float) and not isinstance({target}, int)\",\nf\"not isinstance({target}, int) and not isinstance({target}, float)\",\n]\nassert any(expr is_equivalent(sol) for sol in solutions)\n`) })\nYou should use the provided string to raise a TypeError within your new if statement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667e623208053643ca9d3c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "81866ce214d5b0017a10d5fd3562b9e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667e623208053643ca9d3c6e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "or float js ({ test: () => runPython(` import ast argument = _Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[1] find_conditions()[0] find_call_args()[0] target = argument find_comp_targets()[0] expr = argument find_comp_expr() solutions = [ f\"not isinstance({target}, (int, float))\", f\"not isinstance({target}, (float, int))\", f\"not isinstance({target}, float) and not isinstance({target}, int)\", f\"not isinstance({target}, int) and not isinstance({target}, float)\", ] assert any(expr is_equivalent(sol) for sol in solutions) `) }) You should use the provided string to raise a TypeError within your new if statementjs\n({ test: () => assert(runPython(`_Node(_code) find_class(\"Equation\") find_function(\"__init__\") find_ifs()[1] find_bodies()[0] has_stmt(\"raise TypeError(\\\\\"Coefficients must be of type 'int' or 'float'\\\\\")\")\n`)) })\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nclass Equation(ABC):\ndegree: int\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'{self __class__ __name__}' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\n--fcc-editable-region--\nfor arg in args:\nif not isinstance(arg, (int, float)):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\n--fcc-editable-region--\ndef init_subclass(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls name}' class: missing required attribute 'degree'\"\n)\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ndef solve(self):\npass\ndef analyze(self):\npass\nlin_eq = LinearEquation(2, 3)\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667e623208053643ca9d3c6e.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5e779d9077ee3727feed35b23cf3ab0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582267ef39f5047411c1743.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582267ef39f5047411c1743\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nNext, define a function named print_expenses that takes one parameter expenses. This function will later be used to display each expense in your list.\nFill the body of your new function with a pass statement.\n--hints--\nYou should define a new function named print_expenses.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(print_expenses)\n`))\n})\nYour print_expenses function should take a single parameter expenses.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(print_expenses))\nsig == '(expenses)'\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\n--fcc-editable-region--\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 959,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582267ef39f5047411c1743.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9d916c854189f1e72002c8deb6d934f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822934c8a0454803e3ef12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65822934c8a0454803e3ef12\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nNext, you are going to display the details for each expense.\nInside the for loop, replace pass with a print() call and pass it the following f-string: f'Amount: {expense}, Category: {expense}'.\n--hints--\nYou should print f'Amount: {expense}, Category: {expense}' in your for loop.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"print_expenses\").find_for_loops()[0].has_call(\"print(f'Amount: {expense}, Category: {expense}')\")`)) })\nYou should not have pass inside your loop body.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).find_function(\"print_expenses\").find_for_loops()[0].find_bodies()[0].has_pass()`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\n--fcc-editable-region--\ndef print_expenses(expenses):\nfor expense in expenses:\npass\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822934c8a0454803e3ef12.md",
      "source_type": "git_repo"
    },
    "token_count": 276,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "78f06b5099951f9503b6a867567d8763",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822773f4c60a479ec89f66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65822773f4c60a479ec89f66\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nInside the print_expenses function, create a for loop that iterates over each item in the expenses list. Use expense as the loop variable and move pass inside the loop body.\n--hints--\nYou should create a for loop that iterates over expenses in your print_expenses function. Remember to use pass within the loop body.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"print_expenses\").find_for_loops()[0].find_for_iter().is_equivalent(\"expenses\")`)) })\nYou should use expense as the loop variable.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"print_expenses\").find_for_loops()[0].find_for_vars().is_equivalent(\"expense\")`)) })\nYou should have pass only inside your loop body.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).find_function(\"print_expenses\").has_pass()`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\n--fcc-editable-region--\ndef print_expenses(expenses):\npass\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822773f4c60a479ec89f66.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e2f38a981a53fd0afaff201821d00274",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 667aa056f1240f58fb9a2c17\ntitle: Step 67\nchallengeType: 20\ndashedName: step-67\n--description--\nAs a last step, modify the strings contained in details_list so that the text placed after the equal sign is right-aligned for each line Your final output should look like this:\n```py\n---Quadratic Equation---\nx**2 +2x +1 = 0\n-------Solutions--------\nx = -1 000\n--------Details---------\nconcavity =      upwards\nmin =    (-1 000, 0 000)\n```\nWith that, the project is complete --hints--\nThe solver function should return a different string ``js\n({ test: () => runPython(\neq = QuadraticEquation(-4, 3, 2)\nexpected = \"\"\"\n---Quadratic Equation---\n-4x**2 +3x +2 = 0\n-------Solutions--------\nx1 = -0 425\nx2 = +1 175\n--------Details---------\nconcavity =    downwards\nmax =     (0 375, 2 562)\n\"\"\"\nassert solver(eq) == expected\n`) })\n```\n--seed--\n--seed-contents--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "90ff65039ba58f0efa7174c1aaeadcb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'degree'\" ) if not hasattr(cls, \"type\"): raise AttributeError( f\"Cannot create '{cls __name__}' class: missing required attribute 'type'\" ) def __str__(self): terms = [] for n, coefficient in self coefficientsitems():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self delta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "8802bcd809aff09a9b7233e9a46dc83a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if self delta == 0: return [x1] return [x1, x2] def analyze(self): a, b, c = self coefficientsvalues()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\ndetails = equation analyze()\nmatch details:\ncase {'slope': slope, 'intercept': intercept}:\ndetails_list = [f'slope = {slope:>16 3f}', f'y-intercept = {intercept:>10 3f}']\ncase {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}:\ncoord = f'({x: 3f}, {y:",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "2289f0dc401993ded22520526075d261",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "solve() match results: case []: result_list = ['No real roots'] case [x]: result_list = [f'x = {x:+ 3f}'] case [x1, x2]: result_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}'] for result in result_list: output_string += f'{result:^24}\\n' output_string += f'\\n{\"Details\":-^24}\\n\\n' details = equation analyze() match details: case {'slope': slope, 'intercept': intercept}: details_list = [f'slope = {slope:>16 3f}', f'y-intercept = {intercept:>10 3f}'] case {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}: coord = f'({x: 3f}, {y:3f})'\n--fcc-editable-region--\ndetails_list = [f'concavity = {concavity}', f'{min_max} = {coord}']\n--fcc-editable-region--\nfor detail in details_list:\noutput_string += f'{detail}\\n'\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(quadr_eq))\n```\n--solutions--\n```py\nfrom abc import ABC, abstractmethod\nimport re\nclass Equation(ABC):\ndegree: int\ntype: str\ndef __init__(self, *args):\nif (self degree + 1) = len(args):\nraise TypeError(\nf\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\"\n)\nif any(not isinstance(arg, (int, float)) for arg in args):\nraise TypeError(\"Coefficients must be of type 'int' or 'float'\")\nif args[0] == 0:\nraise ValueError(\"Highest degree coefficient must be different from zero\")\nself coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)}\ndef __init_subclass__(cls):\nif not hasattr(cls, \"degree\"):\nraise AttributeError(\nf\"Cannot create '{cls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "3d861e18988774d769455ec1c55c1c1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "+ 1) = len(args): raise TypeError( f\"'Equation' object takes {self degree + 1} positional arguments but {len(args)} were given\" ) if any(not isinstance(arg, (int, float)) for arg in args): raise TypeError(\"Coefficients must be of type 'int' or 'float'\") if args[0] == 0: raise ValueError(\"Highest degree coefficient must be different from zero\") self coefficients = {(len(args) - n - 1): arg for n, arg in enumerate(args)} def __init_subclass__(cls): if not hasattr(cls, \"degree\"): raise AttributeError( f\"Cannot create '{cls__name__}' class: missing required attribute 'degree'\"\n)\nif not hasattr(cls, \"type\"):\nraise AttributeError(\nf\"Cannot create '{cls __name__}' class: missing required attribute 'type'\"\n)\ndef __str__(self):\nterms = []\nfor n, coefficient in self coefficients items():\nif not coefficient:\ncontinue\nif n == 0:\nterms append(f'{coefficient:+}')\nelif n == 1:\nterms append(f'{coefficient:+}x')\nelse:\nterms append(f\"{coefficient:+}x**{n}\")\nequation_string = ' ' join(terms) + ' = 0'\nreturn re sub(r\"( < \\d)1( =x)\", \"\", equation_string strip(\"+\"))\n@abstractmethod\ndef solve(self):\npass\n@abstractmethod\ndef analyze(self):\npass\nclass LinearEquation(Equation):\ndegree = 1\ntype = 'Linear Equation'\ndef solve(self):\na, b = self coefficients values()\nx = -b / a\nreturn [x]\ndef analyze(self):\nslope, intercept = self coefficients values()\nreturn {'slope': slope, 'intercept': intercept}\nclass QuadraticEquation(Equation):\ndegree = 2\ntype = 'Quadratic Equation'\ndef __init__(self, *args):\nsuper() __init__(*args)\na, b, c = self coefficients values()\nself delta = b**2 - 4 * a * c\ndef solve(self):\nif self delta < 0:\nreturn []\na, b, _ = self coefficients values()\nx1 = (-b + (self delta) ** 0 5) / (2 * a)\nx2 = (-b - (self delta) ** 0 5) / (2 * a)\nif self",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "c914751cbeb9eeb8b0790756c8fde42a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "intercept} class QuadraticEquation(Equation): degree = 2 type = 'Quadratic Equation' def __init__(self, *args): super() __init__(*args) a, b, c = self coefficients values() self delta = b**2 - 4 * a * c def solve(self): if self delta < 0: return [] a, b, _ = self coefficients values() x1 = (-b + (self delta) ** 0 5) / (2 * a) x2 = (-b - (self delta) ** 0 5) / (2 * a) if selfdelta == 0:\nreturn [x1]\nreturn [x1, x2]\ndef analyze(self):\na, b, c = self coefficients values()\nx = -b / (2 * a)\ny = a * x**2 + b * x + c\nif a > 0:\nconcavity = 'upwards'\nmin_max = 'min'\nelse:\nconcavity = 'downwards'\nmin_max = 'max'\nreturn {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}\ndef solver(equation):\nif not isinstance(equation, Equation):\nraise TypeError(\"Argument must be an Equation object\")\noutput_string = f'\\n{equation type:-^24}'\noutput_string += f'\\n\\n{equation s:^24}\\n\\n'\noutput_string += f'{\"Solutions\":-^24}\\n\\n'\nresults = equation solve()\nmatch results:\ncase []:\nresult_list = ['No real roots']\ncase [x]:\nresult_list = [f'x = {x:+ 3f}']\ncase [x1, x2]:\nresult_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}']\nfor result in result_list:\noutput_string += f'{result:^24}\\n'\noutput_string += f'\\n{\"Details\":-^24}\\n\\n'\ndetails = equation analyze()\nmatch details:\ncase {'slope': slope, 'intercept': intercept}:\ndetails_list = [f'slope = {slope:>16 3f}', f'y-intercept = {intercept>10:",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "ed851d6c6fd17dfa218cd6615d086eaa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "object\") output_string = f'\\n{equation type:-^24}' output_string += f'\\n\\n{equation s:^24}\\n\\n' output_string += f'{\"Solutions\":-^24}\\n\\n' results = equation solve() match results: case []: result_list = ['No real roots'] case [x]: result_list = [f'x = {x:+ 3f}'] case [x1, x2]: result_list = [f'x1 = {x1:+ 3f}', f'x2 = {x2:+ 3f}'] for result in result_list: output_string += f'{result:^24}\\n' output_string += f'\\n{\"Details\":-^24}\\n\\n' details = equation analyze() match details: case {'slope': slope, 'intercept': intercept}: details_list = [f'slope = {slope:>16 3f}', f'y-intercept = {intercept>10:3f}']\ncase {'x': x, 'y': y, 'min_max': min_max, 'concavity': concavity}:\ncoord = f'({x: 3f}, {y: 3f})'\ndetails_list = [f'concavity = {concavity:>12}', f'{min_max} = {coord:>18}']\nfor detail in details_list:\noutput_string += f'{detail}\\n'\nreturn output_string\nlin_eq = LinearEquation(2, 3)\nquadr_eq = QuadraticEquation(1, 2, 1)\nprint(solver(quadr_eq))\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-interfaces-by-building-an-equation-solver\\667aa056f1240f58fb9a2c17.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "6423653b5cd3010eec3df882713bdfb9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823040bdb32949d4c1a96f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823040bdb32949d4c1a96f\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nYou will need a function to calculate the total amount of expenses.\nDefine a function named total_expenses that takes one parameter expenses. Fill the function body with a pass statement for now.\n--hints--\nYou should define a function named total_expenses.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(total_expenses)\n`))\n})\nYour total_expenses function should take a single expenses parameter.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(total_expenses))\nsig == '(expenses)'\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n--fcc-editable-region--\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1080,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823040bdb32949d4c1a96f.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "35161d933e35bc5bd775baca31ec2acb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822bd82d708c4895080c35.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65822bd82d708c4895080c35\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nIn Python, an important thing to know is that the same type of quote used to define a string cannot be used inside it. For example, the string 'I'm a string!' is not valid. To use the single quote inside that string you should either:\nEscape the quote by prepending a backlash to it: 'I\\'m a string!'\nOr use double quotes to define the string: \"I'm a string!\" (preferred).\nYou can access values in a dictionary through its keys. You need to use bracket notation and include the key between the square brackets:\npy\nmy_dict = {'amount': 50.0, 'category': 'Food'}\nmy_dict['amount'] # 50.0\nYou are currently interpolating the expense dictionary in your f-string. Modify the f-string expression to access the value of the 'amount' key and the 'category' key in the expense dictionary.\n--hints--\nYou should pass f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}' to your print() call. Remember to use double quotes within your single-quoted f-string and vice versa.\njs\n({ test: () => assert.match(code, /^\\s+print\\s*\\(\\s*f(\"|')Amount: \\{\\s*expense\\s*\\[\\s*(?=[^\\1])(\"|')amount\\2\\s*\\]\\s*\\}, Category: \\{\\s*expense\\s*\\[\\s*(?=[^\\1])(\"|')category\\3\\s*\\]\\s*\\}\\1\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\n--fcc-editable-region--\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense}, Category: {expense}')\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1665,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65822bd82d708c4895080c35.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "add054ffeb4080eaf2d022948245f5f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582352cbdbcde4d0c4f7b0b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582352cbdbcde4d0c4f7b0b\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nTo call a lambda function you can use the usual function syntax with a pair of parentheses after the variable name.\nCall your test lambda function and pass 3 as the argument. Then, print the result.\n--hints--\nYou should have print(test(3)) in your code.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*test\\s*\\(\\s*3\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\ntest = lambda x: x * 2\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582352cbdbcde4d0c4f7b0b.md",
      "source_type": "git_repo"
    },
    "token_count": 233,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "95c0616531aa022cd294f6a4798992f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582324b5d37fe4b622bc3c0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582324b5d37fe4b622bc3c0\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nLambda functions are brief, anonymous functions in Python, ideal for simple, one-time tasks. They are defined by the lambda keyword, and they use the following syntax:\npy\nlambda x: expr\nIn the example above, x represents a parameter to be used in the expression expr, and it acts just like any parameter in a traditional function. expr is the expression that gets evaluated and returned when the lambda function is called.\nCreate a variable named test and assign it a lambda function that takes an x parameter and returns x * 2.\n--hints--\nYou should declare a variable named test.\njs\n({ test: () => assert(runPython(`_Node(_code).has_variable(\"test\")`))})\nYou should assign lambda x: x * 2 to your test variable.\njs\n({ test: () => assert(runPython(`_Node(_code).find_variable(\"test\").is_equivalent(\"test = lambda x: x * 2\")`))})\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582324b5d37fe4b622bc3c0.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "1261bb347ccf6e96f2c71eb9c6664b9a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658238f7604f154ea9a23e1e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658238f7604f154ea9a23e1e\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nThe sum() function returns the sum of the items in the iterable which is passed as its argument. You are going to use sum() together with map() and lambda functions to get the total amount of expenses.\nFor now, make a little test and modify your current print() call replacing the list() call with a call to the sum() function passing it the current map() call as the argument.\n--hints--\nYou should print sum(map(test, [2, 3, 5, 8])).\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*sum\\s*\\(\\s*map\\s*\\(\\s*test\\s*,\\s*\\[\\s*2\\s*,\\s*3\\s*,\\s*5\\s*,\\s*8\\s*\\]\\s*\\)\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\ntest = lambda x: x * 2\nprint(list(map(test, [2,3,5,8])))\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658238f7604f154ea9a23e1e.md",
      "source_type": "git_repo"
    },
    "token_count": 331,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "839a05397cf482216376d69b783244df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823634a308cb4d6bcc5fa6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823634a308cb4d6bcc5fa6\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nLambda functions can be valuably combined with the map() function, which executes a specified function for each element in a collection of objects, such as a list:\npy\nmap(lambda x: x * 2, [1, 2, 3])\nThe function to execute is passed as the first argument, and the iterable is passed as the second argument.\nThe result of the example above would be [2, 4, 6], where each item in the list passed to map() has been doubled by the action of the lambda function.\nModify your print() call to print the result of calling map() with test as the first argument, and [2, 3, 5, 8] as the second argument. You won't be able to see a readable output yet.\n--hints--\nYou should have print(map(test, [2, 3, 5, 8])) in your code.\njs\n({ test: () => assert.match(code, /^print\\s*\\(\\s*map\\s*\\(\\s*test\\s*,\\s*\\[\\s*2\\s*,\\s*3\\s*,\\s*5\\s*,\\s*8\\s*\\]\\s*\\)\\s*\\)/m) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\ntest = lambda x: x * 2\nprint(test(3))\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823634a308cb4d6bcc5fa6.md",
      "source_type": "git_repo"
    },
    "token_count": 396,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "22ac2e59a5e5e4effdc21412ce2fb380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823b0167fd894f4a7ea60a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823b0167fd894f4a7ea60a\ntitle: Step 24\nchallengeType: 20\ndashedName: step-24\n--description--\nNext, you are going to implement the same logic within the total_expenses function.\nFor now, delete both the test function and the print() call.\n--hints--\nYou should delete your test variable and the related print() call.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).has_variable(\"test\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\ntest = lambda x: x * 2\nprint(sum(map(test, [2, 3, 5, 8])))\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 901,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823b0167fd894f4a7ea60a.md",
      "source_type": "git_repo"
    },
    "token_count": 231,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0a9f66c8d12653f7652f92cd783078b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823bbbdb4eaa4f9d20a0fb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823bbbdb4eaa4f9d20a0fb\ntitle: Step 25\nchallengeType: 20\ndashedName: step-25\n--description--\nIn the total_expenses function, you'll now integrate a lambda function. Replace pass with a lambda function that has expense as its parameter.\nexpense is expected to be a dictionary, and your lambda function should return the value of the 'amount' key in the expense dictionary.\n--hints--\nYou should create a lambda function that uses the parameter expense and returns expense['amount'] in your total_expenses function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"total_expenses\").has_stmt(\"lambda expense: expense['amount']\")`)) })\nYou should not have pass in your total_expenses function.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).find_function(\"total_expenses\").has_pass()`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n--fcc-editable-region--\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1275,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823bbbdb4eaa4f9d20a0fb.md",
      "source_type": "git_repo"
    },
    "token_count": 293,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e087f25daaccee152e7300efb452b5c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823dde36392f505a39f7c7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823dde36392f505a39f7c7\ntitle: Step 27\nchallengeType: 20\ndashedName: step-27\n--description--\nFinally, pass your map() call to the sum() function to obtain the total expenses and return the result.\n--hints--\nYou should call the sum() function passing it your current map() call as the argument and return the result from your total_expenses function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"total_expenses\").has_return(\"sum(map(lambda expense: expense['amount'], expenses))\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n--fcc-editable-region--\ndef total_expenses(expenses):\nmap(lambda expense: expense['amount'], expenses)\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 990,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823dde36392f505a39f7c7.md",
      "source_type": "git_repo"
    },
    "token_count": 232,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "563ea3c086679607af00cfe8ef22f3ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823e87c9741750a22085a7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823e87c9741750a22085a7\ntitle: Step 28\nchallengeType: 20\ndashedName: step-28\n--description--\nNext, define a function named filter_expenses_by_category that takes two parameters: expenses and category. Use pass to fill the function body.\n--hints--\nYou should define a function named filter_expenses_by_category.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(filter_expenses_by_category)\n`))\n})\nYour filter_expenses_by_category function should take expenses and category as the parameters.\njs\n({ test: () => assert(runPython(`\nimport inspect\nsig = str(inspect.signature(filter_expenses_by_category))\nsig == '(expenses, category)'\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\n--fcc-editable-region--\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1210,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823e87c9741750a22085a7.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd94586d6a8f588111f163f2b3f4f994",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823cfc74aa564ffc460489.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823cfc74aa564ffc460489\ntitle: Step 26\nchallengeType: 20\ndashedName: step-26\n--description--\nNow, call map() passing your lambda function as the first argument and the expenses list as the second argument.\n--hints--\nYou should call the map() function inside the total_expenses function.\njs\n({ test: () => assert(runPython(`len(_Node(_code).find_function(\"total_expenses\").find_calls(\"map\")) == 1`)) })\nYou should pass your lambda function as the first argument to the map() call.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"total_expenses\").find_calls(\"map\")[0].find_call_args()[0].is_equivalent(\"lambda expense: expense['amount']\")`)) })\nYou should pass the expenses list as the second argument to the map() call.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"total_expenses\").find_calls(\"map\")[0].find_call_args()[1].is_equivalent(\"expenses\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n--fcc-editable-region--\ndef total_expenses(expenses):\nlambda expense: expense['amount']\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1385,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823cfc74aa564ffc460489.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e444898a25ccc18325d7e8d83597fb3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823ff0d4b991510fade1a8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65823ff0d4b991510fade1a8\ntitle: Step 29\nchallengeType: 20\ndashedName: step-29\n--description--\nWithin the filter_expenses_by_category function, replace pass with a lambda function. Use expense as the parameter and evaluate the comparison between the value of the 'category' key of the expense dictionary and category using the equality operator.\n--hints--\nYou should create a lambda function that uses a parameter named expense and evaluates the expression expense['category'] == category inside the filter_expenses_by_category function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").has_stmt(\"lambda expense: expense['category'] == category\")`)) })\nYou should not have pass inside the filter_expenses_by_category function.\njs\n({ test: () => assert.isFalse(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").has_pass()`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\n--fcc-editable-region--\ndef filter_expenses_by_category(expenses, category):\npass\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1478,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65823ff0d4b991510fade1a8.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8e9af9c762cb47cef7c025090e4a295a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824111a09164518320088d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65824111a09164518320088d\ntitle: Step 30\nchallengeType: 20\ndashedName: step-30\n--description--\nThe filter() function allows you to select items from an iterable, such as a list, based on the output of a function:\npy\nfilter(my_function, my_list)\nfilter() takes a function as its first argument and an iterable as its second argument. It returns an iterator, which is a special object that enables you to iterate over the elements of a collection, like a list.\nThe result of the example above is an iterator containing the elements of my_list for which my_function returns True.\nWithin the filter_expenses_by_category function, call filter() passing the lambda function you wrote in the previous step as the first argument and the expenses list as the second argument.\n--hints--\nYou should call filter() inside the filter_expenses_by_category function.\njs\n({ test: () => assert(runPython(`len(_Node(_code).find_function(\"filter_expenses_by_category\").find_calls(\"filter\")) == 1`)) })\nYou should pass lambda expense: expense['category'] == category as the first argument to the filter() call.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").find_calls(\"filter\")[0].find_call_args()[0].is_equivalent(\"lambda expense: expense['category'] == category\")`)) })\nYou should pass expenses as the second argument to the filter() call.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").find_calls(\"filter\")[0].find_call_args()[1].is_equivalent(\"expenses\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\n--fcc-editable-region--\ndef filter_expenses_by_category(expenses, category):\nlambda expense: expense['category'] == category\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2195,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824111a09164518320088d.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "d554ff2b105dc024cf1e4ac5bdb92c56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658244fdf4b0265334711664.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658244fdf4b0265334711664\ntitle: Step 31\nchallengeType: 20\ndashedName: step-31\n--description--\nFinally, return the result of the filter() call.\n--hints--\nYou should return the result of the filter() call from your filter_expenses_by_category function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").has_return(\"filter(lambda expense: expense['category'] == category, expenses)\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\n--fcc-editable-region--\ndef filter_expenses_by_category(expenses, category):\nfilter(lambda expense: expense['category'] == category, expenses)\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658244fdf4b0265334711664.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ad6d1f04e2c2eb80f9d4d863acb474bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824561f3478e5371a33ae5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65824561f3478e5371a33ae5\ntitle: Step 32\nchallengeType: 20\ndashedName: step-32\n--description--\nThe next step is to define the main function, which will be the entry point of the interactive expense tracker program.\nDefine a function named main without parameters. Fill the function body with the expenses list you created at the beginning of this project. You will use this list to store the expense records.\n--hints--\nYou should define a function named main() without parameters.\njs\n({ test: () => assert(runPython(`\nimport inspect\ninspect.isfunction(main)\nsig = str(inspect.signature(main))\nsig == '()'\n`))\n})\nYou should move the expenses list inside the main() function body.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_body().is_equivalent(\"expenses = []\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\n--fcc-editable-region--\nexpenses = []\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1461,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824561f3478e5371a33ae5.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "aab2cb1d400ba46911b60a33b3e19237",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658246c28575d653d1f89b59.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658246c28575d653d1f89b59\ntitle: Step 33\nchallengeType: 20\ndashedName: step-33\n--description--\nA while loop is another kind of loop that runs a portion of code as long as a specified condition is True. The loop terminates when the condition becomes False:\npy\nwhile condition:\n<code>\nBelow the expenses list, create a while loop. Use True for the condition, and print the string '\\nExpense Tracker' inside the loop body to show the title of the program.\n--hints--\nYou should create a while loop using True as the condition within your main() function.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_conditions()[0].is_equivalent(\"True\")`)) })\nYou should print '\\nExpense Tracker' in your while loop.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")[0].is_equivalent(\"print('\\\\\\\\nExpense Tracker')\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\n--fcc-editable-region--\ndef main():\nexpenses = []\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658246c28575d653d1f89b59.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "83db5a3e0d77ecd1cf132a4dee5aeb8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824872894f59546e3084e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65824872894f59546e3084e2\ntitle: Step 34\nchallengeType: 20\ndashedName: step-34\n--description--\nThe while loop you created in the previous step is an infinite loop that will allow the program to continuously present menu options until the user decides to exit.\nAfter the print() call, add another print() call to print the string '1. Add an expense'.\n--hints--\nYou should print '1. Add an expense' within your while loop after the existing print() call.\njs\n({ test: () => assert(runPython(`\ncall_lst = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1. Add an expense')\"]\nall(call_lst[n].is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\n--fcc-editable-region--\nwhile True:\nprint('\\nExpense Tracker')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824872894f59546e3084e2.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c01d48dbabeb597f6eb614aef60254f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824a1b16631c54fa524154.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65824a1b16631c54fa524154\ntitle: Step 35\nchallengeType: 20\ndashedName: step-35\n--description--\nNext, add another print() call and pass the string '2. List all expenses'.\n--hints--\nYou should print '2. List all expenses' in your while loop after the existing print() calls.\njs\n({ test: () => assert(runPython(`\ncall_lst = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1. Add an expense')\", \"print('2. List all expenses')\"]\nall(call_lst[n].is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\n--fcc-editable-region--\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824a1b16631c54fa524154.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "71b1533fb47539f0cba7c07cf7fd3d4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824dfdb6815d563b2d3256.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65824dfdb6815d563b2d3256\ntitle: Step 37\nchallengeType: 20\ndashedName: step-37\n--description--\nThe input() function takes a user input and it returns the user input in the form of a string.\nInside your while loop, call the input() function passing the string 'Enter your choice: ' as the argument, and assign the result to a variable named choice.\n--hints--\nYou should declare a variable named choice within your while loop.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].has_variable(\"choice\")\n`)) })\nYou should assign the result of the input() function, with the string 'Enter your choice: ' as its argument, to your choice variable.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_variable(\"choice\").is_equivalent(\"choice = input('Enter your choice: ')\")\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\n--fcc-editable-region--\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1801,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824dfdb6815d563b2d3256.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8c494161b2d68a0d22ec4addfcfa7b3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658252f6b1526d57b103d48a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658252f6b1526d57b103d48a\ntitle: Step 39\nchallengeType: 20\ndashedName: step-39\n--description--\nInside the if statement, you should ask the user to enter the amount for the expense and store it in a variable.\nPass the string 'Enter amount: ' to your empty input() call, so you can store the expense.\n--hints--\nYou should pass 'Enter amount: ' to the input() call assigned to the amount variable.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[0].find_variable(\"amount\").is_equivalent(\"amount = input('Enter amount: ')\")\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\n--fcc-editable-region--\nif choice == '1':\namount = input()\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658252f6b1526d57b103d48a.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0dc705008fec6cb7c9540e416822e9b2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658254db6e12485a48130f57.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658254db6e12485a48130f57\ntitle: Step 40\nchallengeType: 20\ndashedName: step-40\n--description--\nThe amount of the expense needs to be converted before performing any calculation. The float() function takes a string or an integer number as argument and returns a floating point number.\nPass input('Enter amount: ') to the float() function.\n--hints--\nYou should pass input('Enter amount: ') to the float() function in the assignment of amount.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[0].find_variable(\"amount\").is_equivalent(\"amount = float(input('Enter amount: '))\")\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\n--fcc-editable-region--\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = input('Enter amount: ')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1690,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658254db6e12485a48130f57.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "13f878194b36acac56b9df97cf0053e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658255d5f955175b270f251d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658255d5f955175b270f251d\ntitle: Step 41\nchallengeType: 20\ndashedName: step-41\n--description--\nInside your if statement, create a variable named category to store the expense category. Assign it a call to input() and use the 'Enter category: ' as the argument.\n--hints--\nYou should declare a variable named category in your if statement.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[0].has_variable(\"category\")`)) })\nYou should assign input('Enter category: ') to your category variable.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[0].find_variable(\"category\").is_equivalent(\"category = input('Enter category: ')\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\n--fcc-editable-region--\nif choice == '1':\namount = float(input('Enter amount: '))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658255d5f955175b270f251d.md",
      "source_type": "git_repo"
    },
    "token_count": 422,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b3a550e1959c3b8ee1dcdd65b8ea2a39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658258c0e5fbe85c14c060cf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 658258c0e5fbe85c14c060cf\ntitle: Step 43\nchallengeType: 20\ndashedName: step-43\n--description--\nTo list all expenses, you can use an elif clause after an if statement. The elif checks additional conditions and only works following an if statement.\nCreate an elif clause to check if the user's choice equals the string '2'. Inside the elif clause, print the string '\\nAll Expenses:'.\n--hints--\nYou should create an elif clause that checks that choice is equal to '2' after your if statement.\njs\n({ test: () => assert(runPython(`\ncond = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_conditions()[1]\ncond.is_equivalent(\"choice == '2'\") or cond.is_equivalent(\"'2' == choice\")\n`)) })\nYou should print '\\nAll Expenses:' inside your elif clause.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[1].has_call(\"print('\\\\\\\\nAll Expenses:')\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\n--fcc-editable-region--\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2121,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\658258c0e5fbe85c14c060cf.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "67a98ba928f73446b90a6dba5f88467b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582507654b3ed5712341382.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582507654b3ed5712341382\ntitle: Step 38\nchallengeType: 20\ndashedName: step-38\n--description--\nYou are going to use conditional statements to check the user's choice If the choice is '1', it means the user wants to add an expense Still in the while loop, under the choice variable, write an if statement to check if choice equals the string '1' If it's true, it will be the starting point for adding a new expense Inside the if statement body, declare a variable amount and assign it an empty input() call --hints--\nYou should create an if statement that checks if choice is equal to '1' in your while loop js\n({ test: () => assert(runPython(`\ncond = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_conditions()[0]\ncond is_equivalent(\"choice == '1'\") or cond is_equivalent(\"'1' == choice\")\n`)) })\nYou should declare a variable named amount in your if statement body js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] has_variable(\"amount\")\n`)) })\nYou should assign an empty input() call to your amount variable js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] find_variable(\"amount\") is_equivalent(\"amount = input()\")\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\n--fcc-editable-region--\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582507654b3ed5712341382.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e25c0b5efaef3f4f562217afd9aff6fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582507654b3ed5712341382.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "call to your amount variable js ({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] find_variable(\"amount\") is_equivalent(\"amount = input()\") `)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expenses append({'amount': amount, 'category': category}) def print_expenses(expenses): for expense in expenses: print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}') def total_expenses(expenses): return sum(map(lambda expense: expense['amount'], expenses)) def filter_expenses_by_category(expenses, category): return filter(lambda expense: expense['category'] == category, expenses) --fcc-editable-region-- def main(): expenses = [] while True: print('\\nExpense Tracker') print('1 Add an expense') print('2List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5 Exit')\nchoice = input('Enter your choice: ')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2332,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582507654b3ed5712341382.md",
      "source_type": "git_repo"
    },
    "token_count": 245,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9e4da58b3e006cde36be58f41f4dd216",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824c7b4e2da85597693dcf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65824c7b4e2da85597693dcf\ntitle: Step 36\nchallengeType: 20\ndashedName: step-36\n--description--\nProvide the other menu options by printing the following three strings in your while loop: '3 Show total expenses', '4 Filter expenses by category', and '5 Exit' Keep adding the print() calls in order --hints--\nYou should have print('3 Show total expenses') in your while loop js\n({ test: () => assert(runPython(`\ncall_lst = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1 Add an expense')\", \"print('2 List all expenses')\", \"print('3 Show total expenses')\"]\nall(call_lst[n] is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })\nYou should have print('4 Filter expenses by category') in your while loop js\n({ test: () => assert(runPython(`\ncall_lst = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1 Add an expense')\", \"print('2 List all expenses')\", \"print('3 Show total expenses')\", \"print('4 Filter expenses by category')\"]\nall(call_lst[n] is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })\nYou should have print('5 Exit') in your while loop js\n({ test: () => assert(runPython(`\ncall_lst = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1 Add an expense')\", \"print('2 List all expenses')\", \"print('3 Show total expenses')\", \"print('4 Filter expenses by category')\", \"print('5 Exit')\"]\nall(call_lst[n] is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2482,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824c7b4e2da85597693dcf.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0cd2b76fe9fc1ad20a40511a54c134d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824c7b4e2da85597693dcf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"print('4 Filter expenses by category')\"] all(call_lst[n] is_equivalent(i) for n, i in enumerate(test_lst)) `)) }) You should have print('5 Exit') in your while loop js ({ test: () => assert(runPython(` call_lst = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_calls(\"print\") test_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1 Add an expense')\", \"print('2 List all expenses')\", \"print('3 Show total expenses')\", \"print('4 Filter expenses by category')\", \"print('5 Exit')\"] all(call_lst[n] is_equivalent(i) for n, i in enumerate(test_lst)) `)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expensesappend({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\n--fcc-editable-region--\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2482,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65824c7b4e2da85597693dcf.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ccbdbba1d79efa595a14a2c5a2c16be2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825a9520a0795c8afbef50.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65825a9520a0795c8afbef50\ntitle: Step 44\nchallengeType: 20\ndashedName: step-44\n--description--\nAfter the print() call, call the print_expenses function to display all the expenses that have been added so far. Pass the expenses list as the argument.\n--hints--\nYou should call the print_expenses() function within your elif clause.\njs\n({ test: () => assert(runPython(`len(_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[1].find_calls(\"print_expenses\")) == 1`)) })\nYou should pass the expenses list as the argument to your print_expenses() call.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[1].has_call(\"print_expenses(expenses)\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\n--fcc-editable-region--\nelif choice == '2':\nprint('\\nAll Expenses:')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1985,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825a9520a0795c8afbef50.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "45bba66147aca962495b32559b06dfa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825e96b5db5f5dee6bf57c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65825e96b5db5f5dee6bf57c\ntitle: Step 47\nchallengeType: 20\ndashedName: step-47\n--description--\nAfter getting the category, print the following f-string f'\\nExpenses for {category}:'.\n--hints--\nYou should print f'\\nExpenses for {category}:' after the assignment of category.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[3].is_equivalent(\"category = input('Enter category to filter: ')\\\\nprint(f'\\\\\\\\nExpenses for {category}:')\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\n--fcc-editable-region--\nelif choice == '4':\ncategory = input('Enter category to filter: ')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1938,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825e96b5db5f5dee6bf57c.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "61af2c0bf2a851502b37ad9233ffd095",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582575b8089f85b8b92d7c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582575b8089f85b8b92d7c8\ntitle: Step 42\nchallengeType: 20\ndashedName: step-42\n--description--\nOnce you have the expense details, you need to call the add_expense function to add the new expense to the expenses list After getting the amount and category using input(), call the add_expense function, passing three arguments: expenses, amount and category expenses is the empty list created in the main function earlier in this project amount is the amount of the expense category is the category of the expense --hints--\nYou should call the add_expense() function within your if statement js\n({ test: () => assert(runPython(`len(_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] find_calls(\"add_expense\")) == 1`)) })\nYou should pass three arguments to your add_expense() call: expenses, amount, and category The order matters js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] has_call(\"add_expense(expenses, amount, category)\")`)) })\nYour add_expense() call should come after the assignment of amount and category js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"amount = float(input('Enter amount: '))\\\\ncategory = input('Enter category: ')\\\\nadd_expense(expenses, amount, category)\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2581,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582575b8089f85b8b92d7c8.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d75159e3937fa968b2369e1e775a4d70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582575b8089f85b8b92d7c8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1`)) }) You should pass three arguments to your add_expense() call: expenses, amount, and category The order matters js ({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] has_call(\"add_expense(expenses, amount, category)\")`)) }) Your add_expense() call should come after the assignment of amount and category js ({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[0] is_equivalent(\"amount = float(input('Enter amount: '))\\\\ncategory = input('Enter category: ')\\\\nadd_expense(expenses, amount, category)\")`)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expensesappend({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5 Exit')\nchoice = input('Enter your choice: ')\n--fcc-editable-region--\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2581,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582575b8089f85b8b92d7c8.md",
      "source_type": "git_repo"
    },
    "token_count": 386,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8774ae21dd8f157861f281871913bb4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825b758fe85a5cebabc8c5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65825b758fe85a5cebabc8c5\ntitle: Step 45\nchallengeType: 20\ndashedName: step-45\n--description--\nTo show the total expenses, create an elif statement that checks if choice == '3' If it's true, it means the user wants to see the total expenses So call print() and pass the string '\\nTotal Expenses: ' as the first argument and total_expenses(expenses) as the second argument --hints--\nYou should create an elif clause that checks if choice == '3' js\n({ test: () => assert(runPython(`\ncond = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_conditions()[2]\ncond is_equivalent(\"choice == '3'\") or cond is_equivalent(\"'3' == choice\")\n`)) })\nYou should print '\\nTotal Expenses: ', total_expenses(expenses) in your new elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[2] has_call(\"print('\\\\\\\\nTotal Expenses: ', total_expenses(expenses))\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2230,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825b758fe85a5cebabc8c5.md",
      "source_type": "git_repo"
    },
    "token_count": 432,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "33d6d8381e14c786f4a0940b28fccdf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825b758fe85a5cebabc8c5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[2] has_call(\"print('\\\\\\\\nTotal Expenses: ', total_expenses(expenses))\")`)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expenses append({'amount': amount, 'category': category}) def print_expenses(expenses): for expense in expenses: print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}') def total_expenses(expenses): return sum(map(lambda expense: expense['amount'], expenses)) def filter_expenses_by_category(expenses, category): return filter(lambda expense: expense['category'] == category, expenses) def main(): expenses = [] while True: print('\\nExpense Tracker') print('1 Add an expense') print('2 List all expenses') print('3 Show total expenses') print('4 Filter expenses by category') print('5Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\n--fcc-editable-region--\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2230,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825b758fe85a5cebabc8c5.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ab7ed8e6ad4169894c24fcb051f31d5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825cda2668995d5168e37c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65825cda2668995d5168e37c\ntitle: Step 46\nchallengeType: 20\ndashedName: step-46\n--description--\nCreate another elif clause that checks if choice == '4' Inside the new elif, create a variable category and assign it input('Enter category to filter: ') to filter the expense category --hints--\nYou should create an elif clause that checks if choice == '4' js\n({ test: () => assert(runPython(`\ncond = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_conditions()[3]\ncond is_equivalent(\"choice == '4'\") or cond is_equivalent(\"'4' == choice\")\n`)) })\nYou should declared a variable named category in your new elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] has_variable(\"category\")`)) })\nYou should assign input('Enter category to filter: ') to your category variable js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] find_variable(\"category\") is_equivalent(\"category = input('Enter category to filter: ')\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825cda2668995d5168e37c.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "914c5d1c15ce76f6f34c52af7084990b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825cda2668995d5168e37c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find_bodies()[3] find_variable(\"category\") is_equivalent(\"category = input('Enter category to filter: ')\")`)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expenses append({'amount': amount, 'category': category}) def print_expenses(expenses): for expense in expenses: print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}') def total_expenses(expenses): return sum(map(lambda expense: expense['amount'], expenses)) def filter_expenses_by_category(expenses, category): return filter(lambda expense: expense['category'] == category, expenses) def main(): expenses = [] while True: print('\\nExpense Tracker') print('1 Add an expense') print('2 List all expenses') print('3 Show total expenses') print('4 Filter expenses by category') print('5Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\n--fcc-editable-region--\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2505,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65825cda2668995d5168e37c.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b3aa0c0b20e813093392c8c8196e1b91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65826a6e9d189a623141c726.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65826a6e9d189a623141c726\ntitle: Step 51\nchallengeType: 20\ndashedName: step-51\n--description--\nFinally, to stop the execution of the while loop, add the break statement inside your last elif clause.\n--hints--\nYou should have a break statement after the print() call inside your last elif clause.\njs\n({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[4].is_equivalent(\"print('Exiting the program.')\\\\nbreak\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1. Add an expense')\nprint('2. List all expenses')\nprint('3. Show total expenses')\nprint('4. Filter expenses by category')\nprint('5. Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\nelif choice == '4':\ncategory = input('Enter category to filter: ')\nprint(f'\\nExpenses for {category}:')\nexpenses_from_category = filter_expenses_by_category(expenses, category)\nprint_expenses(expenses_from_category)\n--fcc-editable-region--\nelif choice == '5':\nprint('Exiting the program.')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2171,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65826a6e9d189a623141c726.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8d62fc4bbbc64285149abcb6f2d94ccd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582601b2987045e8e7da994.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582601b2987045e8e7da994\ntitle: Step 48\nchallengeType: 20\ndashedName: step-48\n--description--\nAfter your print() call, you need to filter the expenses and print the filtered list Declare a variable expenses_from_category and assign it a call to filter_expenses_by_category passing expenses and category as the argument --hints--\nYou should declare a variable named expenses_from_category in your elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] has_variable(\"expenses_from_category\")`)) })\nYou should call filter_expenses_by_category() passing expenses and category as the arguments and assign it to your expenses_from_category variable js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] find_variable(\"expenses_from_category\") is_equivalent(\"expenses_from_category = filter_expenses_by_category(expenses, category)\")`)) })\nYour expenses_from_category variable should come after the print() call js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] is_equivalent(\"category = input('Enter category to filter: ')\\\\nprint(f'\\\\\\\\nExpenses for {category}:')\\\\nexpenses_from_category = filter_expenses_by_category(expenses, category)\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582601b2987045e8e7da994.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ee62d5e14e7a2562b523a3916222d494",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582601b2987045e8e7da994.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] is_equivalent(\"category = input('Enter category to filter: ')\\\\nprint(f'\\\\\\\\nExpenses for {category}:')\\\\nexpenses_from_category = filter_expenses_by_category(expenses, category)\")`)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expenses append({'amount': amount, 'category': category}) def print_expenses(expenses): for expense in expenses: print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}') def total_expenses(expenses): return sum(map(lambda expense: expense['amount'], expenses)) def filter_expenses_by_category(expenses, category): return filter(lambda expense: expense['category'] == category, expenses) def main(): expenses = [] while True: print('\\nExpense Tracker') print('1 Add an expense') print('2 List all expenses') print('3Show total expenses')\nprint('4 Filter expenses by category')\nprint('5 Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\n--fcc-editable-region--\nelif choice == '4':\ncategory = input('Enter category to filter: ')\nprint(f'\\nExpenses for {category}:')\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2913,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582601b2987045e8e7da994.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "24dc5bddf20f9fd2b4165dd5d887a9a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582622cb6c11a5f4c5d79b4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582622cb6c11a5f4c5d79b4\ntitle: Step 49\nchallengeType: 20\ndashedName: step-49\n--description--\nStill within the elif clause, pass the expenses_from_category iterator to a print_expenses call --hints--\nYou should call print_expenses() passing expenses_from_category as the argument in your elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] has_call(\"print_expenses(expenses_from_category)\")`)) })\nYour print_expenses() call should come after the expenses_from_category variable js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[3] is_equivalent(\"category = input('Enter category to filter: ')\\\\nprint(f'\\\\\\\\nExpenses for {category}:')\\\\nexpenses_from_category = filter_expenses_by_category(expenses, category)\\\\nprint_expenses(expenses_from_category)\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2512,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582622cb6c11a5f4c5d79b4.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5cbf6e6cc8d3ddd4e09e5874d028a3f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582622cb6c11a5f4c5d79b4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "category to filter: ')\\\\nprint(f'\\\\\\\\nExpenses for {category}:')\\\\nexpenses_from_category = filter_expenses_by_category(expenses, category)\\\\nprint_expenses(expenses_from_category)\")`)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expenses append({'amount': amount, 'category': category}) def print_expenses(expenses): for expense in expenses: print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}') def total_expenses(expenses): return sum(map(lambda expense: expense['amount'], expenses)) def filter_expenses_by_category(expenses, category): return filter(lambda expense: expense['category'] == category, expenses) def main(): expenses = [] while True: print('\\nExpense Tracker') print('1 Add an expense') print('2 List all expenses') print('3 Show total expenses') print('4 Filter expenses by category') print('5Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\n--fcc-editable-region--\nelif choice == '4':\ncategory = input('Enter category to filter: ')\nprint(f'\\nExpenses for {category}:')\nexpenses_from_category = filter_expenses_by_category(expenses, category)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2512,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582622cb6c11a5f4c5d79b4.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f290a2623a4d91b7af6a86ade71e317d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582687859366a618424d84b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6582687859366a618424d84b\ntitle: Step 50\nchallengeType: 20\ndashedName: step-50\n--description--\nTo provide a way to exit the program, use another elif clause to check if choice equals the string '5' Inside the new elif clause, print the string 'Exiting the program ' to show that the program is terminating its execution --hints--\nYou should create an elif clause that checks if choice == '5' js\n({ test: () => assert(runPython(`\ncond = _Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_conditions()[4]\ncond is_equivalent(\"choice == '5'\") or cond is_equivalent(\"'5' == choice\")\n`)) })\nYou should print 'Exiting the program ' in your new elif clause js\n({ test: () => assert(runPython(`_Node(_code) find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[4] has_call(\"print('Exiting the program ')\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2494,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582687859366a618424d84b.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e6f8c25f1a686e802f5d0b41b8dbf96f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582687859366a618424d84b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "find_function(\"main\") find_whiles()[0] find_bodies()[0] find_ifs()[0] find_bodies()[4] has_call(\"print('Exiting the program ')\")`)) }) --seed-- --seed-contents-- ```py def add_expense(expenses, amount, category): expenses append({'amount': amount, 'category': category}) def print_expenses(expenses): for expense in expenses: print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}') def total_expenses(expenses): return sum(map(lambda expense: expense['amount'], expenses)) def filter_expenses_by_category(expenses, category): return filter(lambda expense: expense['category'] == category, expenses) def main(): expenses = [] while True: print('\\nExpense Tracker') print('1 Add an expense') print('2 List all expenses') print('3 Show total expenses') print('4 Filter expenses by category') print('5Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\n--fcc-editable-region--\nelif choice == '4':\ncategory = input('Enter category to filter: ')\nprint(f'\\nExpenses for {category}:')\nexpenses_from_category = filter_expenses_by_category(expenses, category)\nprint_expenses(expenses_from_category)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2494,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6582687859366a618424d84b.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8399a9644c7d4919c1f5690d78cf81cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66314f2add0a8b57da5d6d91.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66314f2add0a8b57da5d6d91\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nYou should see something like <map object at 0xd273a8> printed on the console, which is the string representation of the map object returned by map().\nTo obtain a readable output you need to turn the map object into a list. Do it by passing the map() call as the argument to the list() function.\n--hints--\nYou should pass the map() call as the argument to the list() function.\njs\n({ test: () => assert(runPython(`_Node(_code).has_call(\"print(list(map(test, [2,3,5,8])))\")`)) })\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses.append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\npass\n--fcc-editable-region--\ntest = lambda x: x * 2\nprint(map(test, [2, 3, 5, 8]))\n--fcc-editable-region--\nexpenses = []\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1070,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66314f2add0a8b57da5d6d91.md",
      "source_type": "git_repo"
    },
    "token_count": 282,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "fdc2718e72e258f175293260317a8842",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66694eaaeb7d253049fa7883.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66694eaaeb7d253049fa7883\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nTo add items to a list, you can write them between the square brackets, separating the values with commas.\nAdd the numbers 1 and 2 inside the list.\n--hints--\nThe first element of my_list should be 1.\njs\n({\ntest: () => runPython(`\nassert my_list[0] == 1, \"my_list[0] is not 1\"\n`)\n})\nThe second element of my_list should be 2.\njs\n({\ntest: () => runPython(`\nassert my_list[1] == 2, \"my_list[1] is not 2\"\n`)\n})\nmy_list should have two elements inside.\njs\n({\ntest: () => runPython(`\nassert len(my_list) == 2, \"my_list doesn't have two elements\"\n`)\n})\nYou should assign [1, 2] to my_list directly.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).find_variable('my_list').is_equivalent(\"my_list = [1, 2]\")\n`)\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_list = []\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66694eaaeb7d253049fa7883.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9c3e9ba583ad55ed611bf5dfbc9ceed2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66694bfa435cef241f6f9a68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66694bfa435cef241f6f9a68\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nBefore starting with the project, you are going to learn about lists.\nUnlike numbers and strings, a list is a data type that works as a container for other values:\npy\nexample_list = [1, 2, 3, 4]\nempty_list = []\nThe list is characterized by the square brackets around all the values, and a comma between the values, like: [\"A\", \"happy\", \"list\"]. If the list does not contain any values, then it is an empty list: [].\nA list can contain different data types: [1, \"Up\", [\"Down\", \"Twice\"]]. That includes all possible data types. It can also contain another list!\nCreate a variable called my_list and assign to it an empty list.\n--hints--\nYou should have a variable called my_list.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).has_variable('my_list'), \"variable my_list not found\"\n`)\n})\nThe variable my_list should have value of an empty list.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).find_variable('my_list').is_equivalent('my_list = []'), \"variable my_list is not an empty list\"\n`)\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1287,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66694bfa435cef241f6f9a68.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "40b507dfcae49dac97bd56af1761c533",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66694fc4bba24f33ca01fa5b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66694fc4bba24f33ca01fa5b\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nPython has a handful of list methods. Such as methods for adding or removing list items.\nYou can add an item to the end of a list using the append() method. For example:\n```py\nexample_list = [4, 5, 6]\nexample_list.append(7)\n```\nexample_list now is [4, 5, 6, 7].\nTry to use the append() method to add 3 to my_list. Then print the list.\n--hints--\nThe last element of my_list should be 3.\njs\n({\ntest: () => runPython(`\nassert my_list[2] == 3, \"my_list[2] is not 3\"\n`)\n})\nmy_list should have a length of 3.\njs\n({\ntest: () => runPython(`\nassert len(my_list) == 3, \"my_list doesn't have three elements\"\n`)\n})\nYou should not change the list declaration.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).find_variable('my_list').is_equivalent(\"my_list = [1, 2]\")\n`)\n})\nYou should print the list.\njs\n({\ntest: () => runPython(`\ncalls = _Node(_code).find_calls(\"print\")\nassert any(call.is_equivalent('print(my_list)') for call in calls)\n`)\n})\nYou should print the list after using append().\njs\n({\ntest: () => runPython(`\nassert _Node(_code).is_ordered('my_list.append(3)', 'print(my_list)')\n`)\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nmy_list = [1, 2]\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1454,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\66694fc4bba24f33ca01fa5b.md",
      "source_type": "git_repo"
    },
    "token_count": 389,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79658e5c97c0b83b33abc511320e835c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666951d2e4b27e3a3c72ca5f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666951d2e4b27e3a3c72ca5f\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nYou can also access a single element to get its value.\nLists are zero-indexed like strings are. That means that the first element is at index 0, the second element is at index 1 and so on.\nTo access an element you use bracket notation. For example, example_list[1] is accessing the element at index 1, the second element, of example_list.\nPrint the first element of my_list.\n--hints--\nYou should print the first element of the list with print(my_list[0]).\njs\n({\ntest: () => runPython(`\ncalls =  _Node(_code).find_calls(\"print\")\nassert any(call.is_equivalent('print(my_list[0])') for call in calls), \"print of my_list[0] not found\"\n`)\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_list = [1, 2]\nmy_list.append(3)\nprint(my_list)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 926,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666951d2e4b27e3a3c72ca5f.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "da475edebf110b609e22ff5db7a1ae8d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65826af5b226a5628aa154b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 65826af5b226a5628aa154b1\ntitle: Step 52\nchallengeType: 20\ndashedName: step-52\n--description--\nFinally, call your main() function, and try the expense tracker program in the console With that, the expense tracker project is complete --hints--\nYou should call your main() function js\nassert match(code, /^main\\s*\\(\\s*\\)/m)\n--seed--\n--seed-contents--\n```py\ndef add_expense(expenses, amount, category):\nexpenses append({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5 Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\nelif choice == '4':\ncategory = input('Enter category to filter: ')\nprint(f'\\nExpenses for {category}:')\nexpenses_from_category = filter_expenses_by_category(expenses, category)\nprint_expenses(expenses_from_category)\nelif choice == '5':\nprint('Exiting the program ')\nbreak\n--fcc-editable-region--\n--fcc-editable-region--\n```\n--solutions--\n```py\ndef add_expense(expenses, amount, category):\nexpenses",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65826af5b226a5628aa154b1.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ec56febd537ea742f8bd742554f39040",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65826af5b226a5628aa154b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "choice = input('Enter your choice: ') if choice == '1': amount = float(input('Enter amount: ')) category = input('Enter category: ') add_expense(expenses, amount, category) elif choice == '2': print('\\nAll Expenses:') print_expenses(expenses) elif choice == '3': print('\\nTotal Expenses: ', total_expenses(expenses)) elif choice == '4': category = input('Enter category to filter: ') print(f'\\nExpenses for {category}:') expenses_from_category = filter_expenses_by_category(expenses, category) print_expenses(expenses_from_category) elif choice == '5': print('Exiting the program ') break --fcc-editable-region-- --fcc-editable-region-- ``` --solutions-- ```py def add_expense(expenses, amount, category): expensesappend({'amount': amount, 'category': category})\ndef print_expenses(expenses):\nfor expense in expenses:\nprint(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\ndef total_expenses(expenses):\nreturn sum(map(lambda expense: expense['amount'], expenses))\ndef filter_expenses_by_category(expenses, category):\nreturn filter(lambda expense: expense['category'] == category, expenses)\ndef main():\nexpenses = []\nwhile True:\nprint('\\nExpense Tracker')\nprint('1 Add an expense')\nprint('2 List all expenses')\nprint('3 Show total expenses')\nprint('4 Filter expenses by category')\nprint('5 Exit')\nchoice = input('Enter your choice: ')\nif choice == '1':\namount = float(input('Enter amount: '))\ncategory = input('Enter category: ')\nadd_expense(expenses, amount, category)\nelif choice == '2':\nprint('\\nAll Expenses:')\nprint_expenses(expenses)\nelif choice == '3':\nprint('\\nTotal Expenses: ', total_expenses(expenses))\nelif choice == '4':\ncategory = input('Enter category to filter: ')\nprint(f'\\nExpenses for {category}:')\nexpenses_from_category = filter_expenses_by_category(expenses, category)\nprint_expenses(expenses_from_category)\nelif choice == '5':\nprint('Exiting the program ')\nbreak\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3606,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\65826af5b226a5628aa154b1.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0e7f9ccb944a0b63ee22f9e5b3ab0410",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6669539c1379793f9cb8917c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6669539c1379793f9cb8917c\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nPython lists are mutable which means that the value of the list items can be changed. You can change the value of an element using the bracket notation.\npy\nexample_list = [4, 5, 6, 7]\nexample_list[1] = 'oh'\nThis will make example_list have value of [4, 'oh', 6, 7].\nChange the first element of my_list to 0, then print the list to check the value.\n--hints--\nDo not change the list declaration.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).find_variable('my_list').is_equivalent(\"my_list = [1, 2]\")\n`)\n})\nThe first element of my_list should be 0.\njs\n({\ntest: () => runPython(`\nassert my_list[0] == 0\n`)\n})\nYou should change the first element using my_list[0] = 0.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).has_stmt(\"my_list[0] = 0\")\n`)\n})\nYou should print the list.\njs\n({\ntest: () => runPython(`\ncalls = _Node(_code).find_calls('print')\nassert any(call.is_equivalent(\"print(my_list)\") for call in calls)\n`)\n})\nYou should print the list after changing the first element.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).is_ordered(\"my_list[0] = 0\", \"print(my_list)\")\n`)\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_list = [1, 2]\nmy_list.append(3)\nprint(my_list)\nprint(my_list[0])\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\6669539c1379793f9cb8917c.md",
      "source_type": "git_repo"
    },
    "token_count": 403,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "065894218f4a32fc86e4b35beddc5939",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666aae6a5d30a71f1fd7749f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666aae6a5d30a71f1fd7749f\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nThe insert method can add an element at any position in a list. The first argument is the position at which the element has to be added, and the second argument is the element to add. For example, here's how to add a new element in the third position of example_list:\n```py\nexample_list = [4, 5, 6, 7]\nexample_list.insert(2, 5.5)\nprint(example_list) # [4, 5, 5.5, 6, 7]\n```\nUsing insert(), add 1 to my_list in the proper position so that it is counting upward, then print the list.\n--hints--\nYou should add 1 to my_list at index 1 using insert().\njs\n({\ntest: () => runPython(`\nassert _Node(_code).has_call('my_list.insert(1, 1)')\n`)\n})\nmy_list should have 4 elements.\njs\n({\ntest: () => runPython(`\nassert len(my_list) == 4\n`)\n})\nmy_list should equal [0, 1, 2, 3].\njs\n({\ntest: () => runPython(`\nassert my_list == [0, 1, 2, 3]\n`)\n})\nYou should print the list after adding the new element.\njs\n({\ntest: () => runPython(`\nassert _Node(_code).is_ordered('my_list.insert(1, 1)', \"print(my_list)\")\n`)\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_list = [1, 2]\nmy_list.append(3)\nprint(my_list)\nprint(my_list[0])\nmy_list[0] = 0\nprint(my_list)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1414,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666aae6a5d30a71f1fd7749f.md",
      "source_type": "git_repo"
    },
    "token_count": 408,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "53ff8caafca993e89c06277ee6c9fbe8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666ab82c874add3c95145213.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666ab82c874add3c95145213\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nThe pop() method can be used to remove an element from a list. By default, it removes the last element of the list. You can pass an index as the argument to the method, and it will remove the element at the given index.\n```py\nfruits_list = [\"cherry\", \"lemon\", \"tomato\", \"apple\", \"orange\"]\nfruits_list.pop(2)\nprint(fruits_list) # [\"cherry\", \"lemon\", \"apple\", \"orange\"]\n```\nIn this case, fruits_list.pop(2) removes the element at index 2 of the list.\nUse pop() to remove the last element from my_list, then print my_list.\n--hints--\nYou should use pop().\njs\n({\ntest: () => runPython(`\nassert len(_Node(_code).find_calls('pop')) > 0\n`)\n})\nmy_list should be [0, 1, 2].\njs\n({\ntest: () => runPython(`\nassert my_list == [0, 1, 2]\n`)\n})\nYou should print my_list after using pop().\njs\n({\ntest: () => runPython(`\ncode = _Node(_code)\nassert(\nany(\ncode.is_ordered(pop, 'print(my_list)') for pop in ['my_list.pop()', 'my_list.pop(3)']\n)\n)\n`)\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_list = [1, 2]\nmy_list.append(3)\nprint(my_list)\nprint(my_list[0])\nmy_list[0] = 0\nprint(my_list)\nmy_list.insert(1, 1)\nprint(my_list)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1401,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666ab82c874add3c95145213.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c46fd9e2b0a7dbb52017ab72bd4afc70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666ab9013cd5563f2b39947a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 666ab9013cd5563f2b39947a\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nNow that you have explored lists, remove all of the code you wrote for your review so you can begin the project.\n--hints--\nYou should delete everything.\njs\n({\ntest: () => runPython(`\nassert not _Node(_code)\n`)\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\nmy_list = [1, 2]\nmy_list.append(3)\nprint(my_list)\nprint(my_list[0])\nmy_list[0] = 0\nprint(my_list)\nmy_list.insert(1, 1)\nprint(my_list)\nmy_list.pop()\nprint(my_list)\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 607,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-lambda-functions-by-building-an-expense-tracker\\666ab9013cd5563f2b39947a.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4aa54f2c1bb04a95373f8bda0cdd7d93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657e928716b77b2277980276.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657e928716b77b2277980276\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you are going to build a program that takes a camelCase or PascalCase formatted string as input and converts that to a snake_case formatted string using two approaches. First, you'll use a for loop and then list comprehension to achieve the same results. You'll see how list comprehension can make your code more concise.\nStart defining a new function named convert_to_snake_case() that accepts a string named pascal_or_camel_cased_string as input. For now, add a pass statement inside the function.\n--hints--\nYou should define a new function named convert_to_snake_case(). Don't forget the colon at the end and use pass to fill the function body.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\ninspect.isfunction(convert_to_snake_case)\n`));\n}\n})\nYour function should take a parameter named pascal_or_camel_cased_string.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\n'pascal_or_camel_cased_string' in inspect.signature(convert_to_snake_case).parameters\n`));\n}\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1285,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657e928716b77b2277980276.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e997e760fc6a4f2bbc7a9b16b1fde151",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657ed53c19461d4b95c4757a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ed53c19461d4b95c4757a\ntitle: Step 2\nchallengeType: 20\ndashedName: step-2\n--description--\nYou need to add an empty list that will hold the characters of the string after you have converted them to snake case.\nInside the function, replace the pass statement by creating an empty list named snake_cased_char_list.\n--hints--\nYou should replace pass with an empty list named snake_cased_char_list within convert_to_snake_case.\njs\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst commentless_code = __helpers.python.removeComments(transformedCode)\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + commentless_code, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.notMatch(function_body, /\\bpass\\b/);\nassert.match(function_body, / +snake_cased_char_list\\s*=\\s*\\[\\s*\\]\\s*/);\n}\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef convert_to_snake_case(pascal_or_camel_cased_string):\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1103,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657ed53c19461d4b95c4757a.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8b4f9b463210abd7b46dfdb08d6dc485",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657ee28cefc4945568287673.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ee28cefc4945568287673\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nWith the empty list in place, now you can start iterating through the input string and convert it into snake case.\nInside the function, below the list you just created, add a for loop to iterate through the pascal_or_camel_cased_string. Make sure to name the target variable char. For now, add a pass statement as a placeholder in the loop body.\n--hints--\nYou should write a new for loop with the target variable named char. Don't forget the colon at the end and to use pass to fill the loop body.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +for\\s+char\\s+in\\s+pascal_or_camel_cased_string\\s*:\\s*pass[\\s]*$/);\n}\n})\n```\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657ee28cefc4945568287673.md",
      "source_type": "git_repo"
    },
    "token_count": 287,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7ce1c73278cded16cfc273977e9ada68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657ef2a86d4e545cec9a85fb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657ef2a86d4e545cec9a85fb\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nIn both camel case and pascal case, uppercase characters mark the beginning of new words. To convert the input string to snake case, you will need to check if the characters in the input string are uppercase.\nYou can use the .isupper() string method to check if a character is uppercase. This method returns True if the character is uppercase and False if it is not.\nInside the for loop, add an if statement to check if the current character is uppercase. Move the pass statement inside the new if statement.\n--hints--\nYou should write a new if statement with char.isupper() as the condition. Remember to add the colon at the end and use the pass keyword to fill the if statement body.\njs\n({\ntest: () => {\nconst commentless_code = __helpers.python.removeComments(code)\nconst transformedCode = commentless_code.replace(/\\r/g, \"\");\nconst {function_body} = __helpers.python.getDef(\"\\n\" + commentless_code, \"convert_to_snake_case\");\nassert.match(function_body, /\\s+if\\s+char\\.isupper\\s*\\(\\s*\\)\\s*:\\s+pass/);\n}\n})\nYou should replace the pass statement in the loop body with the if statement.\n```js\n({\ntest: () => {\nconst commentless_code = __helpers.python.removeComments(code)\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+pascal_or_camel_cased_string\\s*/);\nassert.notMatch(block_body, /^\\s+pass/);\n}\n})\n```\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1813,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657ef2a86d4e545cec9a85fb.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "28e5fdfc7f44afcc993561401b3f2373",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657efce98e958b75df86b305.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657efce98e958b75df86b305\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nWithin the if statement body, you are going to add the converted character to the list you created earlier.\nFor this, the .append() method will be used. This method adds a given object to the end of the list it is invoked on.\nUse the .append() method on the snake_cased_char_list to add the converted_character to the list.\n--hints--\nYou should use the .append() method to add the converted character to the snake_cased_char_list.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +snake_cased_char_list\\.append\\s*\\(\\s*converted_character\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\npy\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\n--fcc-editable-region--\nif char.isupper():\nconverted_character = '_' + char.lower()\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1238,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657efce98e958b75df86b305.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "cd5d6a8b564dda22b2929153caa6fc0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657efdcf7fe23b76c0cff9ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657efdcf7fe23b76c0cff9ec\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nYou need to handle the characters that are already in lowercase by adding them to the list of converted characters.\nRight after the if statement within the for loop, add an else clause and use the .append() method to add char to the snake_cased_char_list variable.\n--hints--\nYou should add an else clause inside the for loop. Don't forget the colon at the end.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +else:/);\n}\n})\n```\nYou should use the .append() method to add char to the snake_cased_char_list variable.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +snake_cased_char_list.append\\(\\s*char\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\npy\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\n--fcc-editable-region--\nif char.isupper():\nconverted_character = '_' + char.lower()\nsnake_cased_char_list.append(converted_character)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1622,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657efdcf7fe23b76c0cff9ec.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "79e2b571a90fe3f5e3f8b99c8e1d89fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657efa642593c5746acc5c81.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657efa642593c5746acc5c81\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nInside the if statement body, you need to convert any uppercase character to lowercase and prepend an underscore to this lowercase character.\nUse the .lower() string method to convert uppercase characters to lowercase characters. Then, prepend an underscore to the character. Assign the results to a variable named converted_character.\n--hints--\nYou should assign the modified character to a variable named converted_character.\n``js\n({\ntest: () => {\nassert(runPython(\nconverted_character_variable = (\n_Node(_code)\n.find_function(\"convert_to_snake_case\")\n.find_for_loops()[0]\n.find_ifs()[0]\n.find_variable(\"converted_character\")\n)\nconverted_character_variable.is_equivalent(\n\"converted_character = '_' + char.lower()\"\n) or converted_character_variable.is_equivalent(\n\"converted_character = f'_{char.lower()}'\"\n)\n`));\n}\n})\n```\nYou should not have pass in your if statement.\njs\n({\ntest: () => {\nassert(runPython(`not _Node(_code).find_function(\"convert_to_snake_case\").find_for_loops()[0].find_ifs()[0].has_stmt(\"pass\")`));\n}\n})\n--seed--\n--seed-contents--\npy\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\n--fcc-editable-region--\nif char.isupper():\npass\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1574,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657efa642593c5746acc5c81.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "949fae7b3c0e00bfdb1f76a2e1f9e05c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657effaa2a5e0277d71f9cbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657effaa2a5e0277d71f9cbe\ntitle: Step 8\nchallengeType: 20\ndashedName: step-8\n--description--\nBy this point, the variable snake_cased_char_list holds the list of converted characters. To combine these characters into a single string, you can utilize the .join() method.\nThe join method works by concatenating each element of a list into a string, separated by a designated string, known as the separator.\npy\nresult_string = ''.join(characters)\nThe example above joins together the elements of the characters list into a single string where each element is concatenated together using an empty string as the separator.\nNow, right after the for loop, use the .join() method to join the elements in snake_cased_char_list using an empty string as the separator. Assign the result to a new variable named snake_cased_string.\n--hints--\nYou should join the characters in the snake_cased_char_list list into a string using the .join() method and assign the string to a variable named snake_cased_string after your for loop.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +snake_cased_string\\s*=\\s*('|\")\\1\\.join\\s*\\(\\s*snake_cased_char_list\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '_' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1885,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657effaa2a5e0277d71f9cbe.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "32db32f440e5b77f1d1bdbf639823688",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f01ae9aea647b27402d3e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f01ae9aea647b27402d3e\ntitle: Step 10\nchallengeType: 20\ndashedName: step-10\n--description--\nTo wrap up the function, return the clean_snake_cased_string. This will complete the function and allow you to use it to convert strings from pascal or camel case to snake case.\nAdd a return statement at the end of the function to return the clean_snake_cased_string.\n--hints--\nYou should add return clean_snake_cased_string at the end of the convert_to_snake_case function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +return\\s+clean_snake_cased_string/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\nsnake_cased_string = ''.join(snake_cased_char_list)\nclean_snake_cased_string = snake_cased_string.strip('')\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1394,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f01ae9aea647b27402d3e.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "29d2a5eb4431c108bf08d6cd93a7a8a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f0044be09db790b1eb1c5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f0044be09db790b1eb1c5\ntitle: Step 9\nchallengeType: 20\ndashedName: step-9\n--description--\nIn pascal case, strings begin with a capital letter. After converting all the characters to lowercase and adding an underscore to them, there's a chance of having an extra underscore at the start of your string.\nThe easiest way to fix this is by using the .strip() string method, which removes from a string any leading or trailing characters among a set of characters passed as its argument. For example:\n```py\noriginal_string = \"example_string\"\nclean_string = original_string.strip('_')\n```\nThe strip() method is applied to original_string. This removes any leading and trailing underscore. The result of the example above would be the string 'example_string'.\nDeclare a new variable named clean_snake_cased_string and assign it the result of the .strip() method applied to snake_cased_string , passing '_' as the argument to the method.\n--hints--\nYou should assign the resulting string from snake_cased_string.strip('_') to a variable named clean_snake_cased_string.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, / +clean_snake_cased_string\\s*=\\s*snake_cased_string.strip\\(\\s*(\"|')_\\1\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\npy\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '_' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\n--fcc-editable-region--\nsnake_cased_string = ''.join(snake_cased_char_list)\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f0044be09db790b1eb1c5.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0db69bc2cabcb0967ef87e56222ca59d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f0353c9523d7d896873ea.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f0353c9523d7d896873ea\ntitle: Step 12\nchallengeType: 20\ndashedName: step-12\n--description--\nInside the main() function, replace the pass statement, with a call to the convert_to_snake_case() function, passing the string 'aLongAndComplexString' as input.\nTo display the output, pass the function call as the argument to the print() function.\n--hints--\nYou should call convert_to_snake_case() inside the main() function and pass 'aLongAndComplexString' as input to the function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +print\\s*\\(\\s*convert_to_snake_case\\s*\\(\\s*(\"|')aLongAndComplexString\\1\\s*\\)\\s*\\)/);\n}\n})\n```\nYou should not have pass in your main function.\n```js\n({\ntest: () => {\nconst commentless_code = __helpers.python.removeComments(code);\nconst transformedCode = commentless_code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.notMatch(function_body, /pass/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\nsnake_cased_string = ''.join(snake_cased_char_list)\nclean_snake_cased_string = snake_cased_string.strip('')\nreturn clean_snake_cased_string\n--fcc-editable-region--\ndef main():\npass\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1864,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f0353c9523d7d896873ea.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b593731bdcec280f8ce48bb7d8b32065",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f025ec86c3d7c4177b6be.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f025ec86c3d7c4177b6be\ntitle: Step 11\nchallengeType: 20\ndashedName: step-11\n--description--\nWith the function complete, you can now use it inside another function.\nCreate a new function called main() with pass as the body of the function.\n--hints--\nYou should define a new function named main(). Don't forget the colon at the end and use pass to fill the function body.\njs\n({\ntest: () => {\nassert(runPython(`\nimport inspect\ninspect.isfunction(main)\n`));\n}\n})\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\nsnake_cased_string = ''.join(snake_cased_char_list)\nclean_snake_cased_string = snake_cased_string.strip('')\nreturn clean_snake_cased_string\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1109,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f025ec86c3d7c4177b6be.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9910e8a5050ad4e41de312685bc5ed2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f04ed0035f47ed04d0f1f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f04ed0035f47ed04d0f1f\ntitle: Step 13\nchallengeType: 20\ndashedName: step-13\n--description--\nIn order to display the output of the convert_to_snake_case() function, you need to call the main() function.\nAt the same level as the two existing functions, add a call to the main() function. You should see the given camel or pascal cased string converted to snake case upon execution.\n--hints--\nYou should add a call to the main() function.\njs\n({\ntest: () => {\nconst pythonCode = `_Node(_code.replace('\\\\\\\\r', '')).has_call(\"main()\")`;\nconst result = runPython(pythonCode);\nassert(result);\n}\n});\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\nsnake_cased_string = ''.join(snake_cased_char_list)\nclean_snake_cased_string = snake_cased_string.strip('')\nreturn clean_snake_cased_string\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1303,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f04ed0035f47ed04d0f1f.md",
      "source_type": "git_repo"
    },
    "token_count": 305,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b287e49d83dc6c7e5891c8aa760ab25f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f425dbab54e11993c80f0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f425dbab54e11993c80f0\ntitle: Step 14\nchallengeType: 20\ndashedName: step-14\n--description--\nSo far, in this project you have used a for loop to iterate over your input string and convert it into the desired output. Now you'll begin the transition from a for loop to a list comprehension.\nBegin by commenting out all the lines of code inside the convert_to_snake_case() function. Don't delete them as they'll be helpful when you implement the logic using a list comprehension.\nRemember to add the pass keyword to the function body to prevent the code from failing during the tests.\n--hints--\nYou should comment out all the 10 lines of code inside the convert_to_snake_case() function and nothing else. Add pass to fill temporarily the function body and avoid an error.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\").replace(/\\n#/g, \"\\n #\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.equal(function_body.split(\"#\").length - 1, 10);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = []\nfor char in pascal_or_camel_cased_string:\nif char.isupper():\nconverted_character = '' + char.lower()\nsnake_cased_char_list.append(converted_character)\nelse:\nsnake_cased_char_list.append(char)\nsnake_cased_string = ''.join(snake_cased_char_list)\nclean_snake_cased_string = snake_cased_string.strip('')\nreturn clean_snake_cased_string\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1822,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f425dbab54e11993c80f0.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e978f36d188bed9761570e0011e6626c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f4345abe7f2161f99f1ad.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f4345abe7f2161f99f1ad\ntitle: Step 15\nchallengeType: 20\ndashedName: step-15\n--description--\nReplace the pass keyword with the variable snake_cased_char_list and assign it an empty list. Use the square brace notation to create the list.\n--hints--\nYou should declare an empty list named snake_cased_char_list within convert_to_snake_case.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, /clean_snake_cased_string\\s+    snake_cased_char_list\\s*=\\s*\\[\\n*\\s*\\n*\\]/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#       converted_character = '' + char.lower()\n#       snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\n--fcc-editable-region--\npass\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1438,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f4345abe7f2161f99f1ad.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b9ed74ee074075a12a8bbf88c1261d6b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f465f8e718b19c5105ae5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f465f8e718b19c5105ae5\ntitle: Step 20\nchallengeType: 20\ndashedName: step-20\n--description--\nList comprehensions accept conditional statements, to evaluate the provided expression only if certain conditions are met:\npy\nspam = [i * 2 for i in iterable if i > 0]\nAs you can see from the output, the list of characters generated from pascal_or_camel_cased_string has been joined. Since the expression inside the list comprehension is evaluated for each character, the result is a lowercase string with all the characters separated by an underscore.\nFollow the example above to add an if clause to your list comprehension so that the expression is executed only if the character is uppercase.\n--hints--\nYou should add an if clause with the condition char.isupper() to your list comprehension.\njs\n({\ntest: () => assert(runPython(`\nifs = _Node(_code).find_function(\"convert_to_snake_case\").find_variable(\"snake_cased_char_list\").find_comp_ifs()\nlen(ifs) == 1 and ifs[0].is_equivalent(\"char.isupper()\")\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#       converted_character = '' + char.lower()\n#       snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\n--fcc-editable-region--\nsnake_cased_char_list = ['' + char.lower() for char in pascal_or_camel_cased_string]\n--fcc-editable-region--\nreturn ''.join(snake_cased_char_list).strip('')\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1890,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f465f8e718b19c5105ae5.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "8077acd9eff8cee8083a9aa98064de47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f43d341a0dd17120cdb08.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f43d341a0dd17120cdb08\ntitle: Step 16\nchallengeType: 20\ndashedName: step-16\n--description--\nYou will need to convert uppercase characters to lowercase and add an underscore before them.\nBefore proceeding to work on the list comprehension, you're going to give your function a return value. In this way you'll be able to check the output.\nUse the return statement to return the list snake_cased_char_list from your function.\n--hints--\nYou should return the snake_cased_char_list list. Ensure the indentation is set correctly.\n```js\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, /return\\s*snake_cased_char_list/);\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#       converted_character = '' + char.lower()\n#       snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\nsnake_cased_char_list = []\n--fcc-editable-region--\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1545,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f43d341a0dd17120cdb08.md",
      "source_type": "git_repo"
    },
    "token_count": 361,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "abd997a5a901bab1cacb12b1c7d6d143",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f47b12c51e41b3149e584.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f47b12c51e41b3149e584\ntitle: Step 21\nchallengeType: 20\ndashedName: step-21\n--description--\nStill, the final result is not exactly what you want to achieve. You need to execute a different expression for the characters filtered out by the if clause. You'll use an else clause for that:\npy\nspam = [i * 2 if i > 0 else -1 for i in iterable]\nNote that, differently from the if clause, the if/else construct must be placed between the expression and the for keyword.\nModify your list comprehension so that when a character is not uppercase it remains unchanged.\n--hints--\nYou should modify your list comprehension to evaluate the expression '_' + char.lower() if char.isupper() and char otherwise.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_function(\"convert_to_snake_case\").find_variable(\"snake_cased_char_list\").find_comp_expr().is_equivalent(\"'_' + char.lower() if char.isupper() else char\")\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#       converted_character = '' + char.lower()\n#       snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\n--fcc-editable-region--\nsnake_cased_char_list = ['' + char.lower() for char in pascal_or_camel_cased_string if char.isupper()]\n--fcc-editable-region--\nreturn ''.join(snake_cased_char_list).strip('')\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1821,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f47b12c51e41b3149e584.md",
      "source_type": "git_repo"
    },
    "token_count": 427,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "481ff75a8f41f1f12bd073f3cec3f435",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f4a4a5828a01de04b652f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f4a4a5828a01de04b652f\ntitle: Step 22\nchallengeType: 20\ndashedName: step-22\n--description--\nGet rid of the commented lines of code inside the convert_to_snake_case() function to clean up the function definition.\n--hints--\nYou should not have any commented line of code in the convert_to_snake_case() function at all.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.equal(function_body.split(\"#\").length - 1, 0);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n--fcc-editable-region--\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#         converted_character = '' + char.lower()\n#         snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\n--fcc-editable-region--\nsnake_cased_char_list = [\n'_' + char.lower() if char.isupper()\nelse char\nfor char in pascal_or_camel_cased_string\n]\nreturn ''.join(snake_cased_char_list).strip('_')\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f4a4a5828a01de04b652f.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "3dbfd86327a964cdf09f3e803b67e569",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\663b10c10a4c0a0e095137ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663b10c10a4c0a0e095137ee\ntitle: Step 17\nchallengeType: 20\ndashedName: step-17\n--description--\nInstead of returning the list snake_cased_char_list, you will need to join its elements into a single string using an empty string '' as the separator.\nModify the return statement to return the result of joining snake_cased_char_list with an empty string as a separator.\n--hints--\nYou should modify the return statement to return the result of joining snake_cased_char_list with an empty string '' as the separator using the join() method.\njs\n({\ntest: () => assert(runPython(`\n_Node(_code).find_function('convert_to_snake_case').find_return().is_equivalent('return \"\".join(snake_cased_char_list)')\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#       converted_character = '' + char.lower()\n#       snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\nsnake_cased_char_list = []\n--fcc-editable-region--\nreturn snake_cased_char_list\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1500,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\663b10c10a4c0a0e095137ee.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "390e293d9d7fabe79962896def530e0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f4add33ea4b1f61ba3dc8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f4add33ea4b1f61ba3dc8\ntitle: Step 23\nchallengeType: 20\ndashedName: step-23\n--description--\nFinally try out this new implementation by executing the program. Change the input string to 'IAmAPascalCasedString' and see if it comes out as 'i_am_a_pascal_cased_string', even though that's a lie.\nIf you've done everything correctly, you should see the input string converted into snake case, like before.\nCongratulations! Now your convert_to_snake_case() function is ready.\n--hints--\nYou should change the input string from 'aLongAndComplexString' to 'IAmAPascalCasedString' inside the main() function.\n```js\n({\ntest: () => {\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\nconst { function_body } = main;\nassert.match(function_body, / +print\\(\\s*convert_to_snake_case\\(\\s*'IAmAPascalCasedString'\\s*\\)\\s*\\)/);\n}\n})\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = [\n'_' + char.lower() if char.isupper()\nelse char\nfor char in pascal_or_camel_cased_string\n]\nreturn ''.join(snake_cased_char_list).strip('_')\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\n--fcc-editable-region--\nmain()\n```\n--solutions--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\nsnake_cased_char_list = [\n'_' + char.lower() if char.isupper()\nelse char\nfor char in pascal_or_camel_cased_string\n]\nreturn ''.join(snake_cased_char_list).strip('_')\ndef main():\nprint(convert_to_snake_case('IAmAPascalCasedString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f4add33ea4b1f61ba3dc8.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "b761001d298540d2015d2b0289103d6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\663b16e62fee463b4caf46e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 663b16e62fee463b4caf46e9\ntitle: Step 18\nchallengeType: 20\ndashedName: step-18\n--description--\nAfter joining the elements of the list snake_cased_char_list, you will need to remove any leading or trailing underscores from the resulting string. For this, use the strip method with the underscore character _ as an argument.\nMethod calls can be chained together, which means that the result of one method call can be used as the object for another method call.\npy\nwords_list = ['hello', 'world', 'this', 'is', 'chained', 'methods']\nresult = ' '.join(words_list).upper()\nIn the example above, the .upper() method is chained to ' '.join(words_list), therefore .upper() is called on the result of the .join() call.\nModify the return statement by chaining to ''.join(snake_cased_char_list) a call to the .strip() method to remove any leading or trailing underscores.\n--hints--\nYou should modify the return statement to include the strip method with the underscore character _ as an argument.\n```js\nconst transformedCode = code.replace(/\\r/g, \"\");\nconst convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\nconst { function_body } = convert_to_snake_case;\nassert.match(function_body, /return\\s*''.join(snake_cased_char_list).strip('_')/);\n```\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char.isupper():\n#       converted_character = '' + char.lower()\n#       snake_cased_char_list.append(converted_character)\n#     else:\n#         snake_cased_char_list.append(char)\n# snake_cased_string = ''.join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string.strip('')\n# return clean_snake_cased_string\nsnake_cased_char_list = []\n--fcc-editable-region--\nreturn ''.join(snake_cased_char_list)\n--fcc-editable-region--\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2094,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\663b16e62fee463b4caf46e9.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c69903e4791e65f3cdd63d881628c35c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc8b1faf9c60304ca8a9b6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc8b1faf9c60304ca8a9b6\ntitle: Step 1\nchallengeType: 20\ndashedName: step-1\n--description--\nIn this project, you will solve the mathematical puzzle known as the Tower of Hanoi. The puzzle consists of three rods and a number of disks of different diameters.\nThe goal of this puzzle is moving the disks from the first rod to the third rod, following specific rules that restrict placing a larger disk on top of a smaller one.\nStart by creating an empty dictionary named rods to represent the rods.\n--hints--\nYou should have a variable named rods.\njs\n({ test: () => assert(__userGlobals.has('rods')) })\nYour rods variable should be an empty dictionary.\njs\n({ test: () => assert(runPython(`\nrods == {}\n`))\n})\n--seed--\n--seed-contents--\n```py\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 851,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc8b1faf9c60304ca8a9b6.md",
      "source_type": "git_repo"
    },
    "token_count": 203,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e38975d697c90025d495be32425a92b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f456223b8c1187b461987.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 657f456223b8c1187b461987\ntitle: Step 19\nchallengeType: 20\ndashedName: step-19\n--description--\nIn Python, a list comprehension is a construct that allows you to generate a new list by applying an expression to each item in an existing iterable and optionally filtering items with a condition Apart from being briefer, list comprehensions often run faster A basic list comprehension consists of an expression followed by a for clause:\npy\nspam = [i * 2 for i in iterable]\nThe above uses the variable i to iterate over iterable Each elements of the resulting list is obtained by evaluating the expression i * 2 at the current iteration In this step, you need to fill the empty list snake_cased_char_list using the list comprehension syntax Turn your empty list into a list comprehension that converts each character in pascal_or_camel_cased_string into a lowercase character and prepends an underscore to it (the code you commented out before may help you write the expression) Use char to iterate over pascal_or_camel_cased_string --hints--\nYou should turn snake_cased_char_list into a list comprehension that iterates over pascal_or_camel_cased_string js\n({\ntest: () => assert(runPython(`\niters = _Node(_code) find_function(\"convert_to_snake_case\") find_variable(\"snake_cased_char_list\") find_comp_iters()\nlen(iters) == 1 and iters[0] is_equivalent(\"pascal_or_camel_cased_string\")\n`))\n})\nYour list comprehension should use char to iterate over pascal_or_camel_cased_string js\n({\ntest: () => assert(runPython(`\ntargets = _Node(_code) find_function(\"convert_to_snake_case\") find_variable(\"snake_cased_char_list\") find_comp_targets()\nlen(targets) == 1 and targets[0] is_equivalent(\"char\")\n`))\n})\nYour list comprehension should evaluate '_' + char lower() for each char in pascal_or_camel_cased_string js\n({\ntest: () => assert(runPython(`\ntarget_var = _Node(_code) find_function(\"convert_to_snake_case\") find_variable(\"snake_cased_char_list\")\ntarget_var find_comp_expr() is_equivalent(\"'_' + char lower()\") and len(target_var",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2977,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f456223b8c1187b461987.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "97d62f73a6e499c809a39dcf10fbb1d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f456223b8c1187b461987.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= _Node(_code) find_function(\"convert_to_snake_case\") find_variable(\"snake_cased_char_list\") find_comp_iters() len(iters) == 1 and iters[0] is_equivalent(\"pascal_or_camel_cased_string\") `)) }) Your list comprehension should use char to iterate over pascal_or_camel_cased_string js ({ test: () => assert(runPython(` targets = _Node(_code) find_function(\"convert_to_snake_case\") find_variable(\"snake_cased_char_list\") find_comp_targets() len(targets) == 1 and targets[0] is_equivalent(\"char\") `)) }) Your list comprehension should evaluate '_' + char lower() for each char in pascal_or_camel_cased_string js ({ test: () => assert(runPython(` target_var = _Node(_code) find_function(\"convert_to_snake_case\") find_variable(\"snake_cased_char_list\") target_var find_comp_expr() is_equivalent(\"'_' + char lower()\") and len(target_varfind_comp_ifs()) == 0\n`))\n})\n--seed--\n--seed-contents--\n```py\ndef convert_to_snake_case(pascal_or_camel_cased_string):\n# snake_cased_char_list = []\n# for char in pascal_or_camel_cased_string:\n#     if char isupper():\n#       converted_character = '' + char lower()\n#       snake_cased_char_list append(converted_character)\n#     else:\n#         snake_cased_char_list append(char)\n# snake_cased_string = '' join(snake_cased_char_list)\n# clean_snake_cased_string = snake_cased_string strip('')\n# return clean_snake_cased_string\n--fcc-editable-region--\nsnake_cased_char_list = []\n--fcc-editable-region--\nreturn '' join(snake_cased_char_list) strip('_')\ndef main():\nprint(convert_to_snake_case('aLongAndComplexString'))\nmain()\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2977,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-list-comprehension-by-building-a-case-converter-program\\657f456223b8c1187b461987.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "345664b216d4e1375dfc0c9e346c10d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc8ea01436383a88256d7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc8ea01436383a88256d7f\ntitle: Step 3\nchallengeType: 20\ndashedName: step-3\n--description--\nThe puzzle starts with the disks piled up on the first rod, in decreasing size, with the smallest disk on top and the largest disk on the bottom. You need to populate your first list with numbers representing the various disk sizes.\nInstead of adding the items manually to the first list, generate a sequence of numbers counting down from 3 to 1 by using the range() function and assign it to rods['A']. Here, 3 represents the largest disk at the bottom of the pile and 1 represents the smallest disk at the top of the pile.\nThe syntax is range(x, y, h), where x is the starting integer (inclusive), y is the last integer (not inclusive), and h is the difference between a number and the next one in the sequence.\n--hints--\nYou should use the range() function to assign a sequence of numbers to rods['A']. The syntax for calling the range() function is range(x, y, h).\njs\n({ test: () => assert(runPython(`\ntype(rods['A']) is range\n`))\n})\nYou should use the range() function to assign the sequence of numbers from 3 to 1 to rods['A'].\njs\n({ test: () => assert(runPython(`\nrods['A'] == range(3, 0, -1)\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nrods = {\n'A': [],\n'B': [],\n'C': []\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1423,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc8ea01436383a88256d7f.md",
      "source_type": "git_repo"
    },
    "token_count": 347,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "75f57fe38a2ad954a4d8162e54920c87",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc9004f658183afa85f4f1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc9004f658183afa85f4f1\ntitle: Step 4\nchallengeType: 20\ndashedName: step-4\n--description--\nNow check the data type of your 'A' key by passing it to the type() function and print the result on the terminal.\n--hints--\nYou should pass your 'A' key to the type() function.\njs\n({ test: () => assert.match(code, /type\\s*\\(\\s*rods\\s*\\[\\s*('|\")\\s*A\\s*\\1\\s*\\]\\s*\\)/) })\nYou should print the type of rods['A'] using the print() function.\njs\n({ test: () => assert.match(code, /print\\s*\\(\\s*type\\s*\\(\\s*rods\\s*\\[\\s*('|\")\\s*A\\s*\\1\\s*\\]\\s*\\)\\s*\\)/) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nrods = {\n'A': range(3, 0, -1),\n'B': [],\n'C': []\n}\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 743,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc9004f658183afa85f4f1.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "9258a37443e41acff8da565bc1f540a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc90e837670a3ba26a1e61.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc90e837670a3ba26a1e61\ntitle: Step 6\nchallengeType: 20\ndashedName: step-6\n--description--\nNow that the type is list as required, you can remove the print() call.\n--hints--\nYou should remove print(type(rods['A'])) from your code.\njs\n({ test: () => assert.match(code, /\\}(?!\\s+print\\s*\\(\\s*type\\s*\\(\\s*rods\\s*\\[\\s*('|\")A\\1\\s*\\]\\s*\\)\\s*\\))/) })\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nrods = {\n'A': list(range(3, 0, -1)),\n'B': [],\n'C': []\n}\nprint(type(rods['A']))\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc90e837670a3ba26a1e61.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "e6a69ae1256599906bdf34e5169a089a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc90949ff85e3b37be40d0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc90949ff85e3b37be40d0\ntitle: Step 5\nchallengeType: 20\ndashedName: step-5\n--description--\nThe range() function returns an immutable sequence of numbers. As you can see, the data type of rods['A'] is range, but you want it to be a list.\nPass your range() call to the list() function to do that.\n--hints--\nYou should pass your range() call to the list() function.\njs\n({ test: () => assert(runPython(`\nrods['A'] == list(range(3, 0, -1))\n`))\n})\n--seed--\n--seed-contents--\npy\n--fcc-editable-region--\nrods = {\n'A': range(3, 0, -1),\n'B': [],\n'C': []\n}\nprint(type(rods['A']))\n--fcc-editable-region--",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 668,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc90949ff85e3b37be40d0.md",
      "source_type": "git_repo"
    },
    "token_count": 190,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "7df267570b63e3fbba588b579584d1df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc916138dbe03bdfe6cec6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 64dc916138dbe03bdfe6cec6\ntitle: Step 7\nchallengeType: 20\ndashedName: step-7\n--description--\nThe goal of the Tower of Hanoi is moving all the disks to the last rod. To do that, you must follow three simple rules:\nYou can move only top-most disks\nYou can move only one disk at a time\nYou cannot place larger disks on top of smaller ones\nBelow your existing code, declare an empty function named move. Later on, you will use that function to move the disks between the rods. For now, to avoid errors, use the pass keyword inside the function body.\n--hints--\nYou should declare an empty function named move. Remember to use the pass keyword inside the function body with the correct indentation.\njs\n({ test: () => {\nassert(runPython(`\nimport inspect\ninspect.isfunction(move)\n`))\n}\n})\n--seed--\n--seed-contents--\n```py\nrods = {\n'A': list(range(3, 0, -1)),\n'B': [],\n'C': []\n}\n--fcc-editable-region--\n--fcc-editable-region--\n```",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\07-scientific-computing-with-python\\learn-recursion-by-solving-the-tower-of-hanoi-puzzle\\64dc916138dbe03bdfe6cec6.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 0,
    "total_chunks": 1
  }
]